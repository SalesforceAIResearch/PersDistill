{"finetuning_prompt": "\"\"\"\nWrite a recursive program to generate permutations of given string.\n\"\"\"\n\ndef permutations(string, step = 0):\n", "finetuning_completion": "\n    if(step == len(string)):\r\n        print(\"\".join(string))\r\n    for i in range(step, len(string)):\r\n        string_copy = [character for character in string]\r\n        string_copy[step], string_copy[i] = string_copy[i], string_copy[step]\r\n        permutations(string_copy, step + 1)", "task_id": 4}
{"finetuning_prompt": "\"\"\"\nSort the elements of a list in ascending order\n\"\"\"\n\ndef sort_list(list):\n", "finetuning_completion": "  \r\n  list.sort() \r\n  return list", "task_id": 10}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the elements that are in one set but not in the other.\n\"\"\"\n\ndef elements_not_in_both(set1, set2):\n", "finetuning_completion": " \r\n  diff = set1 ^ set2 \r\n  return diff", "task_id": 19}
{"finetuning_prompt": "\"\"\"\nCreate a Python program that takes an array of integers as an input and outputs a 2D array of integers.\n\"\"\"\n\ndef twoD_arr(arr):\n", "finetuning_completion": " \r\n  \r\n    result = [arr[i:i+3] for i in range(0, len(arr),3)] \r\n  \r\n    return result", "task_id": 26}
{"finetuning_prompt": "\"\"\"\nConvert the given string into pig Latin.\n\"\"\"\n\ndef convert_to_pig_latin(str):\n", "finetuning_completion": "\n    vowel_list=['a','e','i','o','u']\n    words_list=str.split(' ')\n    result_list=[]\n    for word in words_list:\n        if(word[0].lower() in vowel_list):\n            result=word+'way'\n        else:\n            result=word[1:]+word[0]+'ay'\n        result_list.append(result)\n    return ' '.join(result_list)", "task_id": 40}
{"finetuning_prompt": "\"\"\"\nWrite a function to write the Fibonacci series.\n\"\"\"\n\ndef fibonacci_series(n):\n", "finetuning_completion": " \n    series = [0, 1] \n    for i in range(2, n): \n        series.append(series[i-2] + series[i-1]) \n    return series", "task_id": 43}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the longest common subsequence of two strings.\n\"\"\"\n\ndef lcs(str1, str2):\n", "finetuning_completion": "  \n    m = len(str1) \n    n = len(str2) \n    dp=[[0 for x in range(n+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                dp[i][j]=0\n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1]+1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]", "task_id": 44}
{"finetuning_prompt": "\"\"\"\nCreate a function that returns all the prime numbers in a given range.\n\"\"\"\n\ndef isPrime(n): \n      \n    # Corner cases \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n  \n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while (i * i <= n): \n          \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to return the list of all prime numbers in a given range \ndef primeList(n):\n", "finetuning_completion": " \n      \n    # Corner cases \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n  \n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while (i * i <= n): \n          \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n\n# Function to return the list of all prime numbers in a given range \ndef primeList(n): \n    list_of_prime = [] \n    for num in range (2, n + 1): \n        if isPrime(num): \n            list_of_prime.append(num) \n    return list_of_prime", "task_id": 53}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to check if a string contains duplicates.\n\"\"\"\n\ndef is_duplicate(string):\n", "finetuning_completion": "\r\n    chars = set()\r\n    for char in string:\r\n        if char in chars:\r\n            return True\r\n        else:\r\n            chars.add(char)\r\n    return False", "task_id": 66}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove duplicate elements in an array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \r\n    res = []; \r\n    for i in arr: \r\n        if i not in res: \r\n            res.append(i) \r\n    return res", "task_id": 79}
{"finetuning_prompt": "\"\"\"\nGenerate a function to sort a given array.\n\"\"\"\n\ndef sortArray(arr):\n", "finetuning_completion": " \r\n    arr.sort() \r\n    return arr", "task_id": 83}
{"finetuning_prompt": "\"\"\"\nWrite code to count words from a sentence.\n\"\"\"\n\ndef count_Words(sentence):\n", "finetuning_completion": " \r\n    words = sentence.split(\" \") \r\n    return len(words)", "task_id": 84}
{"finetuning_prompt": "\"\"\"\nConstruct a function to multiply two matrices.\n\"\"\"\n\ndef multiply_Matrices(matrix_A, matrix_B):\n", "finetuning_completion": " \r\n    rows_A = len(matrix_A) \r\n    columns_A = len(matrix_A[0])  \r\n  \r\n    rows_B = len(matrix_B) \r\n    columns_B = len(matrix_B[0]) \r\n  \r\n    product = [[0 for column in range(columns_B)]  \r\n                      for row in range(rows_A)] \r\n  \r\n    for i in range(rows_A): \r\n        for j in range(columns_B): \r\n            for k in range(columns_A): \r\n                product[i][j] += matrix_A[i][k] * matrix_B[k][j] \r\n  \r\n    return product", "task_id": 85}
{"finetuning_prompt": "\"\"\"\nGenerate code to print a factorial of a given integer.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \r\n    if n == 0: \r\n        return 1; \r\n    else: \r\n        return n * factorial(n-1);", "task_id": 86}
{"finetuning_prompt": "\"\"\"\nOptimize a given code to reduce its complexity from O(n^2) to O(n).\n\"\"\"\n\ndef findSum(arr, n):\n", "finetuning_completion": "\n    sum = 0 \n  \n    for i in range(0, n):   \n        sum += i*arr[i] - (n*(n+1)/2)*arr[i]\n    return sum", "task_id": 89}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the nth Fibonacci number in an optimized version.\n\"\"\"\n\ndef optimizedFibonacci(n):\n", "finetuning_completion": " \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "task_id": 92}
{"finetuning_prompt": "\"\"\"\nGenerate the code that converts a string of characters to the corresponding ASCII values.\n\"\"\"\n\ndef ConvertStringToAscii(str1):\n", "finetuning_completion": "\n    res = [] \n    for c in str1: \n        res.append(ord(c))\n    return res", "task_id": 94}
{"finetuning_prompt": "\"\"\"\nWrite a function that checks if a given number is odd or even.\n\"\"\"\n\ndef check_odd_even(num):\n", "finetuning_completion": "\n    if (num % 2 == 0):\n        return 'Even'\n    else:\n        return 'Odd'", "task_id": 97}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse a sentence and capitalize the first letter of each word in the sentence.\n\"\"\"\n\ndef capitalize_words(text):\n", "finetuning_completion": " \r\n  res = \" \".join(x[0].upper() + x[1:] for x in reversed(text.split())) \r\n  return res", "task_id": 99}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm that finds the number of prime numbers in a given array.\n\"\"\"\n\ndef count_prime_numbers(arr):\n", "finetuning_completion": "\n    count = 0\r\n    for num in arr:\r\n        if num>1:\r\n            for i in range(2,num):\r\n                if(num % i) == 0:\r\n                    break\r\n            else:\r\n                count+=1\r\n    return count", "task_id": 107}
{"finetuning_prompt": "\"\"\"\nGenerate a function to rescale a given array of numbers to have a given total of values.\n\"\"\"\n\ndef rescale_array(array, total):\n", "finetuning_completion": "\r\n    factor = total/sum(array)\r\n    for i in range(len(array)):\r\n        array[i] *= factor\r\n    return array", "task_id": 108}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to optimize the flow of resources in a grid.\n\"\"\"\n\ndef optimize_flow(grid, resources):\n", "finetuning_completion": "\r\n    # Create empty 2D array of size grid\r\n    resources_grid = []\r\n    for i in range(grid[0]):\r\n        resources_grid.append([0] * grid[1])\r\n        \r\n    # Sort resources according to coordinates\r\n    resources = sorted(resources, key = lambda x: (x[0], x[1]))\r\n    \r\n    # Distribute resources in grid\r\n    for resource in resources:\r\n        resources_grid[resource[0]][resource[1]] = 1\r\n        \r\n    # Return filtered grid\r\n    return resources_grid", "task_id": 111}
{"finetuning_prompt": "\"\"\"\nWrite a python script to convert a number in binary form to its equivalent hexadecimal form.\n\"\"\"\n\ndef binary_to_hex(bin_num):\n", "finetuning_completion": "\r\n    hex_num = hex(int(bin_num,2))\r\n    return hex_num[2:]", "task_id": 113}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the total cost of a given set of items.\n\"\"\"\n\ndef calculate_cost(items):\n", "finetuning_completion": "\r\n    total = 0\r\n    for item in items:\r\n        total += item['quantity']*item['price']\r\n    return total", "task_id": 114}
{"finetuning_prompt": "\"\"\"\nCreate a program to determine if two given strings are anagrams.\n\"\"\"\n\ndef are_anagrams(str1, str2):\n", "finetuning_completion": " \r\n\ts1_list = sorted(list(str1)) \r\n\ts2_list = sorted(list(str2)) \r\n\tif (s1_list == s2_list): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "task_id": 120}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the most common words in a given string.\n\"\"\"\n\ndef most_common_words(input_string):\n", "finetuning_completion": "\n    input_string = input_string.lower()\r\n    words = input_string.split()\r\n    counts = dict()\r\n    for word in words:\r\n        if word in counts:\r\n            counts[word] += 1\r\n        else:\r\n            counts[word] = 1\r\n    max_word  = max(counts, key=counts.get)\r\n    max_count = counts[max_word]\r\n    most_common = []\r\n    for word in counts:\r\n        if counts[word] == max_count:\r\n            most_common.append(word)\r\n    return most_common", "task_id": 121}
{"finetuning_prompt": "\"\"\"\nCreate a program to get the difference in two given dates.\n\"\"\"\n\nimport datetime\r\ndef difference_in_dates(date1, date2):\n", "finetuning_completion": " \r\n    return (date1 - date2).days", "task_id": 125}
{"finetuning_prompt": "\"\"\"\nCreate a program to extract the domain name from a given URL.\n\"\"\"\n\ndef get_domain_name(url):\n", "finetuning_completion": "\r\n    return url.split('//')[-1].split('/')[0]\r\n    \n# get_domain_name('https://www.google.com')\r\n# returns 'www.google.com'", "task_id": 126}
{"finetuning_prompt": "\"\"\"\nWrite a python program to convert a given binary string to its corresponding decimal value.\n\"\"\"\n\ndef binaryToDecimal(n):\n", "finetuning_completion": " \r\n    num = n; \r\n    dec_value = 0; \r\n  \r\n    # Initializing base  \r\n    # value to 1, i.e 2^0 \r\n    base = 1; \r\n  \r\n    temp = num; \r\n    while(temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n  \r\n        dec_value += last_digit * base; \r\n  \r\n        base = base * 2; \r\n  \r\n    return dec_value; \r\n  \r\n# Driver Code \r\nnum = 10011; \r\nprint(binaryToDecimal(num))", "task_id": 132}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate binary numbers from 1 to N.\n\"\"\"\n\ndef binary(n):\n", "finetuning_completion": " \r\n  \r\n    if n > 1: \r\n        # divide with integral result  \r\n        # (discard remainder) \r\n        binary(n//2) \r\n  \r\n    # takes integer value of  \r\n    # n % 2 and add into list  \r\n    print(n % 2, end = '')", "task_id": 135}
{"finetuning_prompt": "\"\"\"\nCreate a program to optimize the following code to reduce time complexity:\n\"\"\"\n\ndef check(arr, x):\n", "finetuning_completion": " \n    left = 0\n    right = len(arr) - 1\n\n    while left < right: \n        if arr[left] + arr[right] == x: \n            return True \n        elif arr[left] + arr[right] > x: \n            right -= 1\n        else: \n            left += 1\n\n    return False", "task_id": 136}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the Euclidean distance between two given points.\n\"\"\"\n\ndef euclidean_distance(point_1, point_2):\n", "finetuning_completion": "  \r\n    import math \r\n    return math.sqrt(sum([(i - j) ** 2 for (i, j) in zip(point_1, point_2)]))", "task_id": 141}
{"finetuning_prompt": "\"\"\"\nCreate a function to join two strings using the + operator.\n\"\"\"\n\ndef join_strings(string1, string2):\n", "finetuning_completion": "\r\n    return string1 + string2", "task_id": 150}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the index of a given element in a list.\n\"\"\"\n\ndef find_index(list, elem):\n", "finetuning_completion": "\r\n    try:\r\n        return list.index(elem)\r\n    except ValueError:\r\n        return -1", "task_id": 151}
{"finetuning_prompt": "\"\"\"\nCreate a tuple with all words of a given string.\n\"\"\"\n\ndef str_to_tuple(s):\n", "finetuning_completion": " \r\n  # Split the string based on  \r\n  # whitespace \r\n  res = tuple(str.split(s)) \r\n  return res", "task_id": 153}
{"finetuning_prompt": "\"\"\"\nOptimize the code for finding factorial of a given number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \r\n    res = 1\r\n    while n>=1: \r\n        res = res*n \r\n        n = n-1\n    return res", "task_id": 162}
{"finetuning_prompt": "\"\"\"\nEdit the following code to encode a given string into Base64\n\"\"\"\n\nimport base64 \r\n  \r\ndef encoding_string (in_string):\n", "finetuning_completion": " \r\n    encoded_bytes = base64.b64encode(in_string.encode(\"utf-8\")) \r\n    encoded_string = encoded_bytes.decode(\"utf-8\") \r\n    return encoded_string", "task_id": 164}
{"finetuning_prompt": "\"\"\"\nCreate a function to capitalize each word of the given string.\n\"\"\"\n\ndef capitalize_String(str1):\n", "finetuning_completion": "  \n    list_words = str1.split(\" \")\n    capitalized_words = [word.capitalize() for word in list_words]\n    capitalized_string = ' '.join(capitalized_words)\n    return capitalized_string", "task_id": 165}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a list of strings into a pandas dataframe.\n\"\"\"\n\nimport pandas as pd \r\n\t\r\ndef convert_list_to_dataframe(input):\n", "finetuning_completion": " \r\n\toutput = pd.DataFrame(input.split(','), columns =['Name']) \r\n\treturn output", "task_id": 166}
{"finetuning_prompt": "\"\"\"\nWrite a Python code to print the unique values in a given list.\n\"\"\"\n\ndef unique_list(l):\n", "finetuning_completion": " \r\n\tu_list = [] \r\n\tfor x in l: \r\n\t\tif x not in u_list: \r\n\t\t\tu_list.append(x) \r\n\treturn u_list \r\nlist = [2, 3, 5, 5, 7, 11, 11, 11, 13]\nu_list = unique_list(list) \r\nprint(u_list)", "task_id": 172}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to filter out all the elements which are divisible by a given number.\n\"\"\"\n\ndef filterList(list, n):\n", "finetuning_completion": " \r\n\t  \r\n\t# Modulus operator to match. \r\n\tans = [i for i in list if i % n != 0] \r\n\treturn ans \r\n    \r\nlist = [7, 11, 15, 17, 19] \r\nn = 3\r\nprint(filterList(list, n))", "task_id": 174}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the sum of first N odd numbers?\n\"\"\"\n\ndef find_sum_of_odd_numbers(N):\n", "finetuning_completion": " \r\n\t\r\n\tsum = 0\r\n\t# Assume 0-indexing \r\n\t# Note that the formula works even if N is 0 \r\n\tfor i in range(1, (2*N)+1, 2): \r\n\t\tsum = sum + i \r\n\treturn sum", "task_id": 187}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the rolling average of a given array.\n\"\"\"\n\ndef rolling_average(arr):\n", "finetuning_completion": " \n  rolling_avg = []\n  for i in range(len(arr)): \n    rolling_avg.append(sum(arr[0:i+1])/(i+1))\n  return rolling_avg", "task_id": 193}
{"finetuning_prompt": "\"\"\"\nCreate a function to compress a given string using dictionary encoding.\n\"\"\"\n\ndef compress_string(string):\n", "finetuning_completion": " \n  dictionary = dict()\n  dictionary_index = 0\n  output = \"\"\n \n  for char in string:\n    if char in dictionary:\n      output = output + str(dictionary[char])\n    else:\n      dictionary[char] = dictionary_index\n      output = output + str(dictionary_index)\n      dictionary_index +=1\n \n  return [output, dictionary]", "task_id": 194}
{"finetuning_prompt": "\"\"\"\nCreate a chess board with alternating black and white blocks.\n\"\"\"\n\ndef create_board(n):\n", "finetuning_completion": "\n    board = []\n    for i in range(n):\n        row = [\"#\" if (i+j)%2==0 else \" \" for j in range(n)]\n        board.append(row) \n    return board\n\nprint(create_board(8))", "task_id": 201}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, write code to generate their squares.\n\"\"\"\n\ndef square_list(nums):\n", "finetuning_completion": " \r\n    return list(map(lambda x: x**2, nums))", "task_id": 210}
{"finetuning_prompt": "\"\"\"\nCreate a program to remove duplicates elements from a given array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \r\n    res=[] \r\n    for elem in arr: \r\n        if elem not in res: \r\n            res.append(elem) \r\n    return res \r\n\r\narr = [2, 2, 5, 4, 3, 3] \r\nprint(remove_duplicates(arr)) \r\n# Output : [2, 5, 4, 3]", "task_id": 215}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the sum of two collections of numbers stored in an array.\n\"\"\"\n\ndef find_sum(A, B):\n", "finetuning_completion": " \n    result = [] \n    for i in range(len(A)): \n        result.append(A[i] + B[i]) \n  \n    return result\n\nA = [3, 7, 5]\nB = [2, 5, 6]\nprint(find_sum(A, B))", "task_id": 218}
{"finetuning_prompt": "\"\"\"\nGenerate a Python code to calculate the length of the longest common sub-sequence from two given strings.\n\"\"\"\n\ndef lcs_length(str1,str2):\n", "finetuning_completion": " \r\n\tn = len(str1) \r\n\tm = len(str2) \r\n\tdp = [[0 for x in range(m+1)]for x in range(n+1)] \r\n\tfor i in range(1,n+1): \r\n\t\tfor j in range(1,m+1): \r\n\t\t\tif str1[i-1] == str2[j-1]: \r\n\t\t\t\tdp[i][j] = dp[i-1][j-1]+1\r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) \r\n\treturn dp[n][m]", "task_id": 222}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to check if a given list of numbers is in ascending order.\n\"\"\"\n\ndef isInAscendingOrder(n):\n", "finetuning_completion": " \r\n\treturn n == sorted(n)", "task_id": 224}
{"finetuning_prompt": "\"\"\"\nDesign a function to count the number of coins in each currency given as input.\n\"\"\"\n\ndef count_coins(coins_list):\n", "finetuning_completion": " \r\n\tcoins_count_dict = {coin: coins_list.count(coin) for coin in coins_list} \r\n\treturn coins_count_dict", "task_id": 225}
{"finetuning_prompt": "\"\"\"\nGenerate a list of all the prime numbers between a given range.\n\"\"\"\n\ndef find_primes(start, end):\n", "finetuning_completion": "\r\n    prime_list = []\r\n    for number in range(start, end + 1):\r\n        if number > 1:\r\n            for i in range(2, number):\r\n                if (number % i) == 0:\r\n                    break\r\n            else:\r\n                prime_list.append(number)\r\n    return prime_list", "task_id": 227}
{"finetuning_prompt": "\"\"\"\nCreate a comparator function to sort a string array containing numerical values in ascending order.\n\"\"\"\n\ndef sort_ascending_order(arr):\n", "finetuning_completion": " \r\n    arr.sort(key = lambda x: int(x)) \r\n    return arr", "task_id": 230}
{"finetuning_prompt": "\"\"\"\nCreate a function to check whether a string is a sonogram or not.\n\"\"\"\n\ndef is_sonogram(text):\n", "finetuning_completion": " \r\n\ttotal_count = 0\r\n\tunique_chars = [] \r\n\tfor char in text: \r\n\t\tif char not in unique_chars: \r\n\t\t\tunique_chars.append(char) \r\n\t\t\ttotal_count += 1\r\n\tif total_count == len(text): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "task_id": 232}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the number of ways to express a given number as the sum of consecutive numbers.\n\"\"\"\n\ndef count_consecutive_sum(n):\n", "finetuning_completion": " \r\n\r\n\tres = 0\r\n\r\n\tfor i in range(1, n+1): \r\n\t\tcurrSum = 0\r\n\t\tj = i \r\n\t\t\r\n\t\twhile currSum < n: \r\n\t\t\tcurrSum += j \r\n\t\t\tj += 1\r\n\t\t\t\r\n\t\tif currSum == n: \r\n\t\t\tres += 1\r\n\treturn res", "task_id": 235}
{"finetuning_prompt": "\"\"\"\nGenerate code to check if a given number is prime.\n\"\"\"\n\ndef is_prime(num):\n", "finetuning_completion": "\n    if (num<=1):\n        return False\n    if (num<=3):\n        return True\n    if (num%2 == 0 or num%3 == 0):\n        return False\n \n    i = 5\n    while(i * i <= num):\n        if (num % i == 0 or num % (i+2) == 0):\n            return False\n        i += 6\n    return True;", "task_id": 238}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the longest word in a sentence.\n\"\"\"\n\ndef longest_word(sentence):\n", "finetuning_completion": "\n    words = sentence.split() \n    max_len = len(words[0]) \n    for word in words: \n        if len(word) > max_len: \n            max_len = len(word) \n  \n    words_filtered = list(filter(lambda w:len(w) == max_len, words)) \n    return words_filtered", "task_id": 240}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the smallest number in a list of numbers.\n\"\"\"\n\ndef find_min(arr):\n", "finetuning_completion": " \n    min_val = arr[0] \n    for i in range(1,len(arr)): \n        if arr[i] < min_val: \n            min_val = arr[i] \n    return min_val", "task_id": 241}
{"finetuning_prompt": "\"\"\"\nGenerate code to remove all whitespace from a given string.\n\"\"\"\n\ndef remove_whitespace(string):\n", "finetuning_completion": " \n    return  \"\".join(string.split())", "task_id": 245}
{"finetuning_prompt": "\"\"\"\nWrite a Python script to compare two strings and report the longest one.\n\"\"\"\n\ndef longestString(str1, str2):\n", "finetuning_completion": "\n    if len(str1) > len(str2):\n        longest = str1\n    elif len(str1) < len(str2):\n        longest = str2\n    else:\n        longest = \"Strings are of equal length\"\n    return longest", "task_id": 247}
{"finetuning_prompt": "\"\"\"\nImplement a function to sort the given list by bubble sort.\n\"\"\"\n\ndef bubble_sort(lst):\n", "finetuning_completion": " \n    for i in range(len(lst)-1):\n        for j in range(0, len(lst)-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j],lst[j+1] = lst[j+1],lst[j] \n  \n    return lst", "task_id": 249}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the intersection of two arrays.\n\"\"\"\n\ndef intersect(A, B):\n", "finetuning_completion": " \n    res = [] \r\n    i, j = 0, 0 \r\n  \r\n    while i < len(A) and j < len(B): \r\n        if A[i] < B[j]: \r\n            i += 1\r\n        elif A[i] > B[j]: \r\n            j += 1\r\n        else: \r\n            res.append(A[i]) \r\n            i+=1\r\n            j+=1\r\n  \r\n    return res \r\n\r\nA = [1, 2, 4, 6, 8, 10] \r\nB = [4, 10, 2, 5] \r\nprint(intersect(A, B))", "task_id": 257}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract the value from the given HTML attribute.\n\"\"\"\n\ndef extractValueFromAttribute(html, attribute):\n", "finetuning_completion": " \n  start = html.find(attribute + '=\"') \n  if start == -1: \n    return \"\" \n  start += len(attribute) + 2\n  end = html.find('\"', start) \n  return html[start:end]", "task_id": 261}
{"finetuning_prompt": "\"\"\"\nConvert a given list of numbers into their binary representations.\n\"\"\"\n\ndef list_to_binary(l):\n", "finetuning_completion": " \n    res = [] \n    for i in l: \n        res.append(bin(i)) \n    return res", "task_id": 267}
{"finetuning_prompt": "\"\"\"\nWrite a Python code to find all prime numbers between 0 and given n.\n\"\"\"\n\ndef isPrime(n):\n", "finetuning_completion": " \r\n    if (n <= 1): \r\n        return False\r\n    if (n <= 3): \r\n        return True\r\n  \r\n    if (n % 2 == 0 or n % 3 == 0): \r\n        return False\r\n  \r\n    i = 5\r\n    while(i * i <= n) : \r\n        if (n % i == 0 or n % (i + 2) == 0) : \r\n            return False\r\n        i = i + 6\r\n  \r\n    return True\r\n\r\n# main\r\nn = 100\r\nprint(\"Following are the prime numbers between 0 and\", n) \r\nfor i in range(2,n+1): \r\n    if isPrime(i): \r\n        print(i)", "task_id": 271}
{"finetuning_prompt": "\"\"\"\nWrite a code to convert a decimal number to its equivalent hexadecimal number.\n\"\"\"\n\ndef decimal_to_hexadecimal(decimal_num):\n", "finetuning_completion": "\n    # Initialising dictionary \n    convertString = \"0123456789ABCDEF\"\n    if decimal_num < 0: \n        return \"-\" + decimal_to_hexadecimal(-decimal_num) \n    elif decimal_num == 0: \n        return \"0\"\n    else: \n        hexaDecimal = \"\" \n        while decimal_num > 0:  \n            num = decimal_num % 16\n            decimal_num = decimal_num // 16\n            hexaDecimal = convertString[num] + hexaDecimal\n        return hexaDecimal", "task_id": 272}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove duplicates from an array in-place.\n\"\"\"\n\ndef remove_duplicates(list):\n", "finetuning_completion": " \r\n    list=list[:] \r\n    i = 0\r\n    j = 1\r\n    while(j < len(list)):  \r\n        if list[j] == list[i]: \r\n            j += 1\r\n        else: \r\n            i+= 1\r\n            list[i] = list[j] \r\n            j += 1\r\n    del list[i+1:] \r\n    return list", "task_id": 277}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the area of a trapezoid given the coordinates of its four vertices.\n\"\"\"\n\ndef area_of_trapezoid(A, B, C, D):\n", "finetuning_completion": "\r\n  x1, y1 = A\r\n  x2, y2 = B\r\n  x3, y3 = C\r\n  x4, y4 = D\r\n\r\n  area = ((x1*y2 - y1*x2)+(x2*y3 - y2*x3)+(x3*y4 - y3*x4)+(x4*y1 - y4*x1))/2\r\n\r\n  return area", "task_id": 298}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers, write a function to find the largest difference between the possible pair of numbers in the list.\n\"\"\"\n\ndef largest_difference_pairs(nums):\n", "finetuning_completion": "\r\n  max_difference = 0\r\n  for i in range(len(nums)-1):\r\n    for j in range(i+1, len(nums)):\r\n      if (nums[j] - nums[i] > max_difference):\r\n        max_difference = nums[j] - nums[i]\r\n  return max_difference", "task_id": 300}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes a number as an argument and returns a string with the number spelled out in words.\n\"\"\"\n\ndef num_to_words(num):\n", "finetuning_completion": "\n    ones = [\"\", \"one \", \"two \", \"three \", \"four \", \n            \"five \", \"six \", \"seven \", \"eight \", \n            \"nine \", \"ten \", \"eleven \", \"twelve \", \n            \"thirteen \", \"fourteen \", \"fifteen \", \n            \"sixteen \", \"seventeen \", \"eighteen \", \n            \"nineteen \"] \n              \n    tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \n            \"fifty\", \"sixty\", \"seventy\", \"eighty\", \n            \"ninety\"] \n              \n    # if num is 0 \r\n    if (num == 0): \r\n        return \"zero\"\r\n          \r\n    if num > 0 and num < 20:\r\n        return ones[num]   \r\n  \r\n    if num >= 20:\r\n        return tens[num//10] + ones[num%10]", "task_id": 301}
{"finetuning_prompt": "\"\"\"\nWrite a python program to convert a given list into a dictionary.\n\"\"\"\n\ndef convert_list_to_dict(input_list):\n", "finetuning_completion": " \r\n\tres_dict = {input_list[i]: input_list[i+1] for i in range(0, len(input_list), 2)} \r\n\treturn res_dict", "task_id": 308}
{"finetuning_prompt": "\"\"\"\nFind a way to optimize the given function.\n\"\"\"\n\ndef a_function(x, y, z):\n", "finetuning_completion": " \r\n    if z == 0: \r\n        return 1 \r\n    elif z == 1: \r\n        return x*y \r\n    else: \r\n        temp = a_function(x, y, z // 2) \r\n        if z % 2 == 0: \r\n            return temp * temp \r\n        else: \r\n            return x * temp * temp", "task_id": 314}
{"finetuning_prompt": "\"\"\"\nCreate a program that finds the longest increasing subsequence (LIS) in a given array.\n\"\"\"\n\ndef lis(arr):\n", "finetuning_completion": "  \r\n    n = len(arr) \r\n  \r\n    # Declare the list (array) for LIS and  \r\n    # initialize LIS values for all indexes  \r\n    lis = [1]*n \r\n  \r\n    # Compute optimized LIS values in  \r\n    # bottom up manner  \r\n    for i in range (1 , n):  \r\n        for j in range(0 , i):  \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    # Initialize maximum to 0 to get  \r\n    # the maximum of all LIS  \r\n    maximum = 0\r\n  \r\n    # Pick maximum of all LIS values  \r\n    for i in range(n):  \r\n        maximum = max(maximum , lis[i])  \r\n  \r\n    return maximum \r\n# Driver code \r\narr = [2, 5, 3, 7, 9, 4] \r\nprint(\"Length of lis is\", lis(arr))", "task_id": 315}
{"finetuning_prompt": "\"\"\"\nEdit the following function to accept an additional string parameter.\n\"\"\"\n\ndef greeting(name,title):\n", "finetuning_completion": " \r\n     print(\"Hello, \"+title+\". \"+name)", "task_id": 316}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the median of an unsorted array.\n\"\"\"\n\ndef median(arr):\n", "finetuning_completion": "\r\n    arr.sort() \r\n    mid = len(arr) // 2 \r\n  \r\n    if len(arr) % 2 != 0: \r\n        return arr[mid] \r\n    else: \r\n        return (arr[mid-1] +arr[mid])/2", "task_id": 321}
{"finetuning_prompt": "\"\"\"\nGenerate Python code to calculate the median of a given list.\n\"\"\"\n\ndef median(list):\n", "finetuning_completion": " \r\n    n = len(list) \r\n    list.sort() \r\n  \r\n    if n % 2 == 0: \r\n        median1 = list[n//2] \r\n        median2 = list[n//2 - 1] \r\n        median = (median1 + median2)/2\r\n    else: \r\n        median = list[n//2] \r\n    return median \r\n  \r\nprint(\"Median is: \" + str(median([2,3,1,5,8,7]))) \n#Output: Median is: 4.5", "task_id": 324}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a list of tuples and returns a new list of tuples.\n\"\"\"\n\ndef new_list(tuple_list):\n", "finetuning_completion": " \r\n    list1 = [] \r\n    for tup in tuple_list: \r\n        x, y = tup \r\n        list1.append(tup) \r\n  \r\n    return list1", "task_id": 331}
{"finetuning_prompt": "\"\"\"\nCreate a program which finds all the prime numbers between two given numbers.\n\"\"\"\n\ndef find_prime_num(start, end):\n", "finetuning_completion": "\r\n  if start <= 1:\r\n    start = 2\r\n  prime_numbers = []\r\n  for num in range(start,end + 1):\r\n    if all(num%i!=0 for i in range(2,num)):\r\n        prime_numbers.append(num)\r\n  return prime_numbers", "task_id": 334}
{"finetuning_prompt": "\"\"\"\nOptimize the given Python program to improve the speed of execution.\n\"\"\"\n\ndef calc(num1, num2):\n", "finetuning_completion": " \r\n    result = (num1 + num2) * (num2 - num1 + 1) // 2\r\n    return result", "task_id": 335}
{"finetuning_prompt": "\"\"\"\nWrite a function to evaluate simple mathematical expressions.\n\"\"\"\n\ndef evaluate_expression(expression):\n", "finetuning_completion": " \r\n    return eval(expression)", "task_id": 336}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the maximum occurring value in an array.\n\"\"\"\n\ndef max_freq(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    maximum = 0\r\n  \r\n    for i in range(n): \r\n        count = 1\r\n        for j in range(n): \r\n            if (i != j and arr[i] == arr[j]): \r\n                count += 1\r\n        maximum = max(maximum, count) \r\n  \r\n    return maximum", "task_id": 355}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the probability of drawing an ace from a full deck of cards.\n\"\"\"\n\ndef probability_ace(deck):\n", "finetuning_completion": " \r\n    total_cards = len(deck) \r\n    ace_count = 0 \r\n \r\n    for x in deck: \r\n        if x == \"Ace\": \r\n            ace_count += 1  \r\n              \r\n    ace_probability = (ace_count / total_cards) * 100 \r\n  \r\n    return ace_probability", "task_id": 363}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the frequency of each character in a given string.\n\"\"\"\n\ndef frequency_characters(string):\n", "finetuning_completion": " \r\n  \r\n    # create an empty dictionary \r\n    d = {} \r\n      \r\n    # count number of occurrences of each character  \r\n    # and add it to dictionary d \r\n    for i in string: \r\n        if i in d: \r\n            d[i] += 1\r\n        else: \r\n            d[i] = 1\r\n    \r\n    return d", "task_id": 376}
{"finetuning_prompt": "\"\"\"\nDevelop a python script to check if a given number is odd or even.\n\"\"\"\n\ndef odd_or_even(num):\n", "finetuning_completion": "\n    if (num % 2) == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "task_id": 377}
{"finetuning_prompt": "\"\"\"\nGenerate Python code to append a given item at the end of a list.\n\"\"\"\n\ndef append_item(list, item):\n", "finetuning_completion": "\r\n    list.append(item)\r\n    return list", "task_id": 379}
{"finetuning_prompt": "\"\"\"\nFormulate a classifier to differentiate between two distinct classes.\n\"\"\"\n\nfrom sklearn.svm import SVC\r\ndef classify(x_train,y_train):\n", "finetuning_completion": "\r\n    clf = SVC(gamma='auto')\r\n    clf.fit(x_train, y_train)\r\n    return clf", "task_id": 382}
{"finetuning_prompt": "\"\"\"\nGenerate code to transform a string from upper case, to lower case and title case.\n\"\"\"\n\ndef transformString(string):\n", "finetuning_completion": "\r\n    lower_string = string.lower()\r\n    title_string = string.title()\r\n    return lower_string, title_string", "task_id": 383}
{"finetuning_prompt": "\"\"\"\nCreate a program that calculates the maximum and minimum of two given numbers.\n\"\"\"\n\ndef min_max(x,y):\n", "finetuning_completion": "\r\n    max = x if x > y else y\r\n    min = x if x < y else y\r\n    return max, min", "task_id": 384}
{"finetuning_prompt": "\"\"\"\nWrite a function to get a list of all numbers less than n which are divisible by 3 and 7.\n\"\"\"\n\ndef find_numbers(n):\n", "finetuning_completion": "\r\n  list_of_numbers = []\r\n  for i in range(1,n+1):\r\n    if (i % 3 == 0) and (i % 7 == 0):\r\n      list_of_numbers.append(i)\r\n  return list_of_numbers", "task_id": 389}
{"finetuning_prompt": "\"\"\"\nCode a function to find a specific character in two given strings and return the position where it is found.\n\"\"\"\n\ndef find_char(str1, str2, character):\n", "finetuning_completion": " \r\n\r\n    pos1 = -1\r\n    pos2 = -1\r\n\r\n    for i in range(len(str1)): \r\n        if str1[i] == character: \r\n            pos1 = i\r\n            break\r\n    \r\n    for j in range(len(str2)): \r\n        if str2[j] == character: \r\n            pos2 = j\r\n            break\r\n  \r\n    return pos1, pos2", "task_id": 395}
{"finetuning_prompt": "\"\"\"\nDesign a function to remove all the duplicates in a given string.\n\"\"\"\n\ndef remove_duplicates(str):\n", "finetuning_completion": " \r\n    result = \"\" \r\n    seen = set() \r\n    for char in str: \r\n        # If the character is not in set \r\n        # then append to the result \r\n        if char not in seen: \r\n            seen.add(char) \r\n            result += char \r\n    return result", "task_id": 396}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes in a square array and rotates it 90 degrees clockwise.\n\"\"\"\n\ndef rotate_90_clockwise(arr):\n", "finetuning_completion": "\n  N = len(arr) \n          \n  # Create a new matrix \n  new_matrix = [[0 for x in range(N)] for y in range(N)] \n      \n  # Rotate the matrix \n  for i in range(0, N): \n      for j in range(0, N): \n          new_matrix[j][N-1-i] = arr[i][j] \n  return new_matrix", "task_id": 400}
{"finetuning_prompt": "\"\"\"\nCreate a function to identify the top 3 numbers in the given array.\n\"\"\"\n\ndef top_three(arr):\n", "finetuning_completion": "\n  sorted_arr = sorted(arr)\n  return [sorted_arr[-1], sorted_arr[-2], sorted_arr[-3]]", "task_id": 402}
{"finetuning_prompt": "\"\"\"\nCreate a function that rounds off a given number to the nearest integer.\n\"\"\"\n\nimport math\r\ndef nearest_int(num):\n", "finetuning_completion": "\r\n    return math.ceil(num)", "task_id": 412}
{"finetuning_prompt": "\"\"\"\nWrite a python program to print a multiplication table for a given number.\n\"\"\"\n\ndef table_of_3(n):\n", "finetuning_completion": "\r\n    for i in range(1, n + 1):\r\n        for j in range(1, n + 1):\r\n            print(i * j, end=\"\\t\")\r\n        print()", "task_id": 418}
{"finetuning_prompt": "\"\"\"\nEdit a given function to add a new variable.\n\"\"\"\n\ndef adder_function(a, b):\n", "finetuning_completion": "\n    c = a + b\n    d = c * a\n    return d", "task_id": 419}
{"finetuning_prompt": "\"\"\"\nCreate a python function that finds the occurrence of an element in a given array.\n\"\"\"\n\ndef find_occurrence(array, element):\n", "finetuning_completion": "\r\n    count = 0\r\n    for i in range(len(array)):\r\n        if array[i] == element:\r\n            count += 1\r\n    return count", "task_id": 421}
{"finetuning_prompt": "\"\"\"\nDesign a function in Python to find the sum of an arithmetic series given the first term, common difference and number of terms.\n\"\"\"\n\ndef find_series_sum(term1, difference, number_of_term):\n", "finetuning_completion": "\r\n    return int((((2*term1) + (number_of_term - 1)*difference)*number_of_term)/2)", "task_id": 422}
{"finetuning_prompt": "\"\"\"\nCreate a web application that prints the number of days between two dates.\n\"\"\"\n\nimport datetime \r\n\r\ndef get_num_of_days(date1, date2):\n", "finetuning_completion": " \r\n\td1 = datetime.datetime.strptime(date1, \"%d/%m/%Y\") \r\n\td2 = datetime.datetime.strptime(date2, \"%d/%m/%Y\")\r\n\tdifference = d2-d1\r\n\treturn difference.days", "task_id": 434}
{"finetuning_prompt": "\"\"\"\nEdit the given function to find the largest prime factor of a given number.\n\"\"\"\n\ndef largest_prime_factor(n):\n", "finetuning_completion": " \n\tlargest_factor = 1\n  \n\twhile n % 2 == 0: \n\t\tlargest_factor = 2\n\t\tn = n / 2\n          \n\tfor i in range(3, int(math.sqrt(n)) + 1, 2): \n\t\twhile n % i == 0: \n\t\t\tlargest_factor = i \n\t\t\tn = n / i \n      \n\tif n > 2: \n\t\tlargest_factor = n \n      \n\treturn largest_factor", "task_id": 446}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to remove the characters which have odd index values of a given string.\n\"\"\"\n\ndef remove_odd_chars(string):\n", "finetuning_completion": " \n    result = \"\" \n    for i in range(len(string)): \n        if i % 2 == 0: \n            result = result + string[i] \n    return result\n\nOutput: 'HloWrd'", "task_id": 447}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate factorials until a given number.\n\"\"\"\n\ndef generate_factorials_until(n):\n", "finetuning_completion": "\n    factorials = [1, 1]\n    for i in range(2,n+1):\n        factorials.append(factorials[i-1] * i)\n    return factorials\n\nOutput: [1, 1, 2, 6, 24, 120, 720]", "task_id": 448}
{"finetuning_prompt": "\"\"\"\nWrite code to filter out all words in a given string that have a length greater than 5.\n\"\"\"\n\ndef filter_words(str):\n", "finetuning_completion": " \r\n\twords = str.split()\r\n\r\n\tfiltered_words = [] \r\n\r\n\tfor i in range(0, len(words)): \r\n\t\tif len(words[i]) <= 5: \r\n\t\t\tfiltered_words.append(words[i]) \r\n\treturn \" \".join(filtered_words)", "task_id": 452}
{"finetuning_prompt": "\"\"\"\nWrite a python code to find the top two most frequent elements in a given list.\n\"\"\"\n\nfrom collections import Counter \r\n  \r\ndef top_two_most_frequent_ele(list):\n", "finetuning_completion": " \r\n    counter = Counter(list) \r\n    first, second = counter.most_common(2) \r\n    return first, second", "task_id": 457}
{"finetuning_prompt": "\"\"\"\nGenerate a program to print the binary form of the given integer.\n\"\"\"\n\ndef print_binary(n):\n", "finetuning_completion": "\r\n  if (n > 1): \r\n    print_binary(n//2) \r\n  print(n % 2, end = '')", "task_id": 471}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract the value of the nth element from the given array.\n\"\"\"\n\ndef nth_element(arr, n):\n", "finetuning_completion": " \n\treturn arr[n-1]", "task_id": 472}
{"finetuning_prompt": "\"\"\"\nGenerate a function to sum up all the multiple of 3 and 5 that are below the given number.\n\"\"\"\n\ndef sum_multiples(n):\n", "finetuning_completion": " \n\tsum = 0\n\tfor i in range(n): \n\t\tif (i % 3 == 0 or i % 5 == 0): \n\t\t\tsum = sum + i \n\treturn sum", "task_id": 474}
{"finetuning_prompt": "\"\"\"\nGenerate code to calculate sum of elements in a list.\n\"\"\"\n\ndef calc_sum(lst):\n", "finetuning_completion": "\n   sum = 0\n   for num in lst:\n      sum += num    \n   return sum", "task_id": 477}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate Levenshtein distance of two given strings.\n\"\"\"\n\ndef levenshtein_distance(s1, s2):\n", "finetuning_completion": "\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    if len(s2) == 0:\n        return len(s1) \n\n    previous_row = range(len(s2) + 1)\n    for i, c1 in enumerate(s1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(s2):\n            insertions = previous_row[j + 1] + 1 \n            deletions = current_row[j] + 1  \n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]", "task_id": 478}
{"finetuning_prompt": "\"\"\"\nGenerate a program to classify a given dataset using knn.\n\"\"\"\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndef classify_knn(data, labels, k):\n", "finetuning_completion": " \n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(data,labels)\n    return knn", "task_id": 482}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to search for an element in a sorted array in O(log n) time complexity.\n\"\"\"\n\ndef binarySearch(arr, target):\n", "finetuning_completion": " \r\n\tlow = 0\r\n\thigh = len(arr) - 1\r\n\twhile low <= high: \r\n\t\tmid = (low + high) // 2\r\n\t\tif arr[mid] == target: \r\n\t\t\treturn mid \r\n\t\telif arr[mid] < target: \r\n\t\t\tlow = mid + 1\r\n\t\telse: \r\n\t\t\thigh = mid - 1\r\n\treturn -1", "task_id": 484}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the square root of a given number using Newton's Method.\n\"\"\"\n\ndef square_root(num):\n", "finetuning_completion": " \n    x = num \r\n    y = (x + num / x) / 2\r\n    epsilon = 0.0000001\r\n    while(abs(y - x) > epsilon): \r\n        x = y \r\n        y = (x + num/x) / 2\r\n    return y \r\n  \r\nsquare_root(9) # Returns 3.000000001424966", "task_id": 492}
{"finetuning_prompt": "\"\"\"\nGenerate a code for a function to find the longest increasing subsequence of a given array.\n\"\"\"\n\ndef lis(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    lis = [1]*n \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n    maximum = 0\r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i])  \r\n    return maximum", "task_id": 495}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to solve the Knapsack problem.\n\"\"\"\n\ndef knapsack(weights, values, max_weight):\n", "finetuning_completion": "\r\n    n = len(weights)\r\n    K = [[0 for x in range(max_weight + 1)] for x in range(n + 1)]\r\n \r\n    for i in range(n + 1):\r\n        for w in range(max_weight + 1):\r\n            if i == 0 or w == 0:\r\n                K[i][w] = 0\r\n            elif weights[i-1] <= w:\r\n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w])\r\n            else:\r\n                K[i][w] = K[i-1][w]\r\n \r\n    return K[n][max_weight]\r\n\r\nknapsack([1, 2, 3], [4, 5, 10],  4) # Returns 15", "task_id": 496}
{"finetuning_prompt": "\"\"\"\nGenerate a code to implement a linear search, which is useful for locating a particular item in an array.\n\"\"\"\n\ndef linear_search(arr, target):\n", "finetuning_completion": "\r\n    for i in range(len(arr)):\r\n        if arr[i] == target:\r\n            return i\r\n    return -1\r\n    \r\nlinear_search([1, 5, 9, 3], 3) # Returns 3", "task_id": 497}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to remove all duplicates from a given list of numbers.\n\"\"\"\n\ndef remove_duplicate(list1):\n", "finetuning_completion": " \r\n    temp = [] \r\n    for num in list1: \r\n        if num not in temp: \r\n            temp.append(num) \r\n    return temp \r\n  \r\n# Driver Code \r\nlist1 = [1, 1, 2, 3, 3, 3, 4] \r\nprint(remove_duplicate(list1))", "task_id": 500}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to detect duplicate elements in an array.\n\"\"\"\n\ndef find_duplicate(arr):\n", "finetuning_completion": " \n    size = len(arr) \n    duplicate = [] \n    for i in range(size): \n        for j in range (i + 1, size): \n            if arr[i] == arr[j] and arr[i] not in duplicate: \n                duplicate.append(arr[i]) \n    return duplicate", "task_id": 513}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to minimize the number of coins required for change.\n\"\"\"\n\ndef coin_change(coins, val):\n", "finetuning_completion": " \n    n = len(coins) \n    table = [0] + [float('inf')] * val \n  \n    for i in range(n): \n        for j in range(1, val + 1): \n            if coins[i] <= j: \n                sub_res = table[j - coins[i]] \n                table[j] = min(table[j], sub_res + 1) \n    return table[-1]", "task_id": 515}
{"finetuning_prompt": "\"\"\"\nCreate a method to remove duplicate entries from a given list of integers.\n\"\"\"\n\ndef remove_duplicates(data):\n", "finetuning_completion": "\r\n    # Create an empty list to store the result\r\n    result = []\r\n    # Iterate over the input list\r\n    for i in data:\r\n        # If an element is not in the result list, add it\r\n        if i not in result:\r\n            result.append(i)\r\n    return result", "task_id": 518}
{"finetuning_prompt": "\"\"\"\nCreate a method to check if a given number is valid binary number.\n\"\"\"\n\ndef is_valid_binary_number(numstr):\n", "finetuning_completion": "\n    # If a string is empty then it is not a valid binary number\n    if len(numstr) == 0:\n        return False\n    \n    # Iterate over each character in the string\n    for i in range(len(numstr)):\n        # If any character is not 0 or 1 then it is not a valid binary number\n        if numstr[i] != '0' and numstr[i] != '1':\n            return False\n    # return true if it is a valid binary number\n    return True", "task_id": 521}
{"finetuning_prompt": "\"\"\"\nCreate a method to merge two sorted arrays into a new sorted array.\n\"\"\"\n\ndef merge(arr1, arr2):\n", "finetuning_completion": "\r\n    # Create an empty array to store the result\r\n    result = []\r\n    # Set pointer to the beginning of the two arrays\r\n    i, j = 0, 0\r\n\r\n    # Iterate over the two array until one pointer reached the end index\r\n    while (i < len(arr1) and j < len(arr2)):\r\n        # Add the smaller element to the result array and increase the pointer\r\n        if arr1[i] < arr2[j]:\r\n            result.append(arr1[i])\r\n            i += 1\r\n        else:\r\n            result.append(arr2[j])\r\n            j += 1\n    # Append remaining elements from the another array to the result array\r\n    result += (arr1[i:] or arr2[j:])\r\n    return result", "task_id": 524}
{"finetuning_prompt": "\"\"\"\nGenerate a program to merge two sorted lists into a single sorted list.\n\"\"\"\n\ndef merge_Lists(list1, list2):\n", "finetuning_completion": " \r\n  \r\n    # indices of list1 and list2 \r\n    i, j = 0, 0\r\n    # merged list \r\n    merge_list = [] \r\n  \r\n    # Traverse both list1 and list2 \r\n    while i < len(list1) and j < len(list2):   \r\n        # Append the smaller element of both list  \r\n        if list1[i] < list2[j]: \r\n            merge_list.append(list1[i]) \r\n            i += 1\r\n        else: \r\n            merge_list.append(list2[j]) \r\n            j += 1\r\n  \r\n    # Append remaining elements of list1  \r\n    while i < len(list1): \r\n        merge_list.append(list1[i]) \r\n        i += 1\r\n  \r\n    # Append remaining elements of list2  \r\n    while j < len(list2): \r\n        merge_list.append(list2[j]) \r\n        j += 1\r\n  \r\n    return merge_list", "task_id": 529}
{"finetuning_prompt": "\"\"\"\nDesign a program to sort the given array using quick sort algorithm.\n\"\"\"\n\ndef quick_Sort(nums):\n", "finetuning_completion": " \r\n    if len(nums) <= 1: \r\n        return nums\r\n\r\n    pivot = nums[len(nums) // 2]\r\n    left = [x for x in nums if x < pivot]\r\n    middle = [x for x in nums if x == pivot]\r\n    right = [x for x in nums if x > pivot]\r\n    return quick_Sort(left) + middle + quick_Sort(right)", "task_id": 536}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find all pairs of elements in a given array whose sum is equal to a given number.\n\"\"\"\n\ndef find_Pairs(nums, target):\n", "finetuning_completion": "\n\tresult = []\n\t\n\tfor i in range(len(nums)):\n\t\tfor j in range(i+1, len(nums)):\n\t\t\tif nums[i] + nums[j] == target:\n\t\t\t\tpair = (nums[i], nums[j])\n\t\t\t\tresult.append(pair)\n\t\t\t\t\n\treturn result", "task_id": 538}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to generate a Fibonacci series.\n\"\"\"\n\ndef Fibonacci_series(n):\n", "finetuning_completion": " \r\n      \r\n    fibo = [0, 1] \r\n  \r\n    if n==1: \r\n        return [0]\r\n    elif n<1: \r\n        return [] \r\n    else: \r\n        for i in range(2,n): \r\n            fibo.append(fibo[i-1]+fibo[i-2]) \r\n    return fibo", "task_id": 539}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python to return the longest common substring in two strings.\n\"\"\"\n\ndef longestCommonSubstring(s1, s2):\n", "finetuning_completion": " \r\n      m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]  \r\n      longest, x_longest = 0, 0\r\n      for x in range(1, 1 + len(s1)): \r\n          for y in range(1, 1 + len(s2)): \r\n              if s1[x - 1] == s2[y - 1]: \r\n                  m[x][y] = m[x - 1][y - 1] + 1\r\n                  if m[x][y] > longest: \r\n                      longest = m[x][y] \r\n                      x_longest = x \r\n              else: \r\n                  m[x][y] = 0\r\n      return s1[x_longest - longest: x_longest] \r\n\r\ns1 = \"ABCD\"\r\ns2 = \"ABCD\"\r\n  \r\nprint(\"Longest Common Substring is:\", longestCommonSubstring(s1, s2))", "task_id": 547}
{"finetuning_prompt": "\"\"\"\nGenerate a function that can combine two dictionaries in Python and output the resulting dictionary.\n\"\"\"\n\ndef mergeDicts(dictA, dictB):\n", "finetuning_completion": "\r\n    mergedDict = dictA.copy() \r\n    mergedDict.update(dictB) \r\n    return mergedDict", "task_id": 554}
{"finetuning_prompt": "\"\"\"\nWrite a python code to convert a given string to title casing.\n\"\"\"\n\ndef title_case(string):\n", "finetuning_completion": "\n    words = string.lower().split(' ')\r\n    title_words = [word.capitalize() for word in words]\n    return ' '.join(title_words)", "task_id": 556}
{"finetuning_prompt": "\"\"\"\nDesign a code to group a list of dictionaries by a given a key.\n\"\"\"\n\ndef group_by_key(myList, key):\n", "finetuning_completion": "\n    groupedList = {}\n    for entry in myList:\n        keyVal = entry[key]\n        if keyVal in groupedList:\n            groupedList[keyVal].append(entry)\n        else:\n            groupedList[keyVal] = [entry]\n    return groupedList", "task_id": 561}
{"finetuning_prompt": "\"\"\"\nGenerate a python program for string validation in a given format.\n\"\"\"\n\nimport re\n\ndef validate_string(s):\n", "finetuning_completion": "\n    pattern = r'^[a-zA-Z\\s]+$'\n    if(re.search(pattern, s)): \n        return True\n    else: \n        return False", "task_id": 564}
{"finetuning_prompt": "\"\"\"\nGenerate a 2D array with all tuple elements of another given array.\n\"\"\"\n\ndef generate_2D_array(arr):\n", "finetuning_completion": "\r\n    rows = len(arr)\r\n    cols = len(arr[0])\r\n    array = [[0] * cols for i in range(rows)]\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            array[i][j] = arr[i][j]\r\n    return array", "task_id": 571}
{"finetuning_prompt": "\"\"\"\nWrite a python program to select a phone number from a given list based on the criteria given in the input.\n\"\"\"\n\ndef select_phone_number(data, criteria):\n", "finetuning_completion": "\n    for name, numbers in data.items():\n        if name == criteria:\n            return numbers[0]\n    return \"No such name found!\"", "task_id": 572}
{"finetuning_prompt": "\"\"\"\nCode a function that converts a number to its equivalent string representation.\n\"\"\"\n\ndef convert_to_string(num):\n", "finetuning_completion": "\r\n    return str(num)", "task_id": 574}
{"finetuning_prompt": "\"\"\"\nWrite a python program to classify the elements of a given array into three categories.\n\"\"\"\n\ndef classify_array(arr):\n", "finetuning_completion": "\r\n    category1 = []\r\n    category2 = []\r\n    category3 = []\r\n    for item in arr:\r\n        if item % 3 == 0:\r\n            category1.append(item)\r\n        elif item % 2 == 0:\r\n            category2.append(item)\r\n        else:\r\n            category3.append(item)\r\n    return (category1, category2, category3)", "task_id": 577}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to generate a string made of the first and last two characters from a given string.\n\"\"\"\n\ndef generate_string(str1):\n", "finetuning_completion": "\n  if len(str1) < 2:\n      return \"\"\n  else:\n      return str1[:2] + str1[-2:]", "task_id": 583}
{"finetuning_prompt": "\"\"\"\nGenerate the longest palindromic substring from the given string.\n\"\"\"\n\ndef long_palindrome_substring(input_string):\n", "finetuning_completion": "\n  maxLen = 1\n  start = 0\n  length = len(input_string)\n  \n  low = 0\n  high = 0\r\n  # One by one consider every character as center point of even and length palindromes\n  for i in range(1, length):\n    # Find the longest even length palindrome with center points as i-1 and i\n    low = i - 1\n    high = i\n    while low >= 0 and high < length and input_string[low] == input_string[high]:\n        if high - low + 1 > maxLen:\n            start = low\n            maxLen = high - low + 1\n        low -= 1\n        high += 1\n    \r\n    # Find the longest odd length palindrome with center points as i-1 and i+1\n    low = i - 1\n    high = i + 1\n    while low >= 0 and high < length and input_string[low] == input_string[high]:\n        if high - low + 1 > maxLen:\n            start = low\n            maxLen = high - low + 1\n        low -= 1\r\n        high += 1\n  \n  return(input_string[start:start+maxLen])", "task_id": 584}
{"finetuning_prompt": "\"\"\"\nCreate a program that will remove all duplicated elements in a given list of integers.\n\"\"\"\n\ndef remove_duplicates(input_list):\n", "finetuning_completion": "\n    # Create an empty output list\n    output_list = []\n    # Loop through each element in the input list\n    for num in input_list:\n        # If the element has not been encountered before, add it to the output list\n        if num not in output_list:\n            output_list.append(num)\n    # Return the output list\n    return output_list", "task_id": 586}
{"finetuning_prompt": "\"\"\"\nWrite a python program to search a given element in a list.\n\"\"\"\n\ndef search_element(nums,element) :\n", "finetuning_completion": " \r\n    count = 0\r\n    for i in range(len(nums)) : \r\n        if(element == nums[i]) : \r\n            count = 1\r\n\r\n    if(count) : \r\n        print(\"Element is present\") \r\n    else : \r\n        print(\"Element is not present\")", "task_id": 595}
{"finetuning_prompt": "\"\"\"\nConstruct a function to find the largest palindrome smaller than a given number.\n\"\"\"\n\ndef largest_palindrome(n):\n", "finetuning_completion": "  \r\n    for x in range(n - 1, 0, -1): \r\n        if (str(x) == str(x)[::-1]): \r\n            return x \r\n    return -1", "task_id": 598}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sort the names in descending order of their lengths.\n\"\"\"\n\ndef sort_names(names):\n", "finetuning_completion": " \r\n    names.sort(key = lambda x: len(x), reverse = True) \r\n    return names", "task_id": 600}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a list of words into a comma separated string.\n\"\"\"\n\ndef convert_list_string(nums):\n", "finetuning_completion": " \n    s = \", \".join(nums) \n    return s", "task_id": 601}
{"finetuning_prompt": "\"\"\"\nCreate a loop which join each element of the given dictionary with a colon.\n\"\"\"\n\ndef join_dict_elements(d):\n", "finetuning_completion": " \n    s = \": \".join(\"{}: {}\".format(key, val) for key, val in d.items()) \n    return s", "task_id": 602}
{"finetuning_prompt": "\"\"\"\nWrite a python program to cut a string into half alternate characters.\n\"\"\"\n\ndef cut_string(string):\n", "finetuning_completion": " \n    n = len(string) // 2 \n    str1 = string[0:n] \n    str2 = string[n::] \n    return str1 + \" \" + str2", "task_id": 603}
{"finetuning_prompt": "\"\"\"\nGenerate code to implement a Binary Search on a given array.\n\"\"\"\n\ndef binary_search(arr, target):\n", "finetuning_completion": "  \n    lower_bound = 0 \n    upper_bound = len(arr) - 1 \n      \n    while lower_bound <= upper_bound:  \n        mid_index = (lower_bound + upper_bound) // 2 \n        mid_elem = arr[mid_index] \n          \n        if target == mid_elem:  \n            return mid_index \n        elif mid_elem > target:  \n            upper_bound = mid_index - 1 \n        else : \n            lower_bound = mid_index + 1 \n  \n    return -1", "task_id": 610}
{"finetuning_prompt": "\"\"\"\nGenerate code to render a histogram of a given data set.\n\"\"\"\n\nimport matplotlib.pyplot as plt\r\n\r\ndef render_histogram(data):\n", "finetuning_completion": "\r\n    plt.hist(data, color = 'blue', edgecolor = 'black', bins = 5)\r\n    plt.title('Frequency histogram')\r\n    plt.xlabel('Values')\r\n    plt.ylabel('Frequency')\r\n    plt.show()", "task_id": 612}
{"finetuning_prompt": "\"\"\"\nCompress the following list of strings by using Huffman coding algorithm\n\"\"\"\n\nimport heapq\r\n  \r\n# Function to assign codes to the characters \r\n# and creating the character codes dictionary \r\ndef huffman_codes(char, freq):\n", "finetuning_completion": " \r\n    heap = [[wt, [sym, \"\"]] for sym, wt in zip(char, freq)] \r\n    heapq.heapify(heap)  \r\n    while len(heap) > 1: \r\n        lo = heapq.heappop(heap)  \r\n        hi = heapq.heappop(heap)  \r\n        for pair in lo[1:]:  \r\n            pair[1] = '0' + pair[1]  \r\n        for pair in hi[1:]:  \r\n            pair[1] = '1' + pair[1]  \r\n        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])  \r\n  \r\n    char_codes = dict(heapq.heappop(heap)[1:]) \r\n  \r\n    return char_codes \r\n\r\n# Input characters \r\nchar = [\"A\", \"B\", \"C\", \"D\"] \r\n# input frequency \r\nfreq = [45, 13, 12, 16]  \r\nchar_code = huffman_codes(char, freq) \r\n\r\n# Input strings\r\ngiven_strings = [\"ABC\",\"BCD\",\"CD\",\"AB\",\"ABCD\"]\r\n\r\n# Compressing the strings by using Huffman Coding\r\ncompressed_strings = []\r\nfor string in given_strings:\r\n  compressed_string = \"\"\r\n  for char in string:\r\n    compressed_string += char_code[char]\r\n  compressed_strings.append(compressed_string)\r\n  \r\nprint(compressed_strings)", "task_id": 615}
{"finetuning_prompt": "\"\"\"\nGiven a wooden box, write a program to compute the dimensions for a cardboard box to fit the wooden box inside.\n\"\"\"\n\ndef calculate_cardboard_box(wooden_box):\n", "finetuning_completion": "\r\n    length = wooden_box[0] + 2\r\n    width = wooden_box[1] + 2\r\n    height = wooden_box[2] + 2\r\n    return length, width, height", "task_id": 622}
{"finetuning_prompt": "\"\"\"\nCreate a function to accept an unknown number of arguments.\n\"\"\"\n\ndef accept_unknown_args(*args):\n", "finetuning_completion": "\r\n    for arg in args:\r\n        print(arg)", "task_id": 631}
{"finetuning_prompt": "\"\"\"\nOptimize the code for printing all the even numbers in a given list.\n\"\"\"\n\ndef print_even(my_list):\n", "finetuning_completion": " \r\n  even_nums = [num for num in my_list if num%2 == 0] \r\n  print(even_nums)", "task_id": 644}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to append an element at the end of the given list.\n\"\"\"\n\ndef list_append(my_list):\n", "finetuning_completion": " \r\n  my_list.append(5) \r\n  print(my_list)", "task_id": 645}
{"finetuning_prompt": "\"\"\"\nGenerate a code to calculate the total length of strings present in the given list.\n\"\"\"\n\ndef calculate_length(my_list):\n", "finetuning_completion": " \r\n  total_length = 0 \r\n  for x in my_list: \r\n    total_length = total_length + len(x) \r\n  return total_length", "task_id": 646}
{"finetuning_prompt": "\"\"\"\nWrite a python program to delete all the repeated characters from a given string.\n\"\"\"\n\ndef delete_repeat_characters(my_string):\n", "finetuning_completion": " \r\n  seen = set() \r\n  result = \"\" \r\n  for char in my_string:\r\n    if char not in seen: \r\n      seen.add(char) \r\n      result += char\r\n  return result", "task_id": 651}
{"finetuning_prompt": "\"\"\"\nGenerate a program to compare two strings and print the longer one.\n\"\"\"\n\ndef compare_str(string1, string2):\n", "finetuning_completion": " \r\n  if len(string1) > len(string2): \r\n    print(string1) \r\n  else: \r\n    print(string2)", "task_id": 653}
{"finetuning_prompt": "\"\"\"\nGenerate code to implement insertion sort.\n\"\"\"\n\ndef insertionSort(arr):\n", "finetuning_completion": "\n    for i in range(1,len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j] :\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\n# Test Code\narr = [2, 5, 10, 8, 9, 1] \nsorted_arr = insertionSort(arr)\nprint(sorted_arr) # Output: [1, 2, 5, 8, 9, 10]", "task_id": 661}
{"finetuning_prompt": "\"\"\"\nCreate a function that capitalize the first letter of every word in a given string.\n\"\"\"\n\ndef capitalize(text):\n", "finetuning_completion": "\n  res = ' '.join([i.capitalize() for i in text.split(' ')])\n  return res", "task_id": 663}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the maximum area of a polygon.\n\"\"\"\n\ndef polygonArea(polygon):\n", "finetuning_completion": " \n  n = len(polygon) \n  area = 0.0\n  for i in range(n): \n    j = (i + 1) % n \n    area += (polygon[i][0] * polygon[j][1]) - (polygon[j][0] * polygon[i][1]) \n  return abs(area / 2.0)", "task_id": 672}
{"finetuning_prompt": "\"\"\"\nCreate a python function to reverse the order of words in a sentence.\n\"\"\"\n\ndef reverse_sentence(sentence):\n", "finetuning_completion": " \n  words = sentence.split(\" \") \n  words.reverse() \n  rev_sentence = ' '.join(words) \n  return rev_sentence", "task_id": 673}
{"finetuning_prompt": "\"\"\"\nGenerate a unique ID from a given string.\n\"\"\"\n\nimport hashlib\ndef generate_id(string):\n", "finetuning_completion": "\n    return hashlib.md5(string.encode()).hexdigest()", "task_id": 675}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect duplicate integers in a given list.\n\"\"\"\n\ndef check_duplicates(arr):\n", "finetuning_completion": " \r\n    res = [] \r\n    for i in range(len(arr)): \r\n        k = i + 1\r\n        for j in range(k, len(arr)): \r\n  \r\n            # If duplicate is found \r\n            if arr[i] == arr[j] and arr[i] not in res: \r\n                res.append(arr[i]) \r\n    \r\n    # return result \r\n    return res", "task_id": 689}
{"finetuning_prompt": "\"\"\"\nSort the elements of an array whose sum of their digits is odd and in non-descending order.\n\"\"\"\n\ndef sum_odd_sort(arr):\n", "finetuning_completion": " \n    my_dict = {} \r\n    for i in range(len(arr)): \r\n        sum = 0\r\n        x = arr[i] \r\n        while x > 0: \r\n            sum += x % 10 \r\n            x = x // 10\r\n\r\n        # check if sum is odd \r\n        if sum % 2 != 0: \r\n            my_dict[arr[i]] = sum \r\n    \r\n    # sort the dictionary wrt to values \r\n    sorted_dict = {k: v for k, v in sorted(my_dict.items(), key = lambda item: item[1], reverse = False) \r\n    } \r\n\r\n    # return result \r\n    return list(sorted_dict.keys())", "task_id": 690}
{"finetuning_prompt": "\"\"\"\nWrite a function to test for a prime number.\n\"\"\"\n\ndef is_prime(n):\n", "finetuning_completion": " \n  \n    # Corner case \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True", "task_id": 697}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert string representing binary number to integer.\n\"\"\"\n\ndef binary_to_int(str):\n", "finetuning_completion": " \r\n     res = 0\r\n     for bit in str: \r\n        res = (res << 1) + (bit == '1') \r\n     return res", "task_id": 702}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to generate n prime numbers.\n\"\"\"\n\ndef generate_prime_numbers(n):\n", "finetuning_completion": " \n    \n    p = 2\n    count = 0\n    prime_numbers = []\n    \n    while count != n:\n        c = 0\n        for i in range(1,p+1):\n            if p % i == 0:\n                c += 1\n        \n        if c == 2: # if count is 2, prime number is found\n            prime_numbers.append(p) \n            count += 1\n        \n        p += 1\n    \n    return prime_numbers", "task_id": 704}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to classify fruits into different categories like citrus, stone fruit,berry etc.\n\"\"\"\n\ndef classify_fruits(fruits):\n", "finetuning_completion": "\n    categories = {\n        'citrus': [],\n        'stone fruit': [],\n        'berry': [],\n        'other': []\n    }\n    \n    for fruit in fruits:\n        if fruit in ['lemon', 'lime', 'orange']:\n            categories['citrus'].append(fruit)\n        elif fruit in ['peach', 'plum', 'apricot']:\n            categories['stone fruit'].append(fruit)\n        elif fruit in ['strawberry', 'blueberry', 'raspberry']:\n            categories['berry'].append(fruit)\n        else:\n            categories['other'].append(fruit)\n            \n    return categories", "task_id": 705}
{"finetuning_prompt": "\"\"\"\nGiven an array of words, write a function to group the words by their anagrams.\n\"\"\"\n\ndef groupAnagrams(words):\n", "finetuning_completion": " \r\n    anagrams = {} \r\n    for w in words: \r\n        key = str(sorted(list(w))) \r\n        if key in anagrams: \r\n            anagrams[key].append(w) \r\n        else: \r\n            anagrams[key] = [w] \r\n    anagrams_list = [] \r\n    for anag in anagrams.values(): \r\n        anagrams_list.append(anag) \r\n    return anagrams_list", "task_id": 711}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the longest common substring between two strings.\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n", "finetuning_completion": " \r\n  \r\n    m = [[0 for x in range(len(s2)+1)] for x in range(len(s1)+1)] \r\n    lcs = \"\"  \r\n    longest_length = 0  \r\n  \r\n    for i in range(len(s1)): \r\n        for j in range(len(s2)): \r\n            if s1[i] == s2[j]: \r\n                m[i+1][j+1] = m[i][j] + 1\r\n                if m[i+1][j+1] > longest_length : \r\n                    longest_length = m[i+1][j+1] \r\n                    lcs = s1[i-longest_length+1:i+1] \r\n  \r\n    return lcs", "task_id": 712}
{"finetuning_prompt": "\"\"\"\nConvert a given integer to a string representation.\n\"\"\"\n\ndef convert_int2str(n):\n", "finetuning_completion": "\r\n    return str(n)", "task_id": 715}
{"finetuning_prompt": "\"\"\"\nWrite a function to select the strings that start with \"ab\" from a given list of strings.\n\"\"\"\n\ndef start_With_AB(string_list):\n", "finetuning_completion": "\r\n    return [s for s in string_list if s.startswith('ab')]", "task_id": 726}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert string to date in Python\n\"\"\"\n\nimport datetime\r\ndef str_to_date(date_string):\n", "finetuning_completion": "\r\n    date_format = '%Y-%m-%d'\r\n    return datetime.datetime.strptime(date_string, date_format).date()", "task_id": 745}
{"finetuning_prompt": "\"\"\"\nGenerate a function to insert an element into a sorted array.\n\"\"\"\n\ndef insert_elem(arr, elem):\n", "finetuning_completion": "   \n    if len(arr) == 0:\n        return [elem]\n    \n    start, end = 0, len(arr) - 1\n    \n    while start < end:\n        mid = (start + end) // 2\n        \n        if arr[mid] < elem:\n            start = mid + 1\n        else:\n            end = mid \n            \n    arr.insert(end, elem) \n    return arr", "task_id": 747}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the closest number to a given number within a given array.\n\"\"\"\n\ndef find_closest(arr, target_num):\n", "finetuning_completion": " \n    l = 0\r\n    r = len(arr) - 1\n    closest = arr[0] \r\n    diff = abs(closest - target_num) \r\n  \r\n    while l <= r: \r\n        mid = l + (r - l) // 2; \r\n        if abs(arr[mid] - target_num) < diff: \r\n            diff = abs(arr[mid] - target_num) \r\n            closest = arr[mid] \r\n  \r\n        if arr[mid] < target_num : \r\n            l = mid + 1\r\n        else: \r\n            r = mid - 1\r\n    return closest\r\n\r\narr = [2, 4, 6, 8] \r\ntarget_num = 5\r\nclosest_num = find_closest(arr, target_num) \r\nprint(\"Closest number to\", target_num, \"is\", closest_num)", "task_id": 753}
{"finetuning_prompt": "\"\"\"\nOptimize the following code so the output should be divided by 5 in the first function and 6 in second function and then sum of both outputs should be returned.\n\"\"\"\n\ndef first_fn(num):\n", "finetuning_completion": " \n    a = num * 2\n    b = a / 5\n    return b\n\ndef second_fn(num):\n    c = num * 3\n    d = c / 6\n    return d\n\nnum = 5", "task_id": 754}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the smallest element and its position in an array.\n\"\"\"\n\ndef min_array_elem_position(arr):\n", "finetuning_completion": "\n    min_val = arr[0] \n    min_index = 0\n      \n    for i in range(1, len(arr)): \n        if arr[i] < min_val: \n            min_val = arr[i] \n            min_index = i\n              \n    return min_index, min_val\n\narr = [4,3,1,6,8,9,10]\nmin_index, min_val = min_array_elem_position(arr) \nprint(\"The smallest element is\", min_val, \" and its position is\", min_index)", "task_id": 755}
{"finetuning_prompt": "\"\"\"\nCreate a code to delete duplicate characters from a string.\n\"\"\"\n\ndef removeDuplicates(str1):\n", "finetuning_completion": " \r\n  char_set = [] \r\n  new_str = '' \r\n  for char in str1: \r\n    if char not in char_set: \r\n      char_set.append(char) \r\n      new_str = new_str + char \r\n  return new_str", "task_id": 761}
{"finetuning_prompt": "\"\"\"\nGenerate a code using the given algorithm to search the number in an array.\n\"\"\"\n\ndef search_number(lst, num):\n", "finetuning_completion": " \n    if num in lst: \n        return True \n      \n    return False\n\n# Main function  \nlst = [2, 3, 4, 7, 11, 12]\nnumber = 11\nif (search_number(lst, number)): \n    print(\"Number is present\") \nelse: \n    print(\"Number is absent\")", "task_id": 764}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the first continuous subarray from a given list that has a given sum.\n\"\"\"\n\ndef subarray_sum(lst, s):\n", "finetuning_completion": " \r\n    sub_arr = [] \r\n    start = 0\r\n    end = 0\r\n    while start < len(lst): \r\n        sub_arr_sum = 0\r\n        end = start \r\n        while sub_arr_sum < s and end < len(lst): \r\n            sub_arr_sum += lst[end] \r\n            end += 1\r\n        if sub_arr_sum == s: \r\n            sub_arr = lst[start:end] \r\n            break\r\n        start += 1\r\n    return sub_arr \r\n\r\nprint(subarray_sum([1, 2, 3, 4, 5], 9)) # [2, 3, 4]", "task_id": 772}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the repeating elements in a given array using the hashing technique.\n\"\"\"\n\ndef repeating_elements(arr):\n", "finetuning_completion": " \n  count_hash = {}\n  for i in arr:\n    if i not in count_hash.keys():\n      count_hash[i] = 1\n    else:\n      count_hash[i] += 1\n  duplicate_elements = []\n  for i in count_hash:\n    if(count_hash[i] > 1):\n      duplicate_elements.append(i)\n  return duplicate_elements", "task_id": 780}
{"finetuning_prompt": "\"\"\"\nSort the given array in O(n*log n) time\n\"\"\"\n\ndef QuickSort(arr):\n", "finetuning_completion": " \r\n\tif len(arr) <= 1: \r\n\t\treturn arr \r\n\tpivot = arr[len(arr) // 2] \r\n\tleft = [x for x in arr if x < pivot] \r\n\tmiddle = [x for x in arr if x == pivot] \r\n\tright = [x for x in arr if x > pivot] \r\n\treturn QuickSort(left) + middle + QuickSort(right)", "task_id": 781}
{"finetuning_prompt": "\"\"\"\nGenerate a function to merge two sorted arrays.\n\"\"\"\n\ndef merge(arr1, arr2, m, n):\n", "finetuning_completion": " \r\n\tarr3 = [None] * (m+n) \r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile i < m and j < n: \r\n\t\tif arr1[i] < arr2[j]: \r\n\t\t\tarr3[k] = arr1[i] \r\n\t\t\tk = k + 1\r\n\t\t\ti = i + 1\r\n\t\telse: \r\n\t\t\tarr3[k] = arr2[j] \r\n\t\t\tk = k + 1\r\n\t\t\tj = j + 1\r\n\twhile i < m: \r\n\t\tarr3[k] = arr1[i]; \r\n\t\tk = k + 1\r\n\t\ti = i + 1\r\n\twhile j < n: \r\n\t\tarr3[k] = arr2[j]; \r\n\t\tk = k + 1\r\n\t\tj = j + 1\r\n\treturn arr3", "task_id": 782}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find an element in the given array.\n\"\"\"\n\ndef array_Search(list1, elem):\n", "finetuning_completion": " \r\n    for i in range(len(list1)): \r\n        if list1[i] == elem: \r\n            return i \r\n      \r\n    return -1", "task_id": 801}
{"finetuning_prompt": "\"\"\"\nWrite a function that checks if two strings are anagrams of each other.\n\"\"\"\n\ndef is_anagram(string1, string2):\n", "finetuning_completion": " \n    # sort the strings \n    sorted_string1 = sorted(string1) \n    sorted_string2 = sorted(string2) \n  \n    # compare the sorted strings \n    if sorted_string1 == sorted_string2: \n        return True\n    return False", "task_id": 807}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to output the longest common substring between two strings.\n\"\"\"\n\ndef longest_common_substring(str1, str2):\n", "finetuning_completion": " \n\n    str1_length = len(str1) \n    str2_length = len(str2) \n    result = 0 \n  \n    # T[i][j] stores the length of the common substring\r\n    # between str1[0...i-1] and str2[0...j-1] \r\n    T= [[0 for j in range(str2_length+1)] for i in range(str1_length+1)] \n  \n    for i in range(1, str1_length+1): \n        for j in range(1, str2_length+1): \n            if (str1[i-1] == str2[j-1]): \n                T[i][j] = T[i-1][j-1] + 1\n                result = max(result, T[i][j])\r\n            else: \n                T[i][j] = 0\n  \n    return result", "task_id": 817}
{"finetuning_prompt": "\"\"\"\nGenerate a code to sort an array of integers using selection sort.\n\"\"\"\n\ndef selection_sort(arr):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr", "task_id": 819}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to reverse a string without using any inbuilt function.\n\"\"\"\n\ndef reverse_string(s):\n", "finetuning_completion": "\r\n    str=\"\"\r\n    for i in s:\r\n        str=i+str \r\n    return str", "task_id": 829}
{"finetuning_prompt": "\"\"\"\nGenerate a program in Python to print out the nth Fibonacci number.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \r\n    if n <= 0: \r\n        return 0\r\n    elif n == 1: \r\n        return 1\r\n    else:  \r\n        return Fibonacci(n-1) + Fibonacci(n-2)", "task_id": 831}
{"finetuning_prompt": "\"\"\"\nGenerate a function to sort a dictionary of key-value pairs by value.\n\"\"\"\n\ndef sort_by_value(dictionary):\n", "finetuning_completion": " \n    sorted_dictionary = {} \n    sorted_keys = sorted(dictionary, key = dictionary.get, reverse = False) \n    for key in sorted_keys: \n        sorted_dictionary[key] = dictionary[key] \n    return sorted_dictionary", "task_id": 836}
{"finetuning_prompt": "\"\"\"\nCreate a program to parse a given json string and extract the required key-value pairs.\n\"\"\"\n\nimport json\n\ndef parse_json(input_string):\n", "finetuning_completion": "\n    parsed = json.loads(input_string)\n    \n    result = {}\n    for key in parsed.keys():\n        result[key] = parsed[key]\n    \n    return result", "task_id": 842}
{"finetuning_prompt": "\"\"\"\nGenerate a list of prime numbers from 0 to N.\n\"\"\"\n\n# Function to generate a list of prime numbers from 0 to N\r\ndef generate_prime_numbers(n):\n", "finetuning_completion": "\r\n    # Create an empty list  \r\n    prime_list = [True for i in range(n + 1)] \r\n    p = 2\r\n    while p * p <= n: \r\n          \r\n        # If prime[p] is not changed, then it is a prime \r\n        if (prime_list[p] == True): \r\n        \r\n            # Update all multiples of p \r\n            for i in range(p * 2, n + 1, p): \r\n                prime_list[i] = False\r\n        p += 1 \r\n\r\n    # Return the generated list  \r\n    prime_numbers = [p for p in range(2, n) if prime_list[p]]  \r\n    return prime_numbers", "task_id": 844}
{"finetuning_prompt": "\"\"\"\nWrite a code to remove all the characters in a string other than alphabets (a-z).\n\"\"\"\n\nimport re\r\n\r\n# Function to remove special characters \r\ndef remove_special_chars(test_str):\n", "finetuning_completion": "\r\n\r\n  # Remove all special characters  \r\n  res = re.sub('[^A-Za-z]+', '', test_str)\r\n  \r\n  # Print result\r\n  return res", "task_id": 845}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to calculate the Fibonacci series up to nth number.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \r\n    a = 0\r\n    b = 1\r\n    if n < 0: \r\n        print(\"Incorrect input\") \r\n    elif n == 0: \r\n        return a \r\n    elif n == 1: \r\n        return b \r\n    else: \r\n        for i in range(2,n): \r\n            c = a + b \r\n            a = b \r\n            b = c \r\n        return b", "task_id": 848}
{"finetuning_prompt": "\"\"\"\nWrite a function to decompose a given integer into prime factors.\n\"\"\"\n\ndef prime_Factorize(n):\n", "finetuning_completion": " \r\n    # if factorize number is 1, return \r\n    if (n == 1): \r\n        print(\"{ 1 }\") \r\n        return\r\n  \r\n    # Print the number of 2s that divide n \r\n    while (n % 2 == 0): \r\n        print(\"{ 2 }\") \r\n        n = n / 2\r\n          \r\n    # n must be odd after this loop, so print the odd number and continue with the next iteration\r\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \r\n        # While i divides n, print i and divide n \r\n        while (n % i == 0): \r\n            print(\"{ \" + str(i) + \" }\") \r\n            n = n / i \r\n              \r\n    # Condition if n is a prime \r\n    if (n > 2): \r\n        print(\"{ \" + str(n) + \" }\")", "task_id": 856}
{"finetuning_prompt": "\"\"\"\nGenerate a program that can list out all the unique letters in a given string.\n\"\"\"\n\ndef unique_chars(s):\n", "finetuning_completion": "\n    unique_chars = []\r\n    for c in s:\r\n        if c not in unique_chars:\r\n            unique_chars.append(c)\r\n    return unique_chars\r\n\r\nprint(unique_chars(\"Hello World\")) # [\"H\", \"e\", \"l\", \"o\", \" \", \"W\", \"r\", \"d\"]", "task_id": 9278}
{"finetuning_prompt": "\"\"\"\nCreate a code to print the maximum length of a common subsequence from two strings.\n\"\"\"\n\ndef get_lcs_len(s1, s2):\n", "finetuning_completion": "\r\n    n1 = len(s1)\r\n    n2 = len(s2)    \r\n    dp = [[0 for i in range(n2 + 1)] for j in range(n1 + 1)]    \r\n    for i in range(1, n1 + 1):        \r\n        for j in range(1, n2 + 1):            \r\n            if (s1[i - 1] == s2[j - 1]):                \r\n                dp[i][j] = 1 + dp[i - 1][j - 1]            \r\n            else:                \r\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])    \r\n    return dp[n1][n2]\r\n    \r\ns1 = \"The Quick Brown Fox\"\r\ns2 = \"Day Brown\"\r\nlcslen = get_lcs_len(s1, s2)\r\nprint(lcslen) # 5", "task_id": 9279}
{"finetuning_prompt": "\"\"\"\nConvert a list of lists into a dictionary where the keys come from the first list and the values come from the others.\n\"\"\"\n\ndef list_to_dict(given_list):\n", "finetuning_completion": " \r\n    res = {sub[0]:sub[1:] for sub in given_list[1:]} \r\n    return res", "task_id": 9282}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes an array as a parameter and returns a list of all possible pairings.\n\"\"\"\n\ndef get_all_pairings(new_list):\n", "finetuning_completion": " \r\n    res = []\r\n    for i in range(len(new_list)): \r\n        for j in range(i+1, len(new_list)): \r\n            res.append([new_list[i], new_list[j]])\r\n    return res", "task_id": 9283}
{"finetuning_prompt": "\"\"\"\nGenerate a program in Python that detects whether the entered data is a valid IP address or not.\n\"\"\"\n\nimport re \r\n  \r\n# Function to validate an IP address \r\ndef is_valid_ip(ip):\n", "finetuning_completion": " \r\n    regex = \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\r\n    if(re.search(regex, ip)): \r\n        return True  \r\n    else: \r\n        return False", "task_id": 9289}
{"finetuning_prompt": "\"\"\"\nUsing pandas, write a program to extract the weekday from a given date.\n\"\"\"\n\nimport pandas as pd\r\ndef get_weekday(date):\n", "finetuning_completion": "\r\n date_value = pd.to_datetime(date)\r\n return date_value.day_name()", "task_id": 9291}
{"finetuning_prompt": "\"\"\"\nCreate a function to take two numbers as parameters and print their respective exponential values.\n\"\"\"\n\ndef print_exponential(x, y):\n", "finetuning_completion": "\n    print(\"x exponential y is\", x**y)", "task_id": 9296}
{"finetuning_prompt": "\"\"\"\nGenerate code to sort an array in ascending order not using built-in sorting functions.\n\"\"\"\n\ndef sort_array(array):\n", "finetuning_completion": "\n  result = []\n  while array:\n    smallest = array[0]\n    for i in range(len(array)):\n      if array[i] < smallest:\n        smallest = array[i]\n    result.append(smallest)\n    array.remove(smallest)\n  return result", "task_id": 9298}
{"finetuning_prompt": "\"\"\"\nPrint the longest ascending sequence in a given list.\n\"\"\"\n\ndef long_ascending_sequence(l):\n", "finetuning_completion": "\n  maxSeq, curSeq = [], []\n  \n  for item in l:\n    if not curSeq or item > curSeq[-1]:\n      curSeq.append(item)\n      if len(curSeq) > len(maxSeq):\n        maxSeq = list(curSeq)\n    else:\n      curSeq.clear()\n      curSeq.append(item)\n        \n  return maxSeq\n  \nlist1 = [2, 10, 3, 11, 4, 5, 8, 6, 7]\nprint(long_ascending_sequence(list1)) # [2, 3, 4, 5, 6, 7]", "task_id": 9302}
{"finetuning_prompt": "\"\"\"\nWrite a function to defend a text-based game against cheaters by detecting if they use suspiciously similar words.\n\"\"\"\n\ndef similar_words(sentence1, sentence2):\n", "finetuning_completion": " \r\n    similar = 0 \r\n    words1 = sentence1.split(\" \") \r\n    words2 = sentence2.split(\" \") \r\n    \r\n    for word1 in words1: \r\n        for word2 in words2:\r\n            if word1.lower() == word2.lower(): \r\n                similar += 1\r\n                \r\n    if similar > len(words1)*0.8: \r\n        return True\r\n    else: \r\n        return False", "task_id": 9303}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to detect if a given matrix is invertible.\n\"\"\"\n\ndef is_invertible(A):\n", "finetuning_completion": " \r\n    if len(A) != len(A[0]): \r\n        return False \r\n  \r\n    if (Determinant(A) == 0): \r\n        return False; \r\n    else: \r\n        return True; \n\r\n\r\ndef Determinant(A): \r\n    if len(A) == 1: \r\n        return A[0][0] \r\n    if len(A) == 2: \r\n        return A[0][0]*A[1][1] - A[0][1]*A[1][0] \r\n    det = 0\r\n    for j in range(len(A)): \r\n        det += (-1) ** j * A[0][j] * Determinant(Submatrix(A, 0, j))\r\n    return det \r\n  \r\ndef Submatrix(A, i, j): \r\n    return [row[ : j] + row[j + 1: ] for row in (A[: i] + A[i + 1: ])]", "task_id": 9304}
{"finetuning_prompt": "\"\"\"\nDevelop a program to detect if two given strings are rotations of each other.\n\"\"\"\n\ndef is_rotation(word1, word2):\n", "finetuning_completion": " \r\n    if len(word1) != len(word2): \r\n        return False \r\n    double_word = word1 + word1 \r\n    if word2 in double_word: \r\n        return True \r\n    return False", "task_id": 9305}
{"finetuning_prompt": "\"\"\"\nProduce a script to sort a stack with the help of a single stack.\n\"\"\"\n\ndef sort_stack(stack1):\n", "finetuning_completion": "\r\n    temp_stack = []\r\n    while len(stack1) > 0:\r\n        temp = stack1.pop()\r\n        while len(temp_stack) > 0 and temp_stack[-1] > temp:\r\n            stack1.append(temp_stack.pop())\r\n        temp_stack.append(temp)\r\n    while len(temp_stack) > 0:\r\n        stack1.append(temp_stack.pop())\r\n    return stack1", "task_id": 9311}
{"finetuning_prompt": "\"\"\"\nModify a function to print the characters which are present in both the given strings.\n\"\"\"\n\ndef common_characters(string1, string2):\n", "finetuning_completion": "\n    result = []\r\n    for c1 in string1:\r\n        for c2 in string2:\r\n            if c1 == c2 and c1 not in result:\r\n                result.append(c1)\r\n    return result", "task_id": 9312}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to find the largest common subarray in two given arrays.\n\"\"\"\n\ndef find_common_subarray(arr1,arr2):\n", "finetuning_completion": " \r\n    # Initialize result \r\n    max_len = 0\r\n  \r\n    # Initializing the lookup table \r\n    # with 0 value initially. \r\n    lookup = [[0 for i in range(len(arr2)+1)] for i in range(len(arr1)+1)]   \r\n  \r\n    # updating the lookup table \r\n    for i in range(1,len(arr1)+1): \r\n        for j in range(1,len(arr2)+1): \r\n            if arr1[i-1] == arr2[j-1]: \r\n                lookup[i][j] = lookup[i - 1][j - 1] + 1\r\n  \r\n            # updating the maximum length  \r\n            if lookup[i][j] > max_len: \r\n                max_len = lookup[i][j] \r\n  \r\n    return max_len", "task_id": 9317}
{"finetuning_prompt": "\"\"\"\nCreate a program to search for a string within a given container.\n\"\"\"\n\ndef search_string(array, string):\n", "finetuning_completion": " \r\n    if string in array: \r\n        return True\r\n    else: \r\n        return False", "task_id": 9334}
{"finetuning_prompt": "\"\"\"\nConstruct a function in python that takes a string or list of words and returns the length of each word in the string or list.\n\"\"\"\n\ndef word_lengths(s):\n", "finetuning_completion": " \r\n    len_list = []\r\n    try:\r\n        for words in s.split():\r\n            len_list.append(len(words))  \r\n    except AttributeError:\r\n        for words in s:\r\n            len_list.append(len(words))\r\n    return len_list", "task_id": 9336}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if a given list and dictionary are equal.\n\"\"\"\n\ndef check_equality(list1, dict1):\n", "finetuning_completion": "\n    if len(list1) != len(dict1):\n        return False\r\n    for item in list1:\n        if dict1.get(item):\n            pass\n        else:\n            return False\n    return True", "task_id": 9342}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to identify the greatest common denominator of multiple numbers.\n\"\"\"\n\ndef gcd_multiple(*numbers):\n", "finetuning_completion": " \n  \n    gcd = numbers[0] \n  \n    for n in numbers[1 :]: \n        gcd = gcd_two(gcd, n) \n  \n    return gcd \n  \ndef gcd_two(m, n): \n    while(n): \n        m, n = n, m % n \n  \n    return m", "task_id": 9349}
{"finetuning_prompt": "\"\"\"\nWrite a function to assign a transaction score to each transaction in a set.\n\"\"\"\n\ndef score_transactions(transactions):\n", "finetuning_completion": "\r\n    scores={}\r\n    for transaction in transactions : \r\n        if transaction['sender'] not in scores :\r\n            scores[transaction['sender']]=0\r\n        scores[transaction['sender']] += transaction['amount']\r\n    return scores", "task_id": 9350}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total area of multiple circles.\n\"\"\"\n\ndef calc_total_area(circles):\n", "finetuning_completion": " \r\n    total_area = 0\r\n    for c in circles:  \r\n        area = 3.14*(c[0]**2) \r\n        total_area += area  \r\n    return total_area", "task_id": 9354}
{"finetuning_prompt": "\"\"\"\nGenerate a function to group words in a list according to the length of the word.\n\"\"\"\n\ndef group_words(words):\n", "finetuning_completion": " \r\n    grouped_words = {}\r\n    for word in words:\r\n        if len(word) not in grouped_words:\r\n            grouped_words[len(word)] = []\r\n        grouped_words[len(word)].append(word)\r\n    return grouped_words", "task_id": 9358}
{"finetuning_prompt": "\"\"\"\nWrite a function to parse a coordinate string and return a 2D coordinate tuple.\n\"\"\"\n\ndef parse_coords(coords_string):\n", "finetuning_completion": "\r\n  lat, lon = coords_string.split(',')\r\n  return (float(lat), float(lon))", "task_id": 9369}
{"finetuning_prompt": "\"\"\"\nCompute the size of a set X intersect set Y.\n\"\"\"\n\ndef set_intersection_size(X, Y):\n", "finetuning_completion": "\r\n    x_set = set(X)\r\n    y_set = set(Y)\r\n    return len(x_set.intersection(y_set))", "task_id": 9372}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that takes a list of words and generates an alphabetically ordered list with no duplicates.\n\"\"\"\n\ndef alphabetize(words):\n", "finetuning_completion": "\r\n  sorted_words = list(dict.fromkeys(words)) \r\n  sorted_words.sort() \r\n  return (sorted_words)", "task_id": 9376}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify an input string as either capital or lower case.\n\"\"\"\n\ndef classify_case(string):\n", "finetuning_completion": " \n    lower_chars = 0\r\n    upper_chars = 0\r\n    for char in string:\r\n        if(char.islower()): \r\n            lower_chars += 1\r\n        else: \r\n            upper_chars += 1\r\n\r\n    if(lower_chars == 0 and upper_chars > 0): \r\n        return \"all_upper\"\r\n    elif(lower_chars > 0 and upper_chars == 0): \r\n        return \"all_lower\"\r\n    else: \r\n        return \"mixed_case\"", "task_id": 9383}
{"finetuning_prompt": "\"\"\"\nWrite a function to populate an empty 2D array with the given numbers, one in each cell.\n\"\"\"\n\ndef populate_array(arr, fill_arr):\n", "finetuning_completion": "\r\n  index=0\r\n  r = len(arr) \r\n  c = len(arr[0]) \r\n  for i in range(0, r):\n    for j in range(0, c):\n      if (index < len(fill_arr)):\n        arr[i][j] = fill_arr[index]\n        index = index + 1\n  return arr", "task_id": 9396}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a new string with all the consonants deleted from a given string?\n\"\"\"\n\ndef delete_consonants(string):\n", "finetuning_completion": "\r\n  vowels = 'aeiou'\r\n  mod_str =\"\"\r\n  for char in string:\r\n    if char.lower() in vowels:\r\n      mod_str += char\r\n  return mod_str", "task_id": 9397}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the sum of a series of numbers in the same row and column of a given matrix.\n\"\"\"\n\ndef matrix_sum_row_col(matrix):\n", "finetuning_completion": " \r\n    row_sum_list = [] \r\n    col_sum_list = [] \r\n      \r\n    # Calculator row sums \r\n    for row in matrix: \r\n        row_sum_list.append(sum(row)) \r\n          \r\n    # Calculate column sums \r\n    for i in range(len(matrix[0])): \r\n        col_sum = 0\r\n        for row in matrix: \r\n            col_sum += row[i] \r\n        col_sum_list.append(col_sum) \r\n          \r\n    # Returns the row and column sums \r\n    return row_sum_list, col_sum_list", "task_id": 9408}
{"finetuning_prompt": "\"\"\"\nGenerate an altered copy of the given string by capitalizing the first letter and adding \u2018#\u2019 at the end.\n\"\"\"\n\ndef altered_copy(string):\n", "finetuning_completion": " \r\n  altered_copy = string.capitalize() + '#' \r\n  return (altered_copy)", "task_id": 9411}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if  numbers and words can be found in a nested list.\n\"\"\"\n\ndef checkMixedList(nested_list):\n", "finetuning_completion": " \r\n\tfor ele in nested_list: \r\n\t\tif type(ele) == int: \r\n\t\t\treturn True\r\n\t\telif type(ele) == list: \r\n\t\t\tfor se in ele: \r\n\t\t\t\tif type(se) == int or type(se) == str: \r\n\t\t\t\t\treturn True\r\n\treturn False", "task_id": 9415}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes an integer input and prints its prime factorization.\n\"\"\"\n\ndef factorize(n):\n", "finetuning_completion": " \r\n  prime_factors=[]\r\n  i=2\r\n  while i*i<=n:\r\n    if n%i==0:\r\n      prime_factors.append(i)\r\n      n = n // i\r\n    else:\r\n      i+=1\r\n  if n>1:\r\n    prime_factors.append(n)\r\n  print (prime_factors)", "task_id": 9418}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a nested dictionary from a two-dimensional array.\n\"\"\"\n\ndef nest_dict(arr):\n", "finetuning_completion": "\r\n  dict1 = {}\r\n  for i in range(len(arr)):\r\n    for j in range(len(arr[i])):\r\n      k = i * len(arr[i]) + j\r\n      if k not in dict1.keys():\r\n        dict1[k] = {}\r\n      dict1[k] = arr[i][j]\r\n  \r\n  return dict1", "task_id": 9422}
{"finetuning_prompt": "\"\"\"\nTurn this list of integers into a comma separated string.\n\"\"\"\n\ndef list_to_string(list1):\n", "finetuning_completion": " \r\n    return ','.join([str(i) for i in list1])", "task_id": 9424}
{"finetuning_prompt": "\"\"\"\nConvert this list of dictionaries into a CSV string.\n\"\"\"\n\ndef dict_to_csv(list1):\n", "finetuning_completion": "\r\n  if not list1:\r\n    return \"\"\r\n  keys = list1[0].keys()\r\n  csv_str = \",\".join(keys) + \"\\n\"\r\n  for dict1 in list1:\r\n    csv_str += \",\".join([str(dict1[key]) for key in keys]) + \"\\n\"\r\n  return csv_str", "task_id": 9427}
{"finetuning_prompt": "\"\"\"\nGenerate a substitution cipher from a secret key.\n\"\"\"\n\nimport string\n\ndef substitution_cipher(key):\n", "finetuning_completion": "\n    alphabet = string.ascii_lowercase\n    cipher_table = {}\n    for i in range(len(alphabet)):\n        cipher_table[alphabet[i]] = key[i]\n    return cipher_table", "task_id": 9429}
{"finetuning_prompt": "\"\"\"\nWrite a python code to solve the subset sum problem with a given list of numbers and a given sum.\n\"\"\"\n\ndef findPartitions(list_num,sum):\n", "finetuning_completion": " \r\n    if sum == 0: \r\n        return True\r\n    if len(list_num) == 0 and sum != 0: \r\n        return False\r\n    if list_num[-1] > sum: \r\n        return findPartitions(list_num[:-1],sum) \n  \r\n    return findPartitions(list_num[:-1],sum) or findPartitions(list_num[:-1],sum-list_num[-1]) \r\n  \r\nlist_num = [3, 34, 4, 12, 5, 2] \r\nsum = 9\r\nif (findPartitions(list_num, sum)): \r\n    print(\"The given list of numbers contain a subset which sums up to {}\".format(sum)) \r\nelse: \r\n    print(\"The given list of numbers cannot sum up to {}\".format(sum))", "task_id": 9434}
{"finetuning_prompt": "\"\"\"\nWrite a function to take a list of strings and return the most frequent string.\n\"\"\"\n\ndef most_frequent_string(strings):\n", "finetuning_completion": "\r\n    current_string = ''\r\n    max_count = 0\r\n    for string in strings:\r\n        count = strings.count(string)\r\n        if count > max_count:\r\n            max_count = count\r\n            current_string = string\r\n    return current_string", "task_id": 9440}
{"finetuning_prompt": "\"\"\"\nGenerate random numbers using Floyd\u2019s random number generator.\n\"\"\"\n\ndef floyds_random(x):\n", "finetuning_completion": "\n    x = (x*23 + 12) % 97;\n    return x;\n\nrnum = floyds_random(11); \nprint(rnum)", "task_id": 9448}
{"finetuning_prompt": "\"\"\"\nFind the maximum size of the subarray with at least k even numbers.\n\"\"\"\n\ndef max_even_subarray(arr, k):\n", "finetuning_completion": " \r\n  \r\n    result = 0\r\n    num_of_even = 0\r\n    left = 0\r\n  \r\n    for right in range(len(arr)): \r\n        if arr[right] % 2 == 0:  \r\n            num_of_even += 1\r\n  \r\n        while num_of_even >= k:  \r\n            if arr[left] % 2 == 0: \r\n                num_of_even -= 1\r\n  \r\n            result = max(result, right - left + 1) \r\n            left += 1\r\n  \r\n    return result", "task_id": 9450}
{"finetuning_prompt": "\"\"\"\nWrite a hashing function to convert a given text string into its integer equivalent?\n\"\"\"\n\ndef hash_text_to_int(txt):\n", "finetuning_completion": "\n    # initialize result \n    res = 0\n    for i in txt: \n        # convert character to uppercase \n        i = i.upper() \n  \n        # subtract 'A' to make valid ascii value \n        ord_val = ord(i) - ord('A') + 1\n        res = (res * 26) + ord_val\n  \n    return res", "task_id": 9455}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine the type of variable being passed as an argument.\n\"\"\"\n\ndef variable_type(variable):\n", "finetuning_completion": "\n    \n    type_variable = type(variable)\n    \n    if type_variable is int:\n        return 'Integer'\n    elif type_variable is float:\n        return 'Floating Point'\n    elif type_variable is str:\n        return 'String'\n    elif type_variable is list:\n        return 'List'\n    elif type_variable is dict:\n        return 'Dictionary'\n    elif type_variable is tuple:\n        return 'Tuple'\n    elif type_variable is set:\n        return 'Set'\n    else:\n        return 'Other'", "task_id": 9458}
{"finetuning_prompt": "\"\"\"\nGenerate a program to reverse the words in a given sentence without using any library function.\n\"\"\"\n\ndef reverse_words(sentence):\n", "finetuning_completion": "\n    words = sentence.split(\" \")\n    reverse_sentence = []\n    for word in words:\n        reverse_word = word[::-1]\n        reverse_sentence.append(reverse_word)\n    return \" \".join(reverse_sentence)\n\nprint(reverse_words(\"my name is john\"))", "task_id": 9460}
{"finetuning_prompt": "\"\"\"\nGiven an array, transform the array with a ReLU activation function.\n\"\"\"\n\ndef apply_relu(arr):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in arr: \r\n        if i > 0: \r\n            result.append(i) \r\n        else: \r\n            result.append(0) \r\n    return result \n  \narr = [-4, 5, -2, 0, 6, 7] \r\n  \r\n\r\nresult = apply_relu(arr) \r\nprint (result)", "task_id": 9464}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to detect multiples of seven in an array of integers.\n\"\"\"\n\ndef multiple_of_seven(arr):\n", "finetuning_completion": " \r\n    result = [] \r\n  \r\n    for i in arr: \r\n        if (i % 7) == 0: \r\n            result.append(i) \r\n    return result \r\n  \r\n\r\narr = [14, 28, 42, 31, 49, 50] \r\n  \r\nresult = multiple_of_seven(arr) \r\nprint (result)", "task_id": 9465}
{"finetuning_prompt": "\"\"\"\nOptimize the string manipulation algorithm with native python methods.\n\"\"\"\n\ndef reverseWords(str):\n", "finetuning_completion": " \r\n    return ' '.join(word[::-1] for word in str.split(' '))", "task_id": 9466}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the tip based on a given percentage.\n\"\"\"\n\ndef calculate_tip(bill,tip_percentage):\n", "finetuning_completion": " \r\n    return bill*tip_percentage", "task_id": 9469}
{"finetuning_prompt": "\"\"\"\nGenerate a function to filter out consecutive duplicates from a list.\n\"\"\"\n\ndef filter_consecutive_duplicates( mylist ):\n", "finetuning_completion": " \r\n\t\r\n\tnew_list = [] \r\n\tprevious = None\r\n\t\r\n\t# Iterate over each element in the given list \t\r\n\tfor item in mylist: \r\n\t\t\r\n\t\t# If duplicates check is passed \r\n\t\tif previous != item: \r\n\t\t\t\r\n\t\t\t# Add the element to the new list \r\n\t\t\tnew_list.append(item) \r\n\t\t\t\r\n\t\t\t# Update the previous element \r\n\t\t\tprevious = item \r\n\t\r\n\t# Return the new list with duplicates removed \r\n\treturn new_list", "task_id": 9474}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to take a list of strings and make a new list containing all strings of length 5 characters or more.\n\"\"\"\n\ndef greater_Than_5(str_lst) :\n", "finetuning_completion": " \r\n    str_lst_copy = str_lst.copy() \r\n\r\n    for i in str_lst_copy :  # iterate over copy list\r\n        if len(i) < 5 :   \r\n            str_lst.remove(i)   # remove strings less than 5 characters \r\n\r\n    return str_lst", "task_id": 9483}
{"finetuning_prompt": "\"\"\"\nWrite code to detect palindromes in a given string.\n\"\"\"\n\ndef detect_palindrome(string):\n", "finetuning_completion": " \r\n  i = 0\r\n  j = len(string) - 1\r\n \r\n  while (i < j): \r\n    if string[i] != string[j]: \r\n      return False \r\n    i += 1\r\n    j -= 1\r\n  \r\n  return True", "task_id": 9490}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes a number as an input and returns 'true' if the number is prime and 'false' if it is not.\n\"\"\"\n\ndef is_prime(x):\n", "finetuning_completion": " \r\n    if (x<=1): \r\n        return False\r\n    for i in range(2, x//2 + 1): \r\n        if (x % i) == 0: \r\n            return False\r\n    return True", "task_id": 9495}
{"finetuning_prompt": "\"\"\"\nCreate a program that finds the most frequent word in a given text and prints the word and its frequency.\n\"\"\"\n\ndef most_frequent_word(text):\n", "finetuning_completion": " \r\n    words = text.split(' ') \r\n    dict = {} \r\n  \r\n    for word in words: \r\n        if word in dict: \r\n            dict[word] += 1\r\n        else: \r\n            dict[word] = 1\r\n  \r\n    max = 0\r\n    max_word = '' \r\n    for key, value in dict.items(): \r\n        if value > max: \r\n            max = value \r\n            max_word = key \r\n  \r\n    print(max_word, max)", "task_id": 9496}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate the closest possible match to the given string in a text\n\"\"\"\n\ndef findClosest(text, string):\n", "finetuning_completion": "\r\n  strings = string.split(\" \")\r\n  words = len(strings)\r\n  finalStr = \"\"\r\n  closest = len(text) + 1\r\n  for x in range(len(text)):\r\n    sub = text[x:x+words]\r\n    if sub in string:\r\n      if abs(x - len(finalStr)) < closest:\r\n        finalStr = sub\r\n        closest = abs(x - len(finalStr))\r\n  return finalStr", "task_id": 9502}
{"finetuning_prompt": "\"\"\"\nGenerate code for a function that takes in a two-dimensional array as an argument and prints the total number of elements.\n\"\"\"\n\ndef arrayCount(arr):\n", "finetuning_completion": " \r\n    count = 0 \r\n    for i in range(len(arr)): \r\n        count += len(arr[i]) \r\n    return count", "task_id": 9505}
{"finetuning_prompt": "\"\"\"\nGenerate a code to extend a given array of size n with an extra zero at the end.\n\"\"\"\n\ndef extend_array(arr):\n", "finetuning_completion": " \n    # new_arr = arr \r\n    arr.append(0) \r\n    return arr", "task_id": 9507}
{"finetuning_prompt": "\"\"\"\nWrite a function to recursively find the largest substring of a given string that is a palindrome.\n\"\"\"\n\ndef longestPalSubstr(string):\n", "finetuning_completion": " \n    maxLength = 1\n    start = 0\n    length = len(string) \n    low = 0\n    high = 0\n    \n    for i in range(1, length): \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and string[low] == string[high]: \n            if high - low + 1 > maxLength: \n                start = low \n                maxLength = high - low + 1\n            low -= 1\n            high += 1\n    return string[start:start + maxLength]", "task_id": 9509}
{"finetuning_prompt": "\"\"\"\nOptimize the following code to remove redundant and inefficient operations.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\n    if n < 0:\n      return \"factorial of negative number does not exist\"\n    else:\n      fact=1\n      while (n > 0):\n        fact *= n\n        n -= 1\n    return fact", "task_id": 9513}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the maximum sum of any contiguous sub-array of size k in an array of integers.\n\"\"\"\n\ndef max_sum_subarray(arr, k):\n", "finetuning_completion": "\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum += arr[i] - arr[i-k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": 9515}
{"finetuning_prompt": "\"\"\"\nModify the following code to print a sequence of numbers n times.\n\"\"\"\n\ndef print_sequence(n):\n", "finetuning_completion": "\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end='')\n        print('')", "task_id": 9516}
{"finetuning_prompt": "\"\"\"\nGenerate a spiral matrix of size m x n in a clockwise direction.\n\"\"\"\n\ndef generate_spiral(m, n):\n", "finetuning_completion": "\n    matrix = [[0 for j in range(n)] for i in range(m)]\n    top,bottom,left,right = 0, m-1, 0, n-1\n    direction = 0\n    count = 1\n    while (top <= bottom and left <= right): \n        if direction == 0:\n            for i in range(left, right+1):\n                matrix[top][i] = count\n                count += 1\n            top += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(top, bottom+1):\n                matrix[i][right] = count\n                count += 1\n            right -= 1\n            direction = 2\n        elif direction == 2:\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = count\n                count += 1\n            bottom -= 1\n            direction = 3\n        elif direction == 3:\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = count\n                count += 1\n            left += 1\n            direction = 0\n    return matrix", "task_id": 9517}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the maximum value of the array by minimization of function calls.\n\"\"\"\n\ndef max_minimize(arr):\n", "finetuning_completion": "\n    max_value = arr[0] \n    for i in range(1, len(arr)):\n        max_value = max(max_value, arr[i])\n    return max_value", "task_id": 9518}
{"finetuning_prompt": "\"\"\"\nGenerate an AI assistant to search for relevant books in a library.\n\"\"\"\n\ndef library_search(query, library):\n", "finetuning_completion": " \r\n    results = [] \r\n    query = query.strip().lower() # normalize the search query \r\n    for book in library: \r\n        if query in book.lower(): \r\n            results.append(book) \r\n    return results", "task_id": 9523}
{"finetuning_prompt": "\"\"\"\nEdit the following python script to remove duplicate elements from a given list.\n\"\"\"\n\ndef removeDuplicates(list):\n", "finetuning_completion": " \r\n    final_list = [] \r\n    for num in list: \r\n        if num not in final_list: \r\n            final_list.append(num) \r\n    return final_list\n\nlist = [1, 2, 3, 4, 4, 5]\nunique_list = removeDuplicates(list) \nprint(unique_list)  # [1, 2, 3, 4, 5]", "task_id": 9532}
{"finetuning_prompt": "\"\"\"\nWrite a regex expression to extract all the words that start with 'a' or 'A'.\n\"\"\"\n\nimport re\r\ndef extract_words(input_str):\n", "finetuning_completion": "\r\n    pattern = r\"\\b[Aa]\\w*\\b\"\r\n    return re.findall(pattern, input_str)", "task_id": 9536}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the total number of possible binary search trees from an array of n distinct elements.\n\"\"\"\n\ndef countTrees(n):\n", "finetuning_completion": " \n  \n    if n == 0 or n == 1 : \n        return 1\n  \n    ans = 0\n  \n    for i in range(1,n+1): \n        left = countTrees(i-1)  \n        right = countTrees(n-i) \n        ans = ans + (left * right) \n  \n    return ans", "task_id": 9550}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to calculate the number of islands from a given matrix of 0s and 1s.\n\"\"\"\n\ndef count_islands(arr):\n", "finetuning_completion": " \r\n    if arr is None: \r\n        return 0\r\n    row_num = len(arr) \r\n    col_num = len(arr[0]) \r\n    count = 0\r\n    for i in range(row_num): \r\n        for j in range(col_num): \r\n            if arr[i][j] == 1: \r\n                count+=1 \r\n                explore(arr, row_num, col_num, i, j) \r\n    return count\n\ndef explore(arr, row_num, col_num, row, col): \r\n    if arr[row][col] == 0: \r\n        return\r\n    arr[row][col] = 0\r\n    if row-1 >= 0: \r\n        explore(arr, row_num, col_num, row-1, col) \r\n    if row+1 < row_num: \r\n        explore(arr, row_num, col_num, row+1, col) \r\n    if col-1 >= 0: \r\n        explore(arr, row_num, col_num, row, col-1) \r\n    if col+1 < col_num: \r\n        explore(arr, row_num, col_num, row, col+1)", "task_id": 9553}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the number of different paths from the given source to destination.\n\"\"\"\n\ndef num_Paths(n,m):\n", "finetuning_completion": "  \n\tif (m == 1 or n == 1): \n\t\treturn 1\n\n\treturn num_Paths(n-1, m) + num_Paths(n, m-1)", "task_id": 9557}
{"finetuning_prompt": "\"\"\"\nCreate a function to truncate the given string by removing all vowels.\n\"\"\"\n\ndef truncate_vowels(str):\n", "finetuning_completion": "\r\n    return \"\".join(c for c in str if c.lower() not in \"aeiou\")", "task_id": 9576}
{"finetuning_prompt": "\"\"\"\nPerform code optimization to decrease the code size of the below given program.\n\"\"\"\n\ndef fun(x):\n", "finetuning_completion": "\n    y = 0\n    if (x == 0): \n        return 0\n    elif x == 1:\n        return 1\n    else:\n        for i in range(1,x):\n            y+= (i % 2) + 1\n        return y", "task_id": 9580}
{"finetuning_prompt": "\"\"\"\nProvide a python function to identify the differences between two datasets.\n\"\"\"\n\ndef compare_data_sets(d1, d2):\n", "finetuning_completion": " \n    d1_set = set(d1)\n    d2_set = set(d2)\n    diff1 = d1_set.difference(d2_set)\n    diff2 = d2_set.difference(d1_set)\n    return diff1, diff2", "task_id": 9587}
{"finetuning_prompt": "\"\"\"\nGenerate a number which is a prime greater than 50 using an optimizing method.\n\"\"\"\n\ndef generate_prime_number():\n", "finetuning_completion": "\n    n = 50\n    while True:\n        n += 1\n        for i in range(2, int(n**0.5)+1):\n            if n%i==0:\n                break\n        else:\n            return n", "task_id": 9589}
{"finetuning_prompt": "\"\"\"\nGenerate a list of all pronic numbers less than or equal to n.\n\"\"\"\n\ndef gen_pronic_nums(n):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in range(1, n+1):\r\n        if i*(i+1) <= n:\r\n            result.append(i*(i+1))\r\n    return result", "task_id": 9604}
{"finetuning_prompt": "\"\"\"\nCreate an array of prime numbers less than or equal to n.\n\"\"\"\n\ndef prime_arr(n):\n", "finetuning_completion": "\r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    result = []\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            result.append(i) \r\n    return result", "task_id": 9606}
{"finetuning_prompt": "\"\"\"\nWrite a factorization algorithm to factorize a number into its prime factors.\n\"\"\"\n\ndef prime_factorization(n):\n", "finetuning_completion": " \r\n\tfactors = []\r\n\ti = 2\r\n\twhile n > 1 and i**2 <= n: \r\n\t\twhile n % i == 0: \r\n\t\t\tfactors.append(i) \r\n\t\t\tn //= i\r\n\t\ti += 1\r\n\tif n > 1: \r\n\t\tfactors.append(n) \r\n\treturn factors", "task_id": 9608}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers, write a program to find the second smallest element in the list.\n\"\"\"\n\ndef get_second_smallest(arr):\n", "finetuning_completion": " \r\n\tarr = list(set(arr)) \r\n\tarr.sort() \r\n\treturn arr[1]", "task_id": 9609}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a list of words as input and returns a list of corresponding character counts for each word\n\"\"\"\n\ndef char_count(word_list):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in range(len(word_list)):\r\n        result.append(len(word_list[i]))\r\n    return result", "task_id": 9610}
{"finetuning_prompt": "\"\"\"\nWrite a query to find common elements in the two given lists.\n\"\"\"\n\n# function to find common elements  \ndef common(list1, list2):\n", "finetuning_completion": " \r\n  \r\n    # creating an empty list \r\n    res = [] \r\n      \r\n    # loop 'n' number  \r\n    # of times \r\n    for i in list1: \r\n          \r\n        # checking for common \r\n        # element  \r\n        if i in list2: \r\n            res.append(i) \r\n  \r\n    return res \r\n  \r\n# Driver code \r\nlist1 = [1, 4, 8, 9, 10] \r\nlist2 = [2, 4, 7, 8]\r\nprint(common(list1, list2))", "task_id": 9618}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate HTML table.\n\"\"\"\n\ndef html_table(list1):\n", "finetuning_completion": "\r\n    output = \"<table>\"\r\n    for row in list1:\r\n        output += \"<tr>\"\r\n        for value in row:\r\n            output += \"<td>\" + str(value) + \"</td>\"\r\n        output += \"</tr>\"\r\n    output += \"</table>\"\r\n    return output", "task_id": 9620}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to extract all the words from a sentence.\n\"\"\"\n\n# Function to extract words from sentence  \r\ndef Extract_Words(sentence):\n", "finetuning_completion": "  \r\n  \r\n    # Split the sentence into a list of words \r\n    words = sentence.split()  \r\n  \r\n    # Return the list of words  \r\n    return words  \r\n    \r\n# Driver Code \r\nsentence = \"Hi, How are you?\"\r\nprint(Extract_Words(sentence))", "task_id": 9622}
{"finetuning_prompt": "\"\"\"\nFix a bug in the given code.\n\"\"\"\n\ndef bugFix(a, b, c):\n", "finetuning_completion": " \r\n    return a * b - c", "task_id": 9627}
{"finetuning_prompt": "\"\"\"\nOptimize the given code snippet.\n\"\"\"\n\ndef factorial(num):\n", "finetuning_completion": " \r\n  ans =1\r\n  for i in range(2, num + 1): \r\n    ans *= i \r\n  return ans", "task_id": 9629}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script that returns the number of days in a month.\n\"\"\"\n\ndef days_in_month(month):\n", "finetuning_completion": "\r\n    if month == 'January':\r\n        return 31\r\n    elif month == 'February':\r\n        return 28\r\n    elif month == 'March':\r\n        return 31\r\n    elif month == 'April':\r\n        return 30\r\n    elif month == 'May':\r\n        return 31\r\n    elif month == 'June':\r\n        return 30\r\n    elif month == 'July':\r\n        return 31\r\n    elif month == 'August':\r\n        return 31\r\n    elif month == 'September':\r\n        return 30\r\n    elif month == 'October':\r\n        return 31\r\n    elif month == 'November':\r\n        return 30\r\n    elif month == 'December':\r\n        return 31", "task_id": 9633}
{"finetuning_prompt": "\"\"\"\nDesign a python algorithm to check if two given strings are anagrams or not.\n\"\"\"\n\ndef check_anagrams(s1, s2):\n", "finetuning_completion": " \r\n    s1 = s1.replace(' ', '').lower() \r\n    s2 = s2.replace(' ', '').lower() \r\n  \r\n    if(sorted(s1) == sorted(s2)): \r\n        return True \r\n  \r\n    return False", "task_id": 9637}
{"finetuning_prompt": "\"\"\"\nCreate a function to divide two numbers and find the remainder without using the modulus operator.\n\"\"\"\n\ndef divide_remainder(x,y):\n", "finetuning_completion": " \r\n    if x < y: \r\n        return x \r\n  \r\n    # Find quotient \r\n    quotient = 0\r\n    while x >= y: \r\n        x -= y \r\n        quotient += 1\r\n\r\n    return quotient, x", "task_id": 9639}
{"finetuning_prompt": "\"\"\"\nIn an array of integers, write a program to find the smallest number divisible by the given number.\n\"\"\"\n\ndef smallest_divisor_in_array(arr, num):\n", "finetuning_completion": "\r\n    arr.sort()\r\n    for ele in arr:\r\n        if (ele % num == 0): \r\n            return ele", "task_id": 9641}
{"finetuning_prompt": "\"\"\"\nDesign a python program to print the alternate characters in a string beginning from index 0.\n\"\"\"\n\ndef alternate_chars(my_string) :\n", "finetuning_completion": " \r\n    result = \"\" \r\n  \r\n    for i in range(0, len(my_string), 2) : \r\n        result += my_string[i]  \r\n  \r\n    return result", "task_id": 9650}
{"finetuning_prompt": "\"\"\"\nWrite a python program to count the number of meetings held in a week.\n\"\"\"\n\ndef countMeetings(days):\n", "finetuning_completion": " \r\n    count = 0; \r\n  \r\n    for i in range(len(days)): \r\n        if (days[i] == 1): \r\n            count += 1\n  \r\n    return count", "task_id": 9655}
{"finetuning_prompt": "\"\"\"\nCreate a python program to optimize the weights and values of knapsack problem.\n\"\"\"\n\ndef knapsack(num, wt, val, capacity):\n", "finetuning_completion": " \r\n  \r\n    # lookup table \r\n    K = [[0 for x in range(capacity + 1)] \r\n            for x in range(num + 1)] \r\n  \r\n    # Building the table in bottom up manner \r\n    for i in range(num + 1): \r\n        for w in range(capacity + 1): \r\n            if i == 0 or w == 0: \r\n                K[i][w] = 0\r\n            elif wt[i-1] <= w: \r\n                K[i][w] = max(val[i-1] + \r\n                  K[i-1][w-wt[i-1]], \r\n                               K[i-1][w]) \r\n            else: \r\n                K[i][w] = K[i-1][w] \r\n  \r\n    return K[num][capacity]", "task_id": 9658}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the smallest multiple of the given number which is divisible by all numbers from 1 to n.\n\"\"\"\n\ndef smallest_multiple(n):\n", "finetuning_completion": " \r\n    lcm = 1 \r\n    for i in range(1, n + 1): \r\n        lcm = lcm * (i // math.gcd(i, lcm)) \r\n    return lcm", "task_id": 9661}
{"finetuning_prompt": "\"\"\"\nGenerate a function to filter out all numbers less than a given threshold from the given list.\n\"\"\"\n\ndef filter_numbers(num_list, threshold):\n", "finetuning_completion": "\n    res = [x for x in num_list if x >= threshold] \n    return (res)", "task_id": 9670}
{"finetuning_prompt": "\"\"\"\nEdit the given program to return a list of tuples with the specified condition.\n\"\"\"\n\ndef edit_program(in_list):\n", "finetuning_completion": "\n    res = [x for x in in_list if isinstance(x, tuple) and len(x) == 2] \n    return (res)", "task_id": 9671}
{"finetuning_prompt": "\"\"\"\nIdentify all the prime numbers within the given range using an appropriate algorithm.\n\"\"\"\n\ndef prime_numbers(start, end):\n", "finetuning_completion": "\n    result = []\r\n    for number in range(start, end + 1):\r\n        if number > 1:\r\n            for i in range(2, number):\r\n                if (number % i) == 0:\r\n                    break\r\n            else:\r\n                result.append(number)\r\n\r\n    return result", "task_id": 9680}
{"finetuning_prompt": "\"\"\"\nCalculate the percentage of vowels in a given string\n\"\"\"\n\ndef vowel_percentage(string):\n", "finetuning_completion": "\r\n    vowels = 'aeiou'\r\n    n_vowels = 0\r\n    for char in string:\r\n        if char.lower() in vowels:\r\n            n_vowels += 1\r\n    return (n_vowels / len(string)) * 100", "task_id": 9687}
{"finetuning_prompt": "\"\"\"\nConvert a given decimal into binary and then add 1 to the result\n\"\"\"\n\ndef dec_to_bin_add_one(n):\n", "finetuning_completion": "\r\n    res = bin(n)[2:] \r\n    int_res = int(res,2) \r\n    add_res = int_res + 1\r\n    return bin(add_res)", "task_id": 9688}
{"finetuning_prompt": "\"\"\"\nGenerate a frequency table for all the characters in a given string\n\"\"\"\n\ndef character_frequency(my_string):\n", "finetuning_completion": "\r\n    my_string = my_string.lower()\r\n    characters = {}\r\n    for char in my_string:\r\n        if char in characters:\r\n            characters[char] += 1\r\n        else: \r\n            characters[char] = 1\r\n    return characters", "task_id": 9690}
{"finetuning_prompt": "\"\"\"\nWrite a function that keeps track of the sum of two digits in an automatically generated array of numbers.\n\"\"\"\n\ndef compute_sum(arr):\n", "finetuning_completion": "\r\n    result = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1,len(arr)):\r\n            result += arr[i] + arr[j]\r\n    return result", "task_id": 9693}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to edit a distance matrix to find the minimum cost paths.\n\"\"\"\n\ndef find_min_cost_path(matrix):\n", "finetuning_completion": "\r\n    # (m, n) represents the rows and columns of the matrix \r\n    m = len(matrix)\r\n    n = len(matrix[0])\r\n    \r\n    # Initialie a matrix cost[][] for storing results of subproblems \r\n    cost = [[0 for i in range(n)] for i in range(m)] \r\n    \r\n    cost[0][0] = matrix[0][0]  # Assign the cost of starting node 0, 0 to the cost matrix  \r\n    \r\n    # Calculate the other paths  \r\n    for i in range(1, m): \r\n        cost[i][0] = cost[i-1][0] + matrix[i][0] \r\n      \r\n    for j in range(1, n): \r\n        cost[0][j] = cost[0][j-1] + matrix[0][j] \r\n      \r\n    for i in range(1, m): \r\n        for j in range(1, n): \r\n            cost[i][j] = min(cost[i-1][j], cost[i][j-1], cost[i-1][j-1]) + matrix[i][j]  \r\n\r\n    # Calculate the minimum cost path \r\n    return cost[m-1][n-1]", "task_id": 9694}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the maximum length of twos consecutive elements in an array.\n\"\"\"\n\ndef two_consecutive_max(arr):\n", "finetuning_completion": "\r\n    max_len = 0\r\n    temp = 0\r\n    \r\n    for i in range(len(arr)-1):\r\n        if arr[i+1] - arr[i] == 1:\r\n            temp += 1\r\n        else:\r\n            max_len = max(max_len, temp)\r\n            temp = 0\r\n    \r\n    return max(max_len, temp)", "task_id": 9695}
{"finetuning_prompt": "\"\"\"\nWrite a python algorithm to compute the union of two sorted arrays.\n\"\"\"\n\ndef union_sorted_arr(arr1, arr2):\n", "finetuning_completion": "\n  len1 = len(arr1) \n  len2 = len(arr2) \n    \n  i, j = 0, 0\n  union = [] \n        \n  while i < len1 and j < len2: \n    if arr1[i] < arr2[j]: \n      union.append(arr1[i]) \n      i += 1\n    elif arr1[i] > arr2[j]: \n      union.append(arr2[j]) \n      j += 1\n    else: \n      union.append(arr2[j]) \n      i += 1\n      j += 1\n    \n  while i < len1: \n    union.append(arr1[i]) \n    i += 1\n    \n  while j < len2: \n    union.append(arr2[j]) \n    j += 1\n  \n  return union", "task_id": 9699}
{"finetuning_prompt": "\"\"\"\nCombine the two given strings, reversing the second string.\n\"\"\"\n\ndef combine_string(string1,string2):\n", "finetuning_completion": "\r\n    output = string1 + string2[::-1]\r\n    return output", "task_id": 9700}
{"finetuning_prompt": "\"\"\"\nWrite a code to detect white noise in a time series data.\n\"\"\"\n\ndef detect_white_noise(data):\n", "finetuning_completion": "  \r\n    avg = np.average(data) \r\n    var = np.var(data) \r\n    if var < 0.1 * avg:  # if the variance is low then the signal is a white noise  \r\n        return True  \r\n    else:  \r\n        return False", "task_id": 9708}
{"finetuning_prompt": "\"\"\"\nWrite a python function to repeat an item of a list n number of times.\n\"\"\"\n\ndef repeat_item(test_list,n):\n", "finetuning_completion": "\r\n  res = []\r\n  for i in test_list:\r\n    res.extend([i]*n)\r\n  return res", "task_id": 9710}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to find the smallest number with n digits.\n\"\"\"\n\ndef findSmallestNumber(n):\n", "finetuning_completion": " \r\n\tif (n == 1): \r\n\t\treturn 0\r\n\telse: \r\n\t\tres = \"1\"\r\n\t\tfor i in range(1,n): \r\n\t\t\tres += \"0\"\r\n\t\treturn int(res)", "task_id": 9714}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a cross join for two given lists.\n\"\"\"\n\ndef cross_join(A, B):\n", "finetuning_completion": " \r\n  \r\n    # Calculate the size of the result \r\n    result_size = len(A)*len(B) \r\n\r\n    # Create an empty result array  \r\n    result = []  \r\n    k = 0\r\n\r\n    # Traverse both lists and generate all possible combinations  \r\n    for i in range(len(A)): \r\n        for j in range(len(B)): \r\n            result.append([]) \r\n            result[k] = [A[i], B[j]] \r\n            k +=1\r\n\r\n    return result", "task_id": 9745}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify incoming data based on a condition.\n\"\"\"\n\ndef classify_data(data, condition):\n", "finetuning_completion": "\r\n    result = []\r\n    for item in data:\r\n        if condition(item):\r\n            result.append(item)\r\n    return result", "task_id": 9746}
{"finetuning_prompt": "\"\"\"\nWrite a python program to search a given string in the square matrix or 2D array.\n\"\"\"\n\ndef search2D(mat, x):\n", "finetuning_completion": " \r\n    for i in range(len(mat)): \r\n        for j in range(len(mat[0])): \r\n            if (mat[i][j] == x): \r\n                return True           \r\n    return False", "task_id": 9751}
{"finetuning_prompt": "\"\"\"\nDetermine if the given string contains all the alphabets in the English alphabet or not.\n\"\"\"\n\ndef allAlpha(in_str):\n", "finetuning_completion": " \n    charset = set(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    str_set = set(in_str) \n    if charset - str_set: \n        return False \n    else: \n        return True", "task_id": 9753}
{"finetuning_prompt": "\"\"\"\nConvert a given text into an array of words by using regular expressions.\n\"\"\"\n\nimport re\r\ndef text_to_array(text):\n", "finetuning_completion": "\r\n  text_array = re.findall(r'\\w+', text)\r\n  return text_array", "task_id": 9759}
{"finetuning_prompt": "\"\"\"\nCreate a python script that takes in two strings and checks if they are anagrams.\n\"\"\"\n\ndef is_anagram(str1, str2):\n", "finetuning_completion": "\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if(sorted(str1) == sorted(str2)):\n        return True\n    else:\n        return False", "task_id": 9762}
{"finetuning_prompt": "\"\"\"\nWrite a python function that take in a positive integer and returns the sum of its divisors.\n\"\"\"\n\ndef sum_of_divisors(n):\n", "finetuning_completion": " \n    result = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            result += i \n    return result", "task_id": 9763}
{"finetuning_prompt": "\"\"\"\nWrite a function to input gender and return a gender specific message.\n\"\"\"\n\ndef gender_message(gender):\n", "finetuning_completion": "\n    if gender == 'male':\n        message = \"Hello, sir!\"\n    elif gender == 'female':\n        message = \"Hi, ma'am!\"\n    else:\n        message = \"Hi, fellow human!\"\n    return message", "task_id": 9765}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the valid IP address from a given list.\n\"\"\"\n\ndef valid_ip(ip_list):\n", "finetuning_completion": " \r\n  valid_ips = [] \r\n  for ip in ip_list: \r\n    parts = ip.split('.')\r\n    if len(parts) == 4:\r\n      if (0 <= int(parts[0]) <= 255) and (0 <= int(parts[1]) <= 255) and (0 <= int(parts[2]) <= 255) and (0 <= int(parts[3]) <= 255):\r\n        valid_ips.append(ip)\r\n \r\n  return valid_ips", "task_id": 9766}
{"finetuning_prompt": "\"\"\"\nDevise a method to convert a given string into its associated ASCII values.\n\"\"\"\n\ndef string_to_ascii(test_string):\n", "finetuning_completion": "\r\n\r\n    # Initializing result string \r\n    result = \"\" \r\n  \r\n    # Using join() + ord() + map() \r\n    # Convert each character of string \r\n    # to hexadecimal using map() and join() \r\n    # Provide hexadecimal and base i.e. 16 \r\n    result += ''.join(map(lambda x: hex(ord(x))[2:], \r\n                         test_string)) \r\n  \r\n    return result \r\n  \r\n# Driver Code \r\ntest_string = \"Hello World\"\r\nprint(string_to_ascii(test_string))", "task_id": 9769}
{"finetuning_prompt": "\"\"\"\nWrite a python function to reverse a sentence without changing words order.\n\"\"\"\n\ndef reverse_phrase(phrase):\n", "finetuning_completion": " \r\n    words_list = phrase.split(\" \") \r\n      \r\n    new_list = [word[::-1] for word in words_list] \r\n      \r\n    new_phrase = \" \".join(new_list) \r\n      \r\n    return new_phrase \n  \n# Driver Code \r\ninput_phrase = \"This is a sentence.\"\r\nresult = reverse_phrase(input_phrase) \r\nprint(result) \n# Output: sihT si a ecnetnes.", "task_id": 9791}
{"finetuning_prompt": "\"\"\"\nWrite a python function to convert a base-ten integer numbering system into a base-two binary numbering system.\n\"\"\"\n\ndef decimalToBinary(n):\n", "finetuning_completion": " \n      \n    # To store the binary number \n    res = [] \n  \n    # Conversion of decimal to  \n    # binary number using bitwise \r\n    # operator \n    while (n > 0): \n        res.append(n % 2) \n        n = int(n / 2) \n  \n    # Adding zeroes to make \n    # it 32 bit representation \n    while (len(res) < 32): \n        res.append(0) \n  \n    # Reversing the array res[] \n    res = res[:: -1] \n  \n    return res", "task_id": 9792}
{"finetuning_prompt": "\"\"\"\nWrite a python function that returns the value of the Fibonacci sequence at a specific index number.\n\"\"\"\n\ndef fibonacci(num):\n", "finetuning_completion": "  \n    if num==1: \n        return 0\n    elif num==2: \n        return 1\n    else: \n        return fibonacci(num-1)+fibonacci(num-2)", "task_id": 9793}
{"finetuning_prompt": "\"\"\"\nCalculate the average product price from a given list of products.\n\"\"\"\n\ndef avg_prod_price(product_list):\n", "finetuning_completion": " \r\n  total = 0\r\n  for item in product_list: \r\n    total += item[1] \r\n  avg_price = total/len(product_list) \r\n  return avg_price", "task_id": 9796}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm that prints out the nth Fibonacci number.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \n  if n < 0: \n    return False \n  elif n == 0 or n == 1: \n    return n\n  else: \n    return Fibonacci(n-1) + Fibonacci(n-2)", "task_id": 9799}
{"finetuning_prompt": "\"\"\"\nOptimize a given python program with a minimum operation count to complete a task.\n\"\"\"\n\ndef new_list(test_list):\n", "finetuning_completion": " \r\n  res = [i ** 2 for i in test_list] \r\n  return res", "task_id": 9801}
{"finetuning_prompt": "\"\"\"\nDevelop a program to display the unique elements present in the given array.\n\"\"\"\n\ndef unique_elements(arr):\n", "finetuning_completion": " \r\n    ans = [] \r\n    for ele in arr: \r\n        if ele not in ans: \r\n            ans.append(ele) \r\n    return ans", "task_id": 9805}
{"finetuning_prompt": "\"\"\"\nRewrite the following code into a more optimized version.\n\"\"\"\n\ndef func(lst):\n", "finetuning_completion": "\n    return [i for i in lst if i%2==0]", "task_id": 9813}
{"finetuning_prompt": "\"\"\"\nWrite a regex program to identify phone numbers with different formats\n\"\"\"\n\nimport re \r\n  \r\ndef find_phone_number(text):\n", "finetuning_completion": " \r\n  \r\n    # Regex pattern to find phone numbers  \r\n    phone_numbers_pattern = re.compile(r'(\\d[\\s-]*){9,10}') \r\n      \r\n    match = re.search(phone_numbers_pattern, text) \r\n    if match: \r\n        return match.group(0) \r\n    else: \r\n        return None", "task_id": 9820}
{"finetuning_prompt": "\"\"\"\nWrite a json program to validate the format of given json data.\n\"\"\"\n\nimport json\n\ndef validate_json(json_data):\n", "finetuning_completion": "\n  try:\n    data = json.loads(json_data)\n    valid = True\n  except ValueError as error:\n    valid = False\n  return valid", "task_id": 9823}
{"finetuning_prompt": "\"\"\"\nCreate a function to check if there is a pair in a given array which sums to a given number.\n\"\"\"\n\ndef pair_sum(arr, target):\n", "finetuning_completion": "\n    seen = set()\n    output = set()\n    \n    for num in arr:\n        difference = target - num\n        if difference not in seen:\n            seen.add(num)\n        else:\n            output.add( (min(num, difference), max(num, difference)) )\n    return output", "task_id": 9824}
{"finetuning_prompt": "\"\"\"\nWrite a python program to retrieve the last three words of a given sentence.\n\"\"\"\n\nst = 'The quick brown fox jumps over the lazy dog'\ndef get_last_words(string):\n", "finetuning_completion": " \r\n    word_list = string.split(' ') \r\n    return ' '.join(word_list[-3: ] ) \r\n  \r\nprint(get_last_words(st))", "task_id": 9830}
{"finetuning_prompt": "\"\"\"\nGenerate an edited version of a given piece of code that will increase its efficiency.\n\"\"\"\n\ndef myfunc(str):\n", "finetuning_completion": "\n  charCount = {}\n  for i in str:\n    charCount[i] = charCount.get(i, 0) + 1\n  return charCount", "task_id": 9834}
{"finetuning_prompt": "\"\"\"\nCreate a program for formatting a phone number.\n\"\"\"\n\ndef format_phone_number(number):\n", "finetuning_completion": " \r\n    phone_number = str(number) \r\n    return f'({phone_number[0:3]}) {phone_number[3:6]}-{phone_number[6:]}'", "task_id": 9846}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to convert given string to lowercase and uppercase.\n\"\"\"\n\ndef convert_case(string_input):\n", "finetuning_completion": "  \r\n  lowercase_str = string_input.lower() \r\n  uppercase_str = string_input.upper()\r\n  \r\n  return (lowercase_str, uppercase_str)", "task_id": 9848}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode the given text using md5 encryption.\n\"\"\"\n\nimport hashlib \r\ndef encode_text(text):\n", "finetuning_completion": " \r\n  # create md5 object \r\n  md5 = hashlib.md5() \r\n  # update the text \r\n  md5.update(text.encode('utf-8')) \r\n  # return encrypted text \r\n  return md5.hexdigest()", "task_id": 9849}
{"finetuning_prompt": "\"\"\"\nWrite a python code to find the sum of all positive integers less than or equal to a given number.\n\"\"\"\n\ndef sum_of_numbers(n):\n", "finetuning_completion": " \r\n    sum = 0\r\n    for i in range(1, n+1): \r\n        sum += i \r\n    return sum", "task_id": 9850}
{"finetuning_prompt": "\"\"\"\nDesign a function to generate the Fibonacci sequence until a certain number.\n\"\"\"\n\ndef fibonacci_sequence_until(num):\n", "finetuning_completion": "\n  curr, next = 0, 1\n  results = []\n  while (curr < num):\n    results.append(curr)\n    curr, next = next, curr + next\n  return results", "task_id": 9854}
{"finetuning_prompt": "\"\"\"\nGenerate a set of unique numbers from 0 to X, where X is some given number.\n\"\"\"\n\ndef generate_unique_set(X):\n", "finetuning_completion": " \r\n      \r\n    # Empty set created \r\n    unique_set = set() \r\n      \r\n    # Adding values one by one \r\n    for i in range(X+1): \r\n        unique_set.add(i) \r\n          \r\n    # Return the prepared set \r\n    return unique_set \r\n      \r\n# value of X \r\nX = 10\r\nprint(generate_unique_set(X))", "task_id": 9860}
{"finetuning_prompt": "\"\"\"\nCompute the entropy of a given data set.\n\"\"\"\n\nimport math \ndef calculateEntropy(data):\n", "finetuning_completion": "\n    entropy = 0\n    freq = {}\n    for item in data:\n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n        entropy += -freq[item]/len(data) * math.log(freq[item]/len(data), 2)\n    return entropy\n\n# calculate the entropy\nentropy = calculateEntropy([2, 4, 3, 5, 1])\nprint(entropy)", "task_id": 9863}
{"finetuning_prompt": "\"\"\"\nGiven a list of shapes, write a Python program to sort them in the order of how many sides they have.\n\"\"\"\n\ndef shapes_sorting(shapes):\n", "finetuning_completion": "\n\tsides = {\n\t\t\"triangle\": 3,\n\t\t\"circle\": 0,\n\t\t\"square\": 4,\n\t\t\"pentagon\": 5,\n\t\t\"heptagon\": 7\n\t}\n\tsorted_shapes = sorted(shapes, key=lambda x: sides[x])\n\treturn sorted_shapes", "task_id": 9873}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a dictionary of squares of positive numbers.\n\"\"\"\n\ndef square_dict(numbers):\n", "finetuning_completion": " \n  result = {} \n  for i in numbers: \n    if i > 0: \n      result[i] = i*i \n  return result", "task_id": 9874}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter out strings of length less than 5 characters.\n\"\"\"\n\ndef filter_string(my_string):\n", "finetuning_completion": " \n  result = [] \n  for s in my_string: \n    if len(s) >= 5:\n      result.append(s) \n  return result", "task_id": 9879}
{"finetuning_prompt": "\"\"\"\nOutput the pairs such that the sum equals to a given value.\n\"\"\"\n\ndef find_pairs_sum(lst, target):\n", "finetuning_completion": " \r\n  res = []  \r\n  for i in range(len(lst)): \r\n    for j in range(i + 1, len(lst)): \r\n      if (lst[i] + lst[j] == target): \r\n        res.append([lst[i], lst[j]])  \r\n  return res", "task_id": 9880}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse the bits of a 32 bit unsigned integer.\n\"\"\"\n\ndef reverse_bits(n):\n", "finetuning_completion": " \r\n\trev = 0\r\n\tfor i in range(32): \r\n\t\trev <<= 1\r\n\t\tif (n & 1 == 1): \r\n\t\t\trev ^= 1\r\n\t\tn >>= 1\r\n\treturn rev", "task_id": 9888}
{"finetuning_prompt": "\"\"\"\nCreate a python function that takes in an array and a search query, and returns the array elements that match the query.\n\"\"\"\n\ndef search_item(arr,search_query):\n", "finetuning_completion": "\r\n  results = []\r\n  for item in arr:\r\n    if item == search_query:\r\n      results.append(item)\r\n  return results", "task_id": 9889}
{"finetuning_prompt": "\"\"\"\nGiven two input strings,write a function to find the largest common sub-sequence.\n\"\"\"\n\ndef LCS(str1,str2):\n", "finetuning_completion": " \r\n    m = len(str1) \r\n    n = len(str2) \r\n  \r\n    L = [[0 for x in range(n+1)] for x in range(m+1)] \r\n  \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if i == 0 or j == 0: \r\n                L[i][j] = 0\r\n            elif str1[i-1] == str2[j-1]: \r\n                L[i][j] = L[i-1][j-1] + 1\r\n            else: \r\n                L[i][j] = max(L[i-1][j], L[i][j-1]) \r\n  \r\n    index = L[m][n] \r\n  \r\n    lcs = [\"\"] * (index+1) \r\n    lcs[index] = \"\" \r\n  \r\n    i = m \r\n    j = n \r\n    while i > 0 and j > 0: \r\n  \r\n        if str1[i-1] == str2[j-1]: \r\n            lcs[index-1] = str1[i-1] \r\n            i-=1\r\n            j-=1\r\n            index-=1\r\n  \r\n        elif L[i-1][j] > L[i][j-1]: \r\n            i-=1\r\n        else: \r\n            j-=1\r\n  \r\n    final_string = \"\".join(lcs) \r\n  \r\n    return final_string", "task_id": 9901}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes a given string and utilizes the bubble sort algorithm to sort the letters alphabetically.\n\"\"\"\n\ndef bubbleSort(string):\n", "finetuning_completion": " \r\n  \r\n    arr = list(string) \r\n    n = len(arr) \r\n    for i in range(n):  \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j] \r\n    return ''.join(arr)", "task_id": 9905}
{"finetuning_prompt": "\"\"\"\nCreate a program to find maximum of two numbers using bitwise operators.\n\"\"\"\n\ndef max(x, y):\n", "finetuning_completion": " \r\n    return x if((x & ~y) > 0) else y", "task_id": 9909}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a table of the first n terms of an arithmetic sequence.\n\"\"\"\n\ndef gen_arithmetic_series(start, n):\n", "finetuning_completion": "\n    i = 0\n    table = []\n    while(i < n):\n        table.append(start + (i*3))\n        i += 1\n    return table\n\n#example\narithmetic_series = gen_arithmetic_series(4, 10)\nprint(arithmetic_series)\n#output\n#[4, 7, 10, 13, 16, 19, 22, 25, 28, 31]", "task_id": 9911}
{"finetuning_prompt": "\"\"\"\nCreate a function to delete the characters that are odd in a position in a given string.\n\"\"\"\n\ndef delete_odd_characters(test_string):\n", "finetuning_completion": " \r\n    res = \"\" \r\n    for i in range(len(test_string)): \r\n        if i % 2 == 0: \r\n            res += test_string[i] \r\n    return res", "task_id": 9912}
{"finetuning_prompt": "\"\"\"\nConstruct a function to convert a given sentence into a dictionary wherein the keys are the words and the value is the total number of occurrence of each word.\n\"\"\"\n\ndef word_freq(sentence):\n", "finetuning_completion": "\r\n    words = sentence.split()\r\n    d = {}\r\n    for word in words:\r\n        if word not in d:\r\n            d[word] = 0\r\n        d[word] += 1\r\n    return d", "task_id": 9918}
{"finetuning_prompt": "\"\"\"\nRewrite a given code segment such that it meets the current PEP 8 style guidelines.\n\"\"\"\n\ndef line():\n", "finetuning_completion": "\r\n    print(\"Line One\")", "task_id": 9919}
{"finetuning_prompt": "\"\"\"\nSubmit a function to output the prefix string from a given list of strings.\n\"\"\"\n\ndef prefix_string(string_list):\n", "finetuning_completion": " \r\n    result = \"\" \r\n    n = min([len(x) for x in string_list]) \r\n    for i in range(n): \r\n        res = [string_list[x][i] for x in range(len(string_list))] \r\n        if len(set(res)) == 1 : \r\n            result += res[0] \r\n        else : \r\n            break \r\n    return result", "task_id": 9936}
{"finetuning_prompt": "\"\"\"\nDesign a method to count the total number of words in a given list of strings.\n\"\"\"\n\ndef count_words(string_list):\n", "finetuning_completion": " \r\n    count = 0 \r\n    for string in string_list: \r\n        words = string.split(' ') \r\n        count += len(words) \r\n    return count", "task_id": 9937}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for converting tempreature from Celsius to Fahrenheit and vice versa.\n\"\"\"\n\n# Function to convert Celsius to Fahrenheit\r\ndef convert_c_to_f(celcius):\n", "finetuning_completion": " \r\n  return (celcius * 9/5+32)\r\n\r\n# Function to convert Fahrenheit to Celsius\r\ndef convert_f_to_c(fahrenheit): \r\n  return ((fahrenheit - 32) * 5/9)", "task_id": 9939}
{"finetuning_prompt": "\"\"\"\nGenerate code to sort a nested dictionary by one of its values.\n\"\"\"\n\ndef sort_dict(my_dict, key):\n", "finetuning_completion": " \r\n    sorted_dict = {} \r\n    for k, v in sorted(my_dict.items(), key = lambda kv:(kv[1][key], kv[0])): \r\n        sorted_dict[k] = v \r\n    return (sorted_dict)", "task_id": 9940}
{"finetuning_prompt": "\"\"\"\nCreate a program to check if value is positive or negative.\n\"\"\"\n\ndef check_sign(number):\n", "finetuning_completion": "  \r\n  if number >= 0:\r\n    return \"positive\"\r\n  else:\r\n    return \"negative\"", "task_id": 9942}
{"finetuning_prompt": "\"\"\"\nCreate a python function to iterate over a list and remove all elements less than a given number.\n\"\"\"\n\ndef remove_less_than_number(n, mylist):\n", "finetuning_completion": " \r\n    newlist = [x for x in mylist if x >= n] \r\n    return newlist", "task_id": 9946}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to calculate the total fuel used by a car based on its mileage and initial fuel level.\n\"\"\"\n\ndef fuel_used(mileage, init_fuel):\n", "finetuning_completion": "\n    fuel_used = init_fuel - (mileage/40)\r\n    return fuel_used", "task_id": 9954}
{"finetuning_prompt": "\"\"\"\nDesign a program that could encrypt a string using a shift cipher.\n\"\"\"\n\ndef cipher_shift(message, shift):\n", "finetuning_completion": "\r\n    encrypted_message = \"\"\r\n    for char in message: \r\n        if char.isalpha(): \r\n            num = ord(char) \r\n            num += shift \r\n            if char.isupper(): \r\n                if num > ord('Z'): \r\n                    num -= 26 \r\n                elif num < ord('A'):\r\n                    num += 26 \r\n            elif char.islower(): \r\n                if num > ord('z'): \r\n                    num -= 26\r\n                elif num < ord('a'): \r\n                    num += 26\r\n            encrypted_message += chr(num) \r\n        else: \r\n            encrypted_message += char \r\n    return encrypted_message", "task_id": 9956}
{"finetuning_prompt": "\"\"\"\nConstruct a Python algorithm to identify the element which appears the most number of times in a given list.\n\"\"\"\n\ndef find_most_frequent(test_list):\n", "finetuning_completion": " \n\tdict={}\n\tres = 0\n\tfor i in test_list:\n\t\tdict[i] = test_list.count(i) \n\t\tif(res<dict[i]): \n\t\t\tres = dict[i] \n\t\t\tnum = i \n\t\t\t\n\treturn num", "task_id": 9960}
{"finetuning_prompt": "\"\"\"\nWrite a function that prints the count of positive, negative and zero for a given list.\n\"\"\"\n\ndef get_count(test_list):\n", "finetuning_completion": " \n\tpositive = 0\n\tnegative = 0\n\tzero = 0\n\tfor number in test_list:\n\t\tif number > 0:\n\t\t\tpositive += 1\n\t\telif number < 0:\n\t\t\tnegative += 1\n\t\telif number == 0:\n\t\t\tzero += 1\n\tprint(\"Positive: %d\" %positive)\n\tprint(\"Negative: %d\" %negative)\n\tprint(\"Zero: %d\" %zero)", "task_id": 9961}
{"finetuning_prompt": "\"\"\"\nCreate a function in Python to decode a string encoded with ROT13\n\"\"\"\n\ndef decode_rot13(str):\n", "finetuning_completion": "\n    result = \"\" \r\n    for i in range(len(str)):  \r\n        char = str[i] \r\n        if char.isalpha(): \r\n            if char.isupper(): \r\n                result += chr((ord(char) - 65 - 13) % 26 + 65) \r\n            else: \r\n                result += chr((ord(char) - 97 - 13) % 26 + 97) \r\n        else: \r\n            result += char \n  \r\n    return result", "task_id": 9963}
{"finetuning_prompt": "\"\"\"\nConstruct a function to validate an email address using a regular expression.\n\"\"\"\n\nimport re\r\ndef validate_email(email):\n", "finetuning_completion": "\r\n    if re.match(\"[^@]+@[^@]+\\.[^@]+\", email):\r\n        print(\"Email address is valid\")\r\n    else:\r\n        print(\"Email address is not valid\")", "task_id": 9968}
{"finetuning_prompt": "\"\"\"\nMake a python program to sort all positive values in an array in ascending order, and all negative values in descending order.\n\"\"\"\n\ndef sort_array(arr):\n", "finetuning_completion": " \r\n\t# separate positive numbers and negative numbers \r\n\tpos_arr = []\r\n\tneg_arr = []\r\n\tfor num in arr: \r\n\t\tif num >= 0: \r\n\t\t\tpos_arr.append(num) \r\n\t\telse: \r\n\t\t\tneg_arr.append(num) \r\n\t# sort positive numbers and negative numbers respectively \r\n\tpos_arr.sort() \r\n\tneg_arr.sort(reverse = True) \r\n\t# combine the two sorted arrays \r\n\tarr = pos_arr + neg_arr \r\n\treturn arr", "task_id": 9973}
{"finetuning_prompt": "\"\"\"\nAnalyze the given array and find the missing number.\n\"\"\"\n\ndef find_missing_number(arr):\n", "finetuning_completion": " \r\n\tn = len(arr) \r\n\ttotal = (n + 1)*(n + 2)/2\r\n\tsum_of_arr = sum(arr) \r\n\tmissing_number = total - sum_of_arr \r\n\r\n\treturn missing_number", "task_id": 9974}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to detect if an array of numbers is a valid magic square.\n\"\"\"\n\ndef is_magic_square(mat):\n", "finetuning_completion": "\r\n  \r\n  #calculate sum of each row and \r\n  # each column\r\n  row_sum = [sum(x) for x in mat]\r\n  col_sum = [sum(x) for x in zip(*mat)]\r\n\r\n  #check if the sum of each row and  \r\n  #column is equal \r\n  if (row_sum[0] == row_sum[1] and \r\n      row_sum[1] == row_sum[2] and \r\n      row_sum[0] == col_sum[0] and \r\n      row_sum[1] == col_sum[1] and\r\n      row_sum[2] == col_sum[2]): \r\n    return True; \r\n  else: \r\n    return False", "task_id": 9981}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script to calculate the LCS (Longest Common Subsequence) of two strings.\n\"\"\"\n\ndef lcs(X , Y):\n", "finetuning_completion": " \n    m = len(X) \n    n = len(Y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \r\n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]", "task_id": 9985}
{"finetuning_prompt": "\"\"\"\nWrite a function that adds two numbers using a loop.\n\"\"\"\n\ndef loop_sum(a, b):\n", "finetuning_completion": " \r\n    res = 0\r\n    for i in range(a, b + 1): \r\n        res += i \r\n    return (res)", "task_id": 9998}
{"finetuning_prompt": "\"\"\"\nCreate a function that returns the 3 most common words in a string.\n\"\"\"\n\ndef most_common_words(string):\n", "finetuning_completion": "\r\n  words = string.split(\" \")\r\n  word_count = {}\r\n  for word in words:\r\n    if word in word_count.keys():\r\n      word_count[word] += 1\r\n    else:\r\n      word_count[word] = 1\r\n\r\n  return (sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:3])", "task_id": 9999}
{"finetuning_prompt": "\"\"\"\nConstruct a function that converts a given string of words into hyphen-separated words\n\"\"\"\n\ndef hyphen_separator(string):\n", "finetuning_completion": " \r\n    words = string.split(' ') \r\n    new_word = [] \r\n\r\n    for word in words: \r\n        new_word.append(word.lower())  \r\n        hyphenated = '-'.join(new_word) \r\n    return (hyphenated)", "task_id": 10000}
{"finetuning_prompt": "\"\"\"\nCreate a function which flattens a list of nested lists.\n\"\"\"\n\ndef flatten(lst):\n", "finetuning_completion": "\r\n  flattened_list = []\r\n  for item in lst:\r\n    if type(item) == list:\r\n      flattened_list += flatten(item)\r\n    else:\r\n      flattened_list.append(item)\r\n  return flattened_list", "task_id": 10001}
{"finetuning_prompt": "\"\"\"\nDesign a solution to encode and decode strings as numbers.\n\"\"\"\n\ndef string_to_number(string):\n", "finetuning_completion": "\r\n    # encode string\r\n    number = 0\r\n    for code in string: \r\n        number = number * 256 + ord(code) \r\n    return number \r\n\r\ndef number_to_string(number): \r\n    # decode number\r\n    string = \"\"\r\n    while (number > 0): \r\n        string = chr(number % 256) + string \r\n        number = number // 256\r\n    return string", "task_id": 10002}
{"finetuning_prompt": "\"\"\"\nWrite a function to separate the dictionary into two different dictionaries according to their value.\n\"\"\"\n\ndef separate_dict_by_values(d):\n", "finetuning_completion": " \r\n      d1 = {}\r\n      d2 = {}\r\n      for key, value in d.items():\r\n          if value > 5: \r\n              d1[key] = value \r\n          else: \r\n              d2[key] = value \r\n      return d1, d2", "task_id": 10013}
{"finetuning_prompt": "\"\"\"\nDevelop a function to rearange the dictionary based on its values.\n\"\"\"\n\ndef rearrange_dict(d):\n", "finetuning_completion": "\r\n      sorted_dict = {} \r\n      for key, val in sorted(d.items(), key = lambda x: x[1]): \r\n          sorted_dict[key] = val\r\n      return sorted_dict", "task_id": 10015}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to concatenate two dictionaries into one.\n\"\"\"\n\ndef concatenate_dict(dict1, dict2):\n", "finetuning_completion": " \n      dict3 = {**dict1, **dict2} \r\n      return dict3", "task_id": 10016}
{"finetuning_prompt": "\"\"\"\nDevelop a program to check if the given list contains any duplicates.\n\"\"\"\n\ndef contains_duplicates(arr):\n", "finetuning_completion": "\r\n      if len(arr) == len(set(arr)):\r\n        return False\r\n      else: \r\n        return True", "task_id": 10019}
{"finetuning_prompt": "\"\"\"\nConstruct a code snippet to swap two variables in a dictionary.\n\"\"\"\n\ndef swapDicVars(dic):\n", "finetuning_completion": "\r\n    a = dic['a'] \r\n    b = dic['b'] \r\n    dic['a'] = b \r\n    dic['b'] = a \r\n    return dic", "task_id": 10026}
{"finetuning_prompt": "\"\"\"\nGenerate a code snippet to compare two strings for their length.\n\"\"\"\n\ndef compareStringLength(str1,str2):\n", "finetuning_completion": " \r\n    if len(str1) == len(str2): \r\n        return 0 \r\n    elif len(str1) < len(str2): \r\n        return -1 \r\n    else: \r\n        return 1", "task_id": 10027}
{"finetuning_prompt": "\"\"\"\nCreate a function for computing the fibonacci series for the given nth value.\n\"\"\"\n\ndef fibonacci(n):\n", "finetuning_completion": " \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "task_id": 10029}
{"finetuning_prompt": "\"\"\"\nGenerate an encrypted string from an input integer without using standard crypto APIs.\n\"\"\"\n\ndef encrypt_no_api(num):\n", "finetuning_completion": " \n    ans = 0\n    for i in range(4): \n        ans = (ans * 10 + num % 10) \n        num = num // 10\n    return ans", "task_id": 10035}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to compare a list of item types by their prices.\n\"\"\"\n\ndef compare_by_price(item_list):\n", "finetuning_completion": " \n    prices = [item[\"price\"] for item in item_list]\n    min_price = min(prices)\n    min_price_items = []\n    for item in item_list:\n        if item[\"price\"] == min_price:\n            min_price_items.append(item[\"type\"])\n    return min_price_items", "task_id": 10036}
{"finetuning_prompt": "\"\"\"\nGenerate a program to format a given string with a specific length and number of separators given.\n\"\"\"\n\ndef format_string(string, length, separator):\n", "finetuning_completion": " \n    final_string = string[:length]\n    final_string = final_string + separator * (length - len(final_string))\n    return final_string", "task_id": 10038}
{"finetuning_prompt": "\"\"\"\nWrite a python program to calculate the number of ways to get a certain value when a number of coins with given denomination are available.\n\"\"\"\n\ndef get_num_ways(coins, value):\n", "finetuning_completion": " \n    dp = [0] * (value + 1) \n    dp[0] = 1\n    for i in range(len(coins)): \n        for j in range(coins[i], value+1): \n            dp[j] = dp[j]+dp[j - coins[i]] \n    return dp[value]", "task_id": 10041}
{"finetuning_prompt": "\"\"\"\nDesign a program to check if a list contains two consecutive numbers that are a multiple of 5.\n\"\"\"\n\ndef check_multiple_of_5(input_list):\n", "finetuning_completion": "\r\n    result = False\r\n    for i in range(0, len(input_list)-1):\r\n        if (input_list[i] % 5 == 0 and input_list[i+1] % 5 == 0):\r\n            result = True\r\n    return result", "task_id": 10048}
{"finetuning_prompt": "\"\"\"\nDesign a coding problem to generate a staircase of height 'n' containing 'X' symbols.\n\"\"\"\n\ndef generate_staircase(n):\n", "finetuning_completion": "\r\n  for i in range(n):\r\n    print(' '*(n-i-1) + 'X'*(i+1))", "task_id": 10050}
{"finetuning_prompt": "\"\"\"\nDesign a program to find all distinct triplets whose three elements sum to a given number.\n\"\"\"\n\ndef find_triplets_that_sum_to(lst, num):\n", "finetuning_completion": "\r\n  triplets_list = []\r\n  lst.sort()\r\n  for i in range(len(lst)-2): # taking 3 elements from the list\r\n    # set the boundaries of the sum \r\n    left = i+1\r\n    right = len(lst)-1\r\n    while left < right:\r\n      summ = lst[i] + lst[left] + lst[right]\r\n      if summ == num:\r\n        triplets_list.append([lst[i], lst[left], lst[right]])\r\n        left += 1 \r\n        right -= 1\r\n      elif summ > num:\r\n        right -= 1\r\n      else:\r\n        left += 1\r\n  return triplets_list", "task_id": 10052}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the shortest common supersequence of two strings.\n\"\"\"\n\ndef find_shortest_supersequence(str1, str2):\n", "finetuning_completion": " \n  l1 = len(str1) \n  l2 = len(str2) \n  dp = [[0 for _ in range(l2+1)] for _ in range(l1+1)] \n  \n  for i in range(l1): \n    for j in range(l2): \n      if str1[i] == str2[j]: \n        dp[i+1][j+1] = dp[i][j] + 1\n      else: \n        dp[i+1][j+1] = max(dp[i+1][j], dp[i][j + 1]) \n  \n  i, j = l1, l2 \n  output = '' \n  while(i > 0 and j > 0): \n    if str1[i - 1] == str2[j - 1]: \n      output = str1[i - 1] + output \n      i -= 1 \n      j -= 1\n    elif dp[i - 1][j] > dp[i][j - 1]: \n      output = str1[i - 1] + output \n      i -= 1\n    else: \n      output = str2[j - 1] + output \n      j -= 1\n  \n  while i > 0: \n    output = str1[i - 1] + output \n    i -= 1\n  \n  while j > 0: \n    output = str2[j - 1] + output \n    j -= 1\n  \n  return output", "task_id": 10054}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove all odd numbers from an array.\n\"\"\"\n\ndef remove_odd_nums(arr):\n", "finetuning_completion": " \r\n    even_nums = []\r\n    for num in arr:\r\n        if num % 2 == 0:\r\n            even_nums.append(num)\r\n    return even_nums", "task_id": 10055}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the most common elements in a list of words.\n\"\"\"\n\ndef count_frequent_words(words):\n", "finetuning_completion": "\r\n    word_count = {}\r\n    for word in words:\r\n        if word not in word_count:\r\n            word_count[word] = 1\r\n        else:\r\n            word_count[word] += 1\r\n    \r\n    max_count = 0\r\n    max_words = []\r\n    for word,count in word_count.items():\r\n        if count > max_count:\r\n            max_count = count\r\n            max_words = [word]\r\n        elif count == max_count:\r\n            max_words.append(word)\r\n    return max_words", "task_id": 10057}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate a list of ordered pairs of elements from two given lists.\n\"\"\"\n\ndef ordered_pairs(list1, list2):\n", "finetuning_completion": "\r\n    return [(x,y) for x in list1 for y in list2]", "task_id": 10058}
{"finetuning_prompt": "\"\"\"\nEdit the following code to obtain the sum of the squares of all numbers from 0 to 10.\n\"\"\"\n\ndef squares(num):\n", "finetuning_completion": "\r\n     x = 0\r\n     for i in range(num+1):\r\n          x = x + i**2\r\n     return x\n\nprint(\"The sum of the squares of all numbers from 0 to 10 is:\",squares(10)) # The sum of the squares of all numbers from 0 to 10 is: 385", "task_id": 10063}
{"finetuning_prompt": "\"\"\"\nGenerate a program to rotate a list clockwise by the given number of places.\n\"\"\"\n\ndef rotate_list_clockwise(arr, num):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    new_arr = [0] * n \r\n  \r\n    for i in range(n): \r\n        new_arr[(i+ num)%n] = arr[i] \r\n  \r\n    return new_arr", "task_id": 10076}
{"finetuning_prompt": "\"\"\"\nCreate an AI model to encode a given string into a json format\n\"\"\"\n\nimport json\r\n\r\ndef encode_string(myString):\n", "finetuning_completion": "\r\n    return json.dumps(myString)", "task_id": 10079}
{"finetuning_prompt": "\"\"\"\nCreate an AI model to perform text classification on a given text.\n\"\"\"\n\nfrom sklearn.feature_extraction.text import CountVectorizer \r\nfrom sklearn.naive_bayes import MultinomialNB  \r\n  \r\ndef text_classification(myString):\n", "finetuning_completion": "\r\n    vectorizer = CountVectorizer() \r\n    X = vectorizer.fit_transform([myString])  \r\n    clf = MultinomialNB() \r\n    clf.fit(X, [0]) \r\n    return clf.predict(X)[0]", "task_id": 10080}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given date-time into UNIX timestamp\n\"\"\"\n\nimport time\n\ndef convert_to_timestamp(input_date_time):\n", "finetuning_completion": "\n  dt_tuple = time.strptime(input_date_time, '%d/%m/%Y %H:%M:%S')\n  return int(time.mktime(dt_tuple))", "task_id": 10086}
{"finetuning_prompt": "\"\"\"\nCreate a function to improve the performance of a given python code\n\"\"\"\n\n# Improved code\ndef test_function(x, y):\n", "finetuning_completion": "\n  return x * y", "task_id": 10087}
{"finetuning_prompt": "\"\"\"\nGiven a sequence of words, write a function to find the number of occurrences of each word.\n\"\"\"\n\ndef count_words(words):\n", "finetuning_completion": " \n    result = {} \r\n  \r\n    for word in words: \n        if word in result: \r\n            result[word] += 1\r\n        else: \r\n            result[word] = 1\r\n  \r\n    return result", "task_id": 10096}
{"finetuning_prompt": "\"\"\"\nConvert a positive number from decimal to binary format.\n\"\"\"\n\ndef decimalToBinary(x):\n", "finetuning_completion": " \r\n    return bin(x).replace(\"0b\",\"\")", "task_id": 10100}
{"finetuning_prompt": "\"\"\"\nConstruct a query string using the given parameters.\n\"\"\"\n\ndef construct_query_string(query_parameters):\n", "finetuning_completion": "\r\n    query_string = '?'\r\n    for k, v in query_parameters.items():\r\n        query_string += k + '=' + v + '&'\r\n    query_string = query_string[:-1]\r\n    return query_string", "task_id": 10101}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to minimize the waiting time of passengers in a queue.\n\"\"\"\n\ndef min_waiting_time(queue):\n", "finetuning_completion": " \n    queue.sort() \n    total_waiting_time = 0\n    waiting_time_per_person = 0\n      \n    for i in range(1, len(queue)): \n        waiting_time_per_person += queue[i - 1] \n        total_waiting_time += waiting_time_per_person \n          \n    return total_waiting_time", "task_id": 10114}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the vowel in word.\n\"\"\"\n\ndef findVowels(word):\n", "finetuning_completion": " \n  \n    # vowels string  \n    vowels = \"aeiouAEIOU\"  \n  \n    # counter variable  \n    count = 0\n  \n    # traverse each character in the string  \n    # and compare it with each vowel  \n    for char in word:  \n        if char in vowels:  \n            count = count + 1\n  \n    return count", "task_id": 10115}
{"finetuning_prompt": "\"\"\"\nWrite a function to run an RSA Encryption and Decryption algorithm.\n\"\"\"\n\ndef RSAEncrypt(msg,pubKey):\n", "finetuning_completion": "\n    n,e=pubKey\n    c=pow(msg,e,n)\n    return c\n\ndef RSADecrypt(ct,privKey):\n    n,d=privKey\n    pt=pow(ct,d,n)\n    return pt", "task_id": 10116}
{"finetuning_prompt": "\"\"\"\nCreate a program that predicts the output of a given arithmetic expression.\n\"\"\"\n\ndef predict_arithmatic(expression):\n", "finetuning_completion": "\n  return eval(expression)", "task_id": 10127}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the average of all the values of a specific key in a given dictionary.\n\"\"\"\n\ndef avg_of_key(dict_items, key):\n", "finetuning_completion": "\r\n  sum_val = 0\r\n  count = 0\r\n  for x in dict_items.values():\r\n    sum_val +=  x[key]\r\n    count += 1\r\n  average = sum_val / count\r\n  return average", "task_id": 10128}
{"finetuning_prompt": "\"\"\"\nDesign a program to create a calendar for the next 5 years starting from the current year?\n\"\"\"\n\nimport calendar\r\ndef create_calendar(year):\n", "finetuning_completion": "\r\n  res = {}\r\n  for i in range(year, year + 5):\r\n    year_cal = calendar.Calendar(0).yeardatescalendar(i, 1)\r\n    res[i] = year_cal\r\n  return res", "task_id": 10129}
{"finetuning_prompt": "\"\"\"\nDesign a program to classify an item as green or red according to the given criteria\n\"\"\"\n\ndef classify_color(color, weight):\n", "finetuning_completion": "\n  if color == 'green' and weight <= 10:\n    return 'Green'\n  elif color == 'red' or (color == 'yellow' and weight > 10):\n    return 'Red'\n  else:\n    return 'Invalid'", "task_id": 10130}
{"finetuning_prompt": "\"\"\"\nCreate a machine learning model to classify apples and pears.\n\"\"\"\n\nimport numpy as np\nfrom sklearn.svm import SVC\n\ndef classify_apples_and_pears(X_train, y_train):\n", "finetuning_completion": "\n    clf = SVC(gamma='auto')\n    clf.fit(X_train, y_train)\n    return clf", "task_id": 10134}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to implement a randomized quicksort.\n\"\"\"\n\ndef partition(arr,low,high): \n    i = (low-1)  \n    pivot = arr[high] \n  \n    for j in range(low , high): \n        if   arr[j] <= pivot: \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n\ndef random_quicksort(arr,low,high):\n", "finetuning_completion": " \n    i = (low-1)  \n    pivot = arr[high] \n  \n    for j in range(low , high): \n        if   arr[j] <= pivot: \n            i = i+1 \n            arr[i],arr[j] = arr[j],arr[i] \n  \n    arr[i+1],arr[high] = arr[high],arr[i+1] \n    return ( i+1 ) \n\ndef random_quicksort(arr,low,high):\n    import random\n    if low < high: \n        rand_index = random.randrange(low,high)\n        arr[high], arr[rand_index] = arr[rand_index], arr[high]\n        pi = partition(arr,low,high)\n        random_quicksort(arr,low,pi-1) \n        random_quicksort(arr,pi+1,high)\n    return arr", "task_id": 10142}
{"finetuning_prompt": "\"\"\"\nFind and print all unique palindromic substrings in a given string.\n\"\"\"\n\ndef find_unique_palindromic_substrings(input_string):\n", "finetuning_completion": " \n  # Create an empty set to store all the unique palindromes \n  result = set() \n  n = len(input_string) \n  \n  # Pick one character and expand around it \n  for i in range(n): \n    result.add(input_string[i]) \n    low = i-1\n    high = i+1\n      \n    while low > -1 and high < n and input_string[low] == input_string[high]: \n      result.add(input_string[low:high+1]) \n      low-=1 \n      high+=1 \n  \n  # Iterate over the input and check for palindromes \n  for i in range (n - 1): \n    if input_string[i] == input_string[i + 1]: \n      result.add(input_string[i:i+2]) \n      low = i - 1\n      high = i + 2\n      \n    while low > -1 and high < n and input_string[low] == input_string[high]: \n      result.add(input_string[low:high+1]) \n      low -= 1\n      high += 1\n  \n  return result", "task_id": 10152}
{"finetuning_prompt": "\"\"\"\nWrite a python script to replace every nth occurrence of a character with a new character in a given sentence.\n\"\"\"\n\ndef replaceNthOccurrence(sentence, newChar, n):\n", "finetuning_completion": " \r\n    new_sentence = \"\"\r\n    count = 0\r\n    for char in sentence: \r\n        count += 1 \r\n        if(count%n == 0): \r\n            new_sentence += newChar \r\n        else: \r\n            new_sentence += char \r\n  \r\n    return new_sentence\r\n    \r\nprint(replaceNthOccurrence(\"The quick brown fox jumps over the lazy dog.\", 'X', 3)) # The quiXk browXn foX juXps oveXr the lXzy doXg.", "task_id": 10157}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, write a function to select a subset of size k whose is maximized.\n\"\"\"\n\ndef max_subset(arr, k):\n", "finetuning_completion": " \r\n    largestSum = 0\r\n    indices = [] \r\n    for index_i in range(len(arr) - k + 1): \r\n        tempSum = 0\r\n        for index_j in range(k): \r\n            tempSum += arr[index_i + index_j] \r\n        if tempSum > largestSum: \r\n            largestSum = tempSum \r\n            indices = list(range(index_i, index_i + k)) \r\n  \r\n    return largestSum, indices \r\n  \r\n# Driver code \r\nlargestSum, indices = max_subset([2, 4, 9, 11], 2) \r\nprint(largestSum, indices) # 13, [1, 2]", "task_id": 10158}
{"finetuning_prompt": "\"\"\"\nWrite a python program to encrypt a text using a given algorithm.\n\"\"\"\n\ndef encrypt(plaintext, algorithm):\n", "finetuning_completion": " \r\n    if algorithm == \"Caesar Cipher\": \r\n        ciphertext = \"\" \r\n        key = 3\r\n        for ch in plaintext: \r\n            if ch == ' ': \r\n                ciphertext += ch \r\n            elif  ch.isupper(): \r\n                ciphertext += chr((ord(ch) + key - 65) % 26 + 65) \r\n            else: \r\n                ciphertext += chr((ord(ch) + key - 97) % 26 + 97) \r\n  \r\n        return ciphertext \r\n\r\nprint(encrypt(\"Hello World!\", \"Caesar Cipher\")) # Khoor Zruog!", "task_id": 10159}
{"finetuning_prompt": "\"\"\"\nWrite a python program to edit a given dictionary by changing the values of a specified keys.\n\"\"\"\n\ndef edit_dict(d, key, value):\n", "finetuning_completion": "\r\n    d[key] = value\r\n    return d\r\n  \r\ndict = {'A': 1, 'B': 2, 'C': 3}\r\nkey = 'B'\r\nvalue = 5\r\nprint(edit_dict(dict, key, value))", "task_id": 10162}
{"finetuning_prompt": "\"\"\"\nOptimise this code for counting the frequency of words in a given string.\n\"\"\"\n\ndef count_words(s):\n", "finetuning_completion": "\r\n    s = s.split()\r\n    count = {}\r\n    for word in s:\r\n        if word in count: \r\n            count[word] += 1\r\n        else: \r\n            count[word] = 1\r\n    return count\r\n      \r\nstring = \"hello how are you you you\"\r\nprint(count_words(string))", "task_id": 10163}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes two given lists and returns a new list that contains only elements which are in the first list, but not in the second one.\n\"\"\"\n\ndef list_intersection(list1, list2):\n", "finetuning_completion": "\r\n    new_list = []\r\n    for element in list1:\r\n        if element not in list2:\r\n            new_list.append(element)\r\n            \r\n    return new_list\r\n\r\nlist1 = [3, 2, 1]\r\nlist2 = [3, 4, 5]\r\nprint(list_intersection(list1, list2))", "task_id": 10164}
{"finetuning_prompt": "\"\"\"\nDevelop a program to check for palindrome for a given string.\n\"\"\"\n\ndef palindrome_check(my_string):\n", "finetuning_completion": "\r\n    rev_string = my_string[::-1]\r\n    if (my_string == rev_string):\r\n        return True\r\n    return False", "task_id": 10168}
{"finetuning_prompt": "\"\"\"\nWrite a code to convert a given integer to a string in Python.\n\"\"\"\n\ndef to_string(num):\n", "finetuning_completion": "\n  return str(num)", "task_id": 10171}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes in a string, and prints out a compressed version of the string with the letter counts following the letter.\n\"\"\"\n\ndef compress_string(string):\n", "finetuning_completion": "\n      compressed_str = ''\n      countConsecutive = 0\n      for i in range(len(string)):\n            countConsecutive += 1\n            if (i + 1 >= len(string) or string[i] != string[i + 1]):\n                compressed_str += string[i] + str(countConsecutive)\n                countConsecutive = 0\n      return compressed_str", "task_id": 10174}
{"finetuning_prompt": "\"\"\"\nWrite a function to subtract two numbers and cache the  result for later use.\n\"\"\"\n\ncache = {}\ndef sub(num1, num2):\n", "finetuning_completion": "\n  key = str(num1)+\"-\"+str(num2)\n  if key not in cache:\n    cache[key] = num1 - num2\n  return cache[key]", "task_id": 10178}
{"finetuning_prompt": "\"\"\"\nEdit the following code to convert an array into a heap structure.\n\"\"\"\n\ndef to_heap(arr):\n", "finetuning_completion": "\n    n = len(arr)\n    for i in range(n): \n        while i != 0 and arr[i] > arr[(i-1)//2]:\n            arr[i], arr[(i-1)//2] = arr[(i-1)//2], arr[i]\n            i = (i-1)//2\n    return arr", "task_id": 10181}
{"finetuning_prompt": "\"\"\"\nWrite a function which returns a boolean value depending on if elements of one list are present in another list.\n\"\"\"\n\ndef check_list_presence(nums1, nums2):\n", "finetuning_completion": "\n    for item in nums1:\n        if item not in nums2:\n            return False\n    return True", "task_id": 10182}
{"finetuning_prompt": "\"\"\"\nWrite a function to split a string by spaces preserving quoted strings as single elements.\n\"\"\"\n\ndef split_string_preserve_quotes(string):\n", "finetuning_completion": "\n    quote_flag = False\n    results = []\n    buffer = \"\"\n    for char in string:\n        if char == '\"': \n            quote_flag = not quote_flag\n        elif char == ' ' and not quote_flag:\n            if buffer:\n                results.append(buffer) \n                buffer = \"\"\n        else:\n            buffer += char\n    if buffer: \n        results.append(buffer)\n    return results", "task_id": 10184}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to print out all prime numbers up to a given value?\n\"\"\"\n\ndef print_prime_nums(upper):\n", "finetuning_completion": " \r\n    for num in range(2, upper+1): \r\n        for i in range(2, num): \r\n            if (num % i) == 0: \r\n                break\r\n        else: \r\n            print(num, end=\" \")", "task_id": 10193}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to print every other element of a given tuple.\n\"\"\"\n\ndef print_alternative(tup):\n", "finetuning_completion": " \r\n\tfor i in range(0, len(tup), 2): \r\n\t\tprint(tup[i], end =\" \")", "task_id": 10196}
{"finetuning_prompt": "\"\"\"\nCode a program to insert a value in an array at a given index.\n\"\"\"\n\ndef insert_value(arr, value, index):\n", "finetuning_completion": "\r\n    arr.insert(index,value)\r\n    return arr", "task_id": 10199}
{"finetuning_prompt": "\"\"\"\nCreate a function for computing the maximum value in a given array of integers.\n\"\"\"\n\ndef max_value(arr):\n", "finetuning_completion": " \r\n    max = arr[0] \r\n    for i in range(0,len(arr)): \r\n        if arr[i] > max: \r\n            max = arr[i] \r\n    return max", "task_id": 10203}
{"finetuning_prompt": "\"\"\"\nWrite a python code to edit a given string by adding some text between each letter of the word.\n\"\"\"\n\ndef add_text_between_letters(string):\n", "finetuning_completion": " \r\n    result = '' \r\n    for i in range(len(string)): \r\n        if i == 0: \r\n            result += string[i] \r\n        else: \r\n            result += '_'+string[i] \r\n    return result \n  \r\nstring = 'Hello' \r\nprint(add_text_between_letters(string))", "task_id": 10205}
{"finetuning_prompt": "\"\"\"\nDesign a python function to check if a given sentence contains at least one valid email address.\n\"\"\"\n\nimport re\r\ndef has_email(sentence):\n", "finetuning_completion": "\r\n    regex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"   \r\n    if(re.search(regex,sentence)):  \r\n        return True  \r\n    else:  \r\n        return False", "task_id": 10206}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the index of the given query from a given list of strings.\n\"\"\"\n\nlist = [\"gold\", \"silver\", \"black\", \"purple\", \"green\"]\nquery = \"silver\"\n\ndef find_index(arr, query):\n", "finetuning_completion": " \n    for ele in arr: \n        if ele == query: \n            return arr.index(ele)  \n    return -1\n\nprint(find_index(list, query))", "task_id": 10227}
{"finetuning_prompt": "\"\"\"\nGenerate a program to edit the given string by replacing each character at an even position by its index number.\n\"\"\"\n\ntest_string = \"Hello World!\"\n\ndef edit_string(test_string):\n", "finetuning_completion": " \n  edited_string = \"\"\n  for i in range(0, len(test_string)): \n    if i % 2 == 0: \n      edited_string += str(i)\n    else:\n      edited_string += test_string[i]\n  return edited_string \n\nprint(edit_string(test_string))", "task_id": 10230}
{"finetuning_prompt": "\"\"\"\nGenerate a program that swaps the contents of two lists of equal size.\n\"\"\"\n\nlist1 = [1,2,3,4]\nlist2 = [\"a\",\"b\",\"c\",\"d\"]\n\ndef swap(list1, list2):\n", "finetuning_completion": "\n    new_list1 = list2.copy()\n    new_list2 = list1.copy()\n    return new_list1, new_list2\n    \nprint(swap(list1, list2))", "task_id": 10233}
{"finetuning_prompt": "\"\"\"\nProgram an algorithm to find palindromic substrings of a given string.\n\"\"\"\n\ndef palindromicSubstrings(string):\n", "finetuning_completion": " \r\n\t#Total palindromic substrings \r\n\ttotal = 0; \r\n\tn = len(string); \r\n\t#Boolean 2D matrix \r\n\tPalindromic = [[0 for i in range(n)]for j in range(n)]; \r\n\r\n\t#All substrings of length 1 are palindromes \r\n\tfor i in range(n): \r\n\t\tPalindromic[i][i] = True; \r\n\t\ttotal = total + 1\r\n\t# check for sub-string of length 2. \r\n\tfor i in range(n-1): \r\n\t\tif (string[i] == string[i + 1]): \r\n\t\t\tPalindromic[i][i + 1] = True; \r\n\t\t\ttotal = total + 1\r\n\t# check for lengths greater than 2. k is length \r\n\t# of substring \r\n\tfor k in range(3, n + 1): \r\n\t\t# Fix the starting index \r\n\t\tfor i in range(n - k + 1): \r\n\r\n\t\t\t# Get the ending index of substring from \r\n\t\t\t# starting index i and length k \r\n\t\t\tj = i + k - 1\r\n\r\n\t\t\t# checking for sub-string from ith index to \r\n\t\t\t# jth index iff st[i+1] to st[j-1] is a \r\n\t\t\t# palindrome \r\n\t\t\tif (Palindromic[i + 1][j - 1] and\r\n\t\t\t\tstring[i] == string[j]): \r\n\t\t\t\tPalindromic[i][j] = True\r\n\t\t\t\ttotal = total + 1\r\n\treturn total", "task_id": 10236}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to convert a given number to its nearest multiple of 10.\n\"\"\"\n\ndef nearest_ten(n):\n", "finetuning_completion": " \r\n    if (n % 10 != 0): \r\n        div = (int)(n / 10) \r\n        mod = n % 10 \r\n        if (mod >= 5): \r\n            return (div + 1) * 10\r\n        else: \r\n            return div * 10\r\n    else: \r\n        return n", "task_id": 10251}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to format a specified string to limit the number of characters to 6.\n\"\"\"\n\ndef str_limit(test_string):\n", "finetuning_completion": " \r\n    res = test_string[:6] \r\n    return res", "task_id": 10257}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find the two oldest ages from the given array elements.\n\"\"\"\n\ndef two_oldest_ages(test_list):\n", "finetuning_completion": " \r\n    test_list.sort() \r\n    return [test_list[-2], test_list[-1]]", "task_id": 10258}
{"finetuning_prompt": "\"\"\"\nMake an algorithm to print the following pattern.\n\"\"\"\n\ndef pattern():\n", "finetuning_completion": "\r\n    lastElement=7\r\n    for i in range(1, lastElement + 1):\r\n        for j in range(1, i + 1):\r\n            print(j, end=\" \")\r\n        print()", "task_id": 10268}
{"finetuning_prompt": "\"\"\"\nInput a string and create a function to reverse the words in it.\n\"\"\"\n\ndef reverse_words_in_string(string):\n", "finetuning_completion": " \n  \n    words = string.split(' ') \n  \n    reversed_string = ' '.join(word[::-1] for word in words) \n  \n    return reversed_string", "task_id": 10272}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes three parameter values and sums them together in a specific order (such as add a and b then multiply c).\n\"\"\"\n\ndef sum_in_order(a, b, c):\n", "finetuning_completion": " \r\n    return (a + b)*c", "task_id": 10273}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a dictionary of keys and values and converts it into a two-dimensional array.\n\"\"\"\n\ndef convert_to_array(dictionary):\n", "finetuning_completion": "\n    array = [[key, value] for key, value in dictionary.items()]\n    return array", "task_id": 10274}
{"finetuning_prompt": "\"\"\"\nWrite a function to implement a basic calculator with operations - addition, subtraction, multiplication and division.\n\"\"\"\n\ndef calculator(num1, num2, operator):\n", "finetuning_completion": "\r\n    if operator == 'add':\r\n        return num1 + num2\r\n    elif operator == 'sub':\r\n        return num1 - num2\r\n    elif operator == 'mult':\r\n        return num1 * num2\r\n    elif operator == 'div':\r\n        return num1 / num2", "task_id": 10282}
{"finetuning_prompt": "\"\"\"\nGenerate code to create an array that contains the products of all numbers except the number at each index.\n\"\"\"\n\ndef product_Array(arr):\n", "finetuning_completion": "\r\n    # Allocate memory for the product array \r\n    # and initialize product array as 1 \r\n    product_arr = [1 for i in range(len(arr))] \r\n  \r\n    # Initialize temp variable with value of arr[0]\r\n    temp = arr[0] \r\n  \r\n    # Update the product array by multiplying \r\n    # elements to the left of arr[i] \r\n    for i in range(1, len(arr)): \r\n        product_arr[i] = temp \r\n        temp *= arr[i]  \r\n  \r\n    # Initialize temp variable with value of arr[n-1] \r\n    temp = arr[len(arr) - 1] \r\n  \r\n    # Update the product array by multiplying \r\n    # elements to the right of arr[i] \r\n    for i in range(len(arr) - 2, -1, -1): \r\n        product_arr[i] *= temp \r\n        temp *= arr[i] \r\n  \r\n    return product_arr", "task_id": 10283}
{"finetuning_prompt": "\"\"\"\nCreate a code to generate text from a given sequence.\n\"\"\"\n\ndef generate_sequence_from(Sequence):\n", "finetuning_completion": "\r\n    new_sentence = \"\"\r\n    for word in Sequence:\r\n        new_sentence += word + ' '\r\n        \r\n    new_sentence = new_sentence.strip() # Remove the whitespace\r\n    new_sentence += '.' # Add the period at the end\r\n    return new_sentence", "task_id": 10286}
{"finetuning_prompt": "\"\"\"\nIncrease the readability of the given code.\n\"\"\"\n\ndef foo(x):\n", "finetuning_completion": " \n    A = 1 \n    B = 2 \n    C = 3 \n    if x == A: \n        return B + C \n    elif x == B: \n        return A + C\n    else: \n        return A + B", "task_id": 10288}
{"finetuning_prompt": "\"\"\"\nDesign a method to find the most frequent characters in a string.\n\"\"\"\n\ndef mostFrequent(str):\n", "finetuning_completion": " \r\n  dict = {} \r\n  max = -1\r\n  c = ''  \r\n  for i in str: \r\n    if i in dict: \r\n      dict[i] += 1\r\n    else: \r\n      dict[i] = 1\r\n    if dict[i] > max: \r\n      max = dict[i] \r\n      c = i \r\n  \r\n  return c \r\n  \r\n  \r\nprint(mostFrequent(\"My string\"))", "task_id": 10294}
{"finetuning_prompt": "\"\"\"\nPerform normalization on the given list of numbers.\n\"\"\"\n\ndef normalization(arr):\n", "finetuning_completion": "\n    arr_min = min(arr)\r\n    arr_max = max(arr)\r\n    arr_norm = []\r\n    for i in range(len(arr)):\r\n        arr_norm.append((arr[i] - arr_min) / (arr_max - arr_min))\r\n    return arr_norm\r\n\r\nOutput: [0.0, 0.5, 0.2, 0.7, 1.0]", "task_id": 10301}
{"finetuning_prompt": "\"\"\"\nFind the kth smallest element of a list.\n\"\"\"\n\ndef findKthSmallestElement(list, k):\n", "finetuning_completion": "\r\n    list.sort()\r\n    return list[k-1]\r\n\r\nlist = [12, 15, 11, 20, 14]\r\nk = 3\r\nprint(findKthSmallestElement(list, k)) # 11", "task_id": 10303}
{"finetuning_prompt": "\"\"\"\nConstruct a programming solution to find all possible permutations of the characters in a given string.\n\"\"\"\n\ndef find_permutations(string):\n", "finetuning_completion": " \r\n    result_list = []; \r\n    if len(string) == 1: \r\n        result_list = [string] \r\n\r\n    else: \r\n        for i, letter in enumerate(string): \r\n            for perm in find_permutations(string[:i]+string[i+1:]): \r\n                result_list.append(letter + perm) \r\n\r\n    return result_list", "task_id": 10311}
{"finetuning_prompt": "\"\"\"\nWrite a function to list all the divisors of an integer.\n\"\"\"\n\ndef divisors(n):\n", "finetuning_completion": "\r\n    divisors_list= [x for x in range (1, n+1) if n % x == 0] \r\n    return divisors_list", "task_id": 10322}
{"finetuning_prompt": "\"\"\"\nWrite a python script to replace all non-alphabetic characters in a string with '_' character.\n\"\"\"\n\ndef replace_non_alpha(s):\n", "finetuning_completion": " \r\n    s = s.replace(' ','_') # replace spaces with _\r\n    s = s.replace('!', '_') # replace ! with _\r\n    new_s = '' \r\n    for char in s: # check each character\r\n        if char.isalpha(): # if character is an alphabet\r\n            new_s += char # add it to the result \r\n        else : # otherwise\r\n            new_s += '_' # add a _ character\r\n    \r\n    return new_s \r\nresult = replace_non_alpha(\"This is a test!\") \r\nprint(result) \r\n# Output: This_is_a_test_", "task_id": 10327}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the number of substrings from an input string.\n\"\"\"\n\ndef numberOfSubstrings(str):\n", "finetuning_completion": " \r\n    n = len(str) \r\n    return int(n * (n + 1) / 2)", "task_id": 10334}
{"finetuning_prompt": "\"\"\"\nReplace all the vowels in a given string with '#'.\n\"\"\"\n\ndef replace_vowels(string):\n", "finetuning_completion": " \r\n    return ''.join(['#' if ch in 'aeiouAEIOU' else ch for ch in string])", "task_id": 10336}
{"finetuning_prompt": "\"\"\"\nCompress two lists of integers into one.\n\"\"\"\n\ndef compress_lists(list1, list2):\n", "finetuning_completion": " \r\n    return [i for sublist in zip(list1, list2) for i in sublist]", "task_id": 10337}
{"finetuning_prompt": "\"\"\"\nWrite a function to capitalize all the first letters of words in a sentence.\n\"\"\"\n\ndef capitalize_words(sentence):\n", "finetuning_completion": "\r\n    sentence_list = sentence.split() \r\n    capitals = [word.capitalize() for word in sentence_list]\r\n    return \" \".join(capitals)", "task_id": 10340}
{"finetuning_prompt": "\"\"\"\nGiven the following text, write a function to count the number of words and the number of distinct words.\n\"\"\"\n\ndef count_words(text):\n", "finetuning_completion": " \n  words_count=len(text.split()) \n  distict_words_count=len(set(text.split())) \n  return words_count, distict_words_count", "task_id": 10352}
{"finetuning_prompt": "\"\"\"\nEdit the given code to addressing an off-by-one error.\n\"\"\"\n\ndef printhello (start,end):\n", "finetuning_completion": "\n    for i in range(start,end):\n        print(\"hello world\"+str(i))", "task_id": 10357}
{"finetuning_prompt": "\"\"\"\nCode a function to convert a binary string to its equivalent decimal number.\n\"\"\"\n\ndef bintodec(binary):\n", "finetuning_completion": " \r\n    binary1 = binary  \r\n    decimal, i = 0, 0  \r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return decimal", "task_id": 10360}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the largest odd number from the given array.\n\"\"\"\n\ndef largest_odd_number(arr):\n", "finetuning_completion": " \n\n   largest_odd = -1\n   for num in arr: \n      if num % 2 != 0 and num > largest_odd: \n         largest_odd = num \n   \n   return largest_odd\n\n# Driver code\narr = [1, 3, 6, 8, 11, 12] \nprint(largest_odd_number(arr)) \n# Output: 11", "task_id": 10364}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine whether a given hexadecimal number is divisible by 7.\n\"\"\"\n\ndef divisible_by_7(hex_num):\n", "finetuning_completion": " \n\n    dec_val = int(hex_num, 16) \t        \r\n\r\n    if dec_val % 7 == 0: \r\n        return True \r\n    else: \r\n        return False", "task_id": 10371}
{"finetuning_prompt": "\"\"\"\nWrite a function to update values of two dictionaries.\n\"\"\"\n\ndef update_dicts(dictA, dictB):\n", "finetuning_completion": "\n  dictA.update(dictB)\n  return dictA", "task_id": 10373}
{"finetuning_prompt": "\"\"\"\nWrite a algorithm to sort a numeric data using bubble sort.\n\"\"\"\n\ndef bubble_sort(numbers):\n", "finetuning_completion": " \n  n = len(numbers) \n  for i in range(n): \n    for j in range(0, n-i-1): \n      if numbers[j] > numbers[j+1] : \n        numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n  return numbers", "task_id": 10374}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to shuffle the elements of an array using divide and conquer method.\n\"\"\"\n\ndef shuffle(arr, left, right):\n", "finetuning_completion": " \r\n\tif left < right: \r\n\t\tmid = (left + (right - 1)) // 2\r\n\t\tshuffle(arr, left, mid) \r\n\t\tshuffle(arr, mid + 1, right) \r\n\t\tmerge(arr, left, mid, right) \r\n\r\ndef merge(arr, left, mid, right): \r\n\tn1 = mid - left + 1\r\n\tn2 = right - mid \r\n\tlarr = [0] * n1 \r\n\trarr = [0] * n2 \r\n\tfor i in range(0, n1): \r\n\t\tlarr[i] = arr[left + i] \r\n\tfor j in range(0, n2): \r\n\t\trarr[j] = arr[mid + 1 + j] \r\n\r\n\ti = j = 0\r\n\tk = left \r\n\twhile i < n1 and j < n2: \r\n\t\tif larr[i] <= rarr[j]: \r\n\t\t\tarr[k] = larr[i] \r\n\t\t\ti += 1\r\n\t\telse: \r\n\t\t\tarr[k] = rarr[j] \r\n\t\t\tj += 1\r\n\t\tk += 1\r\n\r\n\twhile i < n1: \r\n\t\tarr[k] = larr[i] \r\n\t\ti += 1\r\n\t\tk += 1\r\n\r\n\twhile j < n2: \r\n\t\tarr[k] = rarr[j] \r\n\t\tj += 1\r\n\t\tk += 1", "task_id": 10379}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for reverse geocoding.\n\"\"\"\n\ndef ReverseGeoCode(geo_location):\n", "finetuning_completion": " \r\n    lat, lng = geo_location \r\n    try: \r\n        query = \"SELECT * FROM geo_location_table WHERE latitude={0} AND longitude={1}\".format(lat, lng) \r\n        result = run_query(query) \r\n        return result \r\n    except Exception as e: \r\n        return e", "task_id": 10401}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the total number of ways to climb n steps with a maximum of k steps at a time (k-step stairs).\n\"\"\"\n\ndef stair_climbing(n, k):\n", "finetuning_completion": " \r\n\r\n  if (n == 0): \r\n    return 1\r\n  elif (n < 0): \r\n    return 0\r\n  else: \r\n    res = 0\r\n    for i in range(1, k+1): \r\n      res += stair_climbing(n-i, k) \r\n    return res \r\n  \r\nn = 6\r\nk = 3\r\nprint(\"Number of ways =\", stair_climbing(n, k))", "task_id": 10405}
{"finetuning_prompt": "\"\"\"\nGenerate an optimized python code to flatten the given nested array.\n\"\"\"\n\ndef flatten(inp_arr):\n", "finetuning_completion": " \r\n  \r\n  res = [] \r\n  for elem in inp_arr: \r\n    if(type(elem) == list): \r\n      res.extend(flatten(elem)) \r\n    else: \r\n      res.append(elem) \r\n      \r\n  return res \r\n\r\ninp_arr = [[1,2],3,[4,[5,6]]] \r\nprint(flatten(inp_arr))", "task_id": 10406}
{"finetuning_prompt": "\"\"\"\nWrite a python program to validate user input with a set of predefined options.\n\"\"\"\n\ndef validate_input(allowed_categories, user_input):\n", "finetuning_completion": "\r\n    categories = [x.lower() for x in allowed_categories]\r\n    if user_input.lower() in categories:\r\n        return True\r\n    return False", "task_id": 10407}
{"finetuning_prompt": "\"\"\"\nAnalyze the given string and break down the elements of all the words and print as an array of arrays.\n\"\"\"\n\ndef breakdown(str):\n", "finetuning_completion": " \r\n    result_arr = []; \r\n    for elem in str: \r\n        result_arr.append(list(elem)) \r\n    return result_arr", "task_id": 10410}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the longest substring of a given string which contains only one occurrence of each letter\n\"\"\"\n\ndef findLongestSubstr(testString):\n", "finetuning_completion": " \r\n  dic = {} \r\n  start, max_length = 0, 0\r\n  for i,s in enumerate(testString): \r\n    if s in dic and start <= dic[s]:  \r\n        start = dic[s] + 1 \r\n    else: \r\n        max_length = max(max_length, i - start + 1) \r\n  \r\n    dic[s] = i \r\n  return max_length", "task_id": 10415}
{"finetuning_prompt": "\"\"\"\nGenerate code for an algorithm that iterates over an array and finds the two closest numbers.\n\"\"\"\n\ndef two_closest_numbers(a):\n", "finetuning_completion": "\r\n  closest_val = 0\r\n  closest_pair = (0, 0)\r\n\r\n  for i in range(len(a)):\r\n    for j in range(i+1, len(a)):\r\n      diff = abs(a[i] - a[j])\r\n      \r\n      if closest_val == 0 or closest_val > diff:\r\n        closest_val = diff\r\n        closest_pair = (a[i], a[j])\r\n\r\n  return closest_pair", "task_id": 10418}
{"finetuning_prompt": "\"\"\"\nGenerate code for a function that flatten an array of subarrays into one array.\n\"\"\"\n\ndef flatten_array(arr):\n", "finetuning_completion": " \n    flattened_arr = [] \n    for sub in arr: \n        for item in sub: \n            flattened_arr.append(item) \n    \n    return flattened_arr", "task_id": 10419}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert an integer from decimal to hexadecimal base.\n\"\"\"\n\ndef dec_to_hex(dec_num):\n", "finetuning_completion": " \n\ttemp = [] \r\n\twhile dec_num > 0: \r\n\t\trem = dec_num % 16\r\n\t\tif rem < 10: \r\n\t\t\ttemp.append(chr(rem + 48)) \r\n\t\telse: \r\n\t\t\ttemp.append(chr(rem + 55)) \r\n\t\tdec_num //= 16\r\n\t\t\r\n\treturn \"\".join(temp[::-1])", "task_id": 10422}
{"finetuning_prompt": "\"\"\"\nGenerate a program to swap adjacent characters in a string.\n\"\"\"\n\ndef swap_adjacent(string):\n", "finetuning_completion": "\r\n    string_list = list(string)\r\n    n = len(string_list)\r\n    for i in range(0, n-1, 2):\r\n        temp = string_list[i]\r\n        string_list[i] = string_list[i+1]\r\n        string_list[i+1] = temp   \r\n    return ''.join(string_list)", "task_id": 10428}
{"finetuning_prompt": "\"\"\"\nImplement a Regular Expression (RE) to check if a string consists of only numerical values.\n\"\"\"\n\nimport re\r\ndef regex_check(text):\n", "finetuning_completion": "\r\n  pattern ='^[0-9]+$'\r\n  if (re.search(pattern, text)):\r\n    return 'Found a match!'\r\n  else:\r\n    return 'Not matched!'", "task_id": 10431}
{"finetuning_prompt": "\"\"\"\nWrite a code to apply K-Means Clustering for a given set of data points.\n\"\"\"\n\nfrom sklearn.cluster import KMeans \r\ndef k_means_clustering(data_points):\n", "finetuning_completion": " \r\n    kmeans = KMeans(n_clusters=2, random_state=0).fit(data_points) \r\n    return kmeans.labels_", "task_id": 10434}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to generate an encoded string for a specified length of a given string.\n\"\"\"\n\ndef encode_string(string, length):\n", "finetuning_completion": "\n    encoded_string = \"\"\n    for i in range(length):\n        encoded_string += chr(ord(string[i%len(string)])+i) \n    return encoded_string", "task_id": 10435}
{"finetuning_prompt": "\"\"\"\nFind out the octal equivalent of a given integer.\n\"\"\"\n\ndef intToOct(n) :\n", "finetuning_completion": " \r\n    return oct(n).lstrip(\"0o\")  \r\n  \r\n# Driver Code \r\nn = 10\r\nprint(intToOct(n))", "task_id": 10442}
{"finetuning_prompt": "\"\"\"\nWrite a python program to filter a given data set and find the top 10 maximum values for a given column.\n\"\"\"\n\ndef top_10_Max_Values(data, column):\n", "finetuning_completion": " \n    sorted_data = sorted(data, key = lambda row: row[column], reverse = True) \n    return sorted_data[:10]", "task_id": 10457}
{"finetuning_prompt": "\"\"\"\nCreate a method to check if the given integer is even or odd.\n\"\"\"\n\ndef is_even(num):\n", "finetuning_completion": "\r\n    return num % 2 == 0", "task_id": 10459}
{"finetuning_prompt": "\"\"\"\nWrite a function convert the given text into a readable format.\n\"\"\"\n\ndef convert_text(text):\n", "finetuning_completion": " \r\n    res = \"\"\r\n    for ch in text:\r\n        if ch.islower():\r\n            res+= ch.upper()\r\n        else:\r\n            res += ch.lower()\r\n    return res", "task_id": 10460}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two arrays as input and produce the merged array.\n\"\"\"\n\ndef merge_arrays(arr1,arr2):\n", "finetuning_completion": " \r\n    n1 = len(arr1) \r\n    n2 = len(arr2) \r\n    n3 = n1 + n2 \r\n    arr3 = [None] * n3 \r\n    \r\n    i = 0\r\n    j = 0\r\n    k = 0\r\n   \r\n    while i < n1 and j < n2: \r\n        if arr1[i] < arr2[j]: \r\n            arr3[k] = arr1[i] \r\n            k += 1\r\n            i += 1\r\n        else: \r\n            arr3[k] = arr2[j] \r\n            k += 1\r\n            j += 1\r\n    \r\n    while i < n1: \r\n        arr3[k] = arr1[i] \r\n        k += 1\r\n        i += 1\r\n      \r\n    while j < n2: \r\n        arr3[k] = arr2[j] \r\n        k += 1\r\n        j += 1\r\n    return arr3", "task_id": 10464}
{"finetuning_prompt": "\"\"\"\nRead a list of integers and compute the mean, mode and median.\n\"\"\"\n\ndef mean_mode_median(lst):\n", "finetuning_completion": "\r\n    mean = sum(lst)/len(lst)\r\n    mode = max(set(lst), key = lst.count) \r\n    lst.sort()\r\n    if len(lst) % 2 == 0:\r\n        median = (lst[len(lst)//2] + lst[len(lst)//2-1])/2\r\n    else:\r\n        median = lst[len(lst)//2]\r\n    return mean, mode, median", "task_id": 10468}
{"finetuning_prompt": "\"\"\"\nFind the largest number in an array using the Selection Sort algorithm.\n\"\"\"\n\n# Selection Sort Algorithm\ndef selection_sort(arr):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        max_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[max_idx] < arr[j]:\n                max_idx = j\n        arr[max_idx], arr[i] = arr[i], arr[max_idx]\n    return max(arr)\n\n# Main\narr = [3,6,2,1,5]\nresult = selection_sort(arr)\nprint(result)", "task_id": 10479}
{"finetuning_prompt": "\"\"\"\nGenerate a set of unique numbers from all the elements of a given list.\n\"\"\"\n\ndef unique_numbers(test_list):\n", "finetuning_completion": " \r\n    return set(test_list)", "task_id": 10483}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate an HTML table using a given list of lists.\n\"\"\"\n\ndef list_to_html_table(test_list):\n", "finetuning_completion": " \r\n    html_code = '<table>'\r\n    for row in test_list: \r\n        html_code += '<tr>'\r\n        for col in row: \r\n            html_code += '<td>'+str(col)+'</td>'\r\n        html_code += '</tr>'\r\n    html_code += '</table>'\r\n    return html_code", "task_id": 10484}
{"finetuning_prompt": "\"\"\"\nImplement a search technique to locate an element in a two dimensional array.\n\"\"\"\n\n# Function to search for a given element in an 2-dimensional array \r\ndef search(arr, x):\n", "finetuning_completion": " \r\n  \r\n    # Iterate over each row and column:\r\n    for i in range(len(arr)): \r\n        for j in range(len(arr[0])): \r\n            # Compare the value in the cell to the element x:\r\n            if (arr[i][j] == x): \r\n                return (\"Element found at index: \" + str(i) + \", \" + str(j)) \r\n  \r\n    return \"Element not found!\"", "task_id": 10488}
{"finetuning_prompt": "\"\"\"\nGenerate code to multiply two numbers provided as input.\n\"\"\"\n\ndef multiply_two_numbers(var1, var2):\n", "finetuning_completion": "\r\n    return var1 * var2", "task_id": 10492}
{"finetuning_prompt": "\"\"\"\nWrite a function to find a given number's factorial.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "task_id": 10497}
{"finetuning_prompt": "\"\"\"\nGenerate a function to extract all digits from a string.\n\"\"\"\n\ndef extract_digits(s):\n", "finetuning_completion": "\n        return ''.join(filter(str.isdigit, s))", "task_id": 10508}
{"finetuning_prompt": "\"\"\"\nGenerate a program to print the difference between the maximum and minimum numbers in a 2D array.\n\"\"\"\n\ndef FindMaxDiff(arr):\n", "finetuning_completion": "\n    minval = arr[0][0]\n    maxval = arr[0][0]\n    for i in range(len(arr)): \n  \n        # Finding maximum element \n        for j in range(len(arr[i])): \n            maxval = max(maxval, arr[i][j])\n            minval = min(minval, arr[i][j]) \n              \n    return maxval - minval", "task_id": 10521}
{"finetuning_prompt": "\"\"\"\nGenerate a program to check for a range of numbers in an array.\n\"\"\"\n\ndef CheckInRange(arr, lower_limit, upper_limit):\n", "finetuning_completion": " \n    output_arr = [] \n    for i in arr: \n        if (i >= lower_limit and i <= upper_limit): \n            output_arr.append(i) \n    return output_arr", "task_id": 10522}
{"finetuning_prompt": "\"\"\"\nCreate a program to compare each element in list1 to another element in list2.\n\"\"\"\n\ndef compare_list_elements(list1, list2):\n", "finetuning_completion": "\r\n  for x in list1:\r\n    for y in list2:\r\n      if x==y:\r\n        return True\r\n  return False", "task_id": 10523}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to sort a given list of strings in alphabet order.\n\"\"\"\n\ndef alphabet_sort(word_list):\n", "finetuning_completion": "\n    word_list = sorted(word_list)\r\n    return word_list", "task_id": 10525}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to generate all combinations of (a,b,c) such that a^2 + b^2 = c^2\n\"\"\"\n\ndef solutions(p):\n", "finetuning_completion": " \n    for a in range(1,p-1): \n        for b in range(a,p): \n            c = p - a - b \n            if ( a*a + b*b == c*c ) : \n                print(\"(\", a,\",\", b , \",\" , c ,\")\" )", "task_id": 10531}
{"finetuning_prompt": "\"\"\"\nCreate a function which designates the grade for a given grade point average.\n\"\"\"\n\ndef grade_designate(gpa):\n", "finetuning_completion": "\n    if gpa <= 2.00:\n        grade = \"F\"\n    elif gpa > 2.00 and gpa <= 2.99:\n        grade = \"D\"\n    elif gpa >= 3.00 and gpa <= 3.49:\n        grade = \"C\"\n    elif gpa >= 3.50 and gpa <= 3.99:\n        grade = \"B\"\n    else:\n        grade = \"A\"\n    return grade", "task_id": 10534}
{"finetuning_prompt": "\"\"\"\nGenerate a script to calculate the score of a word game.\n\"\"\"\n\ndef word_score(words):\n", "finetuning_completion": " \r\n    score = 0\r\n    for word in words:\r\n        score += len(word) * ord(word[0])\r\n    return score", "task_id": 10536}
{"finetuning_prompt": "\"\"\"\nWrite a code to check if an array is an arithmetic progression.\n\"\"\"\n\ndef is_arithmetic_progression(A):\n", "finetuning_completion": " \r\n\tn = len(A) \r\n\tdiff = A[1] - A[0] \r\n\tfor i in range(2, n): \r\n\t\tif (A[i] - A[i-1] != diff): \r\n\t\t\treturn False\n\n\treturn True\n  \n# Driver Code \nA = [2, 4, 6, 8, 10] \nif(is_arithmetic_progression(A)): \r\n\tprint(\"Yes\") \nelse: \r\n\tprint(\"No\")", "task_id": 10547}
{"finetuning_prompt": "\"\"\"\nWrite a function to predict the output class of a given input using logistic regression.\n\"\"\"\n\ndef predict_logistic(x_test):\n", "finetuning_completion": "\r\n  preds = np.round(1/(1+np.exp(-x_test)))\r\n  return preds", "task_id": 10575}
{"finetuning_prompt": "\"\"\"\nWrite a python program to group a list of items based on their input characteristics.\n\"\"\"\n\ndef group_items(input_list):\n", "finetuning_completion": " \r\n    output_dict = {} \r\n\r\n    # iterate over each tuple in the list \r\n    for element in input_list: \r\n\r\n        # check if the key exists in the output_dict \r\n        if element[0] in output_dict.keys(): \r\n\r\n            # if the key exists, we append the value in the list \r\n            output_dict[element[0]].append(element[1]) \r\n\r\n        else: \r\n            # if the key does not exist, we create one \r\n            output_dict[element[0]] = [element[1]] \r\n\r\n    return output_dict", "task_id": 10584}
{"finetuning_prompt": "\"\"\"\nCreate a function to delete elements from a given list except for its first element.\n\"\"\"\n\ndef delete_elements(list1):\n", "finetuning_completion": " \n    for element in list1[1:]: \n        list1.remove(element) \n    return list1", "task_id": 10586}
{"finetuning_prompt": "\"\"\"\nCreate a program to compare two dates (yyyy-mm-dd) to determine whether one date is larger than the other.\n\"\"\"\n\ndef date_compare(date1, date2):\n", "finetuning_completion": " \r\n    a = date1.split(\"-\") \r\n    b = date2.split(\"-\") \r\n  \r\n    year1 = int(a[0]) \r\n    month1 = int(a[1]) \r\n    day1 = int(a[2]) \r\n  \r\n    year2 = int(b[0]) \r\n    month2 = int(b[1]) \r\n    day2 = int(b[2]) \n  \r\n    if year1 > year2 : \r\n        return True\r\n    elif year2 > year1 : \r\n        return False\r\n    else: \r\n        if month1 > month2 : \r\n            return True\r\n        elif month2 > month1 : \r\n            return False\r\n        else: \r\n            if day1 > day2 : \r\n                return True\r\n            elif day2 > day1 : \r\n                return False\r\n            else : \r\n                return True", "task_id": 10589}
{"finetuning_prompt": "\"\"\"\nWrite a function to check which of the given two numbers is the product of two perfect squares.\n\"\"\"\n\ndef check_perfect_squares(a,b):\n", "finetuning_completion": " \r\n    a_sqrt = math.sqrt(a) \r\n    b_sqrt = math.sqrt(b) \r\n  \r\n    if ((a_sqrt * a_sqrt == a) or (b_sqrt * b_sqrt == b)): \r\n        return True \r\n    return False", "task_id": 10593}
{"finetuning_prompt": "\"\"\"\nImplement the Quick Sort algorithm to sort an array of strings.\n\"\"\"\n\ndef quick_sort(arr):\n", "finetuning_completion": "\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        left = [x for x in arr[1:] if x<pivot]\n        right = [x for x in arr[1:] if x>=pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)", "task_id": 10594}
{"finetuning_prompt": "\"\"\"\nFind the number of different binary trees that can be formed from N number of nodes.\n\"\"\"\n\ndef num_binary_trees(N):\n", "finetuning_completion": " \r\n    if (N <=1): \r\n        return 1\r\n    num_trees = 0\r\n    for i in range(1,N+1): \r\n        num_trees += num_binary_trees(i-1) * num_binary_trees(N-i) \r\n    return num_trees", "task_id": 10600}
{"finetuning_prompt": "\"\"\"\nCompare two given strings and output the length of the string with the fewest characters.\n\"\"\"\n\ndef compare_str(str1,str2):\n", "finetuning_completion": " \r\n    len1 = len(str1) \r\n    len2 = len(str2) \r\n   \r\n    if (len1 < len2): \r\n        return len1\r\n    elif (len2 < len1): \r\n        return len2 \r\n    else: \r\n        return len1 \r\n  \r\n# Driver code \r\nstr1 = \"GPT\"\r\nstr2 = \"Generative Pre-Trianing\"\r\nprint(\"Length of the string with the fewest characters is: \", compare_str(str1, str2))", "task_id": 10603}
{"finetuning_prompt": "\"\"\"\nGiven a string, create a function to find the size of the longest palindromic subsequence.\n\"\"\"\n\ndef lps(string):\n", "finetuning_completion": " \r\n    n = len(string) \r\n  \r\n    # Create a table to store results of subproblems \r\n    L = [[0 for x in range(n)] for x in range(n)] \r\n  \r\n    # Strings of length 1 are palindrome of length 1 \r\n    for i in range(n): \r\n        L[i][i] = 1\r\n  \r\n    # Build the table. Note that the lower \r\n    # diagonal values of table are \r\n    # useless and not filled in the process. \r\n    # The values are filled in a \r\n    # manner similar to Matrix Chain \r\n    # Multiplication DP solution (See \r\n    # https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/ \r\n    # cl is length of substring \r\n    for cl in range(2, n+1): \r\n        for i in range(n-cl+1): \r\n            j = i+cl-1\r\n            if string[i] == string[j] and cl == 2: \r\n                L[i][j] = 2\r\n            elif string[i] == string[j]: \r\n                L[i][j] = L[i+1][j-1] + 2\r\n            else: \r\n                L[i][j] = max(L[i][j-1], L[i+1][j]); \r\n  \r\n    return L[0][n-1]", "task_id": 10606}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract the maximum time of the day from a given string of text.\n\"\"\"\n\ndef get_max_temp(text):\n", "finetuning_completion": "\r\n\twords = text.split() \r\n\tmax_temp = -1\r\n\tfor i in range(len(words)): \r\n\t\tif (words[i].isdigit()): \r\n\t\t\ttemp = int(words[i]) \r\n\t\t\tif (temp > max_temp) : \r\n\t\t\t\tmax_temp = temp \r\n\tif (max_temp == -1) : \r\n\t\treturn 0\r\n\treturn max_temp", "task_id": 10608}
{"finetuning_prompt": "\"\"\"\nCreate a program for removing duplicated elements from an array.\n\"\"\"\n\ndef unique_elements(arr):\n", "finetuning_completion": " \n  \n    # Create an empty array to store unique elements \n    unique_list =[] \n  \n    # Iterate over the original array \n    for x in arr: \n  \n        # Check if exists in unique_list or not \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list\n            \n# driver code \narr = [5,5,5,5,5,5,5,3,3,2,2,2]\nprint(unique_elements(arr))", "task_id": 10613}
{"finetuning_prompt": "\"\"\"\nGenerate a program to take a given list of integers and reverse their order.\n\"\"\"\n\ndef reverse_list(my_list):\n", "finetuning_completion": " \r\n    my_list.reverse() \r\n    return my_list", "task_id": 10619}
{"finetuning_prompt": "\"\"\"\nRearrange an array such that it's even numbers are at the beginning and odd numbers are at the end.\n\"\"\"\n\ndef rearrange(list1):\n", "finetuning_completion": " \r\n    even = [] \r\n    odd = [] \r\n    for i in list1: \r\n        if i % 2 == 0: \r\n            even.append(i) \r\n        else: \r\n            odd.append(i) \r\n    list1 = even + odd \r\n    return list1", "task_id": 10628}
{"finetuning_prompt": "\"\"\"\nWrite a function to select the 'price' column from a dataset.\n\"\"\"\n\ndef select_price(table):\n", "finetuning_completion": " \r\n    return table[\"price\"]", "task_id": 10629}
{"finetuning_prompt": "\"\"\"\nCreate a program that can print out the substrings of a given string.\n\"\"\"\n\ndef print_substrings(input_string):\n", "finetuning_completion": " \r\n  \r\n    length = len(input_string) \r\n  \r\n    for i in range(length): \r\n        for j in range(i+1, length+1): \r\n            sub_string = input_string[i:j] \r\n            print(sub_string)", "task_id": 10637}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the mean of a group of numbers in a list.\n\"\"\"\n\ndef mean(input_list):\n", "finetuning_completion": " \r\n    total = sum(input_list) \r\n    num = len(input_list) \r\n    mean = total / num \r\n    return mean", "task_id": 10638}
{"finetuning_prompt": "\"\"\"\nCalculate the combination of a given set of numbers.\n\"\"\"\n\ndef combination(arr):\n", "finetuning_completion": " \r\n  \r\n    res = [] \r\n  \r\n    for i in range(len(arr)): \r\n        for j in range(i+1, len(arr)):  \r\n            element = [arr[i], arr[j]] \r\n            res.append(element) \r\n  \r\n    return res", "task_id": 10648}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes in two dictionaries and creates a single dictionary with all the entries from both of them\n\"\"\"\n\ndef combine_dictionaries(dict1, dict2):\n", "finetuning_completion": " \r\n    combined = {}\r\n    combined.update(dict1) \r\n    combined.update(dict2) \r\n    return combined", "task_id": 10650}
{"finetuning_prompt": "\"\"\"\nGenerate code to sort the given list of strings in decreasing order by length.\n\"\"\"\n\ndef sort_string(list):\n", "finetuning_completion": " \r\n    return sorted(list, key = len, reverse=True)", "task_id": 10654}
{"finetuning_prompt": "\"\"\"\nGenerate code to classify an array of integers into two categories.\n\"\"\"\n\ndef classify(arr):\n", "finetuning_completion": "\r\n    is_even = []\r\n    is_odd = []\r\n    for item in arr:\r\n        if item % 2 == 0:\r\n            is_even.append(item) \r\n        else:\r\n            is_odd.append(item) \r\n    return is_even, is_odd", "task_id": 10655}
{"finetuning_prompt": "\"\"\"\nConstruct a function to properly format the given text string.\n\"\"\"\n\ndef format_string(str):\n", "finetuning_completion": " \n    words = str.split() \n    formatted_words = []  \r\n    for word in words: \r\n        formatted_words.append(word.capitalize()) \r\n    formatted_string = \" \".join(formatted_words) \r\n    return formatted_string", "task_id": 10665}
{"finetuning_prompt": "\"\"\"\nWrite a python function to group all the repeating elements in a list and generate a dictionary.\n\"\"\"\n\ndef group_elements(mylist):\n", "finetuning_completion": "\r\n    groups = {}\r\n    for element in mylist:\r\n        if element not in groups:\r\n            groups[element] = [element]\r\n        else:\r\n            groups[element].append(element)\r\n    return groups", "task_id": 10666}
{"finetuning_prompt": "\"\"\"\nWrite a Python Script that takes an array of strings and groups them into anagrams.\n\"\"\"\n\ndef find_anagrams(words):\n", "finetuning_completion": " \r\n\tanagrams = dict() \r\n\r\n\tfor word in words: \r\n\t\tsorted_word = ''.join(sorted(word))\r\n\t\tif sorted_word in anagrams:\r\n\t\t\tanagrams[sorted_word].append(word) \r\n\t\telse : \r\n\t\t\tanagrams[sorted_word] = [word]\r\n\treturn anagrams", "task_id": 10668}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script that sorts a given array of strings according to the length of each string.\n\"\"\"\n\ndef sortByLength(strings):\n", "finetuning_completion": " \n\tfor i in range(len(strings)): \n\t\tfor j in range(i, len(strings)): \n\t\t\tif len(strings[i]) > len(strings[j]): \n\t\t\t\tstrings[i], strings[j] = strings[j], strings[i] \n\treturn strings", "task_id": 10669}
{"finetuning_prompt": "\"\"\"\nWrite a python algorithm to sort a list containing numbers and strings.\n\"\"\"\n\ndef sort_mixed_list(items):\n", "finetuning_completion": " \r\n    int_list = [] \r\n    str_list = [] \r\n    for item in items: \r\n        if isinstance(item, int) or isinstance(item, float): \r\n            int_list.append(item) \r\n        else: \r\n            str_list.append(item) \r\n    int_list.sort() \r\n    str_list.sort() \r\n    return int_list + str_list", "task_id": 10671}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract the last character of each word in the given string.\n\"\"\"\n\ndef extract_last_char(test_str):\n", "finetuning_completion": " \r\n    list_words = test_str.split() \r\n    res = \"\" \r\n  \r\n    for word in list_words: \r\n        res += word[-1] \r\n  \r\n    return res", "task_id": 10673}
{"finetuning_prompt": "\"\"\"\nFind the length of the longest substring in a given string which is palindrome.\n\"\"\"\n\ndef find_longest_substr(str):\n", "finetuning_completion": " \r\n    n = len(str) \r\n    ans = 0\r\n    for i in range(n): \r\n        for j in range(i, n): \r\n            substr = str[i:j + 1] \n            if (substr==substr[::-1]): \r\n                ans = max(ans, j - i + 1) \r\n    return ans", "task_id": 10674}
{"finetuning_prompt": "\"\"\"\nCreate a code that takes a sentence as an argument and reverses the sentence but retains the order of the words in the sentence.\n\"\"\"\n\ndef reversedSentence(sentence):\n", "finetuning_completion": " \n    words = sentence.split()  \n    reverse_sentence = ' '.join(words[::-1]) \n    return reverse_sentence", "task_id": 10684}
{"finetuning_prompt": "\"\"\"\nImplement a function that masks all special characters of the given string.\n\"\"\"\n\ndef maskSpecialCharcters(str):\n", "finetuning_completion": " \n    res = \"\" \n    for ch in str: \n        if ch.isalnum(): \n            res += ch \n        else: \n            res += '#'   \n    return res", "task_id": 10685}
{"finetuning_prompt": "\"\"\"\nUpdate the given function such that it evaluates and returns the sum of even and odd numbers in the list.\n\"\"\"\n\ndef summation(list1):\n", "finetuning_completion": " \r\n\tsum_even = 0\r\n\tsum_odd = 0\r\n\tfor i in list1: \r\n\t\tif i % 2 == 0: \r\n\t\t\tsum_even += i\r\n\t\telse: \r\n\t\t\tsum_odd += i\r\n\treturn [sum_even, sum_odd]", "task_id": 10698}
{"finetuning_prompt": "\"\"\"\nDevelop a program to check two given lists for elements in common.\n\"\"\"\n\ndef common_elements(list1, list2):\n", "finetuning_completion": " \r\n\treturn list(set(list1).intersection(set(list2)))", "task_id": 10701}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find a number in an array given a set of conditions.\n\"\"\"\n\ndef findNumber(array,search_num,divisible):\n", "finetuning_completion": "\r\n    for num in array:\r\n        if num == search_num and num%divisible == 0:\r\n            return True\r\n    return False", "task_id": 10702}
{"finetuning_prompt": "\"\"\"\nCreate a python program to classify an array of numbers into odd and even\n\"\"\"\n\ndef classify_odd_and_even(arr):\n", "finetuning_completion": " \n    odd_arr = [] \r\n    even_arr = [] \r\n    \r\n    for i in arr: \r\n        if i % 2 == 0: \r\n            even_arr.append(i) \r\n        else: \r\n            odd_arr.append(i) \r\n    return  odd_arr, even_arr", "task_id": 10704}
{"finetuning_prompt": "\"\"\"\nWrite a function to label all the items whose length is greater than 9 as \u2018Valid\u2019 and the rest as \u2018Invalid\u2019\n\"\"\"\n\ndef label_data(data):\n", "finetuning_completion": "\r\n    output = []\r\n    for item in data:\r\n        if len(item) > 9:\r\n            output.append(\"Valid\")\r\n        else:\r\n            output.append(\"Invalid\")\r\n    return output", "task_id": 10710}
{"finetuning_prompt": "\"\"\"\nCreate a closure to compute the running average of a list of inputs.\n\"\"\"\n\ndef running_average():\n", "finetuning_completion": "\r\n    avg = 0\r\n    count = 0\r\n    def inner_avg(num):\r\n        nonlocal avg, count\r\n        count += 1\r\n        avg = (avg * (count-1) + num) / count\r\n        return avg\r\n    return inner_avg", "task_id": 10712}
{"finetuning_prompt": "\"\"\"\nWrite a function that gets a list of integers as input and outputs the list sorted in non-increasing order.\n\"\"\"\n\ndef sort_nondecreasing(lst):\n", "finetuning_completion": " \r\n    for i in range(0, len(lst)): \r\n        index = i \r\n        for j in range(i + 1, len(lst)): \r\n            if lst[index] < lst[j]: \r\n                index = j \r\n\r\n        lst[i], lst[index] = lst[index], lst[i] \r\n    return lst", "task_id": 10714}
{"finetuning_prompt": "\"\"\"\nGenerate a function to summarize text by taking the most recurring words as an output.\n\"\"\"\n\nimport string\nimport collections \n\ndef summarize_text(text):\n", "finetuning_completion": " \n    words = [word.strip(string.punctuation) for word in text.split(\" \")]\n    counts = collections.Counter(words)\n    top_3_words = counts.most_common(3)\n    summary = [word[0] for word in top_3_words]\n    \n    return \" \".join(summary)", "task_id": 10715}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a list of strings into a dictionary; with the first element of each string as the key, and the rest of the string as the value.\n\"\"\"\n\ndef string_to_dict(dictlist):\n", "finetuning_completion": "\n  outdict = {}\n  for s in dictlist:\n    key, value = s.split(',')\n    outdict[key] = value\n  return outdict", "task_id": 10722}
{"finetuning_prompt": "\"\"\"\nCreate a program to store key/value pairs in a dictionary and return the list of keys.\n\"\"\"\n\ndef listKeys(dict1):\n", "finetuning_completion": "\r\n    return dict1.keys()", "task_id": 10731}
{"finetuning_prompt": "\"\"\"\nCreate two functions to turn a given string into a capitalized version and a lowercase version.\n\"\"\"\n\ndef capitalize(string):\n", "finetuning_completion": "\r\n    return string.capitalize()\r\n  \r\ndef lowercase(string):\r\n    return string.lower()", "task_id": 10741}
{"finetuning_prompt": "\"\"\"\nWrite a script to split a given list into two equal parts.\n\"\"\"\n\ndef equal_split(mylist):\n", "finetuning_completion": "\r\n  half = len(mylist)//2\r\n  return mylist[:half], mylist[half:]", "task_id": 10746}
{"finetuning_prompt": "\"\"\"\nEdit a function to find the length of the words with vowel letters in a specified string.\n\"\"\"\n\ndef word_length_with_vowel_letters(mystring):\n", "finetuning_completion": " \r\n\twords = mystring.split() \r\n\tvowel_words = [] \r\n\tfor word in words: \r\n\t\tif any(char in 'aeiouAEIOU' for char in word): \r\n\t\t\tvowel_words.append(word) \r\n\r\n\tvowel_words_length = [len(word) for word in vowel_words] \r\n\treturn vowel_words_length", "task_id": 10747}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract the prime numbers from a given range of integers.\n\"\"\"\n\ndef extract_prime_numbers(start, end):\n", "finetuning_completion": " \r\n    prime_nums_list = [] \r\n    for num in range(start, end + 1): \r\n        if num > 1: \r\n            for i in range(2, num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                prime_nums_list.append(num) \r\n    return prime_nums_list", "task_id": 10749}
{"finetuning_prompt": "\"\"\"\nCreate a code to return the length of the longest increasing subsequence in a given array of integers.\n\"\"\"\n\ndef LongestIncreasingSubsequence(arr):\n", "finetuning_completion": " \r\n    LIS = [1 for _ in range(len(arr))] \r\n  \r\n    for i in range (1 , len(arr)): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and LIS[i]< LIS[j] + 1 : \r\n                LIS[i] = LIS[j]+1 \r\n  \r\n    maximum = 0\r\n    for i in range(len(arr)): \r\n        maximum = max(maximum , LIS[i])  \r\n  \r\n    return maximum", "task_id": 10751}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a list of strings and returns a new list with each string having an additional number at the end.\n\"\"\"\n\ndef new_string_list(string_list):\n", "finetuning_completion": "\r\n  res = [s + str(i) for i, s in enumerate(string_list)]\r\n  return (res)", "task_id": 10752}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the sum of the elements of a given array, where the array is sorted in ascending order by the absolute value of its elements.\n\"\"\"\n\ndef sum_ascending_abs(test_list):\n", "finetuning_completion": " \r\n    res = 0\r\n    test_list.sort(key = abs) \r\n    for i in range(len(test_list)): \r\n        res += test_list[i] \r\n    return (res)", "task_id": 10756}
{"finetuning_prompt": "\"\"\"\nGenerate all possible strings of length n using 'a', 'b' and 'c'.\n\"\"\"\n\ndef generateStringUtil(start, end, out, index, n): \r\n    if(index == n): \r\n        print(''.join(out)) \r\n        return\r\n    for i in range(start, end): \r\n        out[index] = chr(i) \r\n        generateStringUtil(start, end, out, index + 1, n) \r\n    return\r\ndef generateString(n):\n", "finetuning_completion": " \r\n    if(index == n): \r\n        print(''.join(out)) \r\n        return\r\n    for i in range(start, end): \r\n        out[index] = chr(i) \r\n        generateStringUtil(start, end, out, index + 1, n) \r\n    return\r\ndef generateString(n): \r\n    out = [\"\"] * (n) \r\n    generateStringUtil(ord('a'), ord('c') + 1, out, 0, n)", "task_id": 10767}
{"finetuning_prompt": "\"\"\"\nGiven a string and an array of characters, write a function to find the frequency of characters in the string.\n\"\"\"\n\ndef character_frequency(string, arr):\n", "finetuning_completion": "\n    # creates a dictionary of characters and frequency \r\n    freq = {}\r\n    for index in range(len(arr)): \r\n        freq[arr[index]] = 0\r\n  \r\n    # if the characters are present in string, increases the count\r\n    for char in string: \r\n        if char in freq: \r\n            freq[char] += 1\r\n    return freq", "task_id": 10768}
{"finetuning_prompt": "\"\"\"\nGenerate code to parse a given string with a single character as the delimiter.\n\"\"\"\n\ndef parse_string(s, delimiter):\n", "finetuning_completion": " \r\n    arr = s.split(delimiter) \r\n    return arr", "task_id": 10771}
{"finetuning_prompt": "\"\"\"\nCreate a python script to get the first and last 3 digits from 8 digit numbers in a list.\n\"\"\"\n\ndef get_first_last_digits(numbers):\n", "finetuning_completion": "\n    first_last_digits = []\n    for number in numbers:\n        first = int(str(number)[:3])\n        last = int(str(number)[-3:])\n        first_last_digits.append([first, last])\n    return first_last_digits\n\nlist_of_8_digits = [54368921, 46219289, 88567242, 76325879]\nfirst_last_digits = get_first_last_digits(list_of_8_digits)\n\nprint(first_last_digits) # [[543, 892], [462, 289], [885, 242], [763, 879]]", "task_id": 10778}
{"finetuning_prompt": "\"\"\"\nWrite a function to optimize a given code which is not running in the most efficient way.\n\"\"\"\n\ndef calculate_sum(nums):\n", "finetuning_completion": " \n    total = 0\n    for i in nums:\n        total += sum(nums) * i\n    return total", "task_id": 10795}
{"finetuning_prompt": "\"\"\"\nGenerate a code to calculate the average lifetime of a particular system that has already been running for a certain period of time.\n\"\"\"\n\ndef calculate_lifetime(system_time):\n", "finetuning_completion": "\n    avg_lifetime = system_time / 2\n    return avg_lifetime", "task_id": 10796}
{"finetuning_prompt": "\"\"\"\nWrite a Python script to convert a matrix of dimension 3x3 into binary representation.\n\"\"\"\n\ndef to_binary(matrix):\n", "finetuning_completion": "\r\n  binary_matrix = []\r\n  for sub in matrix:\r\n    bin_sub = []\r\n    for ele in sub:\r\n      bin_sub.append(bin(ele)[2:])\r\n    binary_matrix.append(bin_sub)\r\n  return binary_matrix\r\n  \r\nMatrix_val = [[1, 2, 0], [3, 0, 1], [5, 6, 7]]\r\nprint(to_binary(Matrix_val)) #[['1', '10', '0'], ['11', '0', '1'], ['101', '110', '111']]", "task_id": 10797}
{"finetuning_prompt": "\"\"\"\nFind an element in the given list and return its indices.\n\"\"\"\n\ndef find_element(lst, value):\n", "finetuning_completion": " \r\n    index_list = [] \r\n    index = 0   \r\n    while index < len(lst): \r\n        if lst[index] == value: \r\n            index_list.append(index) \r\n        index += 1\r\n    return index_list \r\n  \r\nlst = [1, 2, 3, 4] \r\nvalue = 3\r\nprint(find_element(lst, value))", "task_id": 10810}
{"finetuning_prompt": "\"\"\"\nDesign a program that finds the closest number to a given target in a sorted array.\n\"\"\"\n\ndef closest_number(arr, target):\n", "finetuning_completion": "\r\n    n = len(arr)\r\n    if target <= arr[0]:\r\n        return arr[0]\r\n    if target >= arr[n-1]:\r\n        return arr[n-1]\r\n    i = 0\r\n    j = n-1\r\n    while i <= j:\r\n        mid = (i+j) // 2\r\n        if arr[mid] == target:\r\n            return arr[mid]\r\n        if target < arr[mid]:\r\n            if mid > 0 and (target > arr[mid-1]):\r\n                return get_closest(arr[mid-1],arr[mid],target)\r\n            j = mid - 1\r\n        else:\r\n            if mid < n-1 and (target < arr[mid+1]):\r\n                return get_closest(arr[mid],arr[mid+1],target)\r\n            i = mid + 1\r\n \r\ndef get_closest(val1, val2, target):\r\n    if target - val1 >= val2 - target:\r\n        return val2\r\n    else:\r\n        return val1", "task_id": 10815}
{"finetuning_prompt": "\"\"\"\nCreate a python function that prints the index of each item given in the argument.\n\"\"\"\n\ndef print_indexes(arr):\n", "finetuning_completion": " \n    for i in range(len(arr)): \n        print(arr[i], \"has an index of:\", i)", "task_id": 10818}
{"finetuning_prompt": "\"\"\"\nWrite code to decode the given message using a simple cipher.\n\"\"\"\n\ndef decode(message):\n", "finetuning_completion": " \r\n    decoded_message = \"\" \r\n  \r\n    for letter in message: \r\n        decoded_message+=chr(ord(letter)-1) \r\n    return(decoded_message)", "task_id": 10828}
{"finetuning_prompt": "\"\"\"\nWrite code to print the frequency count for each letter in the given string\n\"\"\"\n\ndef freqCount(string):\n", "finetuning_completion": " \r\n    freq = [0] * 256 \r\n  \r\n    for i in string: \r\n        freq[ord(i)] += 1\r\n    for i in range(256): \r\n        if freq[i] > 0: \r\n            print(chr(i), '-', freq[i])", "task_id": 10830}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to locate a particular element in an array using a binary search approach.\n\"\"\"\n\ndef binarySearch (arr, left, right, x):\n", "finetuning_completion": " \r\n  \r\n    # Check base case \r\n    if right >= left: \r\n  \r\n        mid = left + (right - left) // 2\r\n  \r\n        # If element is present at the middle itself \r\n        if arr[mid] == x: \r\n            return mid \r\n          \r\n        # If element is smaller than mid, then it can only \r\n        # be present in left subarray \r\n        elif arr[mid] > x: \r\n            return binarySearch(arr, left, mid - 1, x) \r\n  \r\n        # Else the element can only be present in right subarray \r\n        else: \r\n            return binarySearch(arr, mid + 1, right, x) \r\n  \r\n    else: \r\n        # Element is not present in the array \r\n        return -1", "task_id": 10846}
{"finetuning_prompt": "\"\"\"\nCompute and print the square root of the given number.\n\"\"\"\n\ndef find_sqrt(number):\n", "finetuning_completion": " \r\n  \r\n    sqrt = number ** 0.5 \r\n    return sqrt \r\n  \r\n# Driver Code \r\nnumber = 16\r\n\r\n# Function Calling \r\nprint(find_sqrt(number))", "task_id": 10857}
{"finetuning_prompt": "\"\"\"\nFind the index of the given element in a list, if it exists.\n\"\"\"\n\ndef binary_search(list_of_values, element):\n", "finetuning_completion": " \r\n      \r\n    first = 0\r\n    last = len(list_of_values)-1\r\n      \r\n    while( first<=last ): \r\n          \r\n        mid = (first + last)//2; \r\n          \r\n        if list_of_values[mid] == element : \r\n            return mid \r\n  \r\n        # Compare it with middle element \r\n        elif list_of_values[mid] < element : \r\n            first = mid + 1\r\n              \r\n        else: \r\n            last = mid - 1\r\n      \r\n    return -1 \n  \r\n# Driver code \r\nlist_of_values = [4, 7, 9, 13, 17] \r\nelement = 9\n  \r\n# Function calling \r\nresult = binary_search(list_of_values, element) \r\nif result != -1: \r\n    print(\"Element is present at index\", str(result)) \r\nelse: \r\n    print(\"Element is not present in the list\")", "task_id": 10859}
{"finetuning_prompt": "\"\"\"\nUse a sorting algorithm to sort a given list in increasing order.\n\"\"\"\n\ndef sorting(list_of_nums):\n", "finetuning_completion": " \r\n\r\n    for i in range(len(list_of_nums)):\r\n\r\n        min_idx = i \r\n        for j in range(i+1, len(list_of_nums)): \r\n            if list_of_nums[min_idx] > list_of_nums[j]: \r\n                min_idx = j \r\n                \r\n        list_of_nums[i], list_of_nums[min_idx] = list_of_nums[min_idx], list_of_nums[i] \r\n\r\n    return list_of_nums\r\n\r\nlist_of_nums = [7, 4, 5, 2, 11] \r\n  \r\nsorted_list_of_nums = sorting(list_of_nums) \r\n  \r\nprint(sorted_list_of_nums)", "task_id": 10860}
{"finetuning_prompt": "\"\"\"\nWrite a python code to find the maximum difference between elements in an array such that larger element appears after the smaller one.\n\"\"\"\n\ndef maxDifference(A):\n", "finetuning_completion": " \r\n    n = len(A) \r\n    max_diff = A[1] - A[0] \r\n    min_element = A[0] \r\n  \r\n    for i in range( 1, n ): \r\n        if (A[i] - min_element > max_diff): \r\n            max_diff = A[i] - min_element \r\n  \r\n        if (A[i] < min_element): \r\n            min_element = A[i] \r\n  \r\n    return max_diff", "task_id": 10862}
{"finetuning_prompt": "\"\"\"\nWrite a python code to rearrange odd and even elements in the given list.\n\"\"\"\n\ndef rearrange_odd_even(a_list):\n", "finetuning_completion": " \r\n    # declaring variables to store odd and even list  \r\n    odd_list = [] \r\n    even_list = [] \r\n  \r\n    # storing even and odd elements from a_list into two different list \r\n    for x in a_list:  \r\n        if x % 2 == 0: \r\n            even_list.append(x) \r\n        else: \r\n            odd_list.append(x) \r\n  \r\n    # merging two list into one \r\n    sorted_list = odd_list + even_list  \r\n  \r\n    return (sorted_list)", "task_id": 10868}
{"finetuning_prompt": "\"\"\"\nCreate a function to generate prime factors of an input number.\n\"\"\"\n\ndef generatePrimeFactors(n):\n", "finetuning_completion": " \r\n    while (n%2 == 0): \r\n        print (2)\r\n        n = n/2 \r\n    for i in range (3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            print (i)\r\n            n = n/i \r\n    if n > 2: \r\n        print (n)", "task_id": 10872}
{"finetuning_prompt": "\"\"\"\nWrite a function to take a number as argument and return the list of numbers up to that number.\n\"\"\"\n\ndef num_list_generator(num):\n", "finetuning_completion": "\r\n  #create an empty list\r\n  num_list = []\r\n  #iterate over the range from 1 to the given number\r\n  for i in range(1, num+1):\r\n    #append each number in the list\r\n    num_list.append(i)\r\n  \r\n  #return the resultant list\r\n  return num_list\r\n  \r\n#test the function\r\nnum = 10\r\nmy_list = num_list_generator(num)\r\nprint(my_list)", "task_id": 10875}
{"finetuning_prompt": "\"\"\"\nFind the most common value across a given dataset containing numbers the numbers.\n\"\"\"\n\ndef most_common(arr):\n", "finetuning_completion": "\n    frequency = {} \n    for item in arr:  \n        if (item in frequency): \n            frequency[item] += 1\n        else: \n            frequency[item] = 1\n            \n    max_num = 0\n    max_item = None\n    for item in frequency.keys(): \n        if frequency[item] > max_num:\n            max_num = frequency[item]\n            max_item = item\n\n    return max_item, max_num", "task_id": 10877}
{"finetuning_prompt": "\"\"\"\nUse dynamic programming to solve the 0-1 knapsack problem.\n\"\"\"\n\ndef knapsack(wt,val,W,n):\n", "finetuning_completion": "\n    memo = [[-1 for _ in range(W + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for w in range(W + 1):\n            if i == 0 or w == 0 :\n                memo[i][w] = 0\n            elif wt[i-1] <= w:\n                memo[i][w] = max(val[i-1] + memo[i-1][w-wt[i-1]], memo[i-1][w])\n            else:\n                memo[i][w] = memo[i-1][w]\n    return memo[n][W]", "task_id": 10878}
{"finetuning_prompt": "\"\"\"\nDesign a program to calculate x to the power of y.\n\"\"\"\n\ndef power(x, y):\n", "finetuning_completion": " \n\tif (y == 0): \n\t\treturn 1\n\telif (int(y % 2) == 0): \n\t\treturn (power(x, int(y /2)) *\n\t\t\t\tpower(x, int(y /2))) \n\telse: \n\t\treturn (x * power(x, int(y / 2)) *\n\t\t\t\tpower(x, int(y / 2)))", "task_id": 10880}
{"finetuning_prompt": "\"\"\"\nCreate a program to parse a given input string and extract all numbers between 0-9.\n\"\"\"\n\nimport re\r\ndef find_numbers(string):\n", "finetuning_completion": " \r\n\tnum = re.findall('[0-9]', string) \r\n\treturn num \r\n\r\nstring = \"This a1is a t3est 8with num7ber 2s between 0-9.\"\r\nprint(find_numbers(string))", "task_id": 10881}
{"finetuning_prompt": "\"\"\"\nIn an array of integers, construct a function to identify the longest consecutive sequence.\n\"\"\"\n\ndef find_longest_consecutive_sequence(arr,n):\n", "finetuning_completion": " \r\n    s = set() \r\n    ans = 0\r\n    for ele in arr: \r\n        s.add(ele) \r\n  \n    for i in range(n): \r\n          \r\n        # check if arr[i] - 1 is in set \r\n        # if yes then this is not \r\n        # first element of array  \r\n        if (arr[i] - 1) not in s:  \r\n            # Then keep going till the  \r\n            # last consecutive element \r\n            j = arr[i] \r\n            while(j in s): \r\n                j += 1\r\n            ans = max(ans, j - arr[i]) \r\n    return ans", "task_id": 10891}
{"finetuning_prompt": "\"\"\"\nGiven an array, generate a function that sorts the array in decreasing order.\n\"\"\"\n\ndef decreasingSort(arr):\n", "finetuning_completion": "\r\n    arr.sort(reverse = True) \r\n    return arr", "task_id": 10894}
{"finetuning_prompt": "\"\"\"\nGenerate a function that counts the number of unique values in an array.\n\"\"\"\n\ndef countUniqueValues(arr):\n", "finetuning_completion": "\r\n    mySet = set()\r\n    for num in arr:\r\n        mySet.add(num)\r\n    return len(mySet)", "task_id": 10895}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to create a dictionary of characteristics given a list of strings.\n\"\"\"\n\ndef create_dict(list):\n", "finetuning_completion": " \r\n    result = {} \r\n    for item in list: \r\n        result[item] = None \r\n    return result", "task_id": 10899}
{"finetuning_prompt": "\"\"\"\nDevelop a function to compute the inverse of a given matrix.\n\"\"\"\n\ndef inverse(matrix):\n", "finetuning_completion": " \n    determinant = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n    if (determinant == 0): \n        return False\n    else: \n        inverse_matrix = [[matrix[1][1] / determinant, -1 * matrix[0][1] / determinant], \n                 [-1 * matrix[1][0] / determinant,  matrix[0][0] / determinant]]\n        return inverse_matrix", "task_id": 10910}
{"finetuning_prompt": "\"\"\"\nCompress a list of numbers by replacing each consecutive sequence of equal elements with a pair consisting of the element and the number of consecutive occurrences.\n\"\"\"\n\ndef compressList(list):\n", "finetuning_completion": " \r\n    res = [] \r\n    prev = list[0] \r\n    count = 1 \r\n    for i in range(1, len(list)): \r\n        if (list[i] == prev): \r\n            count += 1\r\n        else: \r\n            res.append((prev, count)) \r\n            prev = list[i] \r\n            count = 1\r\n    res.append((prev, count)) \r\n    return res", "task_id": 10914}
{"finetuning_prompt": "\"\"\"\nFind the median of two sorted arrays of different sizes.\n\"\"\"\n\ndef median_of_arrays(my_list1, my_list2):\n", "finetuning_completion": "\n    my_list3 = my_list1 + my_list2\n    my_list3.sort()\n    \n    n = len(my_list3)\n    \n    if n % 2 == 0:\n        index1 = n//2\n        index2 = n//2 - 1\n        med = (my_list3[index1] + my_list3[index2])/2\n    else:\n        med = my_list3[n//2]\n        \n    return med\n\nmy_list1 = [1, 5, 8, 9]\nmy_list2 = [2, 4, 10]\nprint(median_of_arrays(my_list1, my_list2)) #Prints 5.5", "task_id": 10919}
{"finetuning_prompt": "\"\"\"\nWrite a function to flatten a nested dictionary into a single dictionary with each key concatenated with their parent keys.\n\"\"\"\n\ndef flatten_dictionary(d):\n", "finetuning_completion": " \n    flat_d = dict() \n\n    def __flatten(d, parent_key =''): \n        for key, val in d.items(): \n            new_key = parent_key + '.' + key if parent_key else key \n            if isinstance(val, dict): \n                __flatten(val, new_key)\n            else: \n                flat_d[new_key] = val \n\n    __flatten(d) \n    return flat_d \n\nmy_dictionary = { \n    'a': 1, \n    'b': { \n        'c': 2, \n        'd': 3 \n    },\n    'e': 4\n}\n\nprint(flatten_dictionary(my_dictionary)) # Prints {'a': 1, 'b.c': 2, 'b.d': 3, 'e': 4}", "task_id": 10920}
{"finetuning_prompt": "\"\"\"\nWrite a Python program that identifies the longest palindrome in a user-inputted string.\n\"\"\"\n\ndef longest_palindrome(s):\n", "finetuning_completion": " \r\n    n = len(s) \r\n    table = [[0 for x in range(n)] for y  \r\n                in range(n)] \r\n    maxlength = 1\r\n    i = 0\r\n    while (i < n): \r\n        table[i][i] = True\r\n        i = i + 1\r\n    \r\n    # check for sub-string of length 2. \r\n    start = 0\r\n    i = 0\r\n    while i < n-1: \r\n        if (s[i] == s[i + 1]): \r\n            table[i][i + 1] = True\r\n            start = i \r\n            maxlength = 2\r\n        i = i + 1\r\n    \r\n    # Check for lengths greater  \r\n    # than 2. k is length \r\n    # of substring \r\n    k = 3\r\n    while k <= n: \r\n        # Fix the starting index \r\n        i = 0\r\n        while i < (n - k + 1): \r\n              \r\n            # Get the ending index of  \r\n            # substring from starting  \r\n            # index i and length k \r\n            j = i + k - 1\r\n  \r\n            # checking for sub-string  \r\n            # from ith index to jth  \r\n            # index iff s[i+1] to  \r\n            # s[j-1] is a palindrome \r\n            if (table[i + 1][j - 1] and s[i] == s[j]): \r\n                table[i][j] = True\r\n  \r\n                if (k > maxlength): \r\n                    start = i \r\n                    maxlength = k \r\n            i = i + 1\r\n        k = k + 1\r\n    print( \"Longest palindrome substring is: \") \r\n    print (s[start : start + maxlength]) \n    return len(s[start: start + maxlength])", "task_id": 10922}
{"finetuning_prompt": "\"\"\"\nCreate a python program to compute the sum of two given integers along with an if condition to check if the two given integers are equal.\n\"\"\"\n\ndef sum_check(integer1,integer2):\n", "finetuning_completion": " \r\n    sum = integer1 + integer2 \r\n    if integer1 == integer2: \r\n        return (sum, True) \r\n    else: \r\n        return (sum, False)", "task_id": 10942}
{"finetuning_prompt": "\"\"\"\nGenerate a program that takes an array and recursively reverse it.\n\"\"\"\n\ndef reverse_array(array1):\n", "finetuning_completion": " \r\n    if len(array1) == 0: \r\n        return [] \r\n    else: \r\n        return [array1[-1]] + reverse_array(array1[:-1])", "task_id": 10943}
{"finetuning_prompt": "\"\"\"\nDevelop a program which takes in a string and counts the frequency of vowels in the string.\n\"\"\"\n\ndef count_vowels(string):\n", "finetuning_completion": "\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    frequency = {}\n    for c in string:\n        if c in vowels:\n            if c in frequency:\n                frequency[c] += 1\n            else:\n                frequency[c] = 1\n    return frequency", "task_id": 10952}
{"finetuning_prompt": "\"\"\"\nWrite a python program to take input of a list and print the second largest element of the list.\n\"\"\"\n\ndef sec_largest_element(input_list):\n", "finetuning_completion": " \r\n  \r\n    # Sort the list \r\n    input_list.sort() \r\n  \r\n    # Return the lement at index -2 \r\n    # after sorting the list \r\n    return input_list[-2]", "task_id": 10957}
{"finetuning_prompt": "\"\"\"\nWrite a code to check if a numerical input is even or odd.\n\"\"\"\n\ndef Is_Odd_or_Even(num):\n", "finetuning_completion": " \r\n    if (num % 2 == 0): \r\n        return \"Even\"\r\n    else: \r\n        return \"Odd\"", "task_id": 10959}
{"finetuning_prompt": "\"\"\"\nWrite a python program to  merge two lists, resulting in a sorted list of distinct elements.\n\"\"\"\n\ndef distinctsort_Merge(list1,list2) :\n", "finetuning_completion": " \r\n    merged_list =list1 + list2\r\n    return sorted(set(merged_list))", "task_id": 10967}
{"finetuning_prompt": "\"\"\"\nCompress a given string.\n\"\"\"\n\ndef compress_String(string) :\n", "finetuning_completion": " \r\n    r = \"\" \r\n    l = len(string) \r\n    if (l == 0) : \r\n        return \"\" \r\n    if (l == 1) : \r\n        return string + \"1\" \r\n    cnt = 1 \r\n    i = 1\r\n    while (i < l) : \r\n        if (string[i] == string[i - 1]) : \r\n            cnt += 1 \r\n        else : \r\n            r = r + string[i - 1] + str(cnt) \r\n            cnt = 1 \r\n        i += 1\r\n    r = r + string[i - 1] + str(cnt)  \r\n    return r", "task_id": 10969}
{"finetuning_prompt": "\"\"\"\nGenerate a list of unique elements from two lists in Python without using set operations.\n\"\"\"\n\ndef unique_list(list1, list2):\n", "finetuning_completion": "\n    uniqueList = []\n    # traverse for all elements \n    for x in list1: \n        # check if exists in uniqueList or not \n        if x not in list2 and x not in uniqueList: \n            uniqueList.append(x) \n    for x in list2: \n        # check if exists in uniqueList or not \n        if x not in list1 and x not in uniqueList: \n            uniqueList.append(x) \n    return uniqueList", "task_id": 10970}
{"finetuning_prompt": "\"\"\"\nFind the maximum product of all unique pairs from a given array.\n\"\"\"\n\ndef max_product_pair(list1):\n", "finetuning_completion": "\r\n    max_product = []\r\n    for i in range(len(list1)):\r\n        for j in range(i+1, len(list1)):\r\n            if list1[i] != list1[j]:\r\n                product = list1[i]*list1[j]\r\n                max_product.append(product)\r\n    return max(max_product)", "task_id": 10971}
{"finetuning_prompt": "\"\"\"\nFind the maximum length of a common substring from strings s1 and s2.\n\"\"\"\n\ndef max_common_substring(s1, s2):\n", "finetuning_completion": " \r\n  \r\n    m = [[0 for i in range(len(s2)+1)]  \r\n            for j in range(len(s1)+1)] \r\n  \r\n    result = 0\r\n  \r\n    # Finding the length of \r\n    # common substring  \r\n    # using DP programme. \r\n    for i in range(len(s1)): \r\n        for j in range(len(s2)): \r\n            if s1[i] == s2[j]: \r\n                m[i + 1][j + 1] = m[i][j] + 1\r\n                result = max(m[i+1][j+1], result) \r\n  \r\n    return result", "task_id": 10972}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a function to reverse order of words in it.\n\"\"\"\n\ndef reverse_words(string):\n", "finetuning_completion": "\r\n  words = string.split(\" \") \r\n  revwords = \" \".join(words[::-1]) \r\n  return revwords", "task_id": 10977}
{"finetuning_prompt": "\"\"\"\nGiven two sorted arrays of size m and n respectively, write a function to find the median of the arrays merged together.\n\"\"\"\n\ndef find_median_arr(A, B):\n", "finetuning_completion": " \r\n    len_arr1 = len(A) \r\n    len_arr2 = len(B) \r\n    if len_arr1 > len_arr2: \r\n        return find_median_arr(B, A) \r\n  \r\n    low = 0\r\n    high = len_arr1 \r\n\r\n    while low <= high: \r\n        partition_x =  low + (high - low) // 2\r\n        partition_y = (len_arr1 + len_arr2 + 1) // 2 - partition_x \r\n  \r\n        max_left_x = A[partition_x - 1] if partition_x != 0 else float('-inf')\r\n        min_right_x = A[partition_x] if partition_x != len_arr1 else float('inf')\r\n\r\n        max_left_y = B[partition_y - 1] if partition_y != 0 else float('-inf') \r\n        min_right_y = B[partition_y] if partition_y != len_arr2 else float('inf') \r\n  \r\n        if max_left_x <= min_right_y and max_left_y <= min_right_x: \r\n            if (len_arr1 + len_arr2) % 2 == 0: \r\n                return (max(max_left_x, max_left_y) + \r\n                        min(min_right_x, min_right_y)) / 2.0\r\n            else: \r\n                return max(max_left_x, max_left_y) \r\n  \r\n        elif max_left_x > min_right_y: \r\n            high = partition_x - 1\r\n        else: \r\n            low = partition_x + 1", "task_id": 10982}
{"finetuning_prompt": "\"\"\"\nGiven an array of strings, group anagrams together.\n\"\"\"\n\nfrom collections import defaultdict \r\n\r\n\r\ndef group_anagrams(arr):\n", "finetuning_completion": " \r\n    ans = defaultdict(list) \r\n  \r\n    for words in arr: \r\n        # key is the sorted word \r\n        key = \"\".join(sorted(words)) \r\n        ans[key].append(words) \r\n  \r\n    return list(ans.values())", "task_id": 10984}
{"finetuning_prompt": "\"\"\"\nGenerate a code to print all the numbers between a start and end range (included) within 10 seconds.\n\"\"\"\n\nimport time \r\ndef print_in_10Seconds(start, end):\n", "finetuning_completion": " \r\n    endTime = time.time() + 10 \r\n    for x in range(start, end + 1):\r\n        print (x)\r\n        if(time.time() > endTime):\r\n            break", "task_id": 10989}
{"finetuning_prompt": "\"\"\"\nConstruct a program which can delete a particular element from an array.\n\"\"\"\n\ndef delete_element(arr, ele):\n", "finetuning_completion": " \r\n    for i in arr: \r\n        if i == ele:  \r\n            arr.remove(i) \r\n            return arr", "task_id": 10992}
{"finetuning_prompt": "\"\"\"\nCreate an edit distance python code for two strings.\n\"\"\"\n\ndef edit_distance(str1, str2):\n", "finetuning_completion": " \r\n\tm = len(str1) \r\n\tn = len(str2) \r\n\ttable = [[0 for x in range(n + 1)] for x in range(m + 1)] \r\n\tfor i in range(m + 1): \r\n\t\tfor j in range(n + 1): \r\n\r\n\t\t\tif i == 0: \r\n\t\t\t\ttable[i][j] = j\r\n\r\n\t\t\telif j == 0 and i > 0: \r\n\t\t\t\ttable[i][j] = i\r\n\t\t\telif str1[i - 1] == str2[j - 1]: \r\n\t\t\t\ttable[i][j] = table[i - 1][j - 1] \r\n\r\n\t\t\telse: \r\n\t\t\t\ttable[i][j] = 1 + min(table[i][j - 1],  table[i - 1][j],\ttable[i - 1][j - 1]) \r\n  \r\n\treturn table[m][n]", "task_id": 10996}
{"finetuning_prompt": "\"\"\"\nModify the code so that it performs a bubble sort on a list of numbers.\n\"\"\"\n\ndef bubble_sort(array):\n", "finetuning_completion": "  \r\n    n = len(array) \r\n    for i in range(n): \r\n        swapped = False\r\n        for j in range(0, n-i-1): \r\n            if array[j] > array[j+1] : \r\n                array[j], array[j+1] = array[j+1], array[j] \r\n                swapped = True\r\n        if swapped == False: \r\n            break\r\n    return array", "task_id": 11014}
{"finetuning_prompt": "\"\"\"\nCreate a program that reads a given speech and creates a list of most commonly used words.\n\"\"\"\n\ndef most_common_words(speech):\n", "finetuning_completion": " \n\twords = speech.split(' ')\n\tword_dict = {}\n\tfor word in words:\n\t\tif word in word_dict:\n\t\t\tword_dict[word] += 1\n\t\telse:\n\t\t\tword_dict[word] = 1\n\tsorted_words = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n\treturn sorted_words", "task_id": 11019}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to compare two strings using their ASCII values.\n\"\"\"\n\ndef compare_ascii(str1,str2):\n", "finetuning_completion": "\r\n    if len(str1) > len(str2):\r\n        return \"first string has a bigger ASCII value\"\r\n    elif len(str1) < len(str2):\r\n        return \"second string has a bigger ASCII value\"\r\n    else:\r\n        # iterate over the strings\r\n        for i in range(min(len(str1), len(str2))):\r\n            # if the char of one string is > the other\r\n            # return the higher ASCII value string\r\n            if ord(str1[i]) > ord(str2[i]):\r\n                return \"first string has a bigger ASCII value\"\r\n            elif ord(str1[i]) < ord(str2[i]):\r\n                return \"second string has a bigger ASCII value\"\r\n        # both strings are equal\r\n        return \"Strings are equal\"", "task_id": 11022}
{"finetuning_prompt": "\"\"\"\nGenerate code to delete an element from a given array using its index.\n\"\"\"\n\ndef delete_by_index(arr,idx):\n", "finetuning_completion": "  \r\n    # Get the index \r\n    i = idx  \r\n\r\n    #Check if the index is valid \r\n    if i >=0 and i< len(arr):  \r\n        # Delete element \r\n        arr.pop(i)  \r\n        return arr \n    else: \r\n        return \"Index is out of range.\"", "task_id": 11023}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find all the pairs whose sum matches with the given input.\n\"\"\"\n\ndef Pairs(test_list,target):\n", "finetuning_completion": " \r\n    res = [] \r\n      \r\n  \r\n    for we in range(0, len(test_list)-1): \r\n          \r\n          \r\n        for je in range(we + 1, len(test_list)): \r\n              \r\n              \r\n            if test_list[we] + test_list[je] == target: \r\n                res.append((test_list[we], test_list[je])) \r\n    return res", "task_id": 11024}
{"finetuning_prompt": "\"\"\"\nDesign a program to concatenate two strings without using library methods.\n\"\"\"\n\ndef ConcatenateStrings(string1, string2):\n", "finetuning_completion": " \r\n    len1=len(string1) \r\n    len2=len(string2) \r\n    combinedString=\"\" \r\n    for i in range(len1): \r\n        combinedString+=string1[i] \r\n    for j in range(len2): \r\n        combinedString +=string2[j] \r\n    return combinedString", "task_id": 11026}
{"finetuning_prompt": "\"\"\"\nImplement a Python function to count the number of substrings that appear an even number of times in a given string of text.\n\"\"\"\n\ndef count_even_substrings(s):\n", "finetuning_completion": " \r\n    s_count = 0\r\n    s_len = len(s) \r\n  \r\n    for i in range(s_len): \r\n  \r\n        for j in range(i + 1, s_len + 1): \r\n  \r\n            substring = s[i:j] \r\n            if substring.count(substring) % 2 == 0 : \r\n                s_count += 1\r\n    return s_count", "task_id": 11028}
{"finetuning_prompt": "\"\"\"\nCreate a Python Script to modify the input text to include all ASCII characters from 32 to 126 in the output.\n\"\"\"\n\ndef encode_text(text):\n", "finetuning_completion": " \r\n    out = \"\" \r\n    for char in text: \r\n        out += str(ord(char)) + \",\" \r\n    for ascii_no in range(32, 127): \r\n        out += str(ascii_no) + \",\" \r\n    return(out)", "task_id": 11030}
{"finetuning_prompt": "\"\"\"\nCreate a regex expression to validate the presence of a series of numbers or letters in a given string.\n\"\"\"\n\nimport re\r\n\r\ndef is_valid_sequence(string):\n", "finetuning_completion": " \r\n    regex = r'[a-zA-Z0-9]+'\r\n    if re.search(regex,string):\r\n        return True\r\n    return False", "task_id": 11033}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given time in seconds to minutes and seconds.\n\"\"\"\n\ndef second_to_time(sec):\n", "finetuning_completion": " \r\n    minutes = int(sec // 60) \r\n    sec = sec % 60\r\n    return minutes, sec", "task_id": 11035}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to classify array elements into three categories based on their values.\n\"\"\"\n\ndef classify_array(array):\n", "finetuning_completion": "\r\n    low = []\r\n    mid = []\r\n    high = []\r\n    for i in array:\r\n        if i<5:\r\n            low.append(i)\r\n        elif 5<=i<=7:\r\n            mid.append(i)\r\n        else:\r\n            high.append(i)\r\n    return low,mid,high", "task_id": 11041}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes an integer number as an argument and calculates the sum of it's prime factors.\n\"\"\"\n\ndef primeFactor(N):\n", "finetuning_completion": " \r\n    primeFactors = [] \r\n    while N % 2 == 0: \r\n        primeFactors.append(2) \r\n        N = N / 2 \r\n    for i in range(3, int(math.sqrt(N)) + 1, 2): \r\n        while N % i == 0: \r\n            primeFactors.append(int(i)) \r\n            N = N / i \r\n    if N > 2: \r\n        primeFactors.append(int(N)) \r\n    return sum(primeFactors)", "task_id": 11042}
{"finetuning_prompt": "\"\"\"\nGenerate a program which takes a list of strings as an argument and returns a list of strings which contain a given letter.\n\"\"\"\n\ndef extract_letter(list_strings, letter):\n", "finetuning_completion": " \r\n    res = [] \r\n    for each in list_strings: \r\n        if letter in each: \r\n            res.append(each) \r\n    return res", "task_id": 11043}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the price of an item after discount.\n\"\"\"\n\ndef calculate_price(price, discount):\n", "finetuning_completion": " \r\n    return price - (price * (discount/100))", "task_id": 11062}
{"finetuning_prompt": "\"\"\"\nGenerate a list of the first 8 perfect cubes with their respective cube root.\n\"\"\"\n\ndef perfect_cubes():\n", "finetuning_completion": " \r\n  cubes = [] \r\n  for i in range(1,9): \r\n    cubes.append((i**3, i)) \r\n  return cubes", "task_id": 11069}
{"finetuning_prompt": "\"\"\"\nGiven two strings, write a python program to calculate the edit distance between them.\n\"\"\"\n\ndef edit_distance(str1, str2):\n", "finetuning_completion": " \r\n  matrix = [[0 for x in range(len(str2)+1)] for x in range(len(str1)+1)] \r\n  \r\n  for i in range(len(str1)+1): \r\n    for j in range(len(str2)+1): \r\n  \r\n      if i == 0: \r\n        matrix[i][j] = j\r\n\r\n      elif j == 0: \r\n        matrix[i][j] = i\r\n  \r\n      elif str1[i-1] == str2[j-1]: \r\n        matrix[i][j] = matrix[i-1][j-1] \r\n  \r\n      else: \r\n        matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1]) \r\n  \r\n  return matrix[len(str1)][len(str2)]", "task_id": 11071}
{"finetuning_prompt": "\"\"\"\nClean and pre-process the given text for analysis.\n\"\"\"\n\nimport re\r\ndef clean_text(text):\n", "finetuning_completion": " \r\n  text = re.sub(r'[^\\w\\s]', '', text).lower() \r\n  text = re.sub(r'\\s+', ' ', text) \r\n  return text", "task_id": 11074}
{"finetuning_prompt": "\"\"\"\nDevelop a probabilistic model to predict the probability of a customer opting for an in-app purchase.\n\"\"\"\n\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\ndef predict_in_app_purchase(X_train, y_train):\n", "finetuning_completion": " \r\n\r\n    #define a Random Forest classification model \r\n    rfc = RandomForestClassifier(random_state=0)\r\n    #fit the model with the training data \r\n    rfc.fit(X_train, y_train)\r\n\r\n    #predict probabilities of customers purchasing in-app \r\n    y_pred_prob = rfc.predict_proba(X_train)[:,1]\r\n\r\n    return y_pred_prob", "task_id": 11076}
{"finetuning_prompt": "\"\"\"\nCreate a code to handle string type inputs and verify that they are all in lowercase.\n\"\"\"\n\ndef lowercase_verification(string):\n", "finetuning_completion": " \r\n    for c in string: \r\n        if not c.islower(): \r\n            return False\r\n  \r\n    return True", "task_id": 11095}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the maximum element in a list of tuples whose first elements are numbers.\n\"\"\"\n\ndef max_tup(tup):\n", "finetuning_completion": " \r\n    max_ele = tup[0][0] \r\n    for i in tup: \r\n        if i[0] > max_ele: \r\n            max_ele = i[0] \r\n    return max_ele", "task_id": 11098}
{"finetuning_prompt": "\"\"\"\nGiven a nested dictionary, write code to flatten keys for all values.\n\"\"\"\n\ndef flatten_dict(data):\n", "finetuning_completion": " \r\n    result = {} \r\n    def flatten(x, name=''): \r\n        if type(x) is dict: \r\n            for a in x: \r\n                flatten(x[a], name + a + '_') \r\n        else: \r\n            result[name[:-1]] = x \r\n    flatten(data) \r\n    return result", "task_id": 11099}
{"finetuning_prompt": "\"\"\"\nGiven a list of students, generate a histogram to visualize the age of each one.\n\"\"\"\n\nimport matplotlib.pyplot as plt \r\ndef histogram(students):\n", "finetuning_completion": " \r\n    ages = [ student['age'] for student in students ] \r\n    plt.hist(ages) \r\n    plt.title(\"Ages of Students\") \r\n    plt.xlabel(\"Age\") \r\n    plt.ylabel(\"Frequency\")\r\n    plt.show()", "task_id": 11100}
{"finetuning_prompt": "\"\"\"\nCreate a program to clear a given HTML page by removing all tags from it.\n\"\"\"\n\nimport re  \r\ndef clear_html(content):\n", "finetuning_completion": " \r\n    return re.sub(r'<[^>]*>', '', content)", "task_id": 11103}
{"finetuning_prompt": "\"\"\"\nConstruct a function to remove duplicate items from an array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \n    new_arr = [] \n    for i in arr: \n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr", "task_id": 11109}
{"finetuning_prompt": "\"\"\"\nWrite a python program to identify the words which occur at least thrice in a given text.\n\"\"\"\n\ndef find_Thrice_Occurring_Words(text) :\n", "finetuning_completion": " \r\n    # Split the text into word list \r\n    word_list = text.split() \r\n  \r\n    # Create a dictionary to count the occurrence of each word \r\n    word_dict = {} \r\n    for word in word_list : \r\n        if word not in word_dict : \r\n            word_dict[word] = 1\r\n        else : \r\n            word_dict[word] += 1\r\n  \r\n    # Collect all words that occur at least thrice \r\n    thrice_occurring_words = [] \r\n    for word in word_dict : \r\n        if word_dict[word] >= 3 : \r\n            thrice_occurring_words.append(word) \r\n  \r\n    return thrice_occurring_words \r\n  \r\n# Driver code \r\ntext = \"My name is John and I love coding\"\r\nprint(find_Thrice_Occurring_Words(text)) # output => []", "task_id": 11114}
{"finetuning_prompt": "\"\"\"\nFormulate an algorithm to find the number of strings that can be formed using n characters of which m are vowels and n-m are consonants.\n\"\"\"\n\ndef numString(n, m):\n", "finetuning_completion": " \r\n    if m == 0: \r\n        # m = 0, means all elements are consonants  \r\n        # return number of strings we can form  \r\n        return pow(2, n) \r\n    else: \r\n        # To handle last n \u2013 k characters  \r\n        return (n - m + 1) * numString(n - 1, m - 1)", "task_id": 11117}
{"finetuning_prompt": "\"\"\"\nWrite a code to interpolate a given set of points using Lagrange interpolation.\n\"\"\"\n\ndef lagrange(x, y, X):\n", "finetuning_completion": " \n    n = len(x) \n    result = 0.0\n    for i in range(n): \n        term = y[i] \n        for j in range(n): \n            if j != i: \n                term *= (X - x[j])/(x[i] - x[j]) \n  \n        result+=term \n    return result", "task_id": 11118}
{"finetuning_prompt": "\"\"\"\nGenerate code to swap the first and last element of a list.\n\"\"\"\n\ndef swap_first_last(some_list):\n", "finetuning_completion": " \n  some_list[0], some_list[-1] = some_list[-1], some_list[0] \n  return some_list", "task_id": 11122}
{"finetuning_prompt": "\"\"\"\nOptimize the given vector of data by converging the input vector to the identity vector.\n\"\"\"\n\ndef optimize_data(data):\n", "finetuning_completion": " \r\n  identity_vector = [1,1,1,1,1,1] \r\n  length = len(data) \r\n  while data != identity_vector: \r\n    for i in range(length): \r\n      if data[i] < identity_vector[i]: \r\n        data[i]+=1\r\n      elif data[i] > identity_vector[i]:\r\n        data[i]-=1\r\n \r\n  return data", "task_id": 11123}
{"finetuning_prompt": "\"\"\"\nCreate a code to replace a particular character in the given string with a given character.\n\"\"\"\n\ndef replace_chars(s,char1,char2):\n", "finetuning_completion": "\r\n    str1 = \"\"\r\n    for char in s:\r\n        if char == char1:\r\n            str1 += char2\r\n        else:\r\n            str1 += char\r\n    return str1", "task_id": 11128}
{"finetuning_prompt": "\"\"\"\nDevelop a Python program that computes the sum of the n prime numbers.\n\"\"\"\n\ndef isPrime(num): \n  if num > 1:\n     #check for factors \n    for x in range(2, num):\n      if (num % x) == 0:\n        return False\n    else: \n        return True\n  else: \n    return False\n\ndef primeSum(n):\n", "finetuning_completion": " \n  if num > 1:\n     #check for factors \n    for x in range(2, num):\n      if (num % x) == 0:\n        return False\n    else: \n        return True\n  else: \n    return False\n\ndef primeSum(n): \n  primeNum = [] \n  sum = 0\n  num = 2\n  while (len(primeNum) < n):  \n    if (isPrime(num)): \n        primeNum.append(num)\n    num += 1\n   \n  for i in primeNum : \n    sum += i \n  return sum\n\nn = 10\nprint(primeSum(n))", "task_id": 11130}
{"finetuning_prompt": "\"\"\"\nFormat a given number in American currency notation.\n\"\"\"\n\ndef format_currency(num):\n", "finetuning_completion": " \r\n\treturn \"${:,.2f}\".format(num)", "task_id": 11134}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to edit a given input string to its equivalent English sentence.\n\"\"\"\n\ndef edit_input_string(input_str):\n", "finetuning_completion": " \r\n\treturn input_str.replace('_',' ').capitalize()+\".\"", "task_id": 11140}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to generate multiplication tables.\n\"\"\"\n\ndef generate_mult_table(n):\n", "finetuning_completion": " \r\n  for i in range(1, n+1): \r\n    for j in range(1, n+1): \r\n         print(i * j, end=\" \") \r\n    print()", "task_id": 11144}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the standard deviation of an array in Python\n\"\"\"\n\ndef standard_deviation(arr):\n", "finetuning_completion": " \n  \n    n = len(arr) \r\n    m = sum(arr) / n \r\n    variance = sum((x - m) ** 2 for x in arr) / n  \r\n    sd = variance ** 0.5  \r\n  \r\n    return sd", "task_id": 11147}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to group the list of words into distinct categories.\n\"\"\"\n\ndef group_words(words):\n", "finetuning_completion": "\r\n    fruits = {'apple', 'banana', 'mango', 'orange', 'lemon'}\r\n    result = {'fruits': [], 'others': []}\r\n    for word in words:\r\n        if word in fruits:\r\n            result['fruits'].append(word)\r\n        else:\r\n            result['others'].append(word)\r\n            \r\n    return result", "task_id": 11152}
{"finetuning_prompt": "\"\"\"\nGenerate a function to group the list of strings into two categories depending on their length.\n\"\"\"\n\ndef group_by_length(my_list):\n", "finetuning_completion": "\r\n    short = []\r\n    long = []\r\n    for word in my_list:\r\n        if len(word) > 3:\r\n            long.append(word)\r\n        else:\r\n            short.append(word)\r\n    return (short, long)", "task_id": 11154}
{"finetuning_prompt": "\"\"\"\nCompile a program to find the sum of the odd digits and even digits in the given number.\n\"\"\"\n\ndef sum_odd_even_digits(number):\n", "finetuning_completion": "\n    odd_digits_sum = 0\r\n    even_digits_sum = 0\r\n\r\n    # Iterate over each digit of number \r\n    while (number != 0): \r\n        digit = number % 10\r\n  \r\n        # Add digits to corresponding sum \r\n        if (digit % 2 == 0): \r\n            even_digits_sum += digit \r\n        else: \r\n            odd_digits_sum += digit \r\n  \r\n        number = number // 10\r\n  \r\n    # Return both sums \r\n    return (odd_digits_sum, even_digits_sum)", "task_id": 11155}
{"finetuning_prompt": "\"\"\"\nDevelop a program that multiplies two complex numbers.\n\"\"\"\n\ndef multiply_complex(first,second):\n", "finetuning_completion": "\r\n    return (first.real*second.real - first.imag*second.imag + \r\n            (first.real*second.imag + first.imag*second.real) * 1j)", "task_id": 11157}
{"finetuning_prompt": "\"\"\"\nDevelop a program to rotate an array of integers by a given number.\n\"\"\"\n\ndef rotate_array(startArray, number):\n", "finetuning_completion": "\n    array_length = len(startArray)\n    shifted = [0] * array_length\n    for i in range(array_length): \n        shifted[(i + number) % array_length] = startArray[i]\n    return shifted", "task_id": 11167}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to print all valid combinations of n-pairs of parentheses.\n\"\"\"\n\ndef Parenthese(n):\n", "finetuning_completion": "\r\n    Res = []\r\n    if n > 0:\r\n        ParentheseUtil(Res,\"\", 0, 0, n)\r\n    return Res\r\n\r\ndef ParentheseUtil(Res,string, open_count, close_count, max_value):\r\n    if open_count == close_count == max_value:\r\n        Res.append(string)\r\n        return\r\n    if open_count < max_value:\r\n        ParentheseUtil(Res, string + \"(\", open_count+1, close_count, max_value)\r\n    if close_count < open_count:\r\n        ParentheseUtil(Res, string + \")\", open_count, close_count+1, max_value)", "task_id": 11168}
{"finetuning_prompt": "\"\"\"\nCreate a function to check if two strings have equal characters.\n\"\"\"\n\ndef areEqual(str1, str2):\n", "finetuning_completion": " \r\n      \r\n    # Create dictionaries and store  \r\n    # all occurrences of all characters \r\n    dict1 = dict() \r\n    dict2 = dict() \r\n  \r\n    # Store a character from first \r\n    # string and its occurrences  \r\n    for i in str1: \r\n        dict1[i] = dict1.get(i, 0) + 1\r\n  \r\n    # Store a character from second  \r\n    # string and its occurrences  \r\n    for i in str2: \r\n        dict2[i] = dict2.get(i, 0) + 1\r\n  \r\n    # If both dictionaries are same,  \r\n    # then strings have equal characters. \r\n    if dict1 == dict2: \r\n        return True\r\n    else:  \r\n        return False", "task_id": 11174}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to create a depth-first search algorithm to find the shortest path from node A to node B.\n\"\"\"\n\ndef dfs_shortest_path(graph, start, goal):\n", "finetuning_completion": "\r\n  explored = []\r\n  queue = [[start]]\r\n  if start == goal:\r\n    return \"Already there!\"\r\n\r\n  while queue:\r\n    path = queue.pop(0)\r\n    node = path[-1]\r\n    if node not in explored:\r\n      neighbours = graph[node]\r\n\r\n      for neighbour in neighbours:\r\n        new_path = list(path)\r\n        new_path.append(neighbour)\r\n        queue.append(new_path)\r\n\r\n        if neighbour == goal:\r\n          return new_path\r\n\r\n      explored.append(node)\r\n\r\n  return \"No way!\"", "task_id": 11180}
{"finetuning_prompt": "\"\"\"\nGenerate optimized code to find the average of all numbers in a data set.\n\"\"\"\n\ndef avg(data):\n", "finetuning_completion": "\r\n    return sum(data) / len(data)", "task_id": 11182}
{"finetuning_prompt": "\"\"\"\nWrite code to find frequencies of items in a given array.\n\"\"\"\n\nfrom collections import Counter\ndef item_frequencies(arr):\n", "finetuning_completion": " \n    cnt = Counter()  \n    for item in arr: \n        cnt[item] += 1\n    return cnt", "task_id": 11189}
{"finetuning_prompt": "\"\"\"\nEdit the following code to make it a tail recursive program to reverse a string.\n\"\"\"\n\ndef reverse(s, rev=''):\n", "finetuning_completion": " \r\n    # base case \r\n    if len(s) == 0: \r\n        return rev \r\n    # rev stores the value of reversed string  \r\n    rev += s[-1] \r\n    # recursive call for sub-string \r\n    return reverse(s[:-1], rev)", "task_id": 11192}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to detect overlapping subarrays.\n\"\"\"\n\ndef check_overlapping(arr1, arr2):\n", "finetuning_completion": " \r\n    # traverse both arrays \r\n    for i in range(len(arr1)): \r\n        for j in range(len(arr2)): \r\n            # compare elements of both arrays \r\n            if arr1[i] == arr2[j]: \r\n                #check if elements \r\n                # from both arrays match \r\n                # conditions for overlapping \r\n                if (i != j and arr1[i + 1] == arr2[j + 1]): \r\n                    return True\r\n    return False", "task_id": 11193}
{"finetuning_prompt": "\"\"\"\nWrite a python script to check if an input string is a valid ISBN number.\n\"\"\"\n\ndef is_Valid_ISBN(string):\n", "finetuning_completion": " \n    if(len(string) != 10 and len(string) != 13): \n        return False \n    s = 0\n    if(len(string) == 10): \n        for i in range(0, 9): \n             \n            # Compute s \n            s += (i + 1) * int(string[i]) \n  \n        # Calculate the checksum \n        checksum = s % 11 \n  \n        # Compare the checksum with the last  \n        # digit of the ISBN \n        if checksum == int(string[-1]): \n            return True\n        else: \n            return False\n    elif (len(string) == 13): \n        for i in range(0, 12): \n            if i % 2 == 0:       \n                s += int(string[i]) \n            else: \n                s += 3 * int(string[i]) \n  \n        # Calculate the checksum \n        checksum = 10 - s % 10; \n  \n        # Compare the checksum with the last  \n        # digit of the ISBN \n        if checksum == int(string[-1]): \n            return True\n        else: \n            return False\n    else:\n        return False", "task_id": 11195}
{"finetuning_prompt": "\"\"\"\nCreate a matrix of size N\u00d7N containing binary numbers only.\n\"\"\"\n\ndef create_matrix(N):\n", "finetuning_completion": "\n    matrix = [[0 for x in range(N)] for y in range(N)]\n    for i in range(N):\n        for j in range(N):\n            matrix[i][j] = bin(i+j)[2:]\n    return matrix", "task_id": 11199}
{"finetuning_prompt": "\"\"\"\nRewrite a Python program to remove all elements divisible by three from a list.\n\"\"\"\n\ndef remove_div_by_three(list1):\n", "finetuning_completion": " \n    list2 = [] \n    for num in list1: \n        if num % 3 != 0: \n            list2.append(num) \n  \n    return list2", "task_id": 11200}
{"finetuning_prompt": "\"\"\"\nHow would you define a function to check if numbers in a given list are prime or not?\n\"\"\"\n\ndef is_prime(list1):\n", "finetuning_completion": "\n    result = [] \n    for num in list1:\n        if num > 1:\n            for divisor in range(2, num):\n                if num % divisor == 0:\n                    break\n            else:\n                result.append(True)\n        else:\n            result.append(False)\n                \n    return result", "task_id": 11201}
{"finetuning_prompt": "\"\"\"\nDesign a function to remove the characters from a given array if they appear more than once.\n\"\"\"\n\ndef remove_repeating_chars(arr):\n", "finetuning_completion": "\n    result = []\r\n    for i in arr:\r\n        if i not in result:\r\n            result.append(i)\r\n    return result\r\n\r\nprint (remove_repeating_chars(['a', 'b', 'c', 'd', 'a', 'e']))", "task_id": 11205}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find out how many times each word from a given list is present in a given sentence.\n\"\"\"\n\ndef wordCount(list, sentence):\n", "finetuning_completion": " \n    dict = {} \r\n    for word in list: \n        count = sentence.count(word) \r\n        dict[word] = count \n    return dict", "task_id": 11212}
{"finetuning_prompt": "\"\"\"\nCreate a program to find whether a given number is an Armstrong number.\n\"\"\"\n\ndef isArmstrong(num):\n", "finetuning_completion": "  \r\n   # variable power will store the power of each digit  \r\n    power = len(str(num))  \r\n      \r\n    # variable number will store the sum of power of each digit  \r\n    number = 0  \r\n  \r\n    # find the sum of each digit raised to the power length  \r\n    temp = num  \r\n    while temp > 0:  \r\n        digit = temp % 10  \r\n        number += digit ** power  \r\n        temp //= 10  \r\n  \r\n    # if number is equal to the given number, \r\n    # the number is armstrong number  \r\n    if num == number:  \r\n        return True  \r\n    else:  \r\n        return False", "task_id": 11221}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to extend a given list of numbers by adding length of the lists as the last element.\n\"\"\"\n\ndef extend_list(nums):\n", "finetuning_completion": "\r\n    nums.append(len(nums))\r\n    return nums", "task_id": 11223}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes a list of integers as input and returns a dictionary of odd and even numbers as output.\n\"\"\"\n\ndef odd_even_dict(nums):\n", "finetuning_completion": "\n    odd_list = [num for num in nums if num % 2 == 1]\n    even_list = [num for num in nums if num % 2 == 0]\n    return {'odd':odd_list, 'even': even_list}", "task_id": 11225}
{"finetuning_prompt": "\"\"\"\nCreate a function that normalizes a given list of numbers into a cross-product unit vector.\n\"\"\"\n\ndef normalize(nums):\n", "finetuning_completion": "\n    norm = np.linalg.norm(nums)\n\n    if norm == 0:\n        return nums\n    return [num/norm for num in nums]", "task_id": 11226}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove any element from a set.\n\"\"\"\n\ndef remove_elements(myset, element):\n", "finetuning_completion": " \n\tmyset.discard(element) \n\treturn myset", "task_id": 11227}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to identify if a given string contains only prime numbers.\n\"\"\"\n\n# Function to check if a number is prime or not. \ndef checkPrime(num):\n    if num > 1:\n        for j in range(2,int(num/2)+1):\n            if (num % j) == 0:\n                return False\n        else: \n            return True\n    else: \n        return False   \n\n# Function to identify if a given string contains only prime numbers.\ndef checkStringPrime(string):\n", "finetuning_completion": "\n    if num > 1:\n        for j in range(2,int(num/2)+1):\n            if (num % j) == 0:\n                return False\n        else: \n            return True\n    else: \n        return False   \n\n# Function to identify if a given string contains only prime numbers.\ndef checkStringPrime(string): \n    for i in string:\n        if checkPrime(int(i)) == False: \n            return False\n    return True", "task_id": 11230}
{"finetuning_prompt": "\"\"\"\nWrite a python program that decrypts the given cipher text.\n\"\"\"\n\ndef decrypt(cipher, plainText):\n", "finetuning_completion": "  \r\n    result = \"\" \r\n \r\n    for i in range(len(cipher)): \r\n        char = cipher[i] \r\n        loc = plainText.index(char) \r\n        result += chr((loc - i) % 26 + ord('A')) \r\n \r\n    return result", "task_id": 11233}
{"finetuning_prompt": "\"\"\"\nDevelop a python code to match a search string to a substring.\n\"\"\"\n\ndef match_substr(str1,str2):\n", "finetuning_completion": "  \r\n    if str2 in str1: \r\n        return \"Substring found!\" \r\n  \r\n    return \"Substring not found!\"", "task_id": 11235}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to optimize the given function.\n\"\"\"\n\ndef optimizer(f):\n", "finetuning_completion": " \r\n  \r\n    minval = f(0) \r\n    x_min = 0\r\n  \r\n    for x_val in range(-1000, 1000): \r\n        if f(x_val) < minval : \r\n                minval = f(x_val) \r\n                x_min = x_val \r\n    return x_min", "task_id": 11243}
{"finetuning_prompt": "\"\"\"\nCreate a formatter to convert a given string into upper case all words starting with the character 'a'.\n\"\"\"\n\ndef upper_a(text):\n", "finetuning_completion": "\r\n    words = text.split() \r\n\r\n    for i in range(0, len(words)):\r\n        if(words[i][0] == 'a'): \r\n            words[i] = words[i].upper()\r\n\r\n    res = \" \".join(words) \r\n    return res", "task_id": 11245}
{"finetuning_prompt": "\"\"\"\nWrite a function to hardcode the boggle board into a python program.\n\"\"\"\n\ndef set_board(board):\n", "finetuning_completion": "\n    boggle_board = []\r\n    for i in range(len(board)):\r\n        row = []\r\n        for j in range(len(board[0])):\r\n            row.append(board[i][j])\r\n        boggle_board.append(row)\r\n    return boggle_board", "task_id": 11247}
{"finetuning_prompt": "\"\"\"\nWrite a code to fill all empty cells in a given matrix with 0.\n\"\"\"\n\ndef fill_empty(matrix):\n", "finetuning_completion": " \n  row = len(matrix) \n  col = len(matrix[0]) \n  for i in range(row): \n    for j in range(col): \n      if matrix[i][j] == '': \n        matrix[i][j] = 0\n  return matrix", "task_id": 11255}
{"finetuning_prompt": "\"\"\"\nWrite a regular expression to extract the domain name from any given email address.\n\"\"\"\n\nimport re\n \ndef extract_domain_name(email):\n", "finetuning_completion": "\n  regex = r\"([a-zA-Z0-9._+-]+@)([a-zA-Z0-9._-]+)\"\n  matches = re.search(regex, email)\n  return matches.group(2)", "task_id": 11257}
{"finetuning_prompt": "\"\"\"\nImplement bubble sort in python to arrange the given numbers in ascending order.\n\"\"\"\n\ndef bubbleSort(test_list):\n", "finetuning_completion": " \r\n    for i in range(len(test_list)-1): \r\n        for j in range(0,len(test_list)-i-1): \r\n            if test_list[j] > test_list[j+1]: \r\n                test_list[j], test_list[j+1] =  test_list[j+1], test_list[j] \n    return test_list", "task_id": 11261}
{"finetuning_prompt": "\"\"\"\nCreate a python program to generate an updated version of the input list. The program should remove all copies of an element from the list, replace the string element with its count, and return the updated list.\n\"\"\"\n\ndef update_list(test_list):\n", "finetuning_completion": "\n\n# create an empty dicitonary\n    my_dict = dict() \n\n# count frequency of each elements in the list \n    for item in test_list:\n        if (item in my_dict): \n            my_dict[item] += 1\n        else: \n            my_dict[item] = 1\n\n# create an empty list \n    res_list = list() \n\n# Push elements and their counts in the new list \n    for key,value in my_dict.items():\n        res_list.append(key)\n        res_list.append(value)\n    return res_list", "task_id": 11262}
{"finetuning_prompt": "\"\"\"\nCreate a python program to implement the \"FizzBuzz\" game using the given number.\n\"\"\"\n\ndef fizzbuzz(number):\n", "finetuning_completion": " \n    for i in range(0, number): \n        if (i + 1) % 3 == 0 and (i + 1) % 5 == 0: \n            print(\"FizzBuzz\") \n        elif (i + 1) % 3 == 0: \n            print(\"Fizz\") \n        elif (i + 1) % 5 == 0: \n            print(\"Buzz\") \n        else: \n            print(i + 1)", "task_id": 11269}
{"finetuning_prompt": "\"\"\"\nCreate a function to test whether a given URL is reachable.\n\"\"\"\n\nfrom http.client import HTTPConnection\n\ndef is_URL_Reachable(url):\n", "finetuning_completion": "\n    try:\n        conn = HTTPConnection(url, timeout = 3)\n        conn.request(\"GET\", \"/\")\n        resp = conn.getresponse()\n        if resp.status == 200:\n            return True\n    except:\n        pass\n    return False", "task_id": 11270}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find the missing number in an array of size n containing numbers from 1 to n+1.\n\"\"\"\n\ndef find_missing_number(A):\n", "finetuning_completion": " \n    n = len(A) \n    total = (n+1)*(n+2)/2\n    sum_of_A = sum(A) \n    missing_num = total - sum_of_A \n    return missing_num", "task_id": 11273}
{"finetuning_prompt": "\"\"\"\nWrite a python script to convert dates from the MM/DD/YYYY format to the DD/MM/YYYY format.\n\"\"\"\n\ndef date_convert(date):\n", "finetuning_completion": "\r\n    month, day, year = date.split('/')\r\n    return (str(day)+'/'+str(month)+'/'+str(year))", "task_id": 11274}
{"finetuning_prompt": "\"\"\"\nUsing the given data, generate code to compute the total number of books contained in a library.\n\"\"\"\n\ndef TotalBooks (bookshelf, book_per_shelf):\n", "finetuning_completion": "\n    total_books = 0\n    for n in range(bookshelf):\n        total_books += book_per_shelf\n    return total_books", "task_id": 11275}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a sentence into camelCase format.\n\"\"\"\n\ndef to_camel_case(sentence):\n", "finetuning_completion": "\r\n    words = sentence.split(' ')\r\n    result = [words[0].lower()]\r\n    for word in words[1:]:\r\n        result.append(word.capitalize())\r\n    return ''.join(result)", "task_id": 11279}
{"finetuning_prompt": "\"\"\"\nDesign a program to remove given keyword from an array.\n\"\"\"\n\ndef remove_keyword(array_1, keyword):\n", "finetuning_completion": "  \r\n    result = []\r\n    for i in range(len(array_1)):\r\n        if array_1[i] != keyword:\r\n            result.append(array_1[i])\r\n    return result", "task_id": 11282}
{"finetuning_prompt": "\"\"\"\nDevelop code that replaces a given element in an array with another.\n\"\"\"\n\ndef replace_element(array_1, old_element, new_element):\n", "finetuning_completion": "  \r\n    for i in range(len(array_1)):\r\n        if array_1[i] == old_element: \r\n            array_1[i] = new_element\r\n    return array_1", "task_id": 11283}
{"finetuning_prompt": "\"\"\"\nCreate a program to format items in a delimited list to include quotation marks.\n\"\"\"\n\ndef format_quotes(list):\n", "finetuning_completion": "\n    formatted_list = []\n    for item in list:\n        formatted_list.append('\"%s\"' % item)\n    return formatted_list", "task_id": 11286}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute the power of a number that is less than another given number.\n\"\"\"\n\ndef compute_power(base, power, limit):\n", "finetuning_completion": "\n    result = 1\r\n    for _ in range(power):\r\n        result = result * base \r\n        if result >= limit:\r\n            return -1  \r\n    return result", "task_id": 11287}
{"finetuning_prompt": "\"\"\"\nWrite a function to get the sum of the reverse of even digits in a given number.\n\"\"\"\n\ndef get_sum_reverse_even(n):\n", "finetuning_completion": " \n\treverse_sum = 0\r\n\twhile n > 0: \n\t\trem = n % 10 \r\n\t\tif rem % 2 == 0: \n\t\t\treverse_sum += rem \n\t\tn = n // 10 \n\treturn reverse_sum", "task_id": 11291}
{"finetuning_prompt": "\"\"\"\nCreate a program that modifies the given string by adding the string 'Good morning!' at the beginning.\n\"\"\"\n\ndef modify_string(str1):\n", "finetuning_completion": "\r\n  newstr = 'Good morning! ' + str1\r\n  return newstr", "task_id": 11293}
{"finetuning_prompt": "\"\"\"\nCreate a Python program that takes input data, checks for duplicates and removes them.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": "\r\n    seen = set()  # creating a set\r\n    result = []\r\n \r\n    for i in arr:\r\n        if i not in seen:  # if not seen before \r\n            result.append(i)  # add to the result\r\n            seen.add(i)  # add to the seen set\r\n \r\n    return result # the resulting list\r\n\r\n# Test Data\r\narr = [1, 2, 3, 1, 4, 3, 7, 8, 9]\r\nprint(remove_duplicates(arr))", "task_id": 11295}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to display the numbers of a given range that are divisible by 6.\n\"\"\"\n\ndef divisible_by_6(n):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in range(n): \r\n        if (i % 6 == 0): \r\n            result.append(i) \r\n    return result \r\n  \r\n# Test data\r\nn = 20\r\nprint(divisible_by_6(n))", "task_id": 11297}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to edit an input array such that all elements greater than the given number are in the front and elements smaller than the given number are in the back.\n\"\"\"\n\ndef rearrange_elements(A, k):\n", "finetuning_completion": " \r\n    greater = [] \r\n    lesser = [] \r\n  \r\n    for i in range(len(A)): \r\n        if A[i] > k: \r\n            greater.append(A[i]) \r\n        else: \r\n            lesser.append(A[i]) \r\n  \r\n    output_list = greater + lesser \r\n    return output_list \r\n  \r\n# Test data \r\nA = [11, 10, 5, 7, 15]\r\nk = 5\r\n\r\nprint(rearrange_elements(A, k))", "task_id": 11298}
{"finetuning_prompt": "\"\"\"\nCreate a code to calculate the sum of every third number between 1 to a given number.\n\"\"\"\n\ndef sum_every_third(n):\n", "finetuning_completion": " \r\n    sum = 0\r\n    for i in range(3, n+1, 3): \r\n        sum += i \r\n  \r\n    return sum \r\n  \r\n# Driver code \r\nn = 10\r\nprint(sum_every_third(n))", "task_id": 11312}
{"finetuning_prompt": "\"\"\"\nDevelop a python program to compute the euclidean distance between two points.\n\"\"\"\n\ndef Euclidean_distance(point1,point2):\n", "finetuning_completion": "\n    \n    x1=point1[0]\n    x2=point2[0]\n    y1=point1[1]\n    y2=point2[1]\n    dist=math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    \n    return dist", "task_id": 11313}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify a user based on their name.\n\"\"\"\n\ndef identify_user(name):\n", "finetuning_completion": "\r\n    name=name.split()\r\n    firstName=name[0]\r\n    lastName=name[1]\r\n    user_id=firstName[0]+lastName[0]\r\n    return user_id", "task_id": 11316}
{"finetuning_prompt": "\"\"\"\nFormulate an algorithm to detect if two numbers are coprime.\n\"\"\"\n\ndef gcd(a,b):\r\n    while b:\r\n        a,b=b,a%b\r\n    return a\r\ndef coprime(a,b):\n", "finetuning_completion": "\r\n    while b:\r\n        a,b=b,a%b\r\n    return a\r\ndef coprime(a,b):\r\n    if gcd(a,b)==1:\r\n        return True\r\n    else:\r\n        return False", "task_id": 11318}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to merge two sorted array into one sorted array.\n\"\"\"\n\ndef merge_arrays(arr1, arr2):\n", "finetuning_completion": "\n    result=[]\n    i, j = 0, 0\n \n    while i<len(arr1) and j<len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n \n    while i < len(arr1):\n        result.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        result.append(arr2[j])\n        j += 1\n    return result", "task_id": 11319}
{"finetuning_prompt": "\"\"\"\nCreate a program that converts a given list of Fahrenheit temperatures to the corresponding Celsius temperatures.\n\"\"\"\n\ndef fahrenheit_to_celsius(lst):\n", "finetuning_completion": "\r\n  result = []\r\n  for f in lst:\r\n    c = round((f-32) * 5/9,2)\r\n    result.append(c)\r\n  return result", "task_id": 11320}
{"finetuning_prompt": "\"\"\"\nCreate a temperature converter in Python\n\"\"\"\n\ndef celsius_to_fahrenheit(c):\n", "finetuning_completion": " \r\n    fahrenheit = (c * (9/5)) + 32\r\n    return fahrenheit\n    \r\ndef fahrenheit_to_celsius(f): \r\n    celsius = (f - 32) * (5/9)\r\n    return celsius", "task_id": 11339}
{"finetuning_prompt": "\"\"\"\nWrite a code to detect if an array has any palindrome substrings.\n\"\"\"\n\ndef detect_palindromes(A):\n", "finetuning_completion": "\r\n    flag = 0\r\n    for i in range(len(A)): \r\n        for j in range(i + 2, len(A) + 1): \r\n            sub_str = A[i:j] \r\n            if (sub_str == sub_str[::-1]): \r\n                flag = 1\r\n    if (flag == 1): \r\n        return True\r\n    else: \r\n        return False", "task_id": 11345}
{"finetuning_prompt": "\"\"\"\nWrite a code to determine if an array is a palindrome.\n\"\"\"\n\ndef isPalindrome(A):\n", "finetuning_completion": " \r\n    j = len(A) - 1\r\n    is_pall = True\r\n    for i in range(0, int(len(A)/2)): \r\n        if A[i] != A[j]: \r\n            is_pall = False\r\n            break\r\n        j -= 1\r\n    return is_pall", "task_id": 11348}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given phrase into camel case.\n\"\"\"\n\ndef camel_case(phrase):\n", "finetuning_completion": " \r\n\tused_words = phrase.split(' ') \r\n\toutput = used_words[0].lower() \r\n\tfor word in used_words[1:]: \r\n\t\toutput += word.capitalize() \r\n\r\n\treturn output", "task_id": 11370}
{"finetuning_prompt": "\"\"\"\nCreate a code that identifies the interface of a USB device based on its serial number.\n\"\"\"\n\ndef identify_usb_device(serial_number):\n", "finetuning_completion": "\r\n    result = \"\"\r\n    \r\n    if (serial_number.startswith(\"ABC\")):\r\n    \tresult = \"USB Type B\"\r\n    elif (serial_number.startswith(\"DEF\")):\r\n    \tresult = \"USB Type C\"\r\n    elif (serial_number.startswith(\"GHI\")):\r\n    \tresult = \"USB Type Micro-B\"\r\n    else:\r\n    \tresult = \"Unknown USB interface\"\r\n    \t\r\n    return result", "task_id": 11372}
{"finetuning_prompt": "\"\"\"\nCreate a code to estimate the amount of energy required to accelerate a vehicle.\n\"\"\"\n\ndef estimate_energy(mass, acceleration):\n", "finetuning_completion": " \r\n\treturn 0.5 * mass * acceleration**2", "task_id": 11373}
{"finetuning_prompt": "\"\"\"\nConstruct a program to find all the words in a given string that include each of the 4 vowels.\n\"\"\"\n\ndef search_vowels(string):\n", "finetuning_completion": " \r\n\tvowels = ['a', 'e', 'i', 'o', 'u'] \r\n\tresult = [] \r\n\tfor word in string.split(): \r\n\t\tif all(v in word.lower() for v in vowels): \r\n\t\t\tresult.append(word) \r\n\treturn result", "task_id": 11374}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the maximum number of elements that can be added to an array such that the sum of the elements is less than or equal to the given maximum.\n\"\"\"\n\ndef maximumElements(arr, maximum):\n", "finetuning_completion": " \r\n  n = len(arr) \r\n\r\n  dp = [[False for p in range(maximum + 1)]  \r\n          for q in range(n + 1)] \r\n\r\n  for i in range(n + 1): \r\n    dp[i][0] = True\r\n\r\n  for j in range(1, maximum + 1): \r\n    dp[0][j] = False\r\n\r\n  maxVal = 0\r\n  for i in range(1, n + 1): \r\n    for j in range(1, maximum + 1): \r\n\r\n      if (arr[i - 1] <= j): \r\n        dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] \r\n\r\n      if (dp[i][j]): \r\n        maxVal = max(maxVal, j) \r\n\r\n  return maxVal", "task_id": 11377}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to generate a list of numbers from 0 to n with an incremental step of 2.\n\"\"\"\n\ndef gen_list(n):\n", "finetuning_completion": " \n    return [i for i in range(0, (n + 1), 2)]", "task_id": 11381}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a function to calculate the number of alphabets in the string.\n\"\"\"\n\ndef count_alpha(text):\n", "finetuning_completion": " \r\n\tcount = 0 \r\n\tfor c in text: \r\n\t\tif c.isalpha(): \r\n\t\t\tcount += 1 \r\n\treturn count", "task_id": 11383}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to perform linear search in an array.\n\"\"\"\n\ndef linear_search(arr, target):\n", "finetuning_completion": "\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1", "task_id": 11384}
{"finetuning_prompt": "\"\"\"\nSort a 2D array by a given column number in descending order.\n\"\"\"\n\ndef sort_2darray_descending(arr, num):\n", "finetuning_completion": " \r\n\r\n    sorted_array = sorted(arr, key = lambda x: x[num], reverse = True) \r\n    return sorted_array\r\n  \r\narray = [[3, 4 ,2],[10, 3, 5], [2, 1, 9]]\r\ncolumn_no=2\r\n\r\nresult = sort_2darray_descending(array, column_no) \r\n  \r\nprint (\"Result:\", result)", "task_id": 11391}
{"finetuning_prompt": "\"\"\"\nGenerate an efficient python code to evaluate the value of a polynomial.\n\"\"\"\n\ndef eval_polynomial(coefficients, x):\n", "finetuning_completion": "\r\n    result = 0\r\n    for i in range(len(coefficients)): \r\n        result += coefficients[i]*(x**i) \r\n    return result", "task_id": 11395}
{"finetuning_prompt": "\"\"\"\nWrite a python program to get the length of the longest common suffix among three given strings.\n\"\"\"\n\ndef longestCommonSuffix(str1, str2, str3):\n", "finetuning_completion": " \r\n    n1 = len(str1) \r\n    n2 = len(str2) \r\n    n3 = len(str3) \r\n  \r\n    # Find length of the longest suffix  \r\n    # which is common in all three strings  \r\n    l = min(n1, n2, n3) \r\n  \r\n    # To store the longest common suffix  \r\n    res1 = \"\" \r\n  \r\n    # Traverse all characters \r\n    # of the three strings  \r\n    for i in range(l): \r\n        if (str1[n1 - i - 1] ==  \r\n            str2[n2 - i - 1] and \r\n            str1[n1 - i - 1] ==  \r\n            str3[n3 - i - 1]): \r\n            res1 = res1 + str1[n1 - i - 1] \r\n        else: \r\n            break\r\n  \r\n    # Since we are looking for longest \r\n    # common suffix, reverse the result \r\n    res1 = res1[::-1] \r\n  \r\n    # If length of the result is 0,  \r\n    # that means all the string are  \r\n    # having different characters. \r\n    if (len(res1) == 0): \r\n        return -1\r\n  \r\n    return len(res1)", "task_id": 11398}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate a Fibonacci sequence for the given number of terms.\n\"\"\"\n\ndef generate_Fibonacci(terms):\n", "finetuning_completion": " \r\n    # first two terms \r\n    n1, n2 = 0, 1\r\n    count = 0\r\n  \r\n    # check if the number of terms is valid \r\n    if terms <= 0: \r\n        print(\"Please enter a positive integer\") \r\n    elif terms == 1: \r\n        print(\"Fibonacci sequence upto\",terms,\":\") \r\n        print(n1) \r\n    else: \r\n        print(\"Fibonacci sequence upto\",terms,\":\") \r\n        while count < terms:\r\n            print(n1,end=' , ') \r\n            nth = n1 + n2 \r\n            n1 = n2 \r\n            n2 = nth \r\n            count += 1", "task_id": 11401}
{"finetuning_prompt": "\"\"\"\nGiven a string, create a function to replace consecutive vowels with a single character.\n\"\"\"\n\ndef replace_cons_vowels(string):\n", "finetuning_completion": " \r\n    list1 = list(string) \r\n    i = 0\r\n    while(i < len(list1) - 1): \r\n        if (list1[i] == 'a' or list1[i] == 'e' or list1[i] == 'i' or list1[i] == 'o' or list1[i] == 'u'): \r\n            if (list1[i] == list1[i + 1]): \r\n                list1.pop(i + 1) \r\n        i = i + 1\n    return ''.join(list1)", "task_id": 11404}
{"finetuning_prompt": "\"\"\"\nIdentify the list item which have same values and remove them.\n\"\"\"\n\ndef remove_duplicate(test_list):\n", "finetuning_completion": " \r\n    res = list(dict.fromkeys(test_list)) \r\n    return (res)", "task_id": 11405}
{"finetuning_prompt": "\"\"\"\nAugment a given list of pairs with a missing element.\n\"\"\"\n\ndef augment_list_pairs(test_list):\n", "finetuning_completion": " \r\n    result = [] \r\n    missing_element = 0\r\n    for l in test_list: \r\n        result.append(l + [missing_element]) \r\n    return (result)", "task_id": 11408}
{"finetuning_prompt": "\"\"\"\nEdit the given function to print the result set of the given multiplication table.\n\"\"\"\n\ndef multiplicationTable(n):\n", "finetuning_completion": " \n  for i in range(1, n+1): \n    result = i*n \n    print(str(i) + \"x\" + str(n) + \"=\" + str(result))", "task_id": 11413}
{"finetuning_prompt": "\"\"\"\nWrite a python code to identify a given integer as prime number.\n\"\"\"\n\ndef isprime(num):\n", "finetuning_completion": " \n\t# Corner cases \n\tif (num <= 1): \n\t\treturn False\n\t# Check from 2 to n-1 \n\tfor i in range(2, num): \n\t\tif (num % i == 0): \n\t\t\treturn False\n\t\treturn True", "task_id": 11416}
{"finetuning_prompt": "\"\"\"\nBuild a program to compare two strings and calculate the minimum number of deletions and insertions required to convert one string to another.\n\"\"\"\n\ndef stringEditDistance(string1, string2):\n", "finetuning_completion": " \n    m = len(string1) \n    n = len(string2) \n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n    \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                dp[i][j] = j    # Min. operations = j \n            elif j == 0: \n                dp[i][j] = i    # Min. operations = i \n            elif string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])   # Replace \n  \n    return dp[m][n]", "task_id": 11418}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find the longest string in a list.\n\"\"\"\n\ndef longest_string(list_of_strings):\n", "finetuning_completion": " \n    longest_word = max(list_of_strings, key = len) \r\n    return longest_word", "task_id": 11421}
{"finetuning_prompt": "\"\"\"\nGenerate code for a machine learning algorithm that sorts a given list.\n\"\"\"\n\ndef sort_list(lst):\n", "finetuning_completion": " \n    # Traverse through all array elements \n    for i in range(len(lst)-1): \n        # Find the minimum element in remaining \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n  \n        # Swap the found minimum element with \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst", "task_id": 11424}
{"finetuning_prompt": "\"\"\"\nReverse all the words in a given sentence.\n\"\"\"\n\ndef reverse_words(sentence):\n", "finetuning_completion": "\n    words = sentence.split()\n    words.reverse()\n    return ' '.join(words)", "task_id": 11431}
{"finetuning_prompt": "\"\"\"\nCreate a set of unique elements from the given list.\n\"\"\"\n\ndef unique_list(test_list):\n", "finetuning_completion": "\n   res_set = set(test_list)\n   return res_set", "task_id": 11432}
{"finetuning_prompt": "\"\"\"\nCreate a function that checks whether a given triangle is equilateral, isosceles, scalene or not a triangle.\n\"\"\"\n\ndef triangle_type(side_1, side_2, side_3):\n", "finetuning_completion": " \r\n      \r\n    # check condition  \r\n    if (side_1 == side_2 and side_2 == side_3 and side_1 == side_3): \r\n        return \"Equilateral\"\r\n    elif (side_1 == side_2 or side_2 == side_3 or side_1 == side_3): \r\n        return \"Isosceles\"\r\n    elif((side_1 + side_2 <= side_3) or (side_2 + side_3 <= side_1) or (side_3 + side_1 <= side_2)): \r\n        return False\r\n    else: \r\n        return \"Scalene\"", "task_id": 11433}
{"finetuning_prompt": "\"\"\"\nCreate a python program to print given number of prime numbers.\n\"\"\"\n\ndef prime_nums(n):\n", "finetuning_completion": " \r\n\r\n    prime_list = [] \r\n    num = 2 \r\n\r\n    while len(prime_list)< n: \r\n\r\n        check = 0\r\n        for it in range(2,(num //2 + 1)): \r\n            if num % it == 0: \r\n                check = 1\r\n                break\r\n\r\n        if check == 0: \r\n            prime_list.append(num) \r\n        num += 1\r\n\r\n    return prime_list", "task_id": 11442}
{"finetuning_prompt": "\"\"\"\nWrite a function to check for an anagram of a word.\n\"\"\"\n\ndef isAnagram(word1, word2):\n", "finetuning_completion": "\r\n  # remove whitespaces \r\n  word1 = word1.replace(' ','')\r\n  word2 = word2.replace(' ','')\r\n\r\n  # sorting the words\r\n  w1 = sorted(word1) \r\n  w2 = sorted(word2)\r\n  # Check if the sorted words are equal \r\n  if (w1 == w2): \r\n    return True \r\n  return False", "task_id": 11446}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes a string and counts the number of small, capital and special characters present in the string.\n\"\"\"\n\ndef chars_count(text):\n", "finetuning_completion": " \n  small_char = 0\n  capital_char = 0\n  special_char = 0\n  \n  for i in range(len(text)): \n    if (text[i] >= 'a' and text[i] <= 'z'): \n      small_char += 1\n    elif (text[i] >= 'A' and text[i] <= 'Z'): \n      capital_char += 1\n    else: \n      special_char += 1\n      \n  return small_char, capital_char, special_char\n  \n\n# Driver code \ntext = \"Hello Wordl@\"\nsmall_char, capital_char, special_char = chars_count(text)\nprint(\"Small characters = {} \\nCapital characters = {} \\nSpecial characters = {}\".format(small_char, capital_char, special_char))", "task_id": 11455}
{"finetuning_prompt": "\"\"\"\nRewrite this function to improve its readability and understandability.\n\"\"\"\n\ndef foo(number):\n", "finetuning_completion": "\n    result = 0\n    while number != 0:\n        result += number % 10\n        number = number // 10\n    return result", "task_id": 11458}
{"finetuning_prompt": "\"\"\"\nCreate a function to check if a given string is valid in terms of password strength.\n\"\"\"\n\ndef checkPasswordStrength(password):\n", "finetuning_completion": " \r\n  \r\n    Symbol =[\"$\", \"#\", \"@\"] \r\n    val = True\r\n    if len(password) < 6: \r\n        print('length should be at least 6') \r\n        val = False\r\n  \r\n    if not any(char.isdigit() for char in password): \r\n        print('Password should have at least one numeral') \r\n        val = False\r\n    if not any(char.isupper() for char in password): \r\n        print('Password should have at least one uppercase letter') \r\n        val = False\r\n    if not any(char.islower() for char in password): \r\n        print('Password should have at least one lowercase letter') \r\n        val = False\r\n    if not any(char in Symbol for char in password): \r\n        print('Password should have at least one of the symbols $@#') \r\n        val = False\r\n    if val: \r\n        return True \r\n    else: \r\n        return False", "task_id": 11472}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the average of all the integers in an array.\n\"\"\"\n\ndef average(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    if n == 0: \r\n        return 0\r\n    else: \r\n        sum_of_ele = 0\r\n        for ele in arr: \r\n            sum_of_ele = sum_of_ele + ele \r\n    return (sum_of_ele / n )", "task_id": 11473}
{"finetuning_prompt": "\"\"\"\nWrite a piece of code to standardize a vector.\n\"\"\"\n\ndef standardize(vector):\n", "finetuning_completion": " \r\n    mean = sum(vector) / len(vector) \r\n    variance = sum([((x - mean) ** 2) for x in vector]) / len(vector) \r\n    standard_vector = [(x - mean) / math.sqrt(variance) for x in vector] \r\n    return standard_vector", "task_id": 11476}
{"finetuning_prompt": "\"\"\"\nCreate a web application that takes a user's input and displays information about the city entered.\n\"\"\"\n\nimport requests\r\n\r\ndef displayCityInfo(city):\n", "finetuning_completion": "\r\n    city = city.replace(\" \", \"+\")\r\n\r\n    # Make a request to the OpenWeatherMap API\r\n    res = requests.get(\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&APPID=YOUR_OPENWEATHERMAP_API_KEY\")\r\n\r\n    # Check if the request was successful\r\n    if res.status_code == 200:\r\n\r\n        # Convert the response to JSON \r\n        json_data = res.json() \r\n\r\n        # Print out the necessary information on the user\r\n        print(\"The city of \" + json_data['name'] + \" is located in \" +  json_data['sys']['country'])\r\n        print(\"Current Temperature: \" + str(int(json_data['main']['temp'] - 273.15)) + \"\u00b0C\")\r\n        print(\"Max Temperature: \" + str(int(json_data['main']['temp_max'] - 273.15)) + \"\u00b0C\")\r\n        print(\"Min Temperature: \" + str(int(json_data['main']['temp_min'] - 273.15)) + \"\u00b0C\")\n        print(\"Humidity: \" + str(json_data['main']['humidity']) + \"%\")", "task_id": 11479}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to search a word pattern in all given strings.\n\"\"\"\n\ndef searchWordPattern(pattern, strings):\n", "finetuning_completion": "\n    \r\n    # list to store the indices in strings where we found the pattern\r\n    resultIndices = []\r\n    # loop over each string\r\n    for string in strings:\r\n        # intialize index variable to store the index of the first character of pattern \r\n        # in the current string\r\n        index = -1\r\n        # loop over the characters in the string one by one\r\n        # and try to match the pattern with the current substring\r\n        for i in range(len(string)):\r\n            if string[i] == pattern[0]:\r\n                # if the first character matches, try to match the whole pattern\r\n                if string[i:i+len(pattern)] == pattern:\r\n                    # store the index if pattern is found and break the loop\r\n                    index = i\r\n                    break\r\n        # check if the pattern was found in the current string    \r\n        if index != -1:\r\n            # append the index to resultIndices\r\n            resultIndices.append(index)\r\n\r\n    # return the list of indices where pattern was found\r\n    return resultIndices", "task_id": 11483}
{"finetuning_prompt": "\"\"\"\nGenerate a code in Python to apply Levenshtein edit distance algorithm for a given set of strings.\n\"\"\"\n\ndef Levenshtein_edit_distance(s1, s2):\n", "finetuning_completion": " \n    m = len(s1) \n    n = len(s2) \r\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \r\n    for i in range(1,m+1): \r\n        for j in range(1,n+1): \r\n            if s1[i-1]==s2[j-1]: \r\n                dp[i][j] = dp[i-1][j-1] \r\n            else: \r\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) \r\n    return dp[m][n]", "task_id": 11495}
{"finetuning_prompt": "\"\"\"\nDevelop a program in Python to compute the Bitonic sequence of a given array.\n\"\"\"\n\ndef Bitonic_sequence(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    inc = [1]*n \r\n    dec = [1]*n \r\n    for i in range(1, n): \r\n        for j in range(i): \r\n            if arr[i] > arr[j] and inc[i] < inc[j] + 1 : \r\n                inc[i] = inc[j]+1\r\n    for i in range(n - 1, 0, -1): \r\n        for j in range(i, n): \r\n            if arr[i-1] > arr[j] and dec[i-1] < dec[j] + 1: \r\n                dec[i-1] = dec[j] + 1\r\n    max_val = 0\r\n    for i in range(n): \r\n        max_val = max(max_val, inc[i] + dec[i]-1) \r\n    return max_val", "task_id": 11496}
{"finetuning_prompt": "\"\"\"\nCalculate the length of the longest increasing subsequence from a given array of numbers.\n\"\"\"\n\ndef longest_increasing_subsequence(A):\n", "finetuning_completion": " \r\n    N = len(A) \r\n    lis = [1] * N \r\n    for i in range (1 , N): \r\n        for j in range(0 , i): \r\n            if A[i] > A[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n    maximum = 0\r\n    for i in range(N): \r\n        maximum = max(maximum , lis[i])  \r\n    return maximum", "task_id": 11505}
{"finetuning_prompt": "\"\"\"\nDevelop a function to determine the longest common substring in a given list of strings.\n\"\"\"\n\ndef longest_common_substring(strings):\n", "finetuning_completion": " \n    shortest = min(strings,key = len) \r\n    longest = '' \r\n    for i in range(len(shortest)): \r\n        for j in range(i+1,len(shortest)+1): \r\n            substring = shortest[i:j] \r\n            flag = True\r\n            for other in strings: \r\n                if substring not in other: \r\n                    flag = False\r\n            if flag and len(substring) > len(longest): \r\n                longest = substring\r\n    return longest", "task_id": 11508}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given string to a list of words with their corresponding frequency count.\n\"\"\"\n\ndef str_to_freq(string):\n", "finetuning_completion": "\r\n    # Split the string into list of words  \r\n    split_string = string.split() \r\n   \r\n    # Use the list comprehension to create dictionary \r\n    # of words with their frequency count \r\n    dict1 = {i : split_string.count(i) for i in split_string} \r\n    return dict1", "task_id": 11516}
{"finetuning_prompt": "\"\"\"\nWrite a python program to implement binary search on the given list of integers.\n\"\"\"\n\ndef binary_search(arr, left, right, key):\n", "finetuning_completion": " \r\n  \r\n    # Check base case \r\n    if right >= left: \r\n  \r\n        mid = left + (right - left)//2\r\n  \r\n        # If element is present at the middle itself \r\n        if arr[mid] == key: \r\n            return mid \r\n          \r\n        # If element is smaller than mid, then it  \r\n        # can only be present in left subarray \r\n        elif arr[mid] > key: \r\n            return binary_search(arr, left, mid-1, key) \r\n  \r\n        # Else the element can only be present  \r\n        # in right subarray \r\n        else: \r\n            return binary_search(arr, mid+1, right, key) \r\n  \r\n    else: \r\n        # Element is not present in the array \r\n        return-1", "task_id": 11517}
{"finetuning_prompt": "\"\"\"\nWrite a code to sum all numbers in a given list and save the result in a new list.\n\"\"\"\n\ndef sum_of_numbers(test_list):\n", "finetuning_completion": " \r\n    sum_list = [] \n    total = 0\r\n    for ele in test_list: \r\n        total += ele \r\n        sum_list.append(total) \r\n  \r\n    return (sum_list)", "task_id": 11521}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the number of unique pairs of integers that add up to a given number\n\"\"\"\n\ndef unique_pairs(n):\n", "finetuning_completion": " \r\n\tpair_dict = {} \r\n\tfor i in range(1, n//2 + 1): \r\n\t\tpair_dict[(i, n - i)] = True \r\n\t\t\r\n\treturn len(pair_dict)", "task_id": 11533}
{"finetuning_prompt": "\"\"\"\nDetermine the smallest possible number from a given set of digits\n\"\"\"\n\ndef minimum_number(arr):\n", "finetuning_completion": " \r\n\tarr.sort() \t\r\n\tnumber = \"\" \r\n\tfor item in arr: \r\n\t\tnumber += str(item) \r\n\t\t\r\n\treturn int(number)", "task_id": 11534}
{"finetuning_prompt": "\"\"\"\nWrite a function to produce the output as 'KV' if the given record tuple as input contains key and value pair.\n\"\"\"\n\ndef check_if_key_val_pair(test_tup):\n", "finetuning_completion": "\n  if len(test_tup) == 2:\n    return(\"KV\")\n  else:\n    return(\"Not a key-value pair\")", "task_id": 11538}
{"finetuning_prompt": "\"\"\"\nDesign a program to alphabetically sort a given list of names.\n\"\"\"\n\ndef sort_names(list):\n", "finetuning_completion": " \n    list.sort() \r\n    return list \r\n  \nlist = [\"Jhon\",\"Bob\",\"Sam\",\"Amy\",\"Tom\"] \r\nprint(sort_names(list))", "task_id": 11551}
{"finetuning_prompt": "\"\"\"\nCreate a program for linear search\n\"\"\"\n\ndef linear_search(arr, x):\n", "finetuning_completion": " \r\n  \r\n    for i in range(len(arr)): \r\n  \r\n        if arr[i] == x: \r\n            return i \r\n  \r\n    return -1", "task_id": 11552}
{"finetuning_prompt": "\"\"\"\nCreate a program for creating a report about the content of a given directory.\n\"\"\"\n\nimport os\n\ndef find_files(directory):\n", "finetuning_completion": "\n    report = \"Report \\n \\n\"\n    for root, dirs, files in os.walk(directory):\n        report += \"Directory: {} \\n\".format(root)\n        for file in files:\n            report += \"\\t {} \\n\".format(file)\n    return report", "task_id": 11553}
{"finetuning_prompt": "\"\"\"\nWrite a script to detect the type of data in a given column.\n\"\"\"\n\ndef detect_data_type(column):\n", "finetuning_completion": "\r\n    data_types = set()\r\n    for elem in column:\r\n        data_types.add(type(elem).__name__)\r\n    return data_types", "task_id": 11563}
{"finetuning_prompt": "\"\"\"\nGenerate the code to improve the time complexity of calculating the power of a number.\n\"\"\"\n\ndef power(x, n):\n", "finetuning_completion": " \r\n    if (n == 0):  \r\n        return 1\r\n    elif (n%2 == 0): \r\n        y = power(x, n/2) \r\n        return y*y \r\n    else: \r\n        return (x*power(x, n-1))", "task_id": 11565}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the longest prefix string amongst an array of string.\n\"\"\"\n\ndef longest_prefix_string(arr):\n", "finetuning_completion": "\n    if len(arr) == 0:\r\n        return \"\"\r\n    longest_prefix = arr[0]\r\n    for i in range(1, len(arr)):\r\n        j = 0\r\n        while j < len(longest_prefix) and j < len(arr[i]):\r\n            if longest_prefix[j] == arr[i][j]:\r\n                j += 1\r\n            else:\r\n                break\r\n        longest_prefix = longest_prefix[:j]\r\n    return longest_prefix", "task_id": 11573}
{"finetuning_prompt": "\"\"\"\nGenerate a function to format the given integer into the number of leading zeros given by N.\n\"\"\"\n\ndef format_leading_zero(x, N):\n", "finetuning_completion": "\r\n    res = format(x, '0'+str(N)+'d')\r\n    return res", "task_id": 11587}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to find the minimum number of moves needed to reach the desired position in a given direction.\n\"\"\"\n\ndef minimumMoves(lst):\n", "finetuning_completion": " \n    n = len(lst) \n    count = 0\n    for i in range(n-1): \n        count += abs(lst[i]-lst[i+1]) \n  \n    return count \n\n# Driver code \nnum_list = [3, 5, 7, 9] \nres = minimumMoves(num_list) \nprint(res)", "task_id": 11607}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the exceptions raised by a given code block.\n\"\"\"\n\ndef print_exception(code_block):\n", "finetuning_completion": "\r\n    try:\r\n        exec(code_block)\r\n    except Exception as e:\r\n        print(\"Exception:\", e)", "task_id": 11609}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to compute the maximum sum of elements you can get from the given array when no two elements are adjacent to each other (the adjacent elements have to have a gap of one element between them).\n\"\"\"\n\ndef max_sum_non_adjacent(arr):\n", "finetuning_completion": " \n    incl = 0\r\n    excl = 0\n  \n    for i in arr: \n  \n        # Current max excluding i \r\n        new_excl = excl if excl>incl else incl \r\n  \n        # Current max including i \r\n        incl = excl + i \r\n        excl = new_excl \r\n  \r\n    # return max of incl and excl \r\n    return (excl if excl>incl else incl)", "task_id": 11614}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute element-wise subtraction of two given Matrices.\n\"\"\"\n\ndef element_wise_sub(matA, matB):\n", "finetuning_completion": " \r\n   result = [[0 for j in range(len(matA[0]))] for i in range(len(matA))] \r\n   for i in range(len(matA)): \r\n        for j in range(len(matA[0])): \r\n            result[i][j] = matA[i][j] - matB[i][j] \r\n   return result \nmatA = [[12, 7, 3], \r\n        [4, 5, 6], \r\n        [7, 8, 9]] \r\nmatB = [[5, 8, 1], \r\n        [6, 7, 3], \r\n        [4, 5, 9]] \r\nresult = element_wise_sub(matA, matB) \r\nfor row in result: \r\n    print(row)", "task_id": 11621}
{"finetuning_prompt": "\"\"\"\nCreate a function that returns the length of the longest consecutive run of a given item in a list.\n\"\"\"\n\ndef longest_run(test_list):\n", "finetuning_completion": "\r\n    long_run = 0\r\n    current_run = 0\r\n    prev_item = test_list[0]\r\n\r\n    for x in test_list:\r\n        if x == prev_item:\r\n            current_run += 1\r\n        else:\r\n            if current_run > long_run:\r\n                long_run = current_run\r\n            current_run = 1\r\n            prev_item = x\r\n    return max(long_run, current_run)", "task_id": 11626}
{"finetuning_prompt": "\"\"\"\nCreate a function to check whether two input counties are connected if they are in the same library network.\n\"\"\"\n\ndef is_connected(directory, county1, county2):\n", "finetuning_completion": "  \n        if county1 in directory and county2 in directory: \n            if county2 in directory[county1]:\n                return True\n\n        if county2 in directory and county1 in directory: \n            if county1 in directory[county2]:\n                return True\n  \n        return False", "task_id": 11632}
{"finetuning_prompt": "\"\"\"\nWrite a function to scale a vector in python using numpy library.\n\"\"\"\n\nimport numpy as np\r\ndef scale_vector(vector, scalar):\n", "finetuning_completion": "\r\n  output = np.multiply(scalar, vector)\r\n  return(output)", "task_id": 11634}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to partition a given array into three subarrays with equal sum.\n\"\"\"\n\ndef partitions(arr):\n", "finetuning_completion": " \n    \n    # calculating the sum \n    # of the array \n    total_sum = 0\n    for i in range(0, len(arr)): \n        total_sum += arr[i] \n      \n  \n    # if total sum is not \n    # divisible by 3, then \n    # no subarray is possible \n    if (total_sum % 3 != 0): \n        return 0\n      \n  \n    # calculating the sum \n    # of each subarray \n    part_sum = total_sum // 3\n  \n    # running loop till  \n    # we get subarrays with \n    # given sum \n    subsum = 0\n    part_cnt = 0\n    res = 0\n      \n    for i in range(0, len(arr)): \n        subsum += arr[i] \n          \n        if (subsum == part_sum): \n            part_cnt += 1\n            subsum = 0\n              \n        if (part_cnt == 3): \n            res += 1\n            part_cnt = 0\n              \n    return res", "task_id": 11638}
{"finetuning_prompt": "\"\"\"\nCreate a program which finds the median of a list of integers.\n\"\"\"\n\ndef median_list(list1):\n", "finetuning_completion": "\n    list1.sort()\n    l = len(list1)\n    if l % 2 == 0:\n        med = (list1[l//2] + list1[(l//2)-1]) // 2\n    else:\n        med = list1[l//2]\n    return (med)", "task_id": 11639}
{"finetuning_prompt": "\"\"\"\nGenerate a function to determine if all character in a given string are unique or not.\n\"\"\"\n\ndef unique_chars(word):\n", "finetuning_completion": " \r\n  return len(set(word)) == len(word)", "task_id": 11642}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the Levenshtein distance between two strings using the dynamic programming method.\n\"\"\"\n\ndef levenshtein(str1, str2):\n", "finetuning_completion": "   \r\n    dp_table = [[0]*(len(str2) + 1) for _ in range(len(str1) + 1)] \r\n  \r\n    for i in range(len(str1) + 1): \r\n        dp_table[i][0] = i \r\n    for j in range(len(str2) + 1):\r\n        dp_table[0][j] = j \r\n   \r\n    for i in range(1, len(str1) + 1): \r\n        for j in range(1, len(str2) + 1): \r\n            if str1[i-1] == str2[j-1]: \r\n                dp_table[i][j] = dp_table[i-1][j-1] \r\n            else: \r\n                dp_table[i][j] = 1 + min(dp_table[i-1][j], dp_table[i-1][j-1], dp_table[i][j-1]) \r\n  \r\n    return dp_table[-1][-1]", "task_id": 11645}
{"finetuning_prompt": "\"\"\"\nGiven input data which is the result of XOR operation of two strings, generate function which returns both of those strings\n\"\"\"\n\ndef xorString(data):\n", "finetuning_completion": " \r\n    output1 = [] \r\n    output2 = [] \r\n    for i in range(len(data)): \r\n        output1.append((ord(\"\\x00\") ^ ord(data[i]))) \r\n        output2.append((ord(data[i]) ^ ord(\"\\x00\"))) \r\n  \r\n    output1 = \"\".join(map(chr,output1)) \r\n    output2 = \"\".join(map(chr,output2)) \r\n  \r\n    print (output1) \r\n    print (output2) \r\n    return output1, output2", "task_id": 11649}
{"finetuning_prompt": "\"\"\"\nWrite a function to return a list of all consecutive numbers starting from \u2018m\u2019 and not greater than \u2018n\u2019.\n\"\"\"\n\ndef get_range(m, n):\n", "finetuning_completion": " \r\n  Range = [] \r\n  i = m \r\n  while(i<=n): \r\n      Range.append(i) \r\n      i = i + 1\r\n  return Range", "task_id": 11658}
{"finetuning_prompt": "\"\"\"\nWrite a function to print the most common words and their respective frequencies in a given sentence.\n\"\"\"\n\ndef word_freq(sentence):\n", "finetuning_completion": " \r\n    counts = dict() \r\n    words = sentence.split() \r\n      \r\n    for word in words: \r\n        if word in counts: \r\n            counts[word] += 1\r\n        else: \r\n            counts[word] = 1\r\n  \r\n    counts_x = sorted(counts.items(), key=lambda kv: kv[1], reverse=True) \r\n    print(\"Most Common Words and Frequencies are: \" + str(counts_x[:3]))", "task_id": 11659}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to group a list of numbers into 2 halves based on their sum.\n\"\"\"\n\ndef group_list(list_input):\n", "finetuning_completion": "\r\n    n = len(list_input)\r\n    total_sum = sum(list_input)\r\n    half_sum = total_sum // 2\r\n    result = [ [] , [] ]\r\n\r\n    for i in range(n): \r\n        if (sum(result[0]) + list_input[i]) <= half_sum: \r\n            result[0].append(list_input[i]) \r\n        else: \r\n            result[1].append(list_input[i])\r\n    \r\n    return result", "task_id": 11661}
{"finetuning_prompt": "\"\"\"\nModify the function to display the number of unique characters in a given string.\n\"\"\"\n\ndef count_unique_chars(string):\n", "finetuning_completion": "\r\n  uniq_chars = []\r\n\r\n  for c in string:\r\n    if c not in uniq_chars:\r\n      uniq_chars.append(c)\r\n\r\n  print('The number of unique characters in the given string is: {}'.format(len(uniq_chars)))", "task_id": 11663}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to create a program to generate an encrypted version of a number input by the user.\n\"\"\"\n\ndef encrypt_number(number):\n", "finetuning_completion": "\r\n  encrypted_num = \"\"\r\n  for digit in str(number):\r\n    encrypted_num += str((int(digit) + 7) % 10)\r\n  return encrypted_num", "task_id": 11664}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python to reverse the words in a sentence without changing their positions.\n\"\"\"\n\ndef reverse_words(sentence):\n", "finetuning_completion": " \n    words = sentence.split()\n    rev_words = words[::-1]\n    return \" \".join(rev_words)", "task_id": 11669}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that can output the smallest number from a given array.\n\"\"\"\n\ndef get_smallest_number(arr):\n", "finetuning_completion": "\r\n    smallest_num = arr[0]\r\n    for num in arr[1:]:\r\n        if num < smallest_num:\r\n            smallest_num = num\r\n    return smallest_num\r\n\r\narr = [12, 15, 2, 7, 19, 6]\r\nprint(get_smallest_number(arr))", "task_id": 11671}
{"finetuning_prompt": "\"\"\"\nCreate a script to optimize a given polygon to its minimal area.\n\"\"\"\n\nfrom scipy.spatial import ConvexHull\r\nimport numpy as np\r\n\r\ndef optimize_polygon(points):\n", "finetuning_completion": "\r\n    convex_hull = ConvexHull(points)\r\n    optimized_points = convex_hull.points[convex_hull.vertices]\r\n    return np.array(optimized_points)\r\n\r\npoints = np.array([(-8, -6), (-5, 4), (6, 4), (8, -6)])\r\noptimized_points = optimize_polygon(points)\r\nprint(optimized_points)", "task_id": 11672}
{"finetuning_prompt": "\"\"\"\nCreate a python function to sum the all the numbers in a given list that are greater than a specific value.\n\"\"\"\n\ndef sum_greater_than_target(nums, target):\n", "finetuning_completion": " \r\n    sum_of_nums = 0\r\n    for num in nums: \r\n        if num > target: \r\n            sum_of_nums += num \r\n    return sum_of_nums \r\n\r\nnums = [2, 3, 5, 7, 9, 11] \r\ntarget = 7\r\n\r\nprint(sum_greater_than_target(nums, target)) # Output: 13", "task_id": 11681}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine the minimum subtraction of two numbers to make their sum a power of two.\n\"\"\"\n\ndef min_subtraction_power_of_2(a, b):\n", "finetuning_completion": "\r\n    sum_of_two_numbers = a + b\r\n    power = 1\r\n    while power < sum_of_two_numbers:\r\n        power *= 2\r\n    if sum_of_two_numbers == power:\r\n        return 0\r\n    else:\r\n        return power - sum_of_two_numbers", "task_id": 11693}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove elements from the list we don\u2019t want to change.\n\"\"\"\n\ndef remove_elements(list):\n", "finetuning_completion": "\n  list = [x for x in list if x not in [3,4]]\r\n  return list", "task_id": 11699}
{"finetuning_prompt": "\"\"\"\nDevelop a program to group an array of size 3 into an array of size 2.\n\"\"\"\n\ndef group_arrays(list):\n", "finetuning_completion": "\r\n    newArray = [[list[0],list[1]], [list[2]]] \r\n    return newArray", "task_id": 11700}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the minimum length of the Latin square for the given magnitude n.\n\"\"\"\n\ndef minLatinSquareLength(n):\n", "finetuning_completion": " \n    return n * (n - 1)//2 + n", "task_id": 11702}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the greatest common factor between two given numbers.\n\"\"\"\n\ndef greatestCommonFactor(a, b):\n", "finetuning_completion": " \n    if(b == 0): \n        return a \n    else: \n        return greatestCommonFactor(b, a%b)", "task_id": 11703}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate Big O notation of an algorithm.\n\"\"\"\n\ndef Big_O_Notation(function):\n", "finetuning_completion": " \r\n    # convert the function to string \r\n    func_string = str(function) \r\n    # counts the number of operations  \r\n    count = 0\r\n    for i in range(len(func_string)): \r\n        if func_string[i] == '+' or func_string[i] == '-' or func_string[i] == '*' or func_string[i] == '/' or func_string[i] == '%': \r\n            count = count + 1\r\n    # calculate the Big O notation \r\n    BigO = count \r\n    comment = ' * '\r\n    return BigO, comment", "task_id": 11706}
{"finetuning_prompt": "\"\"\"\nDevelop a program to format a string that reverses the order of words according to the given rules.\n\"\"\"\n\n# Function to reverse the order of words \r\ndef reverseWordOrder(string) :\n", "finetuning_completion": " \r\n    # split the string into words \r\n    words = string.split(\" \") \r\n  \r\n    # save the reversed order of words \r\n    newWords = [words[-i-1] for i in range(len(words))] \r\n  \r\n    # Join the words together \r\n    newString = \" \".join(newWords) \r\n  \r\n    # Return the reversed string  \r\n    return newString \r\n  \r\n# driver code \r\nstring = \"I love programming\"\r\n  \r\n# print the reversed string \r\nprint(reverseWordOrder(string))", "task_id": 11712}
{"finetuning_prompt": "\"\"\"\nCreate a code fragment to optimize the divisions of a given list of numbers.\n\"\"\"\n\n# function to optimize the divisions \r\ndef optimizeDivisions(nums):\n", "finetuning_completion": " \r\n    # sort the list in an descending order \r\n    nums.sort(reverse = True) \r\n  \r\n    # find the maximum sum \r\n    max_sum = 0\r\n  \r\n    # iterate over each number in the list \r\n    for i in range(len(nums)): \r\n        # calculate the current sum \r\n        current_sum = 0\r\n        for j in range(i): \r\n            current_sum += nums[j] // nums[i] \r\n  \r\n        # update the maximum sum if current sum is greater \r\n        if max_sum < current_sum: \r\n            max_sum = current_sum \r\n  \r\n    # return the maximum sum \r\n    return max_sum \r\n  \r\n# driver code \r\nnums = [4, 11, 7, 3, 16] \r\n  \r\n# Print the result \r\nprint (\"The maximum division is :\", optimizeDivisions(nums))", "task_id": 11713}
{"finetuning_prompt": "\"\"\"\nWrite a code to construct a list which contains the distance of each point from origin.\n\"\"\"\n\ndef dist_origin(points):\n", "finetuning_completion": "\n    result = []\n    for point in points:\n        x = point[0]\n        y = point[1]\n        dist = sqrt(x*x + y*y)\n        result.append(dist)\n    return result", "task_id": 11721}
{"finetuning_prompt": "\"\"\"\nCreate a function to evaluate a polynomial given a certain set of values.\n\"\"\"\n\ndef evaluate_polynomial(x, coefficients):\n", "finetuning_completion": "\n    result = 0\n    for exponent, coefficient in enumerate(coefficients):\n        result += coefficient * (x ** exponent)\n    return result", "task_id": 11734}
{"finetuning_prompt": "\"\"\"\ngenerate a function to find a path from the upper-left corner of a matrix to its lower-right corner, if one exists.\n\"\"\"\n\ndef find_path(m):\n", "finetuning_completion": "\n    # Obtain matrix dimensions\n    rows = len(m)\n    cols = len(m[0])\n    # Initialize path\n    path = []\n    # Helper function to check if a point (i, j) is within m's bounds\n    def is_valid(i, j):\n        return 0 <= i < rows and 0 <= j < cols\n    \n    # Recursive base condition\n    if not is_valid(0, 0):\n        return False\n    elif m[0][0] == 0:\n        return False\n    \n    # Function to solve the problem recursively\n    def find_path_recursive(i, j):\n        # If we've reached the last cell, append it to the path, return\n        if i == rows - 1 and j == cols - 1:\n            path.append((i, j))\n            return True\n        # If the cell is invalid or 0, return\n        if not is_valid(i, j) or m[i][j] == 0:\n            return False\n        # Append the current cell position to the path\n        path.append((i, j))\n        # Try moving right (j + 1) and down (i + 1)\n        found = find_path_recursive(i, j + 1) or find_path_recursive(i + 1, j)\n        # If not found, remove cell from the path\n        if not found:\n            path.pop()\n        # Return if a path is found\n        return found\n    \n    find_path_recursive(0, 0)\n    return path", "task_id": 11735}
{"finetuning_prompt": "\"\"\"\nMake a function to rotate the contents of a list by a given number of elements.\n\"\"\"\n\ndef rotateList(inputList, pos):\n", "finetuning_completion": " \r\n  \r\n    if len(inputList) == pos: \r\n        return inputList \r\n      \r\n    if len(inputList) > pos: \r\n      \r\n        temp = inputList[0:pos] \r\n        outputList = inputList[pos:] \r\n        outputList += temp \r\n  \r\n        return outputList", "task_id": 11742}
{"finetuning_prompt": "\"\"\"\nDefine a python program to count the number of occurances of a given list in an array.\n\"\"\"\n\ndef count(x, y):\n", "finetuning_completion": " \r\n\ta = np.array(x) \r\n\tb = np.array(y) \r\n\tc = np.isin(a, b).sum() \r\n\treturn c \n\t\nx = [2, 8, 5, 2, 1, 5, 8] \r\ny = [2, 5] \nprint(count(x, y))", "task_id": 11745}
{"finetuning_prompt": "\"\"\"\nWrite a function to return the first word in an argument string.\n\"\"\"\n\ndef first_word(request):\n", "finetuning_completion": " \r\n  return (request.split()[0])", "task_id": 11749}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a list of strings and returns the most frequently occurring word in the list.\n\"\"\"\n\ndef mostFrequent(testList):\n", "finetuning_completion": " \n\tmax_count = 0\n\tres = None\n\tword_count = {}\n\tfor word in testList: \n\t\tif (word in word_count): \n\t\t\tword_count[word] += 1\n\t\telse: \n\t\t\tword_count[word] = 1\n\t\tif (word_count[word] > max_count): \n\t\t\tres = word\n\t\t\tmax_count = word_count[word]\n\treturn res", "task_id": 11754}
{"finetuning_prompt": "\"\"\"\nSuggest a sorting algorithm with its implementation to sort a shuffled array in O(n) time.\n\"\"\"\n\ndef counting_sort(arr, n):\n", "finetuning_completion": " \n\tmax_element = 0\n\tfor i in range(n): \n\t\tmax_element = max(max_element, arr[i]) \n\n\tcount = [0 for i in range(max_element + 1)] \n\n\tfor i in range(n): \n\t\tcount[arr[i]]+= 1\n\n\tfor i in range(1, max_element + 1): \n\t\tcount[i] += count[i - 1] \n\n\toutput = [0 for i in range(n)] \n\n\tfor i in range(n): \n\t\toutput[ count[ arr[i] ] - 1 ] = arr[i] \n\t\tcount[ arr[i] ] -= 1\n\treturn output", "task_id": 11756}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert Decimal to Binary for a given number.\n\"\"\"\n\ndef convert_decimal_to_binary(n):\n", "finetuning_completion": " \n\tstr_bin = \"\"\n\twhile (n > 0): \n\t\tstr_bin =  str_bin + str(n % 2) \n\t\tn = int(n / 2) \n\t\n\tstr_bin = str_bin[::-1]\n\treturn str_bin", "task_id": 11758}
{"finetuning_prompt": "\"\"\"\nRearrange characters in a given string in alphabetical order.\n\"\"\"\n\ndef alphabetical_order(string):\n", "finetuning_completion": " \n    return ''.join(sorted(string))", "task_id": 11763}
{"finetuning_prompt": "\"\"\"\nGiven two numbers N and A, write a function to calculate A raised to the power N.\n\"\"\"\n\ndef power(N,A):\n", "finetuning_completion": " \n\tif (N == 0): \n\t\treturn 1\n\tres = 1\n\twhile (N > 0): \n\t\tif (N % 2 == 1): \n\t\t\tres = res * A \n\t\tA = A * A \n\t\tN = N // 2\n\treturn res", "task_id": 11764}
{"finetuning_prompt": "\"\"\"\nWrite code to compare two lists and print out all elements that appear in both lists.\n\"\"\"\n\ndef compare(listA, listB):\n", "finetuning_completion": " \n    res=[]\n    for i in listA: \n        if i in listB: \n            res.append(i) \n    return res", "task_id": 11766}
{"finetuning_prompt": "\"\"\"\nWrite a function to detect if the given string contains any punctuation marks.\n\"\"\"\n\nimport re\n\ndef detect_punctuation(string):\n", "finetuning_completion": " \n\tif(re.search(r'[^A-Za-z0-9\\s]+', string)):\n\t\treturn (\"Valid\") \n\telse: \n\t\treturn (\"Invalid\")", "task_id": 11772}
{"finetuning_prompt": "\"\"\"\nClassify an array of strings into respective categories.\n\"\"\"\n\ndef classify_array(arr):\n", "finetuning_completion": " \n    category_dict = {'tree': 0, 'apple': 0, 'dog':1 , 'cat': 1 } \n    classification = [] \n    for element in arr: \n        classification.append(category_dict.get(element)) \n        \n    return classification", "task_id": 11774}
{"finetuning_prompt": "\"\"\"\nModify a given program to print an error message when a non-string value is input.\n\"\"\"\n\ndef print_msg(x):\n", "finetuning_completion": "\n    if isinstance(x, str):\n        print(x)\n    else:\n        print(\"Error: The input is not a string\")", "task_id": 11775}
{"finetuning_prompt": "\"\"\"\nWrite a Python program which takes two strings and checks if the first string is a substring of the second one.\n\"\"\"\n\ndef check_substring(str1, str2):\n", "finetuning_completion": " \n    if(str1 in str2): \n        return True\n    else: \n        return False", "task_id": 11782}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program which defines a function to translate given text into pig latin.\n\"\"\"\n\ndef translate_to_pig_latin(text):\n", "finetuning_completion": " \n\twords = text.split() \n\tpig_words = [] \n\tvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] \n\tfor w in words: \n\t\tif w[0] in vowels: \n\t\t\tpig_words.append(w + 'ay') \n\t\telse: \n\t\t\tpig_words.append(w[1:] + w[0] + 'ay') \n\treturn ' '.join(pig_words)", "task_id": 11784}
{"finetuning_prompt": "\"\"\"\nCreate a function which prints all the prime numbers from 1 to n.\n\"\"\"\n\ndef prime_nums(n):\n", "finetuning_completion": "\r\n  for num in range(2, n + 1):\r\n    if all(num % i != 0 for i in range(2, num)):\r\n      print(num, end = ', ')", "task_id": 11786}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes a user input (list of strings) and checks for anagrams.\n\"\"\"\n\ndef check_anagrams(words):\n", "finetuning_completion": "\r\n  words_dict = {}\r\n  for word in words:\r\n    sorted_word = \"\".join(sorted(word)) #sort alphabetically\r\n    if sorted_word in words_dict:\r\n      words_dict[sorted_word].append(word) #append similar anagram to list\r\n    else:\r\n      words_dict[sorted_word] = [word]\r\n  return words_dict", "task_id": 11789}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to load a given dataset and augment the input features and output targets\n\"\"\"\n\nfrom sklearn.preprocessing import PolynomialFeatures \nfrom sklearn.preprocessing import MinMaxScaler\n\ndef data_augment(X,y):\n", "finetuning_completion": "\n    # Augment statistics for input features\n    poly = PolynomialFeatures(degree = 2) \n    X_aug = poly.fit_transform(X) \n  \n    # Augment stats for output target\n    scaler = MinMaxScaler() \n    y_aug = scaler.fit_transform(np.array(y).reshape(-1, 1)) \n  \n    return X_aug, y_aug", "task_id": 11792}
{"finetuning_prompt": "\"\"\"\nGenerate a code that takes in a strig and returns the unique characters in the string in alphabetical order.\n\"\"\"\n\ndef unique_characters(input_str):\n", "finetuning_completion": " \r\n    unique_char = set(input_str) \r\n    unique_char = list(unique_char)   \r\n    return sorted(unique_char)", "task_id": 11797}
{"finetuning_prompt": "\"\"\"\nWrite a code for Binary Search for a given sorted array of integers.\n\"\"\"\n\ndef binary_search(arr, target):\n", "finetuning_completion": " \r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high: \r\n        mid = (low + high)//2 \r\n        if arr[mid] == target: \r\n            return mid \r\n        elif arr[mid] < target: \r\n            low = mid + 1\r\n        else: \r\n            high = mid - 1\r\n    return -1;", "task_id": 11800}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total amount of money to be paid after x days at a given interest rate.\n\"\"\"\n\ndef cal_total_amount(amt,time,rate):\n", "finetuning_completion": "\n  total_amount=amt \r\n  for i in range(time):\r\n    total_amount+=total_amount*(rate/30)\r\n  return round(total_amount,2)", "task_id": 11806}
{"finetuning_prompt": "\"\"\"\nWrite a function to return the coordinates of the two points that make up a line with given slope and y-intercept.\n\"\"\"\n\ndef line_coordinates(m, b):\n", "finetuning_completion": " \r\n    x1 = 0\r\n    x2 = 0\r\n    y1 = b \r\n    y2 = m * x2 + b\r\n    return [(x1, y1), (x2, y2)]", "task_id": 11807}
{"finetuning_prompt": "\"\"\"\nWrite a function to detect repeating sequences of two words in a sentence.\n\"\"\"\n\ndef detect_repeating_sequence(sentence):\n", "finetuning_completion": "\r\n  words = sentence.split()\r\n  counter = 0\r\n  pairs = []\r\n  for x in range(1,len(words)):\r\n    if (words[x-1] == words[x]):\r\n      counter = counter + 1\r\n      pairs.append((words[x-1],words[x]))\r\n\r\n  if (counter > 0):\r\n      return True, pairs\r\n  else:\r\n      return False, None", "task_id": 11811}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the value of sin(x) using Taylor Series expansion.\n\"\"\"\n\nfrom math import factorial\r\n\r\ndef taylor_sin(x, n):\n", "finetuning_completion": " \r\n    sum = 0\r\n  \r\n    for i in range(n): \r\n        sum += (-1)**i * (x**(2*i+1))/factorial(2*i+1) \r\n          \r\n    return sum", "task_id": 11821}
{"finetuning_prompt": "\"\"\"\nGenerate a new algorithm for sorting an array of numbers in descending order.\n\"\"\"\n\ndef sort_array(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        # Find the maximum element in the remaining  \r\n        # unsorted array \r\n        max_idx = i \r\n        for j in range(i+1, len(arr)): \r\n            if arr[max_idx] < arr[j]: \r\n                max_idx = j \r\n      \r\n        # Swap the found maximum element with  \r\n        # the first element         \r\n        arr[i], arr[max_idx] = arr[max_idx], arr[i] \r\n    return arr", "task_id": 11822}
{"finetuning_prompt": "\"\"\"\nImplement a function that prints out a Histogram showing the frequency of each character in a string.\n\"\"\"\n\ndef histogram_string(string1):\n", "finetuning_completion": "\r\n    result = dict() \r\n    for char in string1: \r\n        if char in result: \r\n            result[char] += 1\r\n        else: \r\n            result[char] = 1\r\n    for k,v in result.items(): \r\n        print(\"{} : {}\".format(k, v))", "task_id": 11826}
{"finetuning_prompt": "\"\"\"\nGenerate a function that removes the occurrence of a given character from a given string.\n\"\"\"\n\ndef remove_char(my_str):\n", "finetuning_completion": "\n    result = \"\"\n    for i in range(len(my_str)):\n        if my_str[i] != 'l':\n            result += my_str[i]\n    return result", "task_id": 11829}
{"finetuning_prompt": "\"\"\"\nGenerate a short program to replace all even numbers in a list with their square.\n\"\"\"\n\ndef squaresOfEvens(list):\n", "finetuning_completion": "\n    for index, num in enumerate(list):\n        if num % 2 == 0:\n            list[index] = num**2\n    return list", "task_id": 11841}
{"finetuning_prompt": "\"\"\"\nSolve the following equation using any programming language\n\"\"\"\n\ndef solve_equation(x, y):\n", "finetuning_completion": "\n  return (4+5*y) / 2 - x", "task_id": 11843}
{"finetuning_prompt": "\"\"\"\nGenrate a code to display all possible permutations of a set of three words supplied as inputs.\n\"\"\"\n\nfrom itertools import permutations\ndef get_permutations(words):\n", "finetuning_completion": "\n    perm = permutations(words) \n    for i in list(perm):  \n\t    print (*i)", "task_id": 11844}
{"finetuning_prompt": "\"\"\"\nCreate a python script to read a list of words and return the words with the most number of vowels.\n\"\"\"\n\ndef max_vowels_word(words):\n", "finetuning_completion": " \n    vowel_counts = {w: len(list(filter(lambda x: x in 'aeiou', w))) \n                        for w in words} \n    return max(vowel_counts, key=vowel_counts.get)", "task_id": 11848}
{"finetuning_prompt": "\"\"\"\nWrite a function to add n number of elements in a list.\n\"\"\"\n\ndef add_list_ele(list1, n):\n", "finetuning_completion": " \r\n for i in range(n): \r\n  list1.append(i + 1) \r\n return list1", "task_id": 11850}
{"finetuning_prompt": "\"\"\"\nWrite code to find the longest increasing subsequence in the input array\n\"\"\"\n\ndef longestSubsequence(arr,n):\n", "finetuning_completion": " \r\n\tls = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and ls[i]< ls[j] + 1 : \r\n\t\t\t\tls[i] = ls[j]+1\r\n\treturn max(ls)", "task_id": 11858}
{"finetuning_prompt": "\"\"\"\nWrite a code to compute the max sum obtained when a subarray is created\n\"\"\"\n\ndef maxSubArraySum(a,size):\n", "finetuning_completion": " \r\n  \r\n    max_so_far = -10000\r\n    max_ending_here = 0\r\n      \r\n    for i in range(0, size): \r\n        max_ending_here = max_ending_here + a[i] \r\n        if (max_so_far < max_ending_here): \r\n            max_so_far = max_ending_here \r\n  \r\n        if max_ending_here < 0: \r\n            max_ending_here = 0   \r\n    return max_so_far", "task_id": 11859}
{"finetuning_prompt": "\"\"\"\nWrite a code to count the number of subsets with a given difference\n\"\"\"\n\ndef countSubsetsWithDifference(arr,n,difference):\n", "finetuning_completion": " \n\t\n\tsum = 0 \n\tfor i in range(n): \n\t\tsum += arr[i] \n\n\tsubsetSum = (sum + difference)//2\n\t\n\tdp = [[False for i in range(subsetSum+1)] for j in range(n+1)] \n\n\t# If sum is 0, then answer is true \n\tfor i in range(n+1): \n\t\tdp[i][0] = True\n  \n\t# If sum is not 0 and set is empty, \n\t# then answer is false \n\tfor i in range(1,subsetSum+1): \n\t\tdp[0][i]=False\n\n\t# Fill the subset table in bottom up manner \n\tfor i in range(1,n+1): \n\t\tfor j in range(1,subsetSum+1): \n\t\t\tif j<arr[i-1]: \n\t\t\t\tdp[i][j] = dp[i-1][j] \n\t\t\tif j>=arr[i-1]: \n\t\t\t\tdp[i][j] = (dp[i-1][j] or dp[i - 1][j-arr[i-1]]) \n\n\treturn dp[n][subsetSum]", "task_id": 11860}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the length of largest subset with same sign\n\"\"\"\n\ndef longestSubsetWithSameSign(arr, n):\n", "finetuning_completion": "\n        sign = [0]*n\n        # Set sign to 1 if array element is +ve else set -1\n        for i in range(n):\n            sign[i] = 1 if arr[i] > 0 else -1\n        \n        length = 0\n        dp = [1]*n\n        \n        for i in range(1,n):\n            for j in range(i):\n                \n                # If same sign then include in subset\n                if sign[i]==sign[j] and dp[j]+1 > dp[i] and j < i:\n                    dp[i] = dp[j]+1\n                    length = max(length, dp[i])\n                    \n        return length", "task_id": 11861}
{"finetuning_prompt": "\"\"\"\nCreate a program that prints the total area of a rectangle.\n\"\"\"\n\ndef calculate_area(length,width):\n", "finetuning_completion": "\r\n    area = length*width\r\n    print(\"The area of the rectangle is\",area)", "task_id": 11862}
{"finetuning_prompt": "\"\"\"\nConstruct a Python script to customize a text message for each item in a list.\n\"\"\"\n\ndef customize_message(items, message):\n", "finetuning_completion": "\r\n    res = [] \r\n    for item in items:\r\n        res.append(message.replace(\"{item_name}\", item)) \r\n    return res", "task_id": 11865}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate combinations from a given list and length.\n\"\"\"\n\ndef generate_combinations(lst, k):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in range(len(lst)): \r\n        if k==1: \r\n            result.append([lst[i]]) \r\n        else: \r\n            temp = generate_combinations(lst[i+1:len(lst)], k-1) \r\n            for t in temp: \r\n                result.append([lst[i]]+t) \r\n    return result", "task_id": 11867}
{"finetuning_prompt": "\"\"\"\nGenerate a report summarizing the average, minimum, and maximum values of a given set of integers.\n\"\"\"\n\ndef report_ints(input_list):\n", "finetuning_completion": "\n    if len(input_list) == 0:\r\n        return (\"Empty input list\")\r\n        \r\n    average = sum(input_list) // len(input_list)\r\n    maximum = max(input_list) \r\n    minimum = min(input_list) \r\n    return (\"Average: %d, Minimum: %d, Maximum: %d\" % (average, minimum, maximum))", "task_id": 11871}
{"finetuning_prompt": "\"\"\"\nPrint the result of a given boolean expression.\n\"\"\"\n\ndef boolExpression(exp):\n", "finetuning_completion": " \r\n    return eval(exp)", "task_id": 11872}
{"finetuning_prompt": "\"\"\"\nFind all the leap years between two given years.\n\"\"\"\n\ndef leapYear(start,end) :\n", "finetuning_completion": " \t\t\r\n\tfor year in range(start,end + 1) : \r\n\t\tif year % 4 == 0 and year % 100 != 0 : \r\n\t\t\tprint(year, end = \" \") \r\n\t\telif year % 400 == 0 : \r\n\t\t\tprint(year, end = \" \")", "task_id": 11873}
{"finetuning_prompt": "\"\"\"\nCreate a program to encode strings into base64 format.\n\"\"\"\n\nimport base64\ndef encode_to_base64(string):\n", "finetuning_completion": "\n    encoded_string = base64.b64encode(string.encode(\"utf-8\"))\n    return encoded_string", "task_id": 11878}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine the number of times that a given number appears in a given sorted array.\n\"\"\"\n\ndef countOccurrence(array, n):\n", "finetuning_completion": " \r\n    low = 0\r\n    high = len(array) - 1\r\n    first, last = -1, -1\r\n    while low <= high: \r\n\r\n        mid = (low + high) // 2\r\n\r\n        if array[mid] == n: \r\n\r\n            if mid > 0 and array[mid-1] == n: \r\n                high = mid - 1\r\n\r\n            else: \r\n                first = mid \r\n                break\r\n\r\n        elif array[mid] > n: \r\n            high = mid - 1\r\n\r\n        else: \r\n            low = mid + 1\r\n\r\n    if first != -1: \r\n        low = 0\r\n        high = len(array) - 1\r\n        while low <= high: \r\n            mid = (low + high) // 2\r\n\r\n            if array[mid] == n: \r\n\r\n                if mid < len(array)-1 and array[mid+1] == n: \r\n                    low = mid + 1\r\n\r\n                else: \r\n                    last = mid \r\n                    break\r\n\r\n            elif array[mid] > n: \r\n                high = mid - 1\r\n\r\n            else: \r\n                low = mid + 1\r\n\r\n        return last - first + 1\r\n    return 0", "task_id": 11886}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to let the user enter two strings, then compare and display the longer one.\n\"\"\"\n\ndef string_comparison(s1,s2):\n", "finetuning_completion": "\r\n if len(s1) > len(s2):\r\n   print(\"The longer string is: \"+s1)\r\n elif len(s2) > len(s1):\r\n   print(\"The longer string is: \"+s2)\n else:\r\n   print(\"Both the strings have equal lengths\")", "task_id": 11895}
{"finetuning_prompt": "\"\"\"\nCreate a program to retrieve the values from a dictionary where the keys match a given pattern.\n\"\"\"\n\nimport re\n\ndef match_pattern(d, pattern):\n", "finetuning_completion": "\n    result = {}\n    for key, value in d.items():\n        if re.match(pattern, key):\n            result[key] = value\n    return result", "task_id": 11900}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort the strings based on their length in the given list.\n\"\"\"\n\ndef sort_by_length(input):\n", "finetuning_completion": " \n    input.sort(key = len) \r\n    return input \r\n  \r\n# driver code \r\ninputList = [\"abcd\", \"a\", \"abc\", \"ab\"] \r\n  \r\nprint(sort_by_length(inputList))", "task_id": 11906}
{"finetuning_prompt": "\"\"\"\nWrite a python script to calculate the probability of an event given the probabilities of each possible outcome.\n\"\"\"\n\ndef calculateProbability(probabilities, givenOutcome):\n", "finetuning_completion": "\n    \n    prob = 1\n    for i in range(len(probabilities)):\n        if givenOutcome[i] == True:\n            prob *= probabilities[i]\n        else:\n            prob *= (1-probabilities[i])\n            \n    return prob", "task_id": 11918}
{"finetuning_prompt": "\"\"\"\nImplement XOR encryption algorithm.\n\"\"\"\n\ndef XOR(x,y):\n", "finetuning_completion": "\n\tresult = \"\"\n\n\tfor i in range(len(x)):\n\t\tif x[i] == y[i]:\n\t\t\tresult +=\"0\"\n\t\telse:\n\t\t\tresult +=\"1\"\n\n\treturn result", "task_id": 11922}
{"finetuning_prompt": "\"\"\"\nWrite a function to which takes two integers and prints the output in format of fraction.\n\"\"\"\n\ndef fractional_out(a, b):\n", "finetuning_completion": "\r\n    if b == 0:\r\n        return None\r\n    else:\r\n        return '{}/{}'.format(a,b)", "task_id": 11929}
{"finetuning_prompt": "\"\"\"\ngenerate a code that finds the index of a given value in an array.\n\"\"\"\n\ndef find_index(arr, value):\n", "finetuning_completion": " \n    return [i for i, x in enumerate(arr) if x == value]", "task_id": 11940}
{"finetuning_prompt": "\"\"\"\nGenerate a code snippet to combine two dictionaries without overwriting values.\n\"\"\"\n\ndef combine_dicts(dict1, dict2):\n", "finetuning_completion": " \n  for key, value in dict2.items(): \n    if key in dict1: \n      continue\n    else: \n      dict1[key] = value  \n  return dict1", "task_id": 11948}
{"finetuning_prompt": "\"\"\"\nWrite a python function to calculate the appreciation of a house after a year given initial price and annual rate of appreciation.\n\"\"\"\n\ndef appreciation(initial_price,rate):\n", "finetuning_completion": "\r\n  appreciation = initial_price + (initial_price * (rate/100))\r\n  return appreciation", "task_id": 11951}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to detect spam messages in a given dataset.\n\"\"\"\n\nimport re\n\ndef detect_spam(text):\n", "finetuning_completion": "\n    pattern = re.compile(r'\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\b', re.IGNORECASE)\n    words = pattern.findall(text)\n    if len(words)>0:\n        return True\n    else:\n        return False", "task_id": 11957}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove duplicates in a list whilst keeping the original order intact.\n\"\"\"\n\ndef remove_duplicates(list):\n", "finetuning_completion": " \r\n  result = [] \r\n  seen = set() \r\n  for item in list: \r\n    if item not in seen: \r\n      seen.add(item) \r\n      result.append(item) \r\n  return result", "task_id": 11962}
{"finetuning_prompt": "\"\"\"\nCreate a program to check for balanced parentheses in a string.\n\"\"\"\n\ndef are_paren_balanced(expr):\n", "finetuning_completion": " \r\n\tstack = [] \r\n   \r\n\t# Traversing the Expression \r\n\tfor char in expr: \r\n\t\tif char in [\"(\", \"{\", \"[\"]: \r\n\t\t\t# Push the element in the stack \r\n\t\t\tstack.append(char) \r\n\t\telse: \r\n\t\t\t# IF current character is not opening \r\n\t\t\t# bracket, then it must be closing. \r\n\t\t\t# So stack cannot be empty at this point. \r\n\t\t\tif not stack: \r\n\t\t\t\treturn False\r\n\t\t\tcurrent_char = stack.pop() \r\n\t\t\tif current_char == '(': \r\n\t\t\t\tif char != \")\": \r\n\t\t\t\t\treturn False\r\n\tif stack: \r\n\t\treturn False\r\n\treturn True", "task_id": 11965}
{"finetuning_prompt": "\"\"\"\nWrite a python program to remove the duplicate elements from a given list in Linear time complexity.\n\"\"\"\n\ndef remove_duplicates(lst):\n", "finetuning_completion": " \r\n    seen_elements = set() \r\n    unique_elements = [] \r\n    for x in lst: \r\n        if x not in seen_elements: \r\n            unique_elements.append(x) \r\n            seen_elements.add(x) \r\n    return unique_elements", "task_id": 11973}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to return the best travel plan between two specified cities.\n\"\"\"\n\ndef travel_plan(start, end):\n", "finetuning_completion": " \r\n    shortest_distance = float(\"inf\") \r\n    best_plan = None\r\n    plans = []\r\n   \r\n    # Generate all possible combinations of routes  \r\n    for i in range(len(start)): \r\n        for j in range(len(end)): \r\n            # Calculate the distance traveled for the combination \r\n            total_distance = start[i] + end[j] \r\n            plans.append((i, j, total_distance)) \r\n  \r\n    # Select the plan with the minimum distance traveled \r\n    for i, j, distance in plans: \r\n        if distance < shortest_distance: \r\n            shortest_distance = distance \r\n            best_plan = (i, j) \r\n  \r\n    return best_plan", "task_id": 11974}
{"finetuning_prompt": "\"\"\"\nFind a set of unique numbers whose sum is equal to given sum X.\n\"\"\"\n\ndef find_numbers(sum):\n", "finetuning_completion": " \r\n    result = set() \r\n    for i in range(1,sum // 2 + 1): \r\n        if (sum - i) not in result: \r\n            result.add(i)   \r\n    return result", "task_id": 11976}
{"finetuning_prompt": "\"\"\"\nImprove the efficiency of the following code by editing only one line.\n\"\"\"\n\ndef fibonacci_recursive(n):\n", "finetuning_completion": "\n    if n <= 1:\n        return n\n    else:\n        cache = {}\n        if n in cache:\n            return cache[n]\n        else:\n            cache[n] = fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n            return cache[n]", "task_id": 11977}
{"finetuning_prompt": "\"\"\"\nWrite a function to process a given list of numbers to their square roots.\n\"\"\"\n\ndef get_squares(nums):\n", "finetuning_completion": "\r\n    return [math.sqrt(num) for num in nums]", "task_id": 11990}
{"finetuning_prompt": "\"\"\"\nConvert the following pseudocode to a Python program.\n\"\"\"\n\ndef sum_of_multiples(Input):\n", "finetuning_completion": " \r\n    num = 0\r\n    for i in range(0, Input): \r\n        if (i % 3 == 0 or i % 5 == 0): \r\n            num = num + i \r\n    return num", "task_id": 11996}
{"finetuning_prompt": "\"\"\"\nCreate a program to retrieve the Kth smallest element from an array using quick-select algorithm.\n\"\"\"\n\ndef partition(arr, low, n): \n    pivot = arr[n]  \r\n    i = (low - 1)\r\n    for j in range(low, n): \r\n        if arr[j] <= pivot:  \r\n            i=i+1 \r\n            arr[i], arr[j]=arr[j],arr[i] \r\n\t\r\n    arr[i+1], arr[n] = arr[n], arr[i+1] \r\n    return (i+1) \r\n  \r\ndef quick_select(arr, low, high, k):\n", "finetuning_completion": " \n    pivot = arr[n]  \r\n    i = (low - 1)\r\n    for j in range(low, n): \r\n        if arr[j] <= pivot:  \r\n            i=i+1 \r\n            arr[i], arr[j]=arr[j],arr[i] \r\n\t\r\n    arr[i+1], arr[n] = arr[n], arr[i+1] \r\n    return (i+1) \r\n  \r\ndef quick_select(arr, low, high, k): \r\n    pos = partition(arr, low, high) \r\n  \r\n    if pos == k-1: \r\n        return arr[pos] \r\n    if pos > k-1: \r\n        return quick_select(arr, low, pos-1, k)  \r\n    return quick_select(arr, pos+1, high, k)", "task_id": 12001}
{"finetuning_prompt": "\"\"\"\nGenerate a script to find out the distribution of characters in a string.\n\"\"\"\n\nfrom collections import Counter\r\n    \r\ndef char_freq(str1):\n", "finetuning_completion": " \r\n  \r\n    # break string into list of words \r\n    strlist = list(str1) \r\n  \r\n    # give dictionary which will have strings \r\n    # as key and their frequencies as value \r\n    allfreq = {} \r\n      \r\n    for i in strlist: \r\n        if i in allfreq: \r\n            allfreq[i] += 1\r\n        else: \r\n            allfreq[i] = 1\r\n  \r\n    print(\"Characters frequency in '\"+str1+\"' is : \\n \" + str(allfreq))", "task_id": 12004}
{"finetuning_prompt": "\"\"\"\nCreate a python script to find the closest perfect square of a given integer.\n\"\"\"\n\ndef perfect_square(number):\n", "finetuning_completion": " \r\n\tx = int(number**0.5) \r\n\tif x == 0: \r\n\t\treturn 0\r\n\ty = (x + 1)**2 \r\n\tz = x**2 \r\n\tif abs(y - number) < abs(z - number): \r\n\t\treturn y \r\n\telse: \r\n\t\treturn z", "task_id": 12011}
{"finetuning_prompt": "\"\"\"\nCreate a program that separates the words in the given sentence based on the letter frequency.\n\"\"\"\n\nfrom collections import Counter \r\n  \r\ndef seperate_words(sentence):\n", "finetuning_completion": " \r\n    words = sentence.split(\" \") \r\n    freq_words = [word for (word, frequency) in Counter(words).most_common()] \r\n  \r\n    return(\" \".join(freq_words))", "task_id": 12012}
{"finetuning_prompt": "\"\"\"\nCreate a pattern of characters with the given input.\n\"\"\"\n\ndef create_pattern(word):\n", "finetuning_completion": " \r\n\tfor char in word: \r\n\t\tprint(char * len(word))", "task_id": 12013}
{"finetuning_prompt": "\"\"\"\nCreate a manhattan distance function to calculate the distance from one point to another.\n\"\"\"\n\ndef manhattan_dist(point1, point2):\n", "finetuning_completion": " \n    \"\"\"Calculates the Manhattan distance between two points\"\"\"\n    dist = 0\n    \n    for i in range(len(point1)): \n        dist += abs(point1[i] - point2[i]) \n    \n    return dist", "task_id": 12017}
{"finetuning_prompt": "\"\"\"\nGenerate code for a function that evaluates a given postfix expression.\n\"\"\"\n\ndef evaluate_postfix(exp):\n", "finetuning_completion": " \n    \"\"\" Evaluates a given postfix expression \"\"\"\n    \n    stack = []\n    for i in exp: \n        if i.isdigit(): \n            # Push the number to the stack \n            stack.append(i)\n        else:\n            # Pop two numbers from the stack \n            a = stack.pop() \n            b = stack.pop() \n            result = eval(str(b + i + a))   \n            # Push the result to the stack\n            stack.append(str(result)) \n    return int(stack.pop())", "task_id": 12019}
{"finetuning_prompt": "\"\"\"\nGenerate a function that calculates the sum of all numbers 1 through n using recursion.\n\"\"\"\n\ndef sum_recursion(n):\n", "finetuning_completion": " \r\n  # Base Case: when n equals 0 \r\n  if n == 0:\r\n    return 0\r\n  # Recursive Case: add n to the sum of n-1 \r\n  else: \r\n    return n + sum_recursion(n-1)", "task_id": 12034}
{"finetuning_prompt": "\"\"\"\nGenerate the output by combining the given two inputs\n\"\"\"\n\ndef combine_inputs(input1, input2):\n", "finetuning_completion": " \n    combo = [] \n    for x,y in zip(input1,input2): \n        combo.append(x+y) \r\n    return combo", "task_id": 12039}
{"finetuning_prompt": "\"\"\"\nWrite a Python program that takes a given list from user and builds a dictionary out of it where key-values are names and age.\n\"\"\"\n\ninput_list = [\"John\",\"23\",\"Adam\",\"34\",\"Alex\",\"27\"]\r\n \r\ndef build_dict(input_list):\n", "finetuning_completion": " \r\n    result = dict()\r\n    for k, v in zip(input_list[0::2], input_list[1::2]):\r\n        result[k] = v \r\n    return result \r\nmy_dict = build_dict(input_list) \r\nprint(my_dict)", "task_id": 12046}
{"finetuning_prompt": "\"\"\"\nCreate a Python function that multiplies each element of a given list by one over its length.\n\"\"\"\n\ndef mult_by_length(input_list):\n", "finetuning_completion": " \r\n    output = [] \r\n    for item in input_list: \r\n        output.append(item * (1/len(input_list)))  \r\n    return output \r\n\r\ninput_list = [1,2,3,4,5]\r\nmult_list = mult_by_length(input_list) \r\nprint(\"Multiplied list by length: \", mult_list)", "task_id": 12047}
{"finetuning_prompt": "\"\"\"\nCompose a Python program to classify given data if it is an even or odd number.\n\"\"\"\n\ndef classify_data(num):\n", "finetuning_completion": "\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "task_id": 12057}
{"finetuning_prompt": "\"\"\"\nWrite a function to return the square of the median of three numbers.\n\"\"\"\n\ndef median_square(a, b, c):\n", "finetuning_completion": " \r\n    median = sorted([a,b,c])[1]\r\n    return median*median", "task_id": 12061}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the maximum number in an array. Enter the array size and the elements in the array.\n\"\"\"\n\ndef find_max(arr,n):\n", "finetuning_completion": " \r\n\tmax = arr[0] \r\n\tfor i in range(1, n): \r\n\t\tif arr[i] > max: \r\n\t\t\tmax = arr[i] \r\n\treturn max", "task_id": 12066}
{"finetuning_prompt": "\"\"\"\nRe-organize the following code to optimize the efficiency of the program.\n\"\"\"\n\ndef optimize_efficiency(arr,n):\n", "finetuning_completion": " \n\tfor i in range (n):\n\t\tfor j in range(0,n-i-1): \n\t\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\treturn arr", "task_id": 12069}
{"finetuning_prompt": "\"\"\"\nEdit the code so that it finds the index of the second occurrence of the given element in the list.\n\"\"\"\n\ndef find_second(lst, element):\n", "finetuning_completion": "\n  index_list = [index for index, i in enumerate(lst) if i == element]\n  \n  if(len(index_list) > 1):\n    return index_list[1]\n  else:\n    return -1", "task_id": 12073}
{"finetuning_prompt": "\"\"\"\nCode a greedy algorithm to select the best path for visiting a set of cities.\n\"\"\"\n\nimport math\r\n\r\n# Function to calculate the cost from a city to its nearest neighbour \r\ndef get_cost(i, cities): \r\n  \r\n    # Find the least cost among all the neighbours\r\n    min_val = math.inf \r\n    for k in range(0, len(cities)): \r\n        if i != k: \r\n            cost = find_distance(i, cities, k) \r\n            min_val = min(cost, min_val) \r\n  \r\n    return min_val \r\n  \r\n# Function to calculate the distance between two cities \r\ndef find_distance(i, cities, k): \r\n    city_i = cities[i] \r\n    city_k = cities[k] \r\n    return (math.sqrt(math.pow(city_i[0] - city_k[0], 2) + \r\n        math.pow(city_i[1] - city_k[1], 2))) \r\n  \r\ndef get_path(cities):\n", "finetuning_completion": " \r\n  \r\n    # Find the least cost among all the neighbours\r\n    min_val = math.inf \r\n    for k in range(0, len(cities)): \r\n        if i != k: \r\n            cost = find_distance(i, cities, k) \r\n            min_val = min(cost, min_val) \r\n  \r\n    return min_val \r\n  \r\n# Function to calculate the distance between two cities \r\ndef find_distance(i, cities, k): \r\n    city_i = cities[i] \r\n    city_k = cities[k] \r\n    return (math.sqrt(math.pow(city_i[0] - city_k[0], 2) + \r\n        math.pow(city_i[1] - city_k[1], 2))) \r\n  \r\ndef get_path(cities): \r\n    visited = [False for i in range(len(cities))] \r\n    path_cost = 0\r\n  \r\n    start_city = 0\r\n    visited[start_city] = True\r\n    curr_city = 0\r\n    visited_count = 1\r\n  \r\n    while visited_count != len(cities): \r\n        # Find the nearest city\r\n        minimum = math.inf \r\n        for i in range(0, len(cities)): \r\n            cost_i = get_cost(curr_city, cities) \r\n            if minimum > cost_i and visited[i] != True: \r\n                    minimum = cost_i \r\n                    next_city = i \r\n  \r\n        # Run for each edge connecting the given cities \r\n        curr_city = next_city \r\n        visited_count += 1\r\n        path_cost += cost_i\r\n        visited[curr_city] = True\r\n  \r\n    path_cost += find_distance(curr_city, cities, start_city) \r\n    return path_cost", "task_id": 12079}
{"finetuning_prompt": "\"\"\"\nGenerate a program to list all prime numbers under a given number.\n\"\"\"\n\ndef prime_numbers(num):\n", "finetuning_completion": "\r\n    prime_list = []\r\n    for i in range(2,num+1):\r\n        isPrime = True\r\n        for j in range(2,i):\r\n            if (i%j==0):\r\n                isPrime = False\r\n                break\r\n        if isPrime:\r\n            prime_list.append(i)\r\n    return prime_list", "task_id": 12080}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers and a target sum, write a program to find the pair of numbers in the list that adds up to the target sum.\n\"\"\"\n\ndef has_pair_with_sum(input_list, target_sum):\n", "finetuning_completion": " \r\n    comp_dict = dict() \r\n    for num in input_list: \r\n        pair_num = target_sum - num \r\n        if comp_dict.get(pair_num) is not None: \r\n            return True \r\n        comp_dict[num] = num \r\n    return False", "task_id": 12083}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the number of substrings in a string that only contain vowels.\n\"\"\"\n\ndef countVowelsSubstring(input):\n", "finetuning_completion": " \r\n    count = 0\r\n    vowels = \"aeiou\"\r\n    for i in range(len(input)):\r\n        for j in range(i, len(input)): \r\n            flag = 1\r\n            for k in range(i, j+1): \r\n                if (input[k] not in vowels): \r\n                    flag = 0\r\n            if (flag == 1): \r\n                count += 1\r\n    return count", "task_id": 12084}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to split a string into two parts of unequal length.\n\"\"\"\n\ndef unevenStringSplit(s):\n", "finetuning_completion": " \r\n    lenS = len(s) \r\n    if (lenS % 2 == 1): \r\n        lenFirst = int(lenS // 2) \r\n        lenSecond = int(lenS - lenFirst) \r\n    else: \r\n        lenFirst = int(lenS / 2) \r\n        lenSecond = int(lenS - lenFirst) \r\n  \r\n    strFirst = s[:lenFirst]  \r\n    strSecond = s[lenFirst:]  \r\n  \r\n    return (strFirst, strSecond)", "task_id": 12085}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to split the given list into two parts where the length of the first part is given.\n\"\"\"\n\ndef split_list(test_list, part_len):\n", "finetuning_completion": "\r\n    first_part = test_list[:part_len]\r\n    second_part = test_list[part_len:]\r\n\r\n    return (first_part, second_part)", "task_id": 12090}
{"finetuning_prompt": "\"\"\"\nDesign a program that takes a string as an input, reverses each word and prints it as output.\n\"\"\"\n\ndef reverse_words(str):\n", "finetuning_completion": "\r\n  word_list = str.split(\" \") \r\n  reversed_words_list = [word[::-1] for word in word_list] \r\n  reversed_words_string =  \" \".join(reversed_words_list) \r\n  return (reversed_words_string)", "task_id": 12091}
{"finetuning_prompt": "\"\"\"\nCreate a program to order a set of words in reverse alphabetical order.\n\"\"\"\n\ndef reverse_alphabetical_order(words):\n", "finetuning_completion": " \n  words = words.split(\" \") \r\n  words.sort(reverse = True) \r\n  return(\" \".join(words))", "task_id": 12092}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, write a program to determine the maximum sum possible by selecting a subarray without adjacent elements.\n\"\"\"\n\ndef maxSumNonAdjacent(arr):\n", "finetuning_completion": " \r\n    incl = 0\r\n    excl = 0\r\n      \r\n    for i in arr: \r\n          \r\n        # Current max excluding i (No ternary in  \r\n        # Python) \r\n        new_excl = max(incl, excl) \r\n          \r\n        # Current max including i \r\n        incl = excl + i \r\n        excl = new_excl \r\n      \r\n    # return max of incl and excl \r\n    return max(incl, excl)", "task_id": 12098}
{"finetuning_prompt": "\"\"\"\nCreate a sorting algorithm for a given array of strings.\n\"\"\"\n\ndef sort(array):\n", "finetuning_completion": "\n\n    for i in range(len(array)):\n\n        min_idx = i \n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j \n        \n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array", "task_id": 12103}
{"finetuning_prompt": "\"\"\"\nGenerate an array containing prime numbers from the given range.\n\"\"\"\n\ndef generate_prime(start,end):\n", "finetuning_completion": "\r\n  prime_arr = []\r\n  for num in range(start, end+1):  \n    if num > 1:\n       for i in range(2, num // 2 + 1): \n           if (num % i) == 0: \n               break\n       else: \n           prime_arr.append(num)   \n  return prime_arr", "task_id": 12105}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find a sub array with maximum sum in an array with both positive and negative numbers.\n\"\"\"\n\ndef maxSumSubarray(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    max_so_far = 0\r\n    max_ending_here = 0\r\n     \r\n    for i in range(0, n): \r\n        max_ending_here = max_ending_here + arr[i] \r\n        if max_ending_here < 0: \r\n            max_ending_here = 0  \r\n        elif max_so_far < max_ending_here: \r\n            max_so_far = max_ending_here  \r\n    return max_so_far", "task_id": 12115}
{"finetuning_prompt": "\"\"\"\nGiven a sequence of numbers, write a function to find the average of the geometric series.\n\"\"\"\n\ndef geometric_average(sequence):\n", "finetuning_completion": "\n    product = 1\n    for num in sequence:\n        product *= num\n    return pow(product, 1 / len(sequence))", "task_id": 12118}
{"finetuning_prompt": "\"\"\"\nCreate a method to check for overlapping rectangles in a given array of rectangles.\n\"\"\"\n\ndef check_overlap(arr_rectangles):\n", "finetuning_completion": " \r\n    for i in range(len(arr_rectangles)): \r\n        for j in range(i + 1, len(arr_rectangles)): \r\n            rect1 = arr_rectangles[i] \r\n            rect2 = arr_rectangles[j] \r\n            l_x = max(rect1[0], rect2[0])  \r\n            l_y = max(rect1[1], rect2[1])  \r\n            r_x = min(rect1[2], rect2[2])  \r\n            r_y = min(rect1[3], rect2[3]) \r\n             \r\n            # check if two rectangles overlap or not \r\n            if(l_x < r_x and l_y < r_y): \r\n                return True\r\n    return False", "task_id": 12126}
{"finetuning_prompt": "\"\"\"\nEdit the following code to remove the for loop for better efficiency.\n\"\"\"\n\ndef func_2(lst):\n", "finetuning_completion": " \r\n\tres = [i*i for i in lst] \r\n\treturn res", "task_id": 12132}
{"finetuning_prompt": "\"\"\"\nDevelop a program that can be used to edit a given text.\n\"\"\"\n\ndef edit_text(text):\n", "finetuning_completion": " \r\n    words = text.split(' ') \r\n    edited_words = [] \r\n\r\n    for word in words: \r\n        if len(word) > 3: \r\n            word = word[:3] +'-'+word[3:] \r\n        edited_words.append(word) \r\n    edited_text = ' '.join(edited_words) \r\n\r\n    return edited_text", "task_id": 12135}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the elements that have most of their occurrences in the list.\n\"\"\"\n\ndef most_common_elements(nums):\n", "finetuning_completion": " \r\n    frequency = {} \r\n  \r\n    for item in nums: \r\n        if (item in frequency): \r\n            frequency[item] += 1\r\n        else: \r\n            frequency[item] = 1\r\n      \r\n    max_freq = 0\r\n    max_items = [] \r\n      \r\n    for key, value in frequency.items(): \r\n        if max_freq < value: \r\n            max_freq = value \r\n  \r\n    for key, value in frequency.items(): \r\n        if max_freq == value: \r\n            max_items.append(key) \r\n      \r\n    return max_items", "task_id": 12136}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the number of operations needed to convert one string to another using the Levenshtein Distance algorithm.\n\"\"\"\n\ndef levenshtein_distance(s, t):\n", "finetuning_completion": "\r\n    m = len(s)\r\n    n = len(t)\r\n    L = [[0 for i in range(n+1)] for j in range(m+1)] # create an m+1 by n+1 matrix\r\n\r\n    for i in range(m+1):\r\n        L[i][0] = i # fill each cell with a base case\r\n    for j in range(n+1):\r\n        L[0][j] = j\r\n\r\n    for i in range(1, m+1):\r\n        for j in range(1, n+1):\r\n            if s[i-1] == t[j-1]: # characters match\r\n                L[i][j] = L[i-1][j-1] # no operation needed\r\n            else: # characters don't match\r\n                L[i][j] = 1 + min(L[i-1][j], L[i][j-1], L[i-1][j-1]) # find min operation count\r\n\r\n    return L[m][n] # return the bottom right cell value", "task_id": 12138}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the total number of moving boxes including boxes with weight greater than 1kg.\n\"\"\"\n\ndef heavy_boxes(box_weights):\n", "finetuning_completion": "\r\n  count = 0\r\n  for weight in box_weights:\r\n    if weight > 1: #if the box weight is greater than 1kg\r\n      count += 1 #increment the counter\r\n  return count", "task_id": 12140}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a 2D array and print it as a matrix in a spiral order.\n\"\"\"\n\ndef printSpiral(arr):\n", "finetuning_completion": " \r\n  \r\n    row_direc = 0\r\n    col_direc = 0\r\n    arr_r = len(arr) \r\n    arr_c = len(arr[0]) \r\n  \r\n    while (row_direc < arr_r and col_direc < arr_c): \r\n  \r\n        # Move in the right direction \r\n        for i in range(col_direc, arr_c): \r\n            print(arr[row_direc][i], end = \" \") \r\n  \r\n        row_direc += 1\r\n  \r\n        # Move in the down direction \r\n        for i in range(row_direc, arr_r): \r\n            print(arr[i][arr_c - 1], end = \" \") \r\n  \r\n        arr_c -= 1\r\n  \r\n        # Move in the left direction \r\n        if (row_direc < arr_r): \r\n            for i in range(arr_c - 1, (col_direc - 1), -1): \r\n                print(arr[arr_r - 1][i], end = \" \") \r\n            arr_r -= 1\r\n  \r\n        # Move in the up direction \r\n        if (col_direc < arr_c): \r\n            for i in range(arr_r - 1, row_direc - 1, -1): \r\n                print(arr[i][col_direc], end = \" \") \r\n            col_direc += 1", "task_id": 12146}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort a list of strings alphabetically by their last letter.\n\"\"\"\n\ndef last_letters_sort(words):\n", "finetuning_completion": " \r\n\treturn sorted(words, key = lambda x: x[-1])", "task_id": 12147}
{"finetuning_prompt": "\"\"\"\nCreate an efficient algorithm to calculate sum of the next n numbers.\n\"\"\"\n\ndef sum_next_nums(n):\n", "finetuning_completion": " \n    answer = (n*(n + 1)) / 2\n    return int(answer)", "task_id": 12148}
{"finetuning_prompt": "\"\"\"\nCreate a code to display the odd numbers between 1 to 40.\n\"\"\"\n\ndef display_odds(n):\n", "finetuning_completion": "  \r\n    # list to store odd numbers  \r\n    Odd_nums = []  \r\n    for i in range(n + 1):  \r\n        # if 'i' is odd  \r\n        if i % 2 != 0:  \r\n            Odd_nums.append(i) \r\n    return Odd_nums", "task_id": 12151}
{"finetuning_prompt": "\"\"\"\nDevelop a function for binary search of a sorted array.\n\"\"\"\n\ndef binarySearch(myList, x):\n", "finetuning_completion": " \r\n    low = 0\r\n    high = len(myList) - 1\r\n    mid = 0\r\n\r\n    while low <= high: \r\n        mid = (high + low) // 2\r\n\r\n        if myList[mid] < x: \r\n            low = mid + 1\r\n\r\n        elif myList[mid] > x: \r\n            high = mid - 1\r\n\r\n        else: \r\n            return mid \r\n  \r\n    return -1", "task_id": 12153}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to generate all possible combinations of strings using the characters in the given set.\n\"\"\"\n\ndef generate_combinations(s):\n", "finetuning_completion": " \r\n  \r\n    if len(s) == 0 : \r\n        return [] \r\n  \r\n    if len(s) == 1 : \r\n        return s  \r\n  \r\n    res = []\r\n\r\n    for i in range(len(s)) : \r\n        elem = s[i] \r\n        sub_result = generate_combinations(s[:i] + s[i + 1:]) \r\n  \r\n        for j in sub_result : \r\n            res.append(elem + j) \r\n  \r\n    return res", "task_id": 12161}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to classify the given text into categories of personal, educational, and career.\n\"\"\"\n\ndef classify_text(text):\n", "finetuning_completion": "\n    educational = [\"university\", \"college\", \"school\", \"degree\", \"graduate\", \"professor\", \"class\"]\n    personal = [\"I'm\", \"my\", \"me\", \"I\", \"student\", \"myself\",\"my life\"]\n    career = [\"career\", \"job\", \"work\", \"employee\", \"company\", \"internship\"]\n\n    if any(word in text for word in educational):\n        return \"Educational\"\n    elif any(word in text for word in personal):\n        return \"Personal\"\n    elif any(word in text for word in career):\n        return \"Career\"\n    else:\n        return \"Other\"\n\nprint(classify_text(\"I'm currently a sophomore in Computer Science at University of New York.\"))", "task_id": 12162}
{"finetuning_prompt": "\"\"\"\nWrite a method to sort the following array of integers in ascending order [10,2,7,1,4,8]\n\"\"\"\n\ndef sort_array(array):\n", "finetuning_completion": " \r\n    n = len(array) \r\n  \r\n    # Traverse through all array elements \r\n    for i in range(n): \r\n  \r\n        # Last i elements are already in place \r\n        for j in range(0, n-i-1): \r\n  \r\n            # traverse the array from 0 to n-i-1 \r\n            # Swap if the element found is greater \r\n            # than the next element \r\n            if array[j] > array[j+1] : \r\n                array[j], array[j+1] = array[j+1], array[j] \r\n    return array", "task_id": 12175}
{"finetuning_prompt": "\"\"\"\nGenerate a program that implements simultaneous linear equation solver using Cramer's rule.\n\"\"\"\n\ndef Cramers_Rule(coeff):\n", "finetuning_completion": "\n    det=coeff[0][0]*coeff[1][1]-coeff[1][0]*coeff[0][1]\n    det_x=coeff[2][0]*coeff[1][1]-coeff[1][0]*coeff[2][1]\n    det_y=coeff[0][0]*coeff[2][1]-coeff[2][0]*coeff[0][1]\n    x=det_x/det\n    y=det_y/det\n    print(\"One Solution is :: x = \",x,\" , y = \",y)", "task_id": 12182}
{"finetuning_prompt": "\"\"\"\nCreate a function to retrieve the answer \"Yes\" or \"No\" for a given two Boolean values.\n\"\"\"\n\ndef boolean_xy(x, y):\n", "finetuning_completion": " \r\n    if (x == False and y == False): \r\n        return \"No\"\r\n    elif (x == True and y == True): \r\n        return \"Yes\"\r\n    else: \r\n        return \"No\"", "task_id": 12199}
{"finetuning_prompt": "\"\"\"\nGenerate a program to flatten a given array containing sub-arrays.\n\"\"\"\n\ndef flatten_array(arr):\n", "finetuning_completion": "\n    flattened_arr = []\n    for i in arr:\n        if isinstance(i,list):\n            flattened_arr.extend(flatten_array(i))\n        else:\n            flattened_arr.append(i)\n\n    return flattened_arr", "task_id": 12202}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to check for balanced parentheses in an expression.\n\"\"\"\n\ndef balancedPar(exp):\n", "finetuning_completion": " \n    s = [] \n    # Traverse the given expression \n    for char in exp:  \n            # If the character is an opening \n            # brace add it to a stack  \n        if char in [\"(\", \"{\", \"[\"]:   \n            s.append(char)  \n        else: \n            # IF current character is a closing  \n            # brace then pop from stack and\n            # if the popped character is the  \n            # matching opening brace then \n            # fine else parenthesis are not \n            # balanced  \n            if len(s)==0: \n                return False \n            if char==\")\" and s[-1]==\"(\": \n                s.pop() \n            if char==\"}\" and s[-1]==\"{\":\n                s.pop() \n            if char==\"]\" and s[-1]==\"[\": \n                s.pop() \n  \n    # Check Empty Stack \n    if len(s)==0: \n        return True\n    else: \n        return False", "task_id": 12210}
{"finetuning_prompt": "\"\"\"\nCreate a script to encode a given string with SHA-256 encryption.\n\"\"\"\n\nimport hashlib\r\n\r\ndef sha256_encrypt(string):\n", "finetuning_completion": "\r\n    encrypted_string = hashlib.sha256(string.encode()).hexdigest()\r\n    return encrypted_string", "task_id": 12214}
{"finetuning_prompt": "\"\"\"\nOptimize a given code to run faster and more efficiently.\n\"\"\"\n\ndef function(numbers):\n", "finetuning_completion": "\n    output = sum(numbers)\n    return output", "task_id": 12217}
{"finetuning_prompt": "\"\"\"\nConstruct a query to search for particular keywords in a given database.\n\"\"\"\n\ndef keyword_search(keywords, database):\n", "finetuning_completion": "\n\tquery = \"SELECT * FROM \" + database + \" WHERE \"\n\tfor keyword in keywords:\n\t\tquery += \"keywords LIKE '%\" + keyword + \"%' OR \"\n\t\n\t# remove the last \" OR \"\n\tquery = query[:-4]\n\treturn query", "task_id": 12219}
{"finetuning_prompt": "\"\"\"\nCreate a script to order the elements in a list of integers.\n\"\"\"\n\ndef order_list(lst):\n", "finetuning_completion": "\n\treturn sorted(lst)", "task_id": 12220}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the maximum sum of elements in an array such that no two elements are adjacent.\n\"\"\"\n\ndef maxSumNonAdj(arr):\n", "finetuning_completion": " \r\n\texcl = 0\r\n\tincl = arr[0] \r\n\tfor i in range(1, len(arr)): \r\n\t\tnew_excl = max(incl, excl) \r\n\r\n\t\tincl = excl + arr[i] \r\n\t\texcl = new_excl \r\n\r\n\treturn max(incl, excl)", "task_id": 12223}
{"finetuning_prompt": "\"\"\"\nDesign a python program to perform addition of two numbers within a range of given numbers.\n\"\"\"\n\ndef add_nums_in_range(start, end):\n", "finetuning_completion": "\n    result = 0\n    for i in range(start,end+1):\n        result += i\n    return result", "task_id": 12225}
{"finetuning_prompt": "\"\"\"\nGenerate a chess board output given an nxn size.\n\"\"\"\n\ndef generate_chessboard(n):\n", "finetuning_completion": "   \n    board=[] \n    for i in range(n): \n        row=[] \n        for j in range(n): \n            if (i + j) % 2 == 0: \n                row.append('X') \n            else: \n                row.append(' ') \n        board.append(row) \n      \n    for row in board: \n        for col in row: \n            print(col, end=\" \") \n        print()", "task_id": 12243}
{"finetuning_prompt": "\"\"\"\nCreate a python program that takes in a list of data and checks if the sum of the  first 2 elements equals the third element.\n\"\"\"\n\ndef sum_checker(list_data):\n", "finetuning_completion": "\r\n    if (list_data[0] + list_data[1] == list_data[2]):\r\n        return True\r\n    else:\r\n        return False", "task_id": 12244}
{"finetuning_prompt": "\"\"\"\nCreate a python function to verify a given prime number.\n\"\"\"\n\ndef prime_checker(num):\n", "finetuning_completion": "\r\n    if num > 1:  \r\n       for i in range(2,num):  \r\n           if (num % i) == 0:  \r\n               return False \r\n       else:  \r\n           return True \r\n    else:  \r\n       return False", "task_id": 12245}
{"finetuning_prompt": "\"\"\"\nWrite a python code to classify the list range (1-10) in an ascending order.\n\"\"\"\n\ndef classify_order(x):\n", "finetuning_completion": "\n    if(x<5):\n        return 'Low'\n    elif(x>=5 and x<=7):\n        return 'Medium'\n    else:\n        return 'High'", "task_id": 12248}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the sum of factorials from 1 until the given number.\n\"\"\"\n\ndef calculate_sum_factorials(n):\n", "finetuning_completion": "\n    sum = 0 \n    for i in range(1,n+1) :\n        fact = 1\n        for j in range(1,i+1):\n            fact = fact * j   \n        sum = sum + fact\n    return sum", "task_id": 12257}
{"finetuning_prompt": "\"\"\"\nIdentify the longest common prefix of the given string.\n\"\"\"\n\ndef commonPrefix(string):\n", "finetuning_completion": " \r\n    prefix = string[0] \r\n    for string in string[1:]: \r\n        pointer = 0\r\n        while(pointer < len(prefix) and pointer < len(string) and prefix[pointer] == string[pointer]): \r\n            pointer += 1\r\n        prefix = prefix[:pointer] \r\n    return prefix", "task_id": 12264}
{"finetuning_prompt": "\"\"\"\nCreate a function to print one-dimensional zig zag pattern with the given number of row.\n\"\"\"\n\ndef zigzag_pattern(n):\n", "finetuning_completion": "\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            for j in range(n):\r\n                print(\"* \",end=\"\")\r\n        else:\r\n            for j in range(n-1,-1,-1):\r\n                print(\"* \",end=\"\")\r\n        print()", "task_id": 12269}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to calculate the power of a number with Python.\n\"\"\"\n\ndef power (base, exponent):\n", "finetuning_completion": "\n    result = 1\n    for i in range(exponent):\n        result *= base\n    return result", "task_id": 12275}
{"finetuning_prompt": "\"\"\"\nDevelop a python program to find the median number in a given unsorted array.\n\"\"\"\n\ndef findMedian(arr):\n", "finetuning_completion": " \n   \n    arr.sort() \n  \n    # If number of elements is odd \n    if len(arr) % 2 != 0: \n        return arr[len(arr)//2] \n      \n    # Number of elements is even\n    return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2", "task_id": 12280}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a number as an input and returns the number multiplied by its square.\n\"\"\"\n\ndef num_multiplied_by_square(num):\n", "finetuning_completion": " \r\n  return num * num * num", "task_id": 12282}
{"finetuning_prompt": "\"\"\"\nFind any local minima and maxima in the given array of numbers.\n\"\"\"\n\ndef local_extrema(arr):\n", "finetuning_completion": " \r\n  min_list = [] \r\n  max_list = [] \r\n  for i in range(1, len(arr)-1): \r\n    if arr[i] > arr[i-1] and arr[i] > arr[i+1]: \r\n      max_list.append(arr[i]) \r\n    elif arr[i] < arr[i-1] and arr[i] < arr[i+1]: \r\n      min_list.append(arr[i]) \r\n  return min_list, max_list", "task_id": 12285}
{"finetuning_prompt": "\"\"\"\nFind the pair of numbers in the given array that has the smallest difference between them.\n\"\"\"\n\ndef find_pair_smallest_difference(arr):\n", "finetuning_completion": "  \r\n  if len(arr) == 0: \r\n    return 0\r\n  arr.sort() \r\n  min_diff = abs(arr[0] - arr[1]) \r\n  for i in range(2,len(arr)): \r\n    diff = abs(arr[i]-arr[i-1]) \r\n    min_diff = min(min_diff, diff) \r\n  return min_diff", "task_id": 12286}
{"finetuning_prompt": "\"\"\"\nGenerate a program to detect if dynamic programming can be used to solve the given problem.\n\"\"\"\n\ndef dynamic_programming_check(problem):\n", "finetuning_completion": "\n    if isinstance(problem, str):\n        return False\n    elif  isinstance(problem, list):\n        l = len(problem)\n        if (all(isinstance(item, int) for item in problem) and l >1):\n            return True\n        else:\n            return False\n    else:\n        return False", "task_id": 12289}
{"finetuning_prompt": "\"\"\"\nCreate a filtering function to keep only the words/numbers present in text_list from the given input.\n\"\"\"\n\ndef filter_values(text_list, input_text):\n", "finetuning_completion": "\n  output_text = [elem for elem in input_text.split(' ') if elem in text_list]\n  return output_text\n  \ntext_list = ['one', 'two', 'three', 'four']\ninput_text = 'one two three four five six seven'\n\nresult = filter_values(text_list, input_text)\n\nprint(result) # ['one', 'two', 'three', 'four]", "task_id": 12300}
{"finetuning_prompt": "\"\"\"\nCreate a list of all possible permutations for a given input string.\n\"\"\"\n\ndef permutation(string):\n", "finetuning_completion": "\n  length = len(string)\n  # store all permutations of the string\n  result = []\n  # check if string is empty or single character\n  if length == 0 or length == 1:\n    result = [string] \n  else:\n    # iterate over all the characters\n    for i in range(length):\n      first = string[i]\n      # extract all characters except the one at index i\n      remaining = string[:i] + string[i+1:]\n      # recursion over the remaining character\n      permutation_sub = permutation(remaining)\n      # create a permutation from the first character and the permutation of remaining substring\n      permutation_sub = [first + p for p in permutation_sub]\n      result.extend(permutation_sub)\n  return result\n   \nstring = 'ABC'\nresult = permutation(string)\n\nprint(result) # ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']", "task_id": 12302}
{"finetuning_prompt": "\"\"\"\nGenerate code to modify the given string by removing any duplicate words.\n\"\"\"\n\ndef remove_duplicates(input_str):\n", "finetuning_completion": "\n    words = input_str.split(\" \")\n    output_str = \"\"\n    for i in range(len(words)-1):\n        if words[i] != words[i+1]:\n            output_str += words[i] + \" \"\n    output_str += words[-1]\n    return output_str", "task_id": 12304}
{"finetuning_prompt": "\"\"\"\nGiven a string and a number, write a function to check if the same string is present more than the number of times.\n\"\"\"\n\ndef check_frequency(test_string, check_num):\n", "finetuning_completion": "\r\n    list1 = test_string.split()\r\n    counts = dict()\r\n    for words in list1:\r\n        counts[words] = counts.get(words, 0) + 1\r\n    for keys, value in counts.items():\r\n        if value > check_num:\r\n            return True\r\n        else:\r\n            return False", "task_id": 12307}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, write a function to create a dictionary with the cumulative sum of the elements.\n\"\"\"\n\ndef cumulative_sum(test_list):\n", "finetuning_completion": " \r\n    output_dict = {0:test_list[0]} \r\n    for i in range(1,len(test_list)): \r\n        output_dict[i] = output_dict[i - 1] + test_list[i] \r\n    return output_dict", "task_id": 12309}
{"finetuning_prompt": "\"\"\"\nCreate a function which multiplies two integers.\n\"\"\"\n\ndef multiply(a,b):\n", "finetuning_completion": " \r\n    return a*b", "task_id": 12310}
{"finetuning_prompt": "\"\"\"\nWrite a python program to illustrate a naive basic calculator.\n\"\"\"\n\ndef calculator(num1,num2,op):\n", "finetuning_completion": " \r\n    if op == \"+\": \r\n        return num1 + num2 \r\n    elif op == \"-\": \r\n        return num1 - num2 \r\n    elif op == \"*\": \r\n        return num1 * num2 \r\n    elif op == \"/\": \r\n        return num1 / num2 \r\n    else: \r\n        return \"Invalid Operator!\" \r\n  \r\n# Driver code \r\nnum1, num2 = 5, 3\r\nop = \"/\"\r\nprint(calculator(num1,num2,op))", "task_id": 12311}
{"finetuning_prompt": "\"\"\"\nWrite a python program to parse a given URL and retrieve the component parts.\n\"\"\"\n\nfrom urllib.parse import urlparse\r\ndef url_parse(url):\n", "finetuning_completion": " \r\n    parsed_url = urlparse(url) \r\n    return (parsed_url.scheme, \r\n        parsed_url.netloc, \r\n        parsed_url.path, \r\n        parsed_url.params, \r\n        parsed_url.query, \r\n        parsed_url.fragment)", "task_id": 12316}
{"finetuning_prompt": "\"\"\"\nWrite a code that takes a given string and encodes it using Base64 encoding scheme.\n\"\"\"\n\nimport base64 \r\n\r\ndef encoding(string):\n", "finetuning_completion": " \r\n    return base64.b64encode(string.encode()).decode()", "task_id": 12321}
{"finetuning_prompt": "\"\"\"\nGenerate a code that takes a given text string and searches for given keyword pattern in the string.\n\"\"\"\n\ndef keyword_search(text, keyword):\n", "finetuning_completion": " \r\n  if text.find(keyword)!=-1: \r\n    return 'keyword found'\r\n  else:\r\n    return 'keyword not found'", "task_id": 12322}
{"finetuning_prompt": "\"\"\"\nDesign a code snippet to remove the duplicate values from the given list.\n\"\"\"\n\ndef remove_duplicate_value(test_list):\n", "finetuning_completion": " \r\n    new_list = [] \r\n    for i in test_list: \r\n        if i not in new_list: \r\n            new_list.append(i) \r\n  \r\n    return new_list \r\n  \r\ntest_list = [2,3,4,2,3,6,7] \r\nprint(remove_duplicate_value(test_list))", "task_id": 12324}
{"finetuning_prompt": "\"\"\"\nWrite a function to take an input list and create a corresponding dictionary with each element as a key.\n\"\"\"\n\ndef list_to_dict(lst):\n", "finetuning_completion": "\n    dict = {}\r\n    for i in range(len(lst)):\r\n        dict[lst[i]] = i\r\n    return dict", "task_id": 12328}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to convert a given integer to its corresponding string representation.\n\"\"\"\n\ndef int_to_str(num):\n", "finetuning_completion": "\r\n    num_str = ''\r\n    for n in str(num):\r\n        num_str += chr(int(n)+48)\r\n    return num_str", "task_id": 12343}
{"finetuning_prompt": "\"\"\"\nUpdate a value in a list of dictionaries when its key exists.\n\"\"\"\n\ndef update_dictionary(lst,key,value):\n", "finetuning_completion": " \r\n    lst = [{k:v if k != key else value for k,v in d.items()} for d in lst] \r\n    return lst", "task_id": 12345}
{"finetuning_prompt": "\"\"\"\nGenerate a program to create a dictionary with items from a given list.\n\"\"\"\n\ndef create_dictionary(words_list):\n", "finetuning_completion": "\n  dict = {}\r\n  for item in words_list:\r\n     dict[item]=\" \"\r\n  return dict", "task_id": 12346}
{"finetuning_prompt": "\"\"\"\nImprove a given recursive function to produce its maximum absolute value.\n\"\"\"\n\ndef find_max(arr):\n", "finetuning_completion": " \n\n    if len(arr) is 0: \n        return 0\n\n    max_val = find_max(arr[1:]) \n    if abs(arr[0]) > max_val: \n        return abs(arr[0]) \n    return max_val", "task_id": 12363}
{"finetuning_prompt": "\"\"\"\nCreate an array of n numbers where each number is the sum of its previous two numbers.\n\"\"\"\n\ndef fibonacci_nums(n):\n", "finetuning_completion": " \n    a, b = 0, 1 \n    arr = [] \n    for i in range(n):\n        arr.append(a) \n        a, b = b, a + b \n    return arr", "task_id": 12369}
{"finetuning_prompt": "\"\"\"\nWrite a python function that creates a string of all the prime numbers up to the given integer.\n\"\"\"\n\ndef primes(n):\n", "finetuning_completion": " \r\n    prime_list = [] \r\n    for num in range(2, n + 1): \r\n        if num > 1: \r\n            for i in range(2, num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                prime_list.append(str(num))         \r\n    return ''.join(prime_list)", "task_id": 12374}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the sum of the series 1 + 1/2^2 + 1/3^3 + 1/4^4 +\u2026\u2026+ 1/n^n.\n\"\"\"\n\ndef sN(n):\n", "finetuning_completion": " \r\n    s = 0.0\r\n    for i in range(1, n+1): \r\n        s += float(1/pow(i,i)) \r\n    return s", "task_id": 12376}
{"finetuning_prompt": "\"\"\"\nCreate a python function to find the total number of bits required to represent a given number in binary form.\n\"\"\"\n\ndef bits(x):\n", "finetuning_completion": " \r\n    count = 0 \r\n    while(x>0): \r\n        count = count + 1; \r\n        x = x>>1 \r\n    return count", "task_id": 12377}
{"finetuning_prompt": "\"\"\"\nWrite a python program to determine whether two numbers can be multiplied or not without using arithmetic operators.\n\"\"\"\n\ndef check(m, n) :\n", "finetuning_completion": " \n\t# xor and store the result in m \n\tm = m^n \n\t# subtract n from the result and store in m  \r\n\tm = m-n \n  \r\n\t# if m is greater than zero that means they are divisable \r\n\t# else they are not divisible \r\n\tif (m > 0) : \r\n\t\treturn True\r\n\telse : \r\n\t\treturn False", "task_id": 12378}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the sum of two numbers using a for loop.\n\"\"\"\n\ndef Sum_Of_Two_Numbers(a, b):\n", "finetuning_completion": "\r\n    total = 0\r\n    for i in range(a, b+1):\r\n        total += i\r\n    return total", "task_id": 12380}
{"finetuning_prompt": "\"\"\"\nDesign a function in Python to calculate maximum and minimum of list elements.\n\"\"\"\n\ndef LargeSmallElement(list):\n", "finetuning_completion": " \r\n\tmax_ele = max(list) \r\n\tmin_ele = min(list)\r\n\r\n\tprint(\"Largest element is:\", max_ele) \r\n\tprint(\"Smallest element is:\", min_ele)", "task_id": 12388}
{"finetuning_prompt": "\"\"\"\nWrite a python program to fill a given 2D list with zeros.\n\"\"\"\n\ndef fill_With_Zeros(n):\n", "finetuning_completion": " \r\n    matrix = [] \r\n    for i in range(n): \r\n        row = [0 for _ in range(n)] \r\n        matrix.append(row)     \r\n    return matrix \r\n\r\nprint(fill_With_Zeros(4))", "task_id": 12395}
{"finetuning_prompt": "\"\"\"\nWrite a python function to generate a list of integer pairs for which the sum is a given number.\n\"\"\"\n\ndef generate_sum_pair(sum_num):\n", "finetuning_completion": "\r\n    pairs = []\r\n    for i in range(sum_num + 1): \r\n        j = sum_num - i \r\n        if j >= i: \r\n            pairs.append((i,j))\r\n    return pairs", "task_id": 12396}
{"finetuning_prompt": "\"\"\"\nGenerate a python code for calculating the roots of a quadratic equation.\n\"\"\"\n\nimport math\r\ndef roots_quad(a,b,c):\n", "finetuning_completion": "\r\n  discriminant = b * b - 4 * a * c\r\n  if discriminant == 0:\r\n    root1 = -b / (2 * a)\r\n    return root1\r\n  elif discriminant > 0:\r\n    root1 = (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\r\n    root2 = (-b - math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\r\n    return root1,root2", "task_id": 12398}
{"finetuning_prompt": "\"\"\"\nCreate a python script to convert an IP address to an integer using bitwise operators.\n\"\"\"\n\ndef ip_to_int(ip):\n", "finetuning_completion": "\n    res = 0\n    for part in ip.split('.'):\n        res = (res << 8) + int(part)\n    return res", "task_id": 12402}
{"finetuning_prompt": "\"\"\"\nCreate a code to rearrange an array such that all even integers appear on the left side and all odd integers appear on the right side.\n\"\"\"\n\ndef rearrange_array(arr):\n", "finetuning_completion": "\r\n    i = 0 \r\n    j = len(arr) - 1\r\n    while i < j:\r\n        if arr[i] % 2 != 0: \r\n            while arr[j] % 2 != 0 and j > i:\r\n                j -= 1 \r\n            arr[i], arr[j] = arr[j], arr[i]\r\n        i += 1\r\n    return arr", "task_id": 12431}
{"finetuning_prompt": "\"\"\"\nGenerate a code that determines the longest consecutive character in a string.\n\"\"\"\n\ndef longest_consec_char(s):\n", "finetuning_completion": "\n    max_len = 0\r\n    count = 1\r\n    for i in range(len(s)-1):\r\n        if s[i] == s[i+1]:\r\n            count += 1\r\n\r\n        else:\r\n            count = 1\r\n        max_len = max(count,max_len)\r\n\r\n    return max_len", "task_id": 12432}
{"finetuning_prompt": "\"\"\"\nGenerate a code to optimise a given array to reduce its size by removing the duplicate elements in it.\n\"\"\"\n\ndef optimise_array(arr):\n", "finetuning_completion": "\r\n    res = []\r\n    for item in arr:\r\n        if item not in res:\r\n            res.append(item)\r\n    return res", "task_id": 12437}
{"finetuning_prompt": "\"\"\"\nGenerate a python program that returns a list of the integers from 1 to 50 which are divisible by either 3 or 5.\n\"\"\"\n\ndef divisible(num):\n", "finetuning_completion": " \r\n    multiples = []\r\n    for i in range(1,num+1): \r\n        if i % 3 == 0 or i % 5 == 0: \r\n            multiples.append(i) \r\n    return multiples", "task_id": 12440}
{"finetuning_prompt": "\"\"\"\nWrite a code to implement a 3-way partitioning of an array around a given range using the Dutch national flag algorithm.\n\"\"\"\n\ndef dutch_flag_partition(arr):\n", "finetuning_completion": " \r\n\r\n    # Helper function to swap two elements in the array\r\n    def swap(arr,i,j): \r\n        temp = arr[i]\r\n        arr[i] = arr[j]\r\n        arr[j] = temp\r\n    \r\n    low,mid,high = 0,0,len(arr)-1\r\n    while mid <= high: \r\n        if arr[mid] < 4: \r\n            swap(arr,low,mid) \r\n            low += 1 \r\n            mid += 1 \r\n        elif arr[mid] > 7: \r\n            swap(arr,mid,high) \r\n            high -=1 \r\n        else: \r\n            mid += 1 \r\n    return arr\n\narr = [3,4,7,1,8,4,7,9,11,20]\r\nprint(dutch_flag_partition(arr))", "task_id": 12453}
{"finetuning_prompt": "\"\"\"\nWrite a code for optimizing the memory utilization for a given program.\n\"\"\"\n\ndef mem_optimizer(data):\n", "finetuning_completion": " \r\n   # Declare variable to hold data as float data type \r\n   data = np.float32(data)  \r\n   # Compute the mean of the data and store in a variable \r\n   mean = np.mean(data) \r\n   # Subtract the mean from data, and store the result in a variable\r\n   data_adjusted =  data - mean  \r\n   # Multiply the result by 2, and store the result in a variable \r\n   data_scaled =  data_adjusted *2 \r\n   # Round the result, and store the result in a variable \r\n   data_rounded =  np.rint(data_scaled)  \r\n   # Convert rounded data to integer data type and store the result \r\n   data_int = np.int32(data_rounded)  \r\n   return data_int", "task_id": 12456}
{"finetuning_prompt": "\"\"\"\nWrite a python script to parse the given string and retrieve the corresponding values.\n\"\"\"\n\ndef parseString(string):\n", "finetuning_completion": " \n\tname, age, profession = string.split(\", \") \n\tname = name.split(\": \")[1] \n\tage = age.split(\": \")[1] \n\tprofession = profession.split(\": \")[1] \n\t\n\treturn name, age, profession \n\nstring = \"Name: John, Age: 35, Profession: Engineer\" \nname, age, profession = parseString(string) \nprint(\"Name: \", name) \nprint(\"Age: \", age) \nprint(\"Profession: \", profession)", "task_id": 12460}
{"finetuning_prompt": "\"\"\"\nDesign a switching statement to check palindrome of a given number.\n\"\"\"\n\ndef check_pallindrome(num):\n", "finetuning_completion": " \r\n\r\n    temp=num \r\n    rev=0\r\n  \r\n    while(num>0): \r\n        dig=num%10 \r\n        rev=rev*10+dig \r\n        num=num//10\r\n  \r\n    if(temp==rev): \r\n        return(True) \r\n    return(False)", "task_id": 12473}
{"finetuning_prompt": "\"\"\"\nGenerate a program to return a list of all permutations of a given string.\n\"\"\"\n\nfrom itertools import permutations\ndef all_permutations(s):\n", "finetuning_completion": "\n  lst = list(permutations(s))\n  lst = [''.join(i) for i in lst]\n  return lst", "task_id": 12479}
{"finetuning_prompt": "\"\"\"\nWrite a function to match two strings upto two non-matching characters.\n\"\"\"\n\ndef match_strings(str1, str2):\n", "finetuning_completion": "\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    if abs(len1 - len2) > 2:\n        return False\n        \n    mismatch_count = 0\n    for i in range(min(len1, len2)):\n        if str1[i] != str2[i]:\n            mismatch_count += 1\n            if mismatch_count == 3:\n                return False\n            \n    mismatch_count += abs(len1 - len2)\n    return mismatch_count <= 2\n\nstr1 = \"welcome\"\nstr2 = \"welldone\"\n\nif match_strings(str1, str2):\n    print(\"Strings are matched.\")\nelse:\n    print(\"Strings are not matched.\")", "task_id": 12485}
{"finetuning_prompt": "\"\"\"\nWrite a Python code to obtain the top-k frequent numbers in an array.\n\"\"\"\n\nimport collections\ndef topKFrequent(nums,k):\n", "finetuning_completion": "\n    counter=collections.Counter(nums)\n    ans=counter.most_common(k)\n    return ans", "task_id": 12491}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the initial velocity of an object given its time, acceleration and displacement.\n\"\"\"\n\ndef find_velocity(t, a, d):\n", "finetuning_completion": " \r\n    initial_velocity = (d - 0.5*a*t*t)/t\r\n    return initial_velocity", "task_id": 12492}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find all the divisors of a given number and apply it to a given example.\n\"\"\"\n\ndef get_divisors(x):\n", "finetuning_completion": "\r\n  divisors =[]\r\n  i =1\r\n  while(i<=x):\r\n    if(x%i== 0):\r\n      divisors.append(i)\r\n    i = i+1\r\n  return divisors\r\n\r\nprint(get_divisors(50)) #Output: [1, 2, 5, 10, 25, 50]", "task_id": 12518}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two strings as input and returns a score from 0 to 10 measuring the similarity between the two strings.\n\"\"\"\n\ndef similarity_score(str1, str2):\n", "finetuning_completion": "\r\n    n = len(str1) + len(str2) \r\n    same_letters = 0\r\n    for char in str1:\r\n        if char in str2:\r\n            same_letters += 1\r\n    return same_letters * 10 / n", "task_id": 12520}
{"finetuning_prompt": "\"\"\"\nCompute the maximum profit that can be earned for a given stock.\n\"\"\"\n\n# Function to compute maximum profit from given list of lists\ndef max_profit(list_of_list):\n", "finetuning_completion": "\n\t# Initialize the profit\n\tprofit = 0\n\t\n\t# Loop through the list of lists\n\tfor i in range(len(list_of_list) - 1):\n\t\t# Find the maximum profit per pair\n\t\tcur_profit = max(list_of_list[i + 1]) - min(list_of_list[i])\n\t\t\n\t\t# Update the total profit\n\t\tprofit += cur_profit\n\t\n\t# Return the maximum profit\n\treturn profit", "task_id": 12523}
{"finetuning_prompt": "\"\"\"\nCreate a code to set the bit of given index in a given number.\n\"\"\"\n\n# Function to set the bit of given index in a given number \ndef set_bit(num, index):\n", "finetuning_completion": "\n\t# Set the bit of given index in the given number \n\tnum |= (1 << index)\n\t\n\t# Return the modified number \n\treturn num", "task_id": 12524}
{"finetuning_prompt": "\"\"\"\nDevelop a function to sort a set of numbers without using in built sort function.\n\"\"\"\n\ndef sort_numbers(ip_list):\n", "finetuning_completion": " \r\n\r\n\tfor i in range(len(ip_list)): \r\n\r\n\t\tfor j in range(0, len(ip_list) - i - 1): \r\n\r\n\t\t\tif ip_list[j] > ip_list[j + 1] : \r\n\t\t\t\ttemp = ip_list[j] \r\n\t\t\t\tip_list[j]= ip_list[j + 1] \r\n\t\t\t\tip_list[j + 1]= temp \r\n\treturn ip_list", "task_id": 12531}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the probability of an event when given the total number of trials and number of successes.\n\"\"\"\n\ndef probability(trial, success):\n", "finetuning_completion": " \r\n\t\r\n\t# formula to calculate the probability \r\n\tprob = (success/trial) \r\n\t\r\n\t# returning the probability \r\n\treturn prob", "task_id": 12534}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, find the maximum number using the partitioning technique.\n\"\"\"\n\ndef find_maximum(nos):\n", "finetuning_completion": "\r\n    if len(nos) == 1:\r\n        return nos[0]\r\n    else:\r\n        max_left = find_maximum(nos[0:len(nos)//2])\r\n        max_right = find_maximum(nos[len(nos)//2:len(nos)])\r\n        return max(max_left, max_right)", "task_id": 12536}
{"finetuning_prompt": "\"\"\"\nCreate a code to check if a given value falls between two values of a list.\n\"\"\"\n\ndef check_range(lis, x):\n", "finetuning_completion": " \r\n  \r\n    l = 0\r\n    r = len(lis) \r\n    for i in range(r): \r\n        if lis[i] <= x and lis[i+1] >= x: \r\n            return True\r\n        l += 1\r\n  \r\n    return False", "task_id": 12546}
{"finetuning_prompt": "\"\"\"\nWrite a function to print all primes from 1 to n.\n\"\"\"\n\ndef sieve_of_eratosthenes(n):\n", "finetuning_completion": "    \r\n    prime = [True for i in range(n+1)] \r\n    p = 2\r\n    while (p * p <= n): \r\n        if (prime[p] == True): \r\n            for i in range(p * p, n + 1, p): \r\n                prime[i] = False\r\n        p += 1\r\n    prime[0]= False\r\n    prime[1]= False\r\n    for p in range(n + 1): \r\n        if prime[p]: \r\n            print(p,end = ' ')", "task_id": 12550}
{"finetuning_prompt": "\"\"\"\nWrite a function to identify all duplicate values in a given array.\n\"\"\"\n\ndef find_duplicates(arr):\n", "finetuning_completion": "\r\n    if not arr: return []\r\n    count = dict()\r\n    duplicates = []\r\n    for i in arr:\r\n        count[i] = count.get(i, 0) + 1\r\n        if count[i] == 2:\r\n            duplicates.append(i)\r\n    return duplicates", "task_id": 12554}
{"finetuning_prompt": "\"\"\"\nAssume you are given a list of objects A. Write a function to flatten the list into a single list containing only the values of each object.\n\"\"\"\n\ndef flatten_val_list(A):\n", "finetuning_completion": " \r\n    flatten_list = [] \r\n    for ele in A:\r\n        if isinstance(ele, list): \r\n            flatten_list.extend(flatten_val_list(ele)) \r\n        else: \r\n            flatten_list.append(ele) \r\n    return flatten_list", "task_id": 12555}
{"finetuning_prompt": "\"\"\"\nWrite a function to pad a given array with zeros on both sides.\n\"\"\"\n\ndef pad_array(array, pad_length):\n", "finetuning_completion": "\n    output_array = []\r\n    for i in range(pad_length):\r\n        output_array.append(0)\n    for i in array:\r\n        output_array.append(i)\r\n    for i in range(pad_length):\r\n        output_array.append(0)\r\n    return output_array", "task_id": 12564}
{"finetuning_prompt": "\"\"\"\nCreate a Python program for an ATM user to withdraw cash from an account.\n\"\"\"\n\ndef withdrawal_from_account(balance, amount):\n", "finetuning_completion": "\r\n    if amount > balance:\r\n        return \"Cannot withdraw more money than what is in the account\"\r\n    elif amount <= 0:\r\n        return \"Cannot withdraw negative amount\"\r\n    else:\r\n        balance -= amount\r\n        return balance", "task_id": 12574}
{"finetuning_prompt": "\"\"\"\nCreate a non-linear classifier to distinguish between two given classes.\n\"\"\"\n\nimport numpy as np\nfrom sklearn import svm\n\ndef nonLinClassifier(x_data, y_data):\n", "finetuning_completion": " \n    model = svm.SVC(kernel='rbf')\n    model.fit(x_data, y_data)\n    return model", "task_id": 12583}
{"finetuning_prompt": "\"\"\"\nWrite code to find all the anagrams given two strings.\n\"\"\"\n\ndef anagrams(string1, string2):\n", "finetuning_completion": " \n    if(sorted(string1) == sorted(string2)): \n        return True  \n    return False", "task_id": 12585}
{"finetuning_prompt": "\"\"\"\nDesign and code a program to return the top 3 integers in an array of integers.\n\"\"\"\n\ndef findTopThree(arr):\n", "finetuning_completion": "\r\n  if len(arr) < 3:\r\n    return arr\r\n     \r\n  max1 = -10000000000\r\n  max2 = -10000000000\r\n  max3 = -10000000000\r\n\r\n  for i in arr:\r\n    if (i > max1):\r\n      max3 = max2\r\n      max2 = max1\r\n      max1 = i\r\n    elif (i > max2):\r\n      max3 = max2\r\n      max2 = i\r\n    elif (i > max3):\r\n      max3 = i\r\n\r\n  return [max1, max2, max3]", "task_id": 12589}
{"finetuning_prompt": "\"\"\"\nEdit the following code to write a function to reverse a list of numbers.\n\"\"\"\n\ndef reverseList(list):\n", "finetuning_completion": " \r\n    reversedList = [] \r\n    for i in reversed(list): \r\n        reversedList.append(i) \r\n    return reversedList", "task_id": 12596}
{"finetuning_prompt": "\"\"\"\nGenerate a code to check if a given point lies under a given line.\n\"\"\"\n\ndef is_point_under_line(x1, y1, x2, y2, x3, y3):\n", "finetuning_completion": " \n\t# formula for finding slope \n\tslope = (y2 - y1) / (x2 - x1) \n\n\t# formula for finding c in y = mx + c \n\tc = y1 - (slope * x1) \n\t\n\t# if given point lies on the line \n\ty3_onLine = (slope * x3) + c \n\t\n\t# if given point lies below the line \n\ty3_underLine = y3 < y3_onLine\n\t\n\treturn y3_underLine \n\nis_point_under_line(10, 8, 5, 6, 6, 8) # returns False", "task_id": 12608}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to generate the nth magic number.\n\"\"\"\n\ndef magic_num(n):\n", "finetuning_completion": " \r\n    magic_number = 0   \r\n    nth_power = 1  \r\n    \r\n    while n != 0: \r\n        nth_power = nth_power * 5\r\n        if (n & 1): \r\n            magic_number += nth_power \r\n        n >>= 1\r\n    return magic_number", "task_id": 12612}
{"finetuning_prompt": "\"\"\"\nCreate a program that can combine two given arrays based on an index.\n\"\"\"\n\ndef combine_arrays(arr1, arr2, index):\n", "finetuning_completion": "\n    res = []\n    for i in range(len(arr1)):\n        res.append(arr1[i])\n        if i == index:\n            for j in range(len(arr2)):\n                res.append(arr2[j])\n    return res", "task_id": 12616}
{"finetuning_prompt": "\"\"\"\nWrite a 0-1 Knapsack algorithm to maximize profits.\n\"\"\"\n\ndef knapSack(weights, profits, capacity):\n", "finetuning_completion": " \n\tn = len(profits) \n\tif n == 0 or capacity == 0 : \n\t\treturn 0\n\tif weights[n-1] > capacity : \n\t\treturn knapSack(weights[:n-1], profits[:n-1], capacity) \n\treturn max(profits[n-1] + knapSack(weights[:n-1], profits[:n-1], capacity-weights[n-1]), knapSack(weights[:n-1], profits[:n-1], capacity))", "task_id": 12617}
{"finetuning_prompt": "\"\"\"\nGenerate a program that splits a given string up into words and prints each word on a new line.\n\"\"\"\n\ndef split_string(string):\n", "finetuning_completion": "\r\n    words = string.split()\r\n    for word in words:\r\n        print(word)", "task_id": 12628}
{"finetuning_prompt": "\"\"\"\nDevelop a function that finds the sum of all the positive integers which are divisible by 3 or 5.\n\"\"\"\n\ndef div_sum(n):\n", "finetuning_completion": " \r\n    result = 0\r\n    for i in range(n + 1): \r\n        if i % 3 == 0 or i % 5 == 0: \r\n            result += i \r\n    return result", "task_id": 12630}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes an array of integers as input and finds the element that appears only once in the array.\n\"\"\"\n\ndef findSingle(arr):\n", "finetuning_completion": " \r\n    a_dict = {} \r\n    for i in arr: \r\n        if i in a_dict: \r\n            a_dict[i] += 1\r\n        else: \r\n            a_dict[i] = 1\r\n\r\n    for i in arr: \r\n        if a_dict[i] == 1: \r\n            return i \n    return -1", "task_id": 12633}
{"finetuning_prompt": "\"\"\"\nWrite a python program to classify different types of fruits given a list of fruits names\n\"\"\"\n\nfruits = ['apple', 'mango', 'banana', 'avocado'] \n\ndef classify_fruits(lst):\n", "finetuning_completion": " \n    classified_fruits = { \n        'Apples': [], \n        'Mangoes': [], \n        'Bananas': [], \n        'Avocados': [], \n    } \n    for fruit in lst: \n        if fruit.lower() == 'apple': \n            classified_fruits['Apples'].append(fruit.lower()) \n        elif fruit.lower() == 'mango': \n            classified_fruits['Mangoes'].append(fruit.lower()) \n        elif fruit.lower() == 'banana': \n            classified_fruits['Bananas'].append(fruit.lower()) \n        elif fruit.lower() == 'avocado': \n            classified_fruits['Avocados'].append(fruit.lower()) \n    return classified_fruits\n\nclassified_fruits = classify_fruits(fruits) \nprint(classified_fruits)", "task_id": 12643}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to find the smallest difference between two elements in the given sequence.\n\"\"\"\n\ndef smallest_difference(seq):\n", "finetuning_completion": " \r\n    sm_diff = float('inf')   \r\n    for i in range(len(seq)-1) : \r\n        for j in range(i + 1, len(seq)) : \r\n            diff = abs(seq[i] - seq[j]) \r\n            if  diff < sm_diff : \r\n                sm_diff = diff\r\n  \r\n        return sm_diff", "task_id": 12655}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate percentile rank of a given score in a list of scores.\n\"\"\"\n\ndef percentile_rank(scores, score):\n", "finetuning_completion": " \r\n    count = 0\r\n    for i in scores: \r\n        if i <= score: \r\n            count = count+1 \r\n    percentile_rank = (count/len(scores))*100\r\n    return percentile_rank", "task_id": 12659}
{"finetuning_prompt": "\"\"\"\nFind two nonrepeating elements in an array?\n\"\"\"\n\ndef findNonRepeatingElements(array):\n", "finetuning_completion": "\n    element1 = -1\n    element2 = -1\n    count = dict()\n    for item in array:\n        if item in count.keys():\n            count[item] += 1\n        else:\n            count[item] = 1\n    flag = False\n    for item in array:\n        if(count[item] == 1):\n            if(flag == False):\n                element1 = item\n                flag = True\n            else:\n                element2 = item\n                break\n    return element1, element2", "task_id": 12666}
{"finetuning_prompt": "\"\"\"\nConstruct a program to print the binary representation of any given number.\n\"\"\"\n\ndef bin_representation(val):\n", "finetuning_completion": "\r\n    result = \"\"\r\n    while val > 0:\r\n        result = str(val % 2) + result\r\n        val //= 2\r\n    print(result)", "task_id": 12667}
{"finetuning_prompt": "\"\"\"\nGenerate a program to classify proteins based on amino acid composition.\n\"\"\"\n\ndef predict_class(amino_acids):\n", "finetuning_completion": "\n    classes = {'hydrophobic': {'I', 'V', 'L', 'F', 'C', 'M', 'A'}, \n               'polar': {'G', 'S', 'T', 'N', 'Q', 'H', 'Y', 'P'}, \n               'hydrophilic': {'D', 'E'}, \n               'aromatic': {'W', 'R', 'K'}}\n    protein_class = \"\"\n    for aa in amino_acids:\n        for key, value in classes.items():\n            if aa in value:\n                protein_class = key\n                break\n    \n    return protein_class", "task_id": 12670}
{"finetuning_prompt": "\"\"\"\nWrite a code to delete an element from a given array and to shift the remaining elements.\n\"\"\"\n\ndef delete_element(arr, index):\n", "finetuning_completion": "\r\n    n = len(arr)\r\n    if n == 0:\r\n        return -1\r\n    else:\r\n        element = arr[index]\r\n        for i in range(index, n-1):\r\n            arr[i] = arr[i+1] \r\n        arr.pop() \r\n        return element", "task_id": 12671}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute all possible permutations of a string passed as the argument.\n\"\"\"\n\ndef get_perms(s):\n", "finetuning_completion": "\r\n    if s == \"\": \r\n        return {\"\"}\r\n    perm_list = [] \r\n    for w in get_perms(s[1:]): \r\n        for i in range(len(w)+1): \r\n            perm_list.append(w[:i] + s[0:1] + w[i:]) \r\n    return set(perm_list)", "task_id": 12672}
{"finetuning_prompt": "\"\"\"\nWrite a Python function which takes a date as a parameter and returns the day of the week.\n\"\"\"\n\nfrom datetime import datetime\r\ndef weekday(n):\n", "finetuning_completion": "\r\n  days = [\"Monday\", \"Tuesday\", \"Wednesday\", \r\n          \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n  day_index = n.weekday()\r\n  return days[day_index]", "task_id": 12676}
{"finetuning_prompt": "\"\"\"\nConstruct a program to extract the substring between two given character indices.\n\"\"\"\n\ndef extract_substr(str, start_num, end_num):\n", "finetuning_completion": "\n  return str[start_num:end_num + 1]\n\n# Test function\nprint(extract_substr(\"The quick brown fox jumps over the lazy dog\", 10, 20)) # Output: brown fox", "task_id": 12679}
{"finetuning_prompt": "\"\"\"\nWrite a code for a function to determine if a string is a palindrome or not.\n\"\"\"\n\ndef is_palindrome(s):\n", "finetuning_completion": " \n    return s == s[::-1]\n\n# Driver program to test above function \ns = \"madam\"\nans = is_palindrome(s) \n\nif ans: \n    print(\"Palindrome\") \nelse: \n    print(\"Not a palindrome\")", "task_id": 12683}
{"finetuning_prompt": "\"\"\"\nGenerate code for a python program to check if two strings are anagrams.\n\"\"\"\n\ndef is_anagram(s1, s2):\n", "finetuning_completion": " \r\n    # Remove spaces and lowercase letters \r\n    s1 = s1.replace(' ', '').lower() \r\n    s2 = s2.replace(' ', '').lower() \r\n  \r\n    # Return boolean for sorted match. \r\n    return sorted(s1) == sorted(s2)", "task_id": 12684}
{"finetuning_prompt": "\"\"\"\nWrite a function to split a given string into words and remove all punctuations from each word.\n\"\"\"\n\nimport string\r\ndef remove_punctuations(sentence):\n", "finetuning_completion": "\r\n    words = sentence.split()\r\n    no_punc_words = []\r\n    for word in words:\r\n        no_punc_words.append(\"\".join(l for l in word if l not in string.punctuation))\r\n    return no_punc_words", "task_id": 12688}
{"finetuning_prompt": "\"\"\"\nWrite a python script to display the type of the given data.\n\"\"\"\n\ndef check_type(test_data):\n", "finetuning_completion": "\r\n    return type(test_data)", "task_id": 12689}
{"finetuning_prompt": "\"\"\"\nWrite a function that reverse the words in a sentence.\n\"\"\"\n\ndef reverse_words(sentence):\n", "finetuning_completion": "\n    sentence_list = sentence.split()\n    sentence_list.reverse()\n    return \" \".join(sentence_list)", "task_id": 12691}
{"finetuning_prompt": "\"\"\"\nWrite a python code for the the following recursive problem: Given an array of numbers, find the sum of all the elements in the array.\n\"\"\"\n\ndef find_RecursiveSum(arr, length):\n", "finetuning_completion": " \r\n      \r\n    # Base Case \r\n    if (length == 0): \r\n        return 0\r\n    else: \r\n        return (arr[length - 1] +  \r\n            find_RecursiveSum(arr, length - 1))", "task_id": 12693}
{"finetuning_prompt": "\"\"\"\nWrite a function to create an object with two attributes.\n\"\"\"\n\ndef obj_create(attr1,attr2):\n", "finetuning_completion": "\r\n  obj = {}\r\n  obj[\"attr1\"] = attr1\r\n  obj[\"attr2\"] = attr2\r\n  return obj", "task_id": 12695}
{"finetuning_prompt": "\"\"\"\nGenerate a table representing a multiplication table of size 5x5.\n\"\"\"\n\ndef generate_multiplication_table(size):\n", "finetuning_completion": "\r\n    table = \"\"\r\n    for row in range(1, size + 1):\r\n        for col in range(1, size + 1):\r\n            table += f\"{row} x {col} = {row*col}\\t\"\r\n        table += \"\\n\"\r\n    return table\r\n    \r\nprint(generate_multiplication_table(5))", "task_id": 12698}
{"finetuning_prompt": "\"\"\"\nOrganize a list of strings so that the longest string is at the beginning.\n\"\"\"\n\ndef organize_list(lis):\n", "finetuning_completion": " \r\n  lis.sort(key = lambda x: len(x), reverse = True) \r\n  return lis", "task_id": 12701}
{"finetuning_prompt": "\"\"\"\nCreate a program to optimize the elements of given list to the maximum value.\n\"\"\"\n\ndef max_optimization(my_list):\n", "finetuning_completion": "\r\n    s = len(my_list)\r\n    max_val = 0 \r\n    for i in range(s):\r\n        for j in range(i+1,s):\r\n            x = my_list[i] | my_list[j] \r\n            if x > max_val: \r\n                max_val = x \r\n  \r\n    return max_val", "task_id": 12703}
{"finetuning_prompt": "\"\"\"\nCreate a python program that takes a list of numbers, removes the duplicates from the list, and returns a new list.\n\"\"\"\n\ndef removeDuplicates(data):\n", "finetuning_completion": " \r\n    new_list = [] \r\n  \r\n    for value in data: \r\n        if value not in new_list: \r\n            new_list.append(value) \r\n              \r\n    return new_list", "task_id": 12708}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to replace the values in a given array with the highest value in that array.\n\"\"\"\n\ndef max_num(arr):\n", "finetuning_completion": " \r\n  \r\n  # initializing maximum element \r\n  max_element = arr[0] \r\n  \r\n  # traverse array elements \r\n  # from second and compare \r\n  # every element with current max \r\n  for i in range(1,len(arr)): \r\n    if arr[i] > max_element: \r\n      max_element = arr[i]  \r\n  \r\n  # traverse array to replace each \r\n  # element with max element \r\n  for i in range(len(arr)): \r\n    arr[i] = max_element \r\n  \r\n  return arr", "task_id": 12720}
{"finetuning_prompt": "\"\"\"\nCreate a Scala program to convert seconds to minutes and hours.\n\"\"\"\n\ndef convert_seconds(seconds):\n", "finetuning_completion": "\r\n    minutes = seconds // 60 \r\n    hours = minutes // 60 \r\n    rem_min = minutes % 60\r\n    rem_sec = seconds % 60\r\n    return (\"{:02d}:{:02d}:{:02d}\".format(hours, rem_min, rem_sec))", "task_id": 12722}
{"finetuning_prompt": "\"\"\"\nRewrite a program to replace all the integers from a given list with the character 'x'.\n\"\"\"\n\ndef replace_ints(l):\n", "finetuning_completion": "\n    for i in range(len(l)):\n        if type(l[i]) == int:\n            l[i] = 'x'\n    return l", "task_id": 12728}
{"finetuning_prompt": "\"\"\"\nDevelop a code which takes a string as an argument and returns its sentence length.\n\"\"\"\n\ndef sentence_length(input_string):\n", "finetuning_completion": " \r\n  return len(input_string.split()) \r\n# test string \r\ntest_string = \"Welcome to the online coding world!\"\r\n# sentence length \r\nprint(\"The length of the sentence is:\",sentence_length(test_string))", "task_id": 12741}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes two numerical values as an input and returns a dictionary consisting of two numbers in it.\n\"\"\"\n\ndef get_sum_dict(a, b):\n", "finetuning_completion": " \r\n    dict1 = { 'Sum': a + b } \r\n    return dict1  \r\n# Driver code \r\na = 10\r\nb = 15\r\n# Function Call \r\ndict2 = get_sum_dict(a, b) \r\n# Print the dictionary \r\nprint(dict2)", "task_id": 12742}
{"finetuning_prompt": "\"\"\"\nGenerate a code for classifying a given list of numbers into odd and even.\n\"\"\"\n\ndef classify(in_list):\n", "finetuning_completion": " \r\n    res = {'odd': [], 'even': []} \r\n    for el in in_list: \r\n        if(el%2==0): \r\n            res['even'].append(el) \r\n        else: \r\n            res['odd'].append(el) \r\n    return res \r\n# Test list \r\nin_list = [1, 2, 3, 4, 5]\r\n# Function call \r\nresult = classify(in_list) \r\n# Print Output \r\nprint(result)", "task_id": 12744}
{"finetuning_prompt": "\"\"\"\nCome up with a program for formatting an integer to a specific function.\n\"\"\"\n\ndef format_num(n):\n", "finetuning_completion": " \r\n\treturn '{:,}'.format(n) \r\n# test number \r\nnum = 123456\r\n# function call and print output \r\nprint(\"Formatted Number:\", format_num(num))", "task_id": 12745}
{"finetuning_prompt": "\"\"\"\nGiven an array of size N, write a function to sort an array in non increasing order using quick sort.\n\"\"\"\n\ndef quickSort(arr):\n", "finetuning_completion": " \n\tless = [] \n\tpivotList = [] \n\tmore = []\n\tif len(arr) <= 1: \n\t\treturn arr \n\telse: \n\t\tpivot = arr[0] \n\t\tfor i in arr: \n\t\t\tif i < pivot: \n\t\t\t\tless.append(i) \n\t\t\telif i > pivot: \n\t\t\t\tmore.append(i) \n\t\t\telse: \n\t\t\t\tpivotList.append(i) \n\t\tless = quickSort(less) \n\t\tmore = quickSort(more) \n\t\treturn more + pivotList + less", "task_id": 12748}
{"finetuning_prompt": "\"\"\"\nWrite a python function to get the maximum and minimum value in a dictionary.\n\"\"\"\n\ndef max_min_dict(my_dict):\n", "finetuning_completion": " \n\tkey_max = max(my_dict.keys(), key=(lambda k: my_dict[k])) \n\tkey_min = min(my_dict.keys(), key=(lambda k: my_dict[k])) \n\t\n\treturn key_max, key_min \nmy_dict = {'x':500, 'y':5874, 'z': 560}\nkey_max, key_min = max_min_dict(my_dict) \n\nprint('Maximum Value: ',my_dict[key_max]) \nprint('Minimum Value: ',my_dict[key_min])", "task_id": 12751}
{"finetuning_prompt": "\"\"\"\nDescribe an algorithm to find the first missing positive integer in an unsorted array.\n\"\"\"\n\ndef first_missing_positive_integer(arr):\n", "finetuning_completion": " \n    n = len(arr) \n    small, large = 1, max(arr) \n    if small not in arr: \n        return small \n    for i in range(n): \n        if arr[i] > 0 and (arr[i] - small) > 0: \n            # when arr[i] > large then,  \n            # there are more than (large-small+1)  \n            # positive integers  \n            if arr[i] > large: \n                return large + 1\n            if not (arr[i] - 1) in arr:  \n                # this is the first missing number  \n                return arr[i] - 1\n            small += 1 \n    return small + 1", "task_id": 12752}
{"finetuning_prompt": "\"\"\"\nModify the given list by removing the occurences of duplicate elements.\n\"\"\"\n\ndef Rem_duplicate(test_list):\n", "finetuning_completion": " \r\n      \r\n    a_list = [] \r\n    for element in test_list: \r\n        if element not in a_list: \r\n            a_list.append(element) \r\n              \r\n    return a_list \r\n \r\n# Driver Code  \r\ntest_list = [10, 20, 10, 30, 40, 40]\r\nprint (Rem_duplicate(test_list))  \n# [10, 20, 30, 40]", "task_id": 12759}
{"finetuning_prompt": "\"\"\"\nGiven two strings, find out which string is one edit away or not.\n\"\"\"\n\n# Function to check if \r\n# two strings are one \r\n# edit away  \r\ndef oneEditAway(string1, string2):\n", "finetuning_completion": " \r\n    # Find lengths of given strings \r\n    m = len(string1) \r\n    n = len(string2) \r\n      \r\n    # If difference between lengths is more than \r\n    # 1, then strings can't be at one edit distance \r\n    if abs(m - n) > 1: \r\n        return False\r\n    count = 0    # Count of isEditDistanceOne \r\n  \r\n    i = 0\r\n    j = 0\r\n    while i < m and j < n: \r\n        # If current characters dont match \r\n        if string1[i] != string2[j]: \r\n            if count == 1: \r\n                return False\r\n            # If length of one string is \r\n            # more, then only possible edit \r\n            # is to remove a character  \r\n            if m > n: \r\n                i+=1\r\n            elif m < n: \r\n                j+=1\r\n            else:    # If lengths of both strings is same \r\n                i+=1\r\n                j+=1\r\n            # Increment count of edits  \r\n            count+=1 \r\n  \r\n        else:    # if current characters match \r\n            i+=1\r\n            j+=1 \r\n          \r\n    # if last character is extra in any string \r\n    if i < m or j < n: \r\n        count+=1\r\n  \r\n    return count == 1 \r\n  \r\n# Driver Code \r\nstring1 = \"tea\"\r\nstring2 = \"tea\"\r\nif oneEditAway(string1, string2): \r\n    print ( \"Yes\")\r\nelse: \r\n    print (\"No\")\n# Yes", "task_id": 12760}
{"finetuning_prompt": "\"\"\"\nCreate a script to convert Celsius and Fahrenheit temperatures using a formula.\n\"\"\"\n\n# Function to convert \r\n# Celsius to Fahrenheit \r\ndef C_to_F(C):\n", "finetuning_completion": " \r\n    return (C * 9/5) + 32\r\n\r\n# Function to convert \r\n# Fahrenheit to Celsius \r\ndef F_to_C(F): \r\n    return (F-32) * 5/9", "task_id": 12768}
{"finetuning_prompt": "\"\"\"\nCreate a python function to generate the nth harmonic number.\n\"\"\"\n\ndef harmonic_number(n):\n", "finetuning_completion": " \n      \n    if(n == 1):\n        return 1\n    else: \n        return (1 / n) + harmonic_number(n - 1)\n\nn = 10\n\nresult = harmonic_number(n)\n\nprint(\"The nth Harmonic Number is {}\".format(result))", "task_id": 12774}
{"finetuning_prompt": "\"\"\"\nCreate a dictionary with keys being the words in the given sentence, and the values being the frequencies of each word.\n\"\"\"\n\ndef word_frequency(Sentence):\n", "finetuning_completion": " \r\n\twords = Sentence.lower().split() \r\n\tdict = {} \r\n\tfor word in words: \r\n\t\tif word in dict: \r\n\t\t\tdict[word] += 1\r\n\t\telse: \r\n\t\t\tdict[word] = 1\r\n\treturn dict", "task_id": 12781}
{"finetuning_prompt": "\"\"\"\nGenerate a program which calculates the area of circle given its radius.\n\"\"\"\n\ndef calculate_area_circle(radius):\n", "finetuning_completion": "\r\n    pi = 3.14159\r\n    area_circle = pi * radius * radius\r\n    return area_circle", "task_id": 12786}
{"finetuning_prompt": "\"\"\"\nGenerate code to fill an array with a given number n times.\n\"\"\"\n\ndef fill_array(arr, n):\n", "finetuning_completion": " \n    result = []\n    for i in range(n):\n        for j in arr:\n            result.append(j) \n    return result", "task_id": 12797}
{"finetuning_prompt": "\"\"\"\nConvert an input string to the equivalent binary representation.\n\"\"\"\n\ndef DecimalToBinary(str1):\n", "finetuning_completion": " \r\n  \r\n    binary = ''\r\n    for i in str1: \r\n        binary += bin(ord(i))[2:].zfill(8) \r\n    return binary", "task_id": 12804}
{"finetuning_prompt": "\"\"\"\nWrite a code fragment to obtain the key of the maximum value in a dictionary.\n\"\"\"\n\ndef maxKey(test_dict):\n", "finetuning_completion": " \n    \n    max_key = max(test_dict, key=test_dict.get) \n    return max_key", "task_id": 12812}
{"finetuning_prompt": "\"\"\"\nSort an array according to the order defined by another array.\n\"\"\"\n\ndef SortedOrder(arr1, arr2):\n", "finetuning_completion": " \n    temp = [] \n    for i in range(len(arr2)): \n        for j in range(len(arr1)): \n            if arr2[i] == arr1[j]: \n                temp.append(arr1[j]) \n    return temp", "task_id": 12814}
{"finetuning_prompt": "\"\"\"\nCreate a function for summing two numbers with a single argument.\n\"\"\"\n\ndef sum_two(n):\n", "finetuning_completion": " \r\n    return n + 2", "task_id": 12819}
{"finetuning_prompt": "\"\"\"\nGenerate a function to check if a player has won a game of tic-tac-toe.\n\"\"\"\n\ndef isWinner(board):\n", "finetuning_completion": " \n\t\n\tfor row in board:\n\t\tif row[0] == row[1] and row[1] == row[2] and row[0] != 0:\n\t\t\treturn True\n\t\n\t# Check the columns \n\tfor col in range(3):\n\t\tif board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[0][col] != 0: \n\t\t\treturn True\n\t\n\t# Check the diagonals \n\tif board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0] != 0: \n\t\treturn True\n\t\n\tif board[2][0] == board[1][1] and board[1][1] == board[0][2] and board[2][0] != 0: \n\t\treturn True\n\t\t\n\treturn False", "task_id": 12820}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the number of combinations of size r of elements from a set of n elements.\n\"\"\"\n\ndef combination(n, r):\n", "finetuning_completion": " \n  \n    return (math.factorial(n) / \n            (math.factorial(r) * math.factorial(n - r)))", "task_id": 12829}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a character and returns True if it is a vowel and False otherwise.\n\"\"\"\n\ndef is_vowel(char):\n", "finetuning_completion": " \n    if(char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U'): \n        return True\n    else: \n        return False", "task_id": 12830}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert all negative numbers in an array to 0.\n\"\"\"\n\ndef convertNegativeToZero(arr):\n", "finetuning_completion": " \n    for i in range(len(arr)): \n        if arr[i] < 0: \n            arr[i] = 0\n    return arr", "task_id": 12834}
{"finetuning_prompt": "\"\"\"\nCreate a program to trim whitespace from the beginning and end of a line of text.\n\"\"\"\n\ndef trim_whitespace(text):\n", "finetuning_completion": "\n    start = 0\n    for i in range(len(text)):\n        if text[i] != ' ':\n            start = i\n            break\n\n    end = len(text)-1\n    for i in range(len(text)-1, -1, -1):\n        if text[i] != ' ':\n            end = i\n            break\n            \n    return text[start:end+1]", "task_id": 12843}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace every occurrence of the word \"python\" in the given sentence with the word \"java\"\n\"\"\"\n\ndef replace_words(sentence):\n", "finetuning_completion": "\n    words = sentence.split()\n    replaced_words = []\n\n    for word in words:\n        if word == 'Python':\n            replaced_words.append('Java')\n        else:\n            replaced_words.append(word)\n    return ' '.join(replaced_words)", "task_id": 12854}
{"finetuning_prompt": "\"\"\"\nCreate a program to modify the given list such that all even elements appear before all the odd elements\n\"\"\"\n\ndef modifyList(test):\n", "finetuning_completion": " \r\n    evens = []\r\n    odds = []\r\n    for element in test:\r\n        if element % 2 == 0:\r\n            evens.append(element)\r\n        else:\r\n            odds.append(element)\r\n    return evens + odds", "task_id": 12862}
{"finetuning_prompt": "\"\"\"\nWrite a function to find a single element in an array that does not occur twice.\n\"\"\"\n\ndef singleElement(test_array):\n", "finetuning_completion": "\r\n    for x in test_array:\r\n        if test_array.count(x) == 1:\r\n            return x", "task_id": 12865}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to edit the given list such that all the consecutive duplicates are replaced with a single item.\n\"\"\"\n\ndef removeDuplicates(test_list):\n", "finetuning_completion": "\n    new_list = []\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i] != test_list[i - 1]:\n            new_list.append(test_list[i])\n    return new_list", "task_id": 12866}
{"finetuning_prompt": "\"\"\"\nUse a web API to get the current stock price for a specified symbol\n\"\"\"\n\nimport requests\r\ndef get_stock_price(symbol):\n", "finetuning_completion": " \r\n    api_url=\"http://finance.google.com/finance/info?client=ig&q=\"\r\n    r = requests.get(api_url+symbol)\r\n    if r.status_code != 200:\r\n        return {\"error\" : \"Stock symbol not found\"}\r\n    else:\r\n        data = r.text\r\n        data = data[3:]\r\n        data = json.loads(data)\r\n        return{\"price\" : data[\"l_cur\"]}\n        \r\nstock_price = get_stock_price('MSFT')\r\nprint(stock_price) # Output: {'price': '106.6800'}.", "task_id": 12868}
{"finetuning_prompt": "\"\"\"\nTake a substring for a given string.\n\"\"\"\n\ndef sub_string(string,start_index,end_index):\n", "finetuning_completion": " \r\n\treturn string[start_index:end_index] \r\n\r\nsubstring = sub_string(\"Hello World!\",4,9)\r\nprint(substring) # Output: o Worl", "task_id": 12871}
{"finetuning_prompt": "\"\"\"\nCreate a method to combine two sentences into one.\n\"\"\"\n\ndef combine_sentence(sentence1, sentence2):\n", "finetuning_completion": " \r\n    return sentence1 + \" and \" + sentence2", "task_id": 12872}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to define a function to find the sum of natural numbers in a range.\n\"\"\"\n\ndef sum_natural_range(lower, upper):\n", "finetuning_completion": "  \r\n    sum = 0\r\n    for i in range(lower, upper + 1): \r\n        sum += i  \r\n    return sum", "task_id": 12882}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm and write a python program to find the maximum profit that can be earned from a given list of stock prices.\n\"\"\"\n\ndef max_profit(price):\n", "finetuning_completion": "  \r\n    max_profit = 0\r\n    for i in range(len(price) - 1):  \r\n        for j in range(i + 1, len(price)):  \r\n            if (price[j] - price[i] > max_profit):  \r\n                max_profit = price[j] - price[i]  \r\n    return max_profit", "task_id": 12883}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes a multidimensional array and returns its flattened version?\n\"\"\"\n\ndef flatten_array (arr):\n", "finetuning_completion": " \r\n    flat_arr = [] \r\n    for element in arr: \r\n        if type(element) == list: \r\n            flat_arr.extend(flatten_array(element)) \r\n        else: \r\n            flat_arr.append(element) \r\n    return flat_arr", "task_id": 12884}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the Interquartile Range (IQR) of an array of values?\n\"\"\"\n\ndef compute_IQR(arr):\n", "finetuning_completion": " \n    sorted_arr = sorted(arr) \n    mid_num = (len(sorted_arr) - 1) // 2 \n    q1 = sorted_arr[mid_num//2] \n    q3 = sorted_arr[mid_num + mid_num//2 + 1]\n    return q3 - q1", "task_id": 12886}
{"finetuning_prompt": "\"\"\"\nAnalyze the given array and return the maximum number of elements that can be formed adding the adjacent elements.\n\"\"\"\n\ndef maximum_elements(arr):\n", "finetuning_completion": "\r\n\tn = len(arr)\r\n\tdp = [0] * n\r\n\tdp[0] = arr[0]\r\n\tdp[1] = max(arr[0], arr[1])\r\n \r\n\tfor i in range(2, n):\r\n\t\tdp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\r\n \r\n\tresult = dp[n - 1]\r\n\treturn result", "task_id": 12887}
{"finetuning_prompt": "\"\"\"\nImplement a function to determine if a given input string is a given integer in base 2 form.\n\"\"\"\n\ndef isBinaryNumber(s):\n", "finetuning_completion": "  \r\n    for i in range(len(s)): \r\n        if s[i] != '0' and s[i] != '1': \r\n            return False\r\n    return True", "task_id": 12888}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find the sum of the series logn + log(n-1) + \u2026.. + log2 + log1.\n\"\"\"\n\nimport math \r\n\r\ndef sum_series(n):\n", "finetuning_completion": " \r\n  \r\n    sum = 0\r\n  \r\n    for i in range(1, n+1): \r\n        sum += math.log(i) \r\n      \r\n    return sum", "task_id": 12892}
{"finetuning_prompt": "\"\"\"\nWrite a python program to partition an array into two equal subarrays such that the difference between their sum is minimum.\n\"\"\"\n\ndef partitionEqualSum(arr, n):\n", "finetuning_completion": " \r\n    sumTotal = 0\r\n    for i in range(n): \r\n        sumTotal += arr[i] \r\n    dp = [[False for i in range(n + 1)]  \r\n            for j in range(sumTotal + 1)] \r\n    for i in range(n + 1): \r\n        dp[0][i] = True\r\n    for i in range(1, sumTotal + 1): \r\n        dp[i][0] = False\r\n    for i in range(1, sumTotal + 1): \r\n        for j in range(1, n + 1): \r\n            dp[i][j] = dp[i][j - 1] \r\n            if i >= arr[j - 1]: \r\n                dp[i][j] |= dp[i - arr[j - 1]][j - 1] \r\n\r\n    difference = float('inf') \r\n\r\n    for i in range(sumTotal // 2, -1, -1): \r\n        if dp[i][n]: \r\n            difference = sumTotal - 2 * i \r\n            break\r\n    return difference", "task_id": 12893}
{"finetuning_prompt": "\"\"\"\nWrite a code to print a sequence of numbers from 1 to n using recursive function.\n\"\"\"\n\ndef print_sequence(n):\n", "finetuning_completion": "\n    if n == 0:\n        return\n    else:\n        print_sequence(n-1) \n        print(n,end=\" \")", "task_id": 12895}
{"finetuning_prompt": "\"\"\"\nWrite a python function to get the repository URL of a GitHub user.\n\"\"\"\n\nimport requests\r\n\r\ndef get_repo_url(username):\n", "finetuning_completion": "\r\n    response = requests.get(f\"https://api.github.com/users/{username}/repos\")\r\n    repos = response.json()\r\n    repo_urls = [repo['html_url'] for repo in repos]\r\n    return repo_urls", "task_id": 12900}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to optimize a given program by removing unnecessary lines of code.\n\"\"\"\n\ndef optimize(program):\n", "finetuning_completion": "\n    optimized = []\n    lines = program.split('\\n')\n    for line in lines:\n        if line != '' and '#' not in line:\n            optimized.append(line)\n    return '\\n'.join(optimized)", "task_id": 12909}
{"finetuning_prompt": "\"\"\"\nImplement a basic calculator that performs the four arithmetic operations.\n\"\"\"\n\ndef calculator(x, y, op):\n", "finetuning_completion": "\r\n    if op == \"add\":\r\n        return x + y\r\n    elif op == \"sub\":\r\n        return x - y\r\n    elif op == \"mul\":\r\n        return x * y\r\n    elif op == \"div\":\r\n        return x / y\r\n    else:\r\n        return \"Invalid opetation\"", "task_id": 12916}
{"finetuning_prompt": "\"\"\"\nGenerate a program which takes inputs of two strings and outputs the longest common substring between them.\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n", "finetuning_completion": " \n    m = [[0] * (1 + len(s1)) for i in range(1 + len(s2))] \n    longest, x_longest = 0, 0 \n    for x in range(1, 1 + len(s2)): \n        for y in range(1, 1 + len (s1)): \n            if s2[x - 1] == s1[y - 1]:  \n                m[x][y] = m[x - 1][y - 1] + 1 \n                if m[x][y] > longest:  \n                    longest = m[x][y]  \n                    x_longest = x  \n            else: \n                m[x][y] = 0 \n    return s2[x_longest - longest: x_longest]", "task_id": 12922}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a list of all unique valid parenthesis combinations of given length 'n'.\n\"\"\"\n\ndef generateParenthesis(n):\n", "finetuning_completion": "\n  res = []\n  backtrack(res,\"\",0,0,n)\n  return res\n\ndef backtrack(ans, cur, open, close, max):\n  if len(cur) == max*2:\n    ans.append(cur)\n    return\n\n  if open < max:\n    backtrack(ans,cur+\"(\",open+1,close,max)\n\n  if close < open:\n    backtrack(ans,cur+\")\",open,close+1,max)", "task_id": 12925}
{"finetuning_prompt": "\"\"\"\nGenerate a pythonic statement which checks for special characters in a string.\n\"\"\"\n\nimport re\r\ndef check_special_chars(string):\n", "finetuning_completion": "\r\n  pattern = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')\r\n  if pattern.search(string):\r\n    return True\r\n  else:\r\n    return False", "task_id": 12956}
{"finetuning_prompt": "\"\"\"\nGenerate a function to combine two dictionaries and add any new values of those keys together.\n\"\"\"\n\ndef combine_dicts(dict1, dict2):\n", "finetuning_completion": " \r\n  combined_dict={**dict1, **dict2} \r\n  for i in combined_dict:\r\n    if i in dict1 and i in dict2:\r\n      combined_dict[i] = dict1[i] + dict2[i]\r\n  return combined_dict", "task_id": 12957}
{"finetuning_prompt": "\"\"\"\nGenerate a function to remove the elements at even indices from a list.\n\"\"\"\n\ndef remove_evenIndices(myList):\n", "finetuning_completion": " \r\n    return [x for i, x in enumerate(myList) if i % 2 != 0]", "task_id": 12960}
{"finetuning_prompt": "\"\"\"\nImplement bubble sort on the given array: [23,12,-1,0,34].\n\"\"\"\n\ndef bubble_sort(arr):\n", "finetuning_completion": " \r\n\tn = len(arr) \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, n-i-1): \r\n\r\n\t\t\tif arr[j] > arr[j+1] : \r\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \r\n\treturn arr \r\narr = [23,12,-1,0,34]\r\narr = bubble_sort(arr) \r\nprint (\"Sorted array is:\") \r\nfor i in range(len(arr)): \r\n\tprint (\"%d\" %arr[i]),", "task_id": 12966}
{"finetuning_prompt": "\"\"\"\nWrite a function to categorize a list into 3 based on their lengths.\n\"\"\"\n\ndef categorize_list(lst):\n", "finetuning_completion": "   \n    output_lst = []  \n    lst1 = []  \n    lst2 = []  \n    lst3 = []  \n      \n    # Iterate over the list and categorize it based on the length  \n    for elem in lst:  \n        if len(elem) < 5:  \n            lst1.append(elem)  \n        elif len(elem) == 5 or len(elem) == 6:  \n            lst2.append(elem)  \n        else:  \n            lst3.append(elem)  \n          \n    output_lst.append(lst1)  \n    output_lst.append(lst2)  \n    output_lst.append(lst3)  \n      \n    return output_lst", "task_id": 12974}
{"finetuning_prompt": "\"\"\"\nCreate an machine learning algorithm to classify an email as spam or not spam.\n\"\"\"\n\nimport numpy as np \r\nfrom sklearn.naive_bayes import GaussianNB \r\ndef classify_spam(X, y):\n", "finetuning_completion": " \r\n  gnb = GaussianNB() \r\n  # Train the model \r\n  gnb.fit(X, y) \r\n\r\n  # Return the predict outputs \r\n  return gnb.predict(X)", "task_id": 12976}
{"finetuning_prompt": "\"\"\"\nGenerate a unique user defined path using the input.\n\"\"\"\n\ndef generatePath(input_str):\n", "finetuning_completion": " \r\n    s = \"\" \r\n    for x in input_str: \r\n        s += \"\\\\\" + x \r\n      \r\n    return s", "task_id": 12978}
{"finetuning_prompt": "\"\"\"\nImplement K-Nearest Neighbors in python.\n\"\"\"\n\nfrom sklearn.neighbors import KNeighborsClassifier \r\n  \r\ndef KNN_Model(X, y):\n", "finetuning_completion": " \r\n    neigh = KNeighborsClassifier(n_neighbors=3)\r\n    neigh.fit(X, y)\r\n    return neigh", "task_id": 12985}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to sort the elements in an array using quick sort.\n\"\"\"\n\ndef quick_sort(arr, low, high):\n", "finetuning_completion": " \n\tif low < high: \n\t\tpi = partition(arr, low, high) \n\t\tquick_sort(arr, low, pi-1) \n\t\tquick_sort(arr, pi+1, high) \n\ndef partition(arr, low, high): \n\ti = (low-1)\t\t \n\tpivot = arr[high]\t \n\n\tfor j in range(low, high): \n\t\tif arr[j] <= pivot: \n\t\t\ti = i+1 \n\t\t\tarr[i], arr[j] = arr[j], arr[i] \n\n\tarr[i+1], arr[high] = arr[high], arr[i+1] \n\treturn (i+1)", "task_id": 12987}
{"finetuning_prompt": "\"\"\"\nGenerate a program to perform string slicing.\n\"\"\"\n\ndef string_slicing(test_string):\n", "finetuning_completion": " \n  res = test_string[4:15]\r\n  return(res)", "task_id": 12995}
{"finetuning_prompt": "\"\"\"\nGenerate a function which returns the reversed words with the same order given in a dictionary.\n\"\"\"\n\n# code for reversed words \r\ndef reverse_words(test_dict):\n", "finetuning_completion": "\r\n    new_dict = {k:v[::-1] for k, v in test_dict.items()} \r\n    return new_dict", "task_id": 12998}
{"finetuning_prompt": "\"\"\"\nGenerate a function which calculates the frequencies of words present in the given data set.\n\"\"\"\n\n# code to calculate frequencies \r\ndef word_frequency(sentences):\n", "finetuning_completion": " \r\n    word_count = {} # initialize an empty dictionary \r\n    for sentence in sentences: \r\n        words = sentence.split(' ') \r\n        for word in words: \r\n            if word in word_count: \r\n                word_count[word] = word_count.get(word, 0) + 1\r\n            else: \r\n                word_count[word] = 1\r\n  \r\n    return word_count", "task_id": 12999}
{"finetuning_prompt": "\"\"\"\nCreate a python program to rotate the given list by k elements.\n\"\"\"\n\n# code to rotate list \ndef rotate_list(test_list, k):\n", "finetuning_completion": " \r\n  return test_list[k:] + test_list[:k]", "task_id": 13003}
{"finetuning_prompt": "\"\"\"\nGenerate a function to remove all instances of the given item from the given Stack.\n\"\"\"\n\n# code to remove item \ndef remove_item(test_stack, item):\n", "finetuning_completion": " \r\n    while item in test_stack: \r\n  \r\n        # pop the item \r\n        test_stack.remove(item) \r\n  \r\n    return test_stack", "task_id": 13004}
{"finetuning_prompt": "\"\"\"\nGenerate code to create a new list which contains the elements of two other lists without duplicates.\n\"\"\"\n\ndef list_no_duplicates(list1, list2):\n", "finetuning_completion": "\n    temp_list = list1 + list2\r\n    main_list = []\r\n    for i in temp_list:\r\n        if i not in main_list:\r\n            main_list.append(i)\r\n    return main_list", "task_id": 13005}
{"finetuning_prompt": "\"\"\"\nDesign a program to detect a palindrome in an input string.\n\"\"\"\n\ndef is_palindrome(word):\n", "finetuning_completion": "\r\n    l = len(word)\r\n    for i in range(l):\r\n        if word[i] != word[l-i-1]:\r\n            return False\r\n    return True", "task_id": 13009}
{"finetuning_prompt": "\"\"\"\nWrite a function to collapse all whitespace characters into a single space.\n\"\"\"\n\ndef collapse_whitespace(string):\n", "finetuning_completion": "\r\n    s = ' '.join(string.split())\r\n    return s", "task_id": 13010}
{"finetuning_prompt": "\"\"\"\nWrite code that calculates the sum of odd numbers from 1 to 1000.\n\"\"\"\n\ndef odd_sum(n):\n", "finetuning_completion": " \n    odd_sum = 0\n  \n    for i in range(1, n+1, 2): \n        odd_sum += i \n  \n    return odd_sum", "task_id": 13020}
{"finetuning_prompt": "\"\"\"\nWrite a recursive function to accommodate a Multiplication, Division, Subtraction and Addition with two inputs.\n\"\"\"\n\ndef math_ops(a, b, op):\n", "finetuning_completion": " \n      \n    if op == \"multiply\":  \n        return a * b   \n    elif op == \"divide\":  \n        if b == 0:  \n            return None\n        return a / b  \n    elif op == \"subtraction\":  \n        return a - b   \n    elif op == \"addition\":  \n        return a + b  \n    else:  \n        return None", "task_id": 13022}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to determine if an input array consists of repeated numbers.\n\"\"\"\n\ndef is_repeated(input_arr):\n", "finetuning_completion": "\n\n    for i in range(len(input_arr)):\n        for j in range(i+1, len(input_arr)):\n            if input_arr[i] == input_arr[j]:\n                return True\n    return False", "task_id": 13023}
{"finetuning_prompt": "\"\"\"\nCut the last two elements from a given list.\n\"\"\"\n\ndef cut_list(list1):\n", "finetuning_completion": "\n    list1 = list1[:-2]\n    return list1", "task_id": 13027}
{"finetuning_prompt": "\"\"\"\nWrite a function to do a quick sort in an array of integers.\n\"\"\"\n\ndef quick_sort(arr):\n", "finetuning_completion": " \n  if len(arr) <= 1: \n    return arr\n  pivot = arr[len(arr)//2]\n  left, right, equal = [], [], []\n  for item in arr:\n    if item > pivot:\n      right.append(item)\n    elif item < pivot:\n      left.append(item)\n    else:\n      equal.append(item)\n  return quick_sort(left) + equal + quick_sort(right)", "task_id": 13034}
{"finetuning_prompt": "\"\"\"\nCreate a script to convert a given hexadecimal number to its base-10 equivalent.\n\"\"\"\n\ndef hex_to_decimal(hex_num):\n", "finetuning_completion": "\r\n    n = int(hex_num, 16)\r\n    return n", "task_id": 13036}
{"finetuning_prompt": "\"\"\"\nBuild a function to calculate the discrete logarithm of a number given a base.\n\"\"\"\n\ndef log_b(x, b):\n", "finetuning_completion": "\r\n    exponent = 0\r\n    while b**exponent < x:\r\n        exponent += 1\r\n    return exponent-1", "task_id": 13039}
{"finetuning_prompt": "\"\"\"\nGenerate a program to print the elements at odd positions in the given array.\n\"\"\"\n\ndef printOddPositionElements(arr):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        if i%2 != 0:\n            print(arr[i],end=\" \")", "task_id": 13046}
{"finetuning_prompt": "\"\"\"\nDesign a code to clip all items whose value exceed the given threshold.\n\"\"\"\n\ndef clip_elements(num_list,threshold):\n", "finetuning_completion": "\n    clipped_list = [i if i <= threshold else threshold for i in num_list]\n    return clipped_list", "task_id": 13049}
{"finetuning_prompt": "\"\"\"\nCompose a program to remove the specified character from the given dictionary.\n\"\"\"\n\ndef remove_from_dict(dictionary,char):\n", "finetuning_completion": "\n    result = {k:v for k,v in dictionary.items() if char not in k}\n    return result", "task_id": 13053}
{"finetuning_prompt": "\"\"\"\nCreate a python program to replace dictionary values with their average?\n\"\"\"\n\ndef average(dictionary):\n", "finetuning_completion": " \n    sum = 0\n    for key in dictionary: \n        sum += dictionary[key] \n  \n    avg = sum / len(dictionary.keys()) \n  \n    for key in dictionary.keys(): \n        dictionary[key] = round(avg,2) \n  \n    return dictionary", "task_id": 13055}
{"finetuning_prompt": "\"\"\"\nCreate a python script to classify a given set of numbers into their respective classes.\n\"\"\"\n\ndef classify_numbers(num_list):\n", "finetuning_completion": "\r\n    classification = [\"low\", \"medium\", \"high\"]\r\n    \r\n    output_list = []\r\n    for num in num_list:\r\n        if num < 21:\r\n            output_list.append(classification[0])\r\n        elif num < 41:\r\n            output_list.append(classification[1])\r\n        else:\r\n            output_list.append(classification[2])\r\n    return output_list\r\n\r\nnums = [10, 20, 30, 40]\r\nprint(classify_numbers(nums))", "task_id": 13062}
{"finetuning_prompt": "\"\"\"\nCreate a python program to compare two strings and output the larger string.\n\"\"\"\n\ndef larger_string(str1, str2):\n", "finetuning_completion": "\r\n   if(str1 > str2):\r\n      return str1\r\n   else:\r\n      return str2\r\n        \r\nstr1 = \"Hello\"\r\nstr2 = \"world\"\r\nprint(larger_string(str1, str2))", "task_id": 13063}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the longest increasing sub-sequence of an array.\n\"\"\"\n\ndef longestIncreasingSubsequence(arr):\n", "finetuning_completion": " \r\n  n = len(arr) \r\n\r\n  lis = [1]*n \r\n\r\n  for i in range (1 , n): \r\n    for j in range(0 , i): \r\n      if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n        lis[i] = lis[j]+1\r\n  return (max(lis))", "task_id": 13064}
{"finetuning_prompt": "\"\"\"\nConstruct a code to calculate the entire series until nth term of the Fibonacci sequence.\n\"\"\"\n\ndef fibonacci_Series(n):\n", "finetuning_completion": " \n      \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    fibo = [0, 1] \n      \n    # Filtering out the values and adding them to the list\n    while len(fibo) < n + 1:\n        fibo.append(fibo[-1] + fibo[-2])\n          \n    # returns the list containing the series\n    return fibo[:-1]", "task_id": 13066}
{"finetuning_prompt": "\"\"\"\nCreate a python code to sort a given string alphabetically.\n\"\"\"\n\ndef sortStringAlphabetically(example_string):\n", "finetuning_completion": " \r\n    # Split string into list \r\n    splitString = list(example_string) \r\n  \r\n    # Sort the list  \r\n    splitString.sort() \r\n  \r\n    # Make the string from sorted list \r\n    sortedString = ''.join(splitString) \r\n      \r\n    # return the sorted string \r\n    return sortedString", "task_id": 13068}
{"finetuning_prompt": "\"\"\"\nGiven a string S and an integer K, write a code to find all the K characters substrings from the given string.\n\"\"\"\n\ndef k_character_substring(S,K):\n", "finetuning_completion": "\r\n    substrings = []\r\n    for i in range(len(S)-K+1):\r\n        substrings.append(S[i:i+K])\r\n    return substrings", "task_id": 13069}
{"finetuning_prompt": "\"\"\"\nWrite a code to find all the elements from the given array that are greater than 50.\n\"\"\"\n\ndef find_greater_elements(array):\n", "finetuning_completion": "\r\n    greater = []\r\n    for el in array:\r\n        if el > 50:\r\n            greater.append(el)\r\n    return greater", "task_id": 13070}
{"finetuning_prompt": "\"\"\"\nGenerate a function to compute the probability of an event occurring based on the given data.\n\"\"\"\n\ndef probability(data_set):\n", "finetuning_completion": "    \r\n    total = 0\r\n    for data in data_set:\r\n        total += data[1]\r\n    probabilities = []\r\n    for data in data_set:\r\n        probabilities.append(data[1]/total)\r\n    return probabilities", "task_id": 13071}
{"finetuning_prompt": "\"\"\"\nCreate a function to normalize a column of values in a dataframe.\n\"\"\"\n\nimport pandas as pd\r\n\r\ndef normalize_column(df, col):\n", "finetuning_completion": "\r\n    x_min = df[col].min()\r\n    x_max = df[col].max()\r\n    \r\n    df[col] = (df[col] - x_min) / (x_max - x_min)\r\n    \r\n    return df", "task_id": 13076}
{"finetuning_prompt": "\"\"\"\nGenerate a program to apply some sort of manipulation to each element of an array.\n\"\"\"\n\ndef array_manipulation(array, f):\n", "finetuning_completion": "\n    for i in range(len(array)): \n        array[i] = f(array[i])\n    return array", "task_id": 13088}
{"finetuning_prompt": "\"\"\"\nGenerate a function to sort a Python dict by its values in descending order.\n\"\"\"\n\ndef sort_dictionary(dic):\n", "finetuning_completion": " \n  \n    # Sort dictionary by value \n    sorted_d = dict(sorted(dic.items(), key=lambda x: x[1], reverse=True)) \n    return sorted_d", "task_id": 13113}
{"finetuning_prompt": "\"\"\"\nGenerate code to produce an array of all the prime numbers from 1 to 100.\n\"\"\"\n\ndef prime_numbers(n):\n", "finetuning_completion": " \r\n    result=[]\r\n    for num in range(2, n+1): \r\n        is_prime=True\r\n        for i in range(2, num): \r\n            if (num % i == 0): \r\n                is_prime = False\r\n        if is_prime: \r\n            result.append(num)\r\n    return result", "task_id": 13118}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to exchange the places of the first and second elements in a given list.\n\"\"\"\n\ndef swap_position(lst):\n", "finetuning_completion": "  \n    lst[0], lst[1]= lst[1], lst[0] \n    return lst \nlst = [1, 2, 3, 4, 5] \nprint(swap_position(lst)) # Output: [2, 1, 3, 4, 5]", "task_id": 13122}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to create a list of tuples according to a given pattern\n\"\"\"\n\ndef generate_tuples(n):\n", "finetuning_completion": " \r\n    tuple_list = [] \r\n    for i in range(n): \r\n        tuple_list.append((i, i+1)) \r\n    return tuple_list", "task_id": 13125}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to check if there's a subset whose sum is equal to a given number.\n\"\"\"\n\ndef subset_sum(numbers, target, partial=[]):\n", "finetuning_completion": " \r\n    s = sum(partial) \r\n    if s == target: \r\n        print(\"Sum found: %s\" % (partial)) \r\n    if s >= target: \r\n        return \r\n    for i in range(len(numbers)): \r\n        n = numbers[i] \r\n        remaining = numbers[i+1:] \r\n        subset_sum(remaining, target, partial + [n])", "task_id": 13128}
{"finetuning_prompt": "\"\"\"\nGenerate a function to print out the sum of the numbers in a list until a given limit\n\"\"\"\n\ndef print_sum(my_list, limit):\n", "finetuning_completion": "\r\n  total = 0\r\n  for num in my_list:\r\n    if (num > limit):\r\n      break\r\n    total += num\r\n  print(\"Sum is:\", total)", "task_id": 13131}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm that finds the number of subarrays sum equal to a given number.\n\"\"\"\n\ndef findNumberOfSubarrays(nums, target):\n", "finetuning_completion": "\n\tresult = 0\n\tfor i in range(len(nums)):\n\t\tcurrent_sum = 0\n\t\tfor j in range(i, len(nums)):\n\t\t\tcurrent_sum += nums[j]\n\t\t\tif current_sum == target:\n\t\t\t\tresult += 1\n\treturn result", "task_id": 13133}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the square of the sum of the inverse of each element in a given list.\n\"\"\"\n\ndef inverse_sqr_sum(numbers):\n", "finetuning_completion": " \n    inverse_list = list(map(lambda x: 1/x, numbers)) \n    res = sum(inverse_list)**2 \n    return res", "task_id": 13135}
{"finetuning_prompt": "\"\"\"\nDetermine the number of days in a particular month.\n\"\"\"\n\ndef num_days_in_month(inputmonth):\n", "finetuning_completion": "\r\n    switcher={\r\n        \"January\":31,\r\n        \"February\": 28,\r\n        \"March\":31,\r\n        \"April\": 30,\r\n        \"May\":31,\r\n        \"June\":30,\r\n        \"July\":31,\r\n        \"August\":31,\r\n        \"September\":30,\r\n        \"October\":31,\r\n        \"November\":30,\r\n        \"December\":31\r\n    }\r\n    return switcher.get(inputmonth)", "task_id": 13141}
{"finetuning_prompt": "\"\"\"\nCreate an optimized algorithm to sort an array consisting of only 0s, 1s, and 2s.\n\"\"\"\n\ndef sortArray012(arr):\n", "finetuning_completion": " \n      \n    lo = 0\r\n    hi = len(arr) - 1\r\n    mid = 0\r\n      \r\n    while mid <= hi: \r\n        if arr[mid] == 0: \r\n            arr[lo],arr[mid]=arr[mid],arr[lo] \r\n            lo = lo + 1\r\n            mid = mid + 1\r\n        elif arr[mid] == 1: \r\n            mid = mid + 1\r\n        else: \r\n            arr[mid],arr[hi]=arr[hi],arr[mid]  \r\n            hi = hi - 1\r\n    return arr", "task_id": 13145}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to convert an array of binary numbers to its decimal representation.\n\"\"\"\n\ndef bin_to_dec(binary_list):\n", "finetuning_completion": " \r\n\tresult = [] \r\n\r\n\tfor i in binary_list: \r\n\t\tt = int(str(i), 2) \r\n\r\n\t\tresult.append(t) \r\n\r\n\treturn result", "task_id": 13150}
{"finetuning_prompt": "\"\"\"\nBuild a linear regression model to predict a numeric value.\n\"\"\"\n\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef linear_regression_predict(X,y):\n", "finetuning_completion": "\r\n  model = LinearRegression()\r\n  model.fit(X,y)\r\n\r\n  return model", "task_id": 13157}
{"finetuning_prompt": "\"\"\"\nProgram a function to calculate the minimum perimeter rectangle for a given area.\n\"\"\"\n\ndef find_min_perimeter(area):\n", "finetuning_completion": " \n\t\"\"\"This functions returns the minimum perimeter\"\"\" \n\tside = math.sqrt(area) \n\treturn 2*(side + side) \n\n# Driver Code \narea = 12 \nprint(\"Minimum perimeter is\", \n\t\t\t\t\tfind_min_perimeter(area))", "task_id": 13159}
{"finetuning_prompt": "\"\"\"\nProgram a function to generate a given number of prime numbers.\n\"\"\"\n\ndef generate_prime(n):\n", "finetuning_completion": "\n    primes = []\n    num = 2\n    while len(primes) < n:\n        for x in range(2, num):\n            if num%x == 0:\n                break      \n        else:\n            primes.append(num)\n        num += 1\n    return primes\n\n# Driver Code\nn = 5 \nprint(\"The first five prime numbers are:\", generate_prime(n))", "task_id": 13162}
{"finetuning_prompt": "\"\"\"\nModify the program above to reverse a string within two seconds of the start time.\n\"\"\"\n\ndef reverse_str_within_time_limit(string):\n", "finetuning_completion": "\n    start_time = time.time()\n    end_time = start_time + 2\n    reversed_string = ''\n    for i in reversed(range(len(string))):\n        if time.time() >= end_time:\n            break\n        reversed_string += string[i]\n    return reversed_string", "task_id": 13180}
{"finetuning_prompt": "\"\"\"\nCreate a program to sort the numbers using Bogosort algorithm.\n\"\"\"\n\n# Bogosort Algorithm\ndef sort(arr):\n", "finetuning_completion": "\n\twhile not is_sorted(arr):\n\t\tshuffle(arr)\n\treturn arr\n\n# Function to generate a random permutation\n# of a list \ndef shuffle(arr): \n\tfor i in range(0, len(arr)): \n\t\tswap(arr, i, random.randint(0, len(arr) - 1)) \n\n# Function to swap elements at two indices \ndef swap(arr, i, j) : \n\tarr[i], arr[j] = arr[j], arr[i] \n\n# Function to check if an array is sorted or not \ndef is_sorted(arr): \n\tfor i in range(1, len(arr)): \n\t\tif arr[i-1] > arr[i] : \n\t\t\treturn False \n\treturn True", "task_id": 13190}
{"finetuning_prompt": "\"\"\"\nWrite a function to parse a json object and print out the keys and values from the object in a legible format.\n\"\"\"\n\ndef parse_json(js):\n", "finetuning_completion": " \r\n    for key, value in js.items(): \r\n        print(\"Key: \" + key + \", Value: \" + str(value))", "task_id": 13195}
{"finetuning_prompt": "\"\"\"\nGenerate a function using regular expression to strip white spaces from the start and end of the string.\n\"\"\"\n\nimport re \r\ndef strip_whitespaces(string):\n", "finetuning_completion": " \r\n    return re.sub(r\"^\\s+|\\s+$\", \"\", string)", "task_id": 13197}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script to find the most common word in a paragraph.\n\"\"\"\n\nimport string\nfrom collections import Counter\n\ndef most_common_word(paragraph):\n", "finetuning_completion": "\n    # remove punctuation\n    word_list = paragraph.translate(str.maketrans('', '', string.punctuation)).split()\n    \n    # create a Counter object\n    word_counts = Counter(word_list)\n    \n    # get the most common word\n    most_common_word = word_counts.most_common(1)[0][0] \n    \n    return most_common_word\n\nprint(most_common_word(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium purus ex, sed fringilla elit bibendum et. Sed et vulputate eros, eget convallis sapien.\"))\n \n# Output:\n# et", "task_id": 13205}
{"finetuning_prompt": "\"\"\"\nCompose a search algorithm to find a value in a two-dimensional array.\n\"\"\"\n\ndef find(arr,x):\n", "finetuning_completion": " \n    for i in range(len(arr)): \n  \n        for j in range(len(arr[0])): \n            if (arr[i][j] == x): \n                return True\n    return False", "task_id": 13206}
{"finetuning_prompt": "\"\"\"\nGenerate a program to check if a given number is an Armstrong number (i.e, 1^3 + 5^3 + 3^3 = 153).\n\"\"\"\n\ndef isArmstrong (x):\n", "finetuning_completion": " \n  \n    # initialize sum \r\n    sum = 0\r\n  \r\n    # Find the sum of cube of its digits \r\n    temp = x \r\n    while temp > 0: \r\n        digit = temp % 10\r\n        sum += digit ** 3\r\n        temp //= 10\r\n  \r\n    # Check if given number is equal to the sum of cubes of it's digits \r\n    if x == sum: \r\n        return True\r\n    else: \r\n        return False", "task_id": 13210}
{"finetuning_prompt": "\"\"\"\nCreate an efficient algorithm to compare the words of two strings.\n\"\"\"\n\ndef compare_strings(str1, str2):\n", "finetuning_completion": " \r\n    str1_count = {} \r\n\r\n    # count number of times \r\n    # characters appear in str1 \r\n    for i in str1: \r\n        if i in str1_count: \r\n            str1_count[i] += 1\r\n        else: \r\n            str1_count[i] = 1\r\n\r\n    # similarly count number of times \r\n    # characters appear in str2 \r\n    for i in str2: \r\n        if i in str1_count: \r\n            str1_count[i] -= 1\r\n\r\n    # Check if all counts become 0 \r\n    for i in str1_count: \r\n        if str1_count[i] != 0: \r\n            return False\r\n    return True", "task_id": 13221}
{"finetuning_prompt": "\"\"\"\nGiven two strings, write a python program to check for a substring.\n\"\"\"\n\ndef substring_check(str1, str2):\n", "finetuning_completion": " \r\n    if str2.find(str1) != -1: \r\n        return True \r\n    else: \r\n        return False", "task_id": 13228}
{"finetuning_prompt": "\"\"\"\nGenerate code for a function which searches a string for a specific keyword.\n\"\"\"\n\ndef search_text(text, keyword):\n", "finetuning_completion": "\r\n    if keyword in text:\r\n        return True\r\n    else:\r\n        return False", "task_id": 13229}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the number of pairs in an array of integers whose sum is divisble by a given number.\n\"\"\"\n\ndef find_pair_div_by_num(arr,k):\n", "finetuning_completion": " \n\tn = len(arr) \n\tcount = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif( (arr[i] + arr[j]) % k == 0): \n\t\t\t\tcount += 1\n\treturn count", "task_id": 13233}
{"finetuning_prompt": "\"\"\"\nGiven two sorted arrays, find the median element of all the elements in the two sorted arrays.\n\"\"\"\n\n# Python3 program to find the median \n# of two sorted arrays of same size \n  \n# This function returns the median of \n# ar1[] and ar2[]. \n# Assumptions in this function: \n# Both ar1[] and ar2[] are \n# sorted arrays \n# Both have n elements \ndef getMedian(ar1, ar2, n):\n", "finetuning_completion": " \n# Both ar1[] and ar2[] are \n# sorted arrays \n# Both have n elements \ndef getMedian(ar1, ar2, n): \n  \n    # return -1 for \n    # invalid input \n    if (n <= 0): \n        return -1\n  \n    if (n == 1): \n        return (ar1[0] + ar2[0]) // 2\n    if (n == 2): \n        return (max(ar1[0], ar2[0]) +\n               min(ar1[1], ar2[1])) // 2\n  \n    # get the median of \n    # the first array \n    m1 = median(ar1, n)  \n  \n    # get the median of \n    # the second array \n    m2 = median(ar2, n)  \n  \n    # if the medians \n    # are equal then \n    # return either m1 or m2 \n    if (m1 == m2): \n        return m1 \n  \n    # if m1 < m2 then \n    # median must exist \n    # in ar1[m1....] and \n    # ar2[....m2] \n    if (m1 < m2): \n        if (n % 2 == 0): \n            return getMedian(ar1[n//2 - 1:],  \n                               ar2[:n//2 + 1],  \n                               n - n // 2 + 1) \n        else: \n            return getMedian(ar1[n//2:],  \n                               ar2[:n//2 + 1], \n                               n - n // 2) \n          \n    # if m1 > m2 then \n    # median must exist in  \n    # ar1[....m1] and ar2[m2...] \n    else: \n        if (n % 2 == 0): \n            return getMedian(ar2[n//2 - 1:], \n                               ar1[:n//2 + 1], \n                               n - n // 2 + 1) \n        else: \n            return getMedian(ar2[n//2:], \n                               ar1[:n//2 + 1], \n                               n - n // 2) \n  \n# Function to get the median  \n# of a number array \ndef median(arr, n): \n    if (n % 2 == 0): \n        return (arr[n//2] +  \n                arr[n//2 - 1]) / 2\n    else: \n        return arr[n//2] \n\n# Driver Code \narr1 = [1, 3, 8, 10, 11] \narr2 = [2, 4, 6, 12, 14] \nn1 = len(arr1) \nn2 = len(arr2) \nif (n1 == n2): \n    print(\"Median is \",  \n         getMedian(arr1, arr2, n1)) \nelse: \n    print(\"Doesn't work for arrays of unequal size\")", "task_id": 13235}
{"finetuning_prompt": "\"\"\"\nWrite a procedure to segment a given sentence into words.\n\"\"\"\n\ndef segment(s):\n", "finetuning_completion": " \n    s = s.split(' ') \n    index = 0\n    while index < len(s): \n        if s[index] == '': \n            s.pop(index)  \n        else: \n            index += 1\n    return s", "task_id": 13256}
{"finetuning_prompt": "\"\"\"\nDesign a program for computing the edit distance between two given strings.\n\"\"\"\n\ndef edit_distance(str1, str2):\n", "finetuning_completion": " \n    dp = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)] \n  \n    for i in range(len(str1)+1): \n        for j in range(len(str2)+1): \n            if i == 0: \n                dp[i][j] = j    \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])    # Replace \n  \n    return dp[len(str1)][len(str2)]", "task_id": 13258}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to sort a list of zeros, ones, and twos in ascending order.\n\"\"\"\n\ndef sort_012(arr):\n", "finetuning_completion": " \r\n    low = 0\r\n    mid = 0\r\n    high = len(arr) - 1\r\n\r\n    while (mid <= high): \r\n        if arr[mid] == 0: \r\n            arr[low], arr[mid] = arr[mid], arr[low] \r\n            low = low + 1\r\n            mid = mid + 1\r\n        elif arr[mid] == 1: \r\n            mid = mid + 1\r\n        else: \r\n            arr[mid], arr[high] = arr[high], arr[mid]  \r\n            high = high - 1\r\n\r\n    return arr", "task_id": 13265}
{"finetuning_prompt": "\"\"\"\nWrite a python program to manipulate a list of numbers by adding up a given value to every element of it.\n\"\"\"\n\ndef manipulate_list(number_List,desired_value):\n", "finetuning_completion": " \r\n    result_list  = [x + desired_value for x in number_List]  \r\n    return result_list", "task_id": 13268}
{"finetuning_prompt": "\"\"\"\nFind the minimum number of swaps required to sort a given array.\n\"\"\"\n\ndef minSwaps(arr):\n", "finetuning_completion": " \r\n\tswap_count = 0\r\n\tn = len(arr) \r\n\tvisited = [False for x in range(n)] \r\n\tfor i in range(n - 1): \r\n\t\tj = i \r\n\t\twhile (not visited[j]): \r\n\t\t\tvisited[j] = True\r\n\t\t\tj = arr[j] - 1\t\t\r\n\r\n\t\t\t# cycle occurs \r\n\t\t\tif (j == i): \r\n\t\t\t\tbreak\r\n\t\t\tswap_count = swap_count + 1\r\n\treturn swap_count", "task_id": 13276}
{"finetuning_prompt": "\"\"\"\nWrite a python method to generate and print a list of integers, given the size of the list.\n\"\"\"\n\ndef generate_list(n):\n", "finetuning_completion": " \r\n    list = [] \r\n  \r\n    for i in range(1, n + 1): \r\n        list.append(i) \r\n  \r\n    return list", "task_id": 13278}
{"finetuning_prompt": "\"\"\"\nCreate a function to filter a given list based on the values of a specific key in the dictionary.\n\"\"\"\n\ndef filter_dicts_by_key(some_list, key):\n", "finetuning_completion": " \n    desired_list = [] \n    for dict in some_list: \n        if key in dict: \n            desired_list.append(dict[key]) \n  \n    return desired_list", "task_id": 13279}
{"finetuning_prompt": "\"\"\"\nGiven an array, write a program to check if all elements in the array are unique?\n\"\"\"\n\ndef check_unique_array(arr):\n", "finetuning_completion": "\r\n  s = set()\r\n  for x in arr:\r\n    if x in s:\r\n      return False\r\n    s.add(x)\r\n  return True", "task_id": 13282}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode an ASCII string into binary equivalent?\n\"\"\"\n\ndef ascii_to_binary(string):\n", "finetuning_completion": "\r\n    encoded_string = ''.join(format(ord(x), 'b') for x in string)\r\n    return encoded_string", "task_id": 13285}
{"finetuning_prompt": "\"\"\"\nCreate a function that can identify an odd value in a list.\n\"\"\"\n\ndef odd_identifier(lst):\n", "finetuning_completion": "\r\n    odd = []\r\n    for num in lst:\r\n        if num % 2 != 0:\r\n            odd.append(num)\r\n    return odd", "task_id": 13287}
{"finetuning_prompt": "\"\"\"\nGiven a set of items whose weights are known, write a program to find the maximum weight knapsack with repetitions allowed.\n\"\"\"\n\ndef knapSack(wt, value, limit):\n", "finetuning_completion": " \r\n  \r\n    N = len(wt) \r\n    K = [[0 for x in range(limit+1)] for x in range(N+1)] \r\n  \r\n    # Build table K[][] in bottom up manner \r\n    for i in range(N+1): \r\n        for w in range(limit+1): \r\n            if i==0 or w==0: \r\n                K[i][w] = 0\r\n            elif wt[i-1] <= w: \r\n                K[i][w] = max(value[i-1] + K[i][w-wt[i-1]],  K[i-1][w]) \r\n            else: \r\n                K[i][w] = K[i-1][w] \r\n  \r\n    return K[N][limit] \r\n\r\nwt = [2, 2, 4, 6]\r\nvalue = [2, 3, 5, 9]\r\nlimit = 10\r\nprint(knapSack(wt, value, limit))", "task_id": 13305}
{"finetuning_prompt": "\"\"\"\nCreate a program that rearranges the characters of a given string in alphabetical order.\n\"\"\"\n\ndef rearrange_characters(test_str):\n", "finetuning_completion": "\r\n  res = \"\".join(sorted(test_str))\r\n  return res", "task_id": 13307}
{"finetuning_prompt": "\"\"\"\nCreate a function in Python to check if a given item is present in a list or not.\n\"\"\"\n\ndef check_list(list,item):\n", "finetuning_completion": "\r\n    if (item in list):\r\n        return True \r\n    else:\r\n        return False", "task_id": 13314}
{"finetuning_prompt": "\"\"\"\nFind a way to delete a specified item from a list.\n\"\"\"\n\ndef delete_list_element(lst, element):\n", "finetuning_completion": " \r\n    if element in lst: \r\n        lst.remove(element) \r\n        return lst \r\n    else: \r\n        return \"Element not in the list\"", "task_id": 13318}
{"finetuning_prompt": "\"\"\"\nBuild a program to find repeating elements in an array.\n\"\"\"\n\ndef find_repeating_elements(arr):\n", "finetuning_completion": " \r\n\r\n    # Dictionary to keep track \r\n    # of occurences of elements \r\n    dict_count = dict() \r\n  \r\n    for i in arr: \r\n      \r\n        # If elements is present  \r\n        # in dictionary then,  \r\n        # increment it's count \r\n        if i in dict_count: \r\n            dict_count[i] += 1\r\n  \r\n        # Else add to the dictionary \r\n        else: \r\n            dict_count[i] = 1\r\n\r\n    # Output list initialization \r\n    list_duplicates = []\r\n\r\n    # Traverse in the dictionary \r\n    for i in dict_count: \r\n  \r\n        # If more than one element \r\n        # is present then, append it  \r\n        if dict_count[i] > 1: \r\n            list_duplicates.append(i) \r\n  \r\n    return list_duplicates", "task_id": 13320}
{"finetuning_prompt": "\"\"\"\nGenerate the code for an efficient search algorithm that takes an array and a target value and search the target element in the array.\n\"\"\"\n\ndef search(arr, x):\n", "finetuning_completion": " \n    n = len(arr)\n    low = 0\n    high = n-1\n    while low<=high:\n        mid = low + (high-low)//2\n        if x == arr[mid]:\n            return mid  \n        elif x < arr[mid]:\n            high = mid -1\n        else:\n            low = mid + 1\n    return -1", "task_id": 13328}
{"finetuning_prompt": "\"\"\"\nGenerate a Python function to calculate the sum of the roots of a quadratic equation.\n\"\"\"\n\ndef sum_of_roots(a,b,c):\n", "finetuning_completion": "\n    discriminant = (b**2) - (4*a*c)\n    root1 = (-b + (discriminant**0.5))/(2*a)\n    root2 = (-b - (discriminant**0.5))/(2*a)\n    return (root1+root2)", "task_id": 13332}
{"finetuning_prompt": "\"\"\"\nDevelop a Python function to calculate the type-1 and type-2 errors for a given list of values.\n\"\"\"\n\ndef Error_Calculation(list):\n", "finetuning_completion": "\n    type1_error = type2_error = 0\n    for i in list:\n        if i != 2:\n            type1_error += 1\n        else:\n            type2_error += 1\n    return type1_error, type2_error", "task_id": 13333}
{"finetuning_prompt": "\"\"\"\nUsing a greedy algorithm, write a function to calculate the minimum number of coins needed to make a given amount.\n\"\"\"\n\ndef min_coins(amount):\n", "finetuning_completion": "\r\n  coins = [1, 5, 10, 25] # list of available coins\r\n  coin_count = 0\r\n  for coin in reversed(coins):\r\n    coin_count += amount // coin\r\n    amount %= coin\r\n  return coin_count", "task_id": 13342}
{"finetuning_prompt": "\"\"\"\nDesign a program to write two strings of length N in two-dimensional character array format\n\"\"\"\n\ndef write_str(str1, str2):\n", "finetuning_completion": " \r\n    N = max(len(str1), len(str2)) \r\n    arr = [[' ' for i in range(N)] for j in range(2)] \r\n    for i in range(len(str1)): \r\n        arr[0][i] = str1[i] \r\n    for i in range(len(str2)): \r\n        arr[1][i] = str2[i] \r\n    return (arr)", "task_id": 13347}
{"finetuning_prompt": "\"\"\"\nDesign a method which concatenates two given strings.\n\"\"\"\n\ndef concatenate_strings(str1, str2):\n", "finetuning_completion": " \r\n    res = str1 + \" \" + str2 \r\n    return res", "task_id": 13350}
{"finetuning_prompt": "\"\"\"\nGiven a data set of grades for 4 subjects, write a function to compute the overall average grade.\n\"\"\"\n\ndef average_grades(grades):\n", "finetuning_completion": "\n    total = 0\r\n    count = 0\n    \n    for grade in grades:\n        count+= len(grade)\n        total += sum(grade)\n        \n    return total/count", "task_id": 13351}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a list from a range of numbers using list comprehension.\n\"\"\"\n\ndef list_range(start, end):\n", "finetuning_completion": " \n    return [num for num in range(start, end + 1)]", "task_id": 13356}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes an input as a string and returns the count of each vowel.\n\"\"\"\n\ndef vowel_count(string):\n", "finetuning_completion": " \r\n    count = 0\r\n    for i in string: \r\n        if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A' or i == 'E' or i == 'I' or i == 'O' or i == 'U'): \r\n            count = count + 1\r\n    return count", "task_id": 13359}
{"finetuning_prompt": "\"\"\"\nWrite a script to remove all characters from a string which do not exist in a given list of characters.\n\"\"\"\n\ndef remove_unwanted_characters(string, chars):\n", "finetuning_completion": "\r\n    new_string = ''\r\n    for char in string: \r\n        if char in chars: \r\n            new_string += char \r\n    return new_string", "task_id": 13366}
{"finetuning_prompt": "\"\"\"\nCreate a script that prints the square of each element in a list.\n\"\"\"\n\ndef print_elements_square(mylist):\n", "finetuning_completion": " \r\n    for i in mylist: \r\n        print(i*i,end=\" \")", "task_id": 13371}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the sum of series 1 + 1/2 + 1/4 + 1/8... up till the given integer.\n\"\"\"\n\ndef sum_of_series(n):\n", "finetuning_completion": " \r\n\tsum = 0\r\n\tfor i in range(1, n + 1): \r\n\t\tsum = sum + 1.0 / (2 ** (i - 1)) \r\n\treturn sum", "task_id": 13372}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the minimum element in a rotated sorted array.\n\"\"\"\n\ndef rotated_min(arr):\n", "finetuning_completion": "\r\n    lo, hi = 0, len(arr) - 1\r\n    while lo < hi:\r\n        mid = (lo + hi) // 2\r\n        # if mid on left side and the next element is greater than mid, then the min is on the left side and mid is the mid point of the left side\r\n        if arr[mid] < arr[mid-1] and arr[mid] < arr[mid+1]:\r\n            return arr[mid]\r\n        # if mid on right side and the previous element is greater than mid, then the min is on the right side and mid point of the right side\r\n        elif arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1]:\r\n            return arr[mid+1]\r\n        # choose the left side\r\n        elif arr[mid-1] > arr[mid]:\r\n            hi = mid\r\n        # choose the right side\r\n        else:\r\n            lo = mid + 1\r\n    return arr[lo]", "task_id": 13379}
{"finetuning_prompt": "\"\"\"\nCreate a code to classify the types of vegetables according to their color.\n\"\"\"\n\ndef classify_vegetable_by_color(item1, item2):\n", "finetuning_completion": " \r\n    color_list = [] \r\n    type_list = [] \r\n\r\n    if 'red' in item1: \r\n        color_list.append('red') \r\n    if 'green' in item1: \r\n        color_list.append('green') \r\n\r\n    if 'red' in item2: \r\n        color_list.append('red') \r\n    if 'green' in item2: \r\n        color_list.append('green') \r\n        \r\n    for color in color_list: \r\n        if color == 'red': \r\n            type_list.append('Tomatoes') \r\n        if color == 'green': \r\n            type_list.append('Cucumbers') \r\n            \r\n    return type_list", "task_id": 13383}
{"finetuning_prompt": "\"\"\"\nWrite a code that accepts two strings and displays the longer one.\n\"\"\"\n\ndef display_longer(string1, string2):\n", "finetuning_completion": " \r\n  if len(string1) > len(string2): \r\n    return string1 \r\n  else: \r\n    return string2", "task_id": 13385}
{"finetuning_prompt": "\"\"\"\nCreate a program to substitute vowels in a string with '#'.\n\"\"\"\n\ndef substitute_vowels(string):\n", "finetuning_completion": "\r\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\r\n    for x in string:\r\n        if x in vowels:\r\n            string = string.replace(x, \"#\")\r\n    return string", "task_id": 13388}
{"finetuning_prompt": "\"\"\"\nCreate a program to categorize a large data set of words according to their length in a dictionary.\n\"\"\"\n\ndef categorize_length(words):\n", "finetuning_completion": " \r\n    mydict = dict() \r\n    for w in words: \r\n        if len(w) not in mydict: \r\n            mydict[len(w)] = [w] \r\n        else: \r\n            mydict[len(w)].append(w) \r\n    return mydict", "task_id": 13394}
{"finetuning_prompt": "\"\"\"\nConstruct a function to generate the sum of all digit occurrences in a given number.\n\"\"\"\n\ndef sum_of_digit_occurrences(inputNum):\n", "finetuning_completion": " \r\n    countsum = 0\r\n    while(inputNum > 0): \r\n        countsum += inputNum%10\r\n        inputNum = int(inputNum/10) \r\n    return countsum", "task_id": 13396}
{"finetuning_prompt": "\"\"\"\nCreate a program to design an efficient data structure which stores the frequency of elements in an array.\n\"\"\"\n\ndef frequency_structure(elements):\n", "finetuning_completion": " \r\n    freq_dict = {} \r\n    for ele in elements: \r\n        if ele not in freq_dict.keys(): \r\n            freq_dict[ele] = 0 \r\n        freq_dict[ele] += 1\r\n    return freq_dict", "task_id": 13397}
{"finetuning_prompt": "\"\"\"\nWrite program to calculate the acceleration for a given velocity and time.\n\"\"\"\n\ndef calculate_acceleration(velocity, time):\n", "finetuning_completion": "\n    acceleration = velocity / time\n    return acceleration", "task_id": 13411}
{"finetuning_prompt": "\"\"\"\nGenerate a function that takes a variable number of arguments and finds the maximum value among them.\n\"\"\"\n\ndef find_max(*args):\n", "finetuning_completion": " \r\n    m = args[0] \r\n    for arg in args[1:]: \r\n        if arg>m: \r\n            m=arg \r\n    return m", "task_id": 13414}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to round each number in a given list to the nearest integer.\n\"\"\"\n\ndef round_list(lst):\n", "finetuning_completion": "\r\n    lst_rounded = [round(num) for num in lst]\r\n    return lst_rounded", "task_id": 13416}
{"finetuning_prompt": "\"\"\"\nOptimize the given code for matrix multiplication.\n\"\"\"\n\ndef matrix_multi(A, B):\n", "finetuning_completion": " \r\n\tif len(A[0]) != len(B): \r\n\t\treturn -1 \r\n\trow = len(A) \r\n\tcol = len(B[0]) \r\n\tC = [[0 for i in range(col)] for j in range(row)] \r\n\r\n\tfor i in range(row): \r\n\t\tfor j in range(col): \r\n\t\t\tfor k in range(len(B)): \r\n\t\t\t\tC[i][j] += A[i][k] * B[k][j] \r\n\treturn C", "task_id": 13425}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to find all possible ways to combine a given set of coins and calculate the sum.\n\"\"\"\n\ndef allPossibleWays(coins, summand):\n", "finetuning_completion": " \n\tn = len(coins) \n\n\t# t[i][j] stores the number of solutions for \n\t# value j using coins[0..i-1] \n\tt = [[0 for j in range(summand + 1)] \n\t\t\t\t\tfor i in range(n + 1)] \n\n\t# Initializing first column with 1. \n\tfor i in range(n + 1): \n\t\tt[i][0] = 1\n\t\t\n\t# For each coin, fill the entries for value greater \n\t# than or equal to coin value in each colu \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, summand + 1): \n\t\t\tif coins[i-1] > j: \n\t\t\t\t# If coin value is greater than the remainin \n\t\t\t\t# sum then copy the previous value. \n\t\t\t\tt[i][j] = t[i-1][j] \n\t\t\telse: \n\t\t\t\t# Else sum of the value obtained including \n\t\t\t\t# the coin value and the value excluding the \n\t\t\t\t# coin value \n\t\t\t\tt[i][j] = t[i-1][j] + t[i][j - coins[i-1]] \n\t\t\t\t\n\treturn t[n][summand]", "task_id": 13426}
{"finetuning_prompt": "\"\"\"\nImagine you got a list of names and last names. Write a code to generate full names.\n\"\"\"\n\ndef generate_fullnames(names, last_names):\n", "finetuning_completion": "\r\n fullnames = []\r\n for name, last_name in zip(names, last_names):\r\n   fullnames.append(name + ' ' + last_name)\r\n return fullnames", "task_id": 13432}
{"finetuning_prompt": "\"\"\"\nWrite a code to decrypt a cipher text using the Caesar cipher algorithm.\n\"\"\"\n\ndef caesar_decrypt(cipher_text):\n", "finetuning_completion": "\r\n alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n shift = 3\r\n result = ''\r\n\r\n for char in cipher_text: \r\n   if char in alphabet:\r\n     pos = alphabet.index(char)\r\n     new_pos = (pos - shift) % 26\r\n     result += alphabet[new_pos]\r\n   else:\r\n     result += char\r\n\r\n return result", "task_id": 13433}
{"finetuning_prompt": "\"\"\"\nWrite a python program to read a list of numbers and print the list in reverse?\n\"\"\"\n\ndef printReverseList(list1):\n", "finetuning_completion": "\n    return list1[::-1]", "task_id": 13445}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a prime number between 2 and a given number.\n\"\"\"\n\ndef generatePrime(n):\n", "finetuning_completion": " \n  \n    if n <= 1: \n        return False\n  \n    # Create a boolean array \"prime[0..n]\" and \n    # initialize all entries it as true. A value \n    # in prime[i] will finally be false if i is \n    # Not a prime, else true. \n    prime = [True] * (n + 1) \n      \n    p = 2\n    while (p*p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n      \n    primes = [] \n    for p in range(2, n + 1): \n        if prime[p]: \n            primes.append(p)\n          \n    return primes", "task_id": 13448}
{"finetuning_prompt": "\"\"\"\nOptimize a program to implement the minimum edit distance algorithm.\n\"\"\"\n\nimport numpy as np \r\n  \r\ndef min_edit_distance(str1, str2):\n", "finetuning_completion": " \r\n    # get the length of both strings \r\n    m = len(str1) \r\n    n = len(str2) \r\n  \r\n    dp = np.zeros((m + 1, n + 1), dtype = int) \r\n  \r\n    # initialise 1st column  \r\n    for i in range(1, m + 1): \r\n        dp[i][0] = dp[i - 1][0] + 1\r\n\r\n    # initialise 1st row  \r\n    for j in range(1, n + 1): \r\n        dp[0][j] = dp[0][j - 1] + 1\r\n  \r\n    # Looping through the matrix \r\n    for i in range(1, m + 1): \r\n        for j in range(1, n + 1): \r\n  \r\n            # if last characters of both strings are same \r\n            if str1[i - 1] == str2[j - 1]: \r\n                dp[i][j] = dp[i - 1][j - 1] \r\n\r\n            else: \r\n                dp[i][j] = 1 + min(dp[i - 1][j],        # remove \r\n                                dp[i][j - 1],        # insert \r\n                                dp[i - 1][j - 1])    # replace \r\n  \r\n    return dp[m][n]", "task_id": 13453}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to evaluate the expression (2 + 3) * 10 - 4 / 2.\n\"\"\"\n\ndef evaluate_expression(x):\n", "finetuning_completion": "\r\n    res = (2 + 3) * 10 - 4 / 2\r\n    return res", "task_id": 13462}
{"finetuning_prompt": "\"\"\"\nCreate a program to correctly predict the sentiment of any given sentence.\n\"\"\"\n\ndef sentiment(sentence):\n", "finetuning_completion": " \r\n    sentiment = 0\r\n    words = sentence.split()\r\n    for word in words: \r\n        if(word == \"good\"): \r\n            sentiment += 1\r\n        elif(word == \"lousy\"): \r\n            sentiment -= 1\r\n    return sentiment", "task_id": 13463}
{"finetuning_prompt": "\"\"\"\nGenerate a program to parse a string of words and print each word with its frequency count.\n\"\"\"\n\ndef word_frequency(sentence):\n", "finetuning_completion": "\r\n    counts = dict()\r\n    words = sentence.split()\r\n    for word in words:\r\n        if word in counts:\r\n            counts[word] += 1\r\n        else:\r\n            counts[word] = 1\r\n    for word, count in counts.items():\r\n        print(f\"{word} : {count}\")", "task_id": 13464}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute the biggest palindrome from the given number.\n\"\"\"\n\ndef maxpalindrome(num):\n", "finetuning_completion": " \r\n      \r\n    num += 1\r\n    while True: \r\n          \r\n        rev = 0\r\n        temp = num \r\n          \r\n        while temp > 0: \r\n            rev = (rev * 10) + (temp % 10) \r\n            temp //= 10\r\n          \r\n        # The num is Palindrome  \r\n        if num == rev: \r\n            return num \r\n          \r\n        num+= 1\r\n \r\n# Driver Code \r\nprint(maxpalindrome(8454)) # Output : 8548", "task_id": 13468}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate all possible pairs of two given numbers.\n\"\"\"\n\ndef generate_pairs(m, n):\n", "finetuning_completion": "\n    return [(i, j) for i in range(m) for j in range(n)]", "task_id": 13470}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, write a function to search for a given number using binary search.\n\"\"\"\n\ndef binary_search(arr, x):\n", "finetuning_completion": " \n  \n    low = 0\n    high = len(arr) - 1\n    mid = 0\n  \n    while low <= high: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] < x: \n            low = mid + 1\n  \n        # If x is greater, ignore left half \n        elif arr[mid] > x: \n            high = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n  \n    # If we reach here, then the element \n    # was not present \n    return -1", "task_id": 13482}
{"finetuning_prompt": "\"\"\"\nCreate a program to convert a string in Snake_case to CamelCase.\n\"\"\"\n\ndef convert_snake_to_camel(str):\n", "finetuning_completion": "\r\n    outstr = \"\"\r\n    words = str.split(\"_\")\r\n    for word in words:\r\n        if word:\r\n            outstr += word.title()\r\n    return outstr", "task_id": 13487}
{"finetuning_prompt": "\"\"\"\nGiven a list of data points, write a program that generates a line of best fit using linear regression.\n\"\"\"\n\nimport numpy as np\r\n\r\ndef best_fit_line(data):\n", "finetuning_completion": "\r\n    x_values , y_values = zip(*data)\r\n    m, b = np.polyfit(x_values, y_values, 1)\r\n    return m,b", "task_id": 13488}
{"finetuning_prompt": "\"\"\"\nCreate a function to search a substring in an array of strings.\n\"\"\"\n\ndef search_substring(names, substring):\n", "finetuning_completion": " \r\n    result = [] \r\n    for name in names: \r\n        if substring in name: \r\n            result.append(name) \r\n    return result", "task_id": 13501}
{"finetuning_prompt": "\"\"\"\nCreate a function that converts a variable in a data set from one unit of measure to another.\n\"\"\"\n\ndef convert_unit(data, unit1, unit2):\n", "finetuning_completion": "\n        if unit1 == \"Celsius\" and unit2 == \"Fahrenheit\":\n            converted_data = data * (9/5) + 32\n        elif unit1 == \"Fahrenheit\" and unit2 == \"Celsius\":\n            converted_data = (data - 32) * (5/9)\n        else:\n            converted_data = data\n        return converted_data", "task_id": 13504}
{"finetuning_prompt": "\"\"\"\nCreate a function that detects outlier points from a given set of data based on the Z-score.\n\"\"\"\n\ndef detect_outliers_zscore(data):\n", "finetuning_completion": "\r\n    outliers = []\r\n    threshold = 3\r\n\r\n    mean = np.mean(data)\r\n    std = np.std(data)\r\n\r\n    for i in data:\r\n        z_score = (i - mean) / std \r\n        if np.abs(z_score) > threshold:\r\n            outliers.append(i)\r\n    return outliers", "task_id": 13507}
{"finetuning_prompt": "\"\"\"\nCreate a function that combines two dictionaries into one by adding the values for common keys.\n\"\"\"\n\ndef combine_dicts(dic_one, dic_two):\n", "finetuning_completion": "\r\n    result_dict = {**dic_one, **dic_two}\r\n\r\n    for key, value in dic_one.items():\r\n        if key in dic_two:\r\n            result_dict[key] = value + dic_two[key]\r\n        else:\r\n            result_dict[key] = value\r\n    return(result_dict)", "task_id": 13508}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to find if the given matrix is a circulant matrix.\n\"\"\"\n\ndef isCirculantMatrix(mat, n):\n", "finetuning_completion": " \n    # Create and initialize first row of output matrix  \n    res = [] \n    for i in range(n): \n        res.append(mat[0][i]) \n              \n    for j in range(1, n, 1): \n          \n        # shift element of first row  \n        temp = res[0] \n        for k in range(n - 1, 0, -1): \n            res[k] = res[k - 1] \n          \n        # assign last element of first row  \n        res[0] = mat[j][n - 1] \n          \n        # Compare the current row of original  \n        # matrix and generated row to check  \n        # if they are same or not  \n        if (temp != mat[j][0]): \n            return False\n          \n        for k in range(1, n): \n            if (res[k] != mat[j][k]): \n                return False\n              \n    return True", "task_id": 13523}
{"finetuning_prompt": "\"\"\"\nWrite a python function to convert a given string with length n into a list of words with length n-1.\n\"\"\"\n\ndef convert_string(str):\n", "finetuning_completion": " \r\n    l = str.split(\" \") \r\n    return [x[:-1] for x in l]", "task_id": 13525}
{"finetuning_prompt": "\"\"\"\nGenerate an interface to compare two strings for similarity.\n\"\"\"\n\ndef compare_Strings(str1, str2):\n", "finetuning_completion": " \n    m = len(str1) \n    n = len(str2) \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1\n    return dp[m][n]", "task_id": 13541}
{"finetuning_prompt": "\"\"\"\nWrite a code to find three largest numbers in a given list.\n\"\"\"\n\ndef largest_nums(list1):\n", "finetuning_completion": "\n    three_largest = sorted(list1, reverse=True)[:3]\n    return three_largest", "task_id": 13548}
{"finetuning_prompt": "\"\"\"\nImplement the binary search algorithm on a given list.\n\"\"\"\n\ndef binary_search(list1, x):\n", "finetuning_completion": "\n    start = 0\n    end = len(list1) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if list1[mid] == x:\n            return mid\n        elif list1[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1", "task_id": 13549}
{"finetuning_prompt": "\"\"\"\nGenerate a function to calculate the standard deviation given a series of numbers.\n\"\"\"\n\ndef std_deviation(nums):\n", "finetuning_completion": " \r\n    mean = sum(nums)/len(nums)\r\n    variance = sum([((x - mean) ** 2) for x in nums]) / len(nums) \r\n    stdev = variance ** 0.5  \r\n    return stdev", "task_id": 13566}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes two parameters, the first being a list of numbers and the second being a number, and finds the maximum element out of the list which is less than the second parameter.\n\"\"\"\n\ndef maximum_less_than(nums, x):\n", "finetuning_completion": " \r\n    res = [] \r\n    for num in nums: \r\n        if num < x: \n            res.append(num) \r\n\r\n    return max(res)", "task_id": 13567}
{"finetuning_prompt": "\"\"\"\nGenerate code to output an array with the elements in reverse order.\n\"\"\"\n\ndef reverse_array(arr):\n", "finetuning_completion": " \r\n    return [arr[len(arr)-i-1] for i in range(len(arr))]", "task_id": 13570}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes in a sentence and outputs the number of vowels in it.\n\"\"\"\n\ndef count_vowels(string):\n", "finetuning_completion": " \r\n    vowels = ['a', 'e', 'i', 'o', 'u'] \r\n    count = 0\r\n    for ch in string.lower(): \r\n        if ch in vowels: \r\n            count += 1\r\n    return count", "task_id": 13571}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to calculate the square of a given number without using multiplication or powers.\n\"\"\"\n\ndef square(n):\n", "finetuning_completion": " \r\n    ans = 0\r\n    for _ in range(n): \r\n        ans += n \r\n    return ans", "task_id": 13591}
{"finetuning_prompt": "\"\"\"\nCreate a program to decode a given string by replacing the characters with their corresponding numbers.\n\"\"\"\n\ndef decode_string(s):\n", "finetuning_completion": "\n    codes = {\n        'A': '1', 'B': '2', 'C': '3',\n        'D': '4', 'E': '5', 'F': '6'\n    }\n    decoded_string = ''\n    for char in s:\n        if char in codes:\n            decoded_string += codes[char]\n        else: \n            decoded_string += char\n    return decoded_string", "task_id": 13600}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to find the maximum of a given array without using any built-in functions.\n\"\"\"\n\ndef find_max(arr):\n", "finetuning_completion": " \r\n    maximum = arr[0] \r\n  \r\n    for i in arr: \r\n        if i > maximum: \r\n            maximum = i \r\n    return maximum\n  \narr = [1,2,3,4] \r\nmax_val = find_max(arr) \r\nprint(\"Maximum of the Given Array :\", max_val)", "task_id": 13605}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the longest continous increasing sequence in  given list.\n\"\"\"\n\ndef find_longest_continuous_sequence(nums):\n", "finetuning_completion": " \r\n    longest = 1 \r\n    current = 1 \r\n    for i in range(1, len(nums)): \r\n        if nums[i] == nums[i - 1] + 1: \r\n            current += 1 \r\n        else: \r\n            longest = max(longest, current) \r\n            current = 1 \r\n    return max(longest, current)", "task_id": 13607}
{"finetuning_prompt": "\"\"\"\nDesign a program to use a given list of words to generate all possible strings.\n\"\"\"\n\ndef generate_strings(words):\n", "finetuning_completion": "\n    result = []\n    for i in range(len(words)):\n        for j in range(i, len(words)):\n            string = ' '.join(words[i:j+1])\n            result.append(string)\n    return result", "task_id": 13610}
{"finetuning_prompt": "\"\"\"\nCreate code to list all prime numbers between two numbers.\n\"\"\"\n\ndef prime_list(start, end):\n", "finetuning_completion": "\n    primes = []\n    for num in range(start, end + 1):\n       if num > 1:\n           for i in range(2, num):\n               if (num % i) == 0:\n                   break\n           else:\n               primes.append(num)\n    return primes\n  \nresult = prime_list(10, 30)\nprint(\"prime numbers between 10 to 30 are:\", result)", "task_id": 13622}
{"finetuning_prompt": "\"\"\"\nDevelop a program to convert a Python list to a JavaScript array.\n\"\"\"\n\ndef convert_list_to_array(list):\n", "finetuning_completion": " \n    return \"[\" + \", \".join(str(element) for element in list) + \"]\"\r\n  \nlist = [1, 2, 3, 4]\r\nprint(convert_list_to_array(list))", "task_id": 13623}
{"finetuning_prompt": "\"\"\"\nCreate code to print the cross-product of given two lists.\n\"\"\"\n\ndef cross_product(list1, list2):\n", "finetuning_completion": " \n    result = [] \n    for i in list1: \n        for j in list2: \n            result.append((i, j)) \n    return result\n\nList1 = [1,2,3]\nList2 = [4,5,6]\n\nprint(cross_product(List1, List2))", "task_id": 13624}
{"finetuning_prompt": "\"\"\"\nDevelop a function to encode a given string into its relevant morse code.\n\"\"\"\n\ndef encode_morse_code(word):\n", "finetuning_completion": " \r\n    morse_code_dict = { 'A':'.-', 'B':'-...', \r\n                    'C':'-.-.', 'D':'-..', 'E':'.', \r\n                    'F':'..-.', 'G':'--.', 'H':'....', \r\n                    'I':'..', 'J':'.---', 'K':'-.-', \r\n                    'L':'.-..', 'M':'--', 'N':'-.', \r\n                    'O':'---', 'P':'.--.', 'Q':'--.-', \r\n                    'R':'.-.', 'S':'...', 'T':'-', \r\n                    'U':'..-', 'V':'...-', 'W':'.--', \r\n                    'X':'-..-', 'Y':'-.--', 'Z':'--..', \r\n                    '1':'.----', '2':'..---', '3':'...--', \r\n                    '4':'....-', '5':'.....', '6':'-....', \r\n                    '7':'--...', '8':'---..', '9':'----.', \r\n                    '0':'-----', ', ':'--..--', '.':'.-.-.-', \r\n                    '?':'..--..', '/':'-..-.', '-':'-....-', \r\n                    '(':'-.--.', ')':'-.--.-'} \n    result = []\n    for char in word:\n        result.append(morse_code_dict[char.upper()])\n    return ' '.join(result)", "task_id": 13626}
{"finetuning_prompt": "\"\"\"\nDevelop a python function to insert spaces in words between two consecutive capital letters.\n\"\"\"\n\ndef spaceBetweenCapitals(text):\n", "finetuning_completion": " \n    text_splitted = [txt for txt in text] \n    for i in range(1, len(text_splitted)): \n        if text_splitted[i].isupper() and text_splitted[i - 1].isupper(): \n            text_splitted[i] = \" \" + text_splitted[i] \n    return \"\".join(text_splitted)", "task_id": 13627}
{"finetuning_prompt": "\"\"\"\nGiven a natural number N, write a Python program to find the sum of all perfect squares in the range [1, N].\n\"\"\"\n\ndef sum_perfect_squares(N):\n", "finetuning_completion": "\n    Sum = 0\n    for i in range(1, N+1):\n        root = math.sqrt(i)\n        if root - int(root) == 0:\n            Sum += i\n    return Sum", "task_id": 13628}
{"finetuning_prompt": "\"\"\"\nAnalyze and refactor legacy code related to sorting algorithms.\n\"\"\"\n\n# Step 1: Analyze the code\ndef sort_array(array):\n", "finetuning_completion": " Analyze the code\ndef sort_array(array):\n    # create an empty array to store the sorted elements\n    sorted_array = []\n    \n    # loop through the array, insert the elements that are smaller than the \n    # current position in the sorted array\n    n = len(array)\n    for i in range(n):\n        for j in range(len(sorted_array)):\n            if array[i] < sorted_array[j]:\n                sorted_array.insert(j, array[i])\n                break\n        else:\n            # The element is larger than all elements in the array\n            sorted_array.append(array[i])\n    return sorted_array\n\n# Step 2: Refactor the code\ndef sort_array(array):\n    # create an empty array to store the sorted elements\n    sorted_array = []\n    \n    # loop through the array, insert the elements that are smaller than the \n    # current position in the sorted array\n    n = len(array)\n    for i in range(n):\n        j = 0\n        while (j < len(sorted_array) and array[i] > sorted_array[j]):\n            j += 1\n        sorted_array.insert(j, array[i])\n    return sorted_array", "task_id": 13630}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes an input string and a sequence of words, and returns true only if all the words in the sequence exist in the input string.\n\"\"\"\n\ndef check_sequence_in_string(string, sequence):\n", "finetuning_completion": "\n    string_list = string.split()\n    for word in sequence:\n        if word not in string_list:\n            return False\n    return True", "task_id": 13639}
{"finetuning_prompt": "\"\"\"\nGenerate a list of strings that contain only even numbers.\n\"\"\"\n\ndef even_list(list):\n", "finetuning_completion": " \r\n  \r\n    even_list = [str(i) for i in list if i % 2 == 0] \r\n    return even_list", "task_id": 13640}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers, write a function that returns a list of those integers that are prime.\n\"\"\"\n\ndef prime_list(list_numbers):\n", "finetuning_completion": "\r\n    prime_numbers_list = []\r\n    for num in list_numbers:\r\n        if num > 1: \r\n            for i in range(2,num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                prime_numbers_list.append(num)\r\n    return prime_numbers_list", "task_id": 13642}
{"finetuning_prompt": "\"\"\"\nWrite a python program to construct a timeline for the given dates and events.\n\"\"\"\n\ndef timeline(dates, events):\n", "finetuning_completion": "\n  timeline = []\r\n  for i in range(len(dates)):\n    timeline.append([dates[i], events[i]])\n  return timeline", "task_id": 13649}
{"finetuning_prompt": "\"\"\"\nGenerate a python function which extracts capitalized words from the given string.\n\"\"\"\n\ndef extract_capitalized(in_string):\n", "finetuning_completion": "         \r\n    result = []          \r\n    if not in_string: \r\n        return result     \r\n    for word in in_string.split():          \r\n        if word.istitle(): \r\n            result.append(word)\r\n    return result", "task_id": 13660}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute the harmonic mean of n numbers.\n\"\"\"\n\ndef harmonic_mean(arr):\n", "finetuning_completion": "\n    n = len(arr) \n    s = 0\n    for el in arr: \n        s += 1 / el\n    return n / s", "task_id": 13662}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total number of hours a given time period covers.\n\"\"\"\n\ndef total_hours(start, end):\n", "finetuning_completion": "\n    start_hours = int(start[0:2]) \n    start_min = int(start[3:]) \n    end_hours = int(end[0:2]) \n    end_min = int(end[3:])\n    total_hours = ((end_hours - start_hours)*60 + (end_min - start_min)) /60 \r\n    return total_hours", "task_id": 13663}
{"finetuning_prompt": "\"\"\"\nDevelop a program to create a staircase of width m with minimum possible height.\n\"\"\"\n\ndef stairCase(m):\n", "finetuning_completion": " \n\tn = 1; \n\twhile (True): \n\t\tif (n * (n + 1)) / 2 > m: \n\t\t\tbreak\n\t\tn += 1\n\treturn n-1", "task_id": 13668}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to locate a given element in a 2D array.\n\"\"\"\n\ndef search2D(arr, target):\n", "finetuning_completion": " \r\n  \r\n    rows = len(arr) \r\n    cols = len(arr[0]) \r\n    i = 0\r\n    j = cols - 1\r\n\r\n    while i < rows and j >= 0 : \r\n      if arr[i][j] == target : \r\n        return [i, j] \r\n      elif arr[i][j] > target : \r\n        j -= 1\r\n      else : \r\n        i += 1\r\n      \r\n    return [-1, -1]", "task_id": 13685}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers, generate code to sort the list in ascending order.\n\"\"\"\n\ndef sort_list(list):\n", "finetuning_completion": " \r\n\tlist.sort() \r\n\treturn list", "task_id": 13688}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the largest number in an array which is divisible by 2.\n\"\"\"\n\ndef find_largest_divisible_num(arr):\n", "finetuning_completion": " \n\tlargest_num = 0\n\tfor i in arr: \n\t\tif (i % 2 == 0 and i > largest_num): \n\t\t\tlargest_num = i \n\treturn largest_num", "task_id": 13689}
{"finetuning_prompt": "\"\"\"\nWrite a code to check if a string contains all the alphabets.\n\"\"\"\n\ndef check(string):\n", "finetuning_completion": " \n    return set('abcdefghijklmnopqrstuvwxyz').issubset(string.lower()) \n  \n# Driver Code \nstring = \"The quick brown fox jumps over the lazy dog\"\nif (check(string) == True): \n    print (\"The string contains all alphabets\") \nelse: \n    print (\"The string does not contain all alphabets\")", "task_id": 13693}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to iterate over dictionaries using for loops.\n\"\"\"\n\ndef iterate_dict(dictionary):\n", "finetuning_completion": "\n  \n  for key, value in dictionary.items():\n    print('{}: {}'.format(key, value))", "task_id": 13699}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine a median value of a given array.\n\"\"\"\n\ndef median(arr):\n", "finetuning_completion": " \r\n    arr.sort()\r\n    if len(arr) % 2 != 0: \r\n        return arr[int((len(arr))/2)] \r\n    else: \r\n        return (arr[int((len(arr)/2))-1] + arr[int((len(arr)/2))]) / 2", "task_id": 13711}
{"finetuning_prompt": "\"\"\"\nWrite a function that would take two text chunks as input and would generate output text.\n\"\"\"\n\ndef text_generator(text1, text2):\n", "finetuning_completion": "\r\n    return text1 + ' ' + text2", "task_id": 13713}
{"finetuning_prompt": "\"\"\"\nGenerate a Fibonacci series of 50 numbers.\n\"\"\"\n\ndef Fibonacci_sequence(n):\n", "finetuning_completion": " \r\n    result = [] \r\n    a, b = 0, 1\r\n    while a < n: \r\n        result.append(a) \r\n        a, b = b, a + b \r\n    return result\r\n\r\nFibonacci_series = Fibonacci_sequence(50)\r\nprint(Fibonacci_series)", "task_id": 13715}
{"finetuning_prompt": "\"\"\"\nConvert a matrix to a single list.\n\"\"\"\n\ndef convert_matrix_to_list(matrix):\n", "finetuning_completion": " \r\n    return [item for sublist in matrix for item in sublist]", "task_id": 13730}
{"finetuning_prompt": "\"\"\"\nOffer an optimization for the following code snippet.\n\"\"\"\n\ndef func(a, b):\n", "finetuning_completion": "\n    result = a * b\n    return result", "task_id": 13735}
{"finetuning_prompt": "\"\"\"\nGenerate a python script that prints the elements of the given array in reverse order.\n\"\"\"\n\ndef reverse_array(arr):\n", "finetuning_completion": "\r\n  rev_arr = []\r\n  for i in range(len(arr)-1, -1, -1):\r\n    rev_arr.append(arr[i])\r\n  return rev_arr\n\nprint(reverse_array([1, 2, 3, 4, 5]))", "task_id": 13738}
{"finetuning_prompt": "\"\"\"\nWrite a function to count the number of substrings of length x that contain the characters in string s.\n\"\"\"\n\ndef subCounter(s, x):\n", "finetuning_completion": " \r\n\tcount = 0\r\n\tfor i in range(len(s)-x+1): \r\n\t\tif s[i:i+x] in s: \r\n\t\t\tcount += 1\r\n\treturn count", "task_id": 13745}
{"finetuning_prompt": "\"\"\"\nGenerate a program to perform the most frequent task in the given list.\n\"\"\"\n\ndef most_frequent(list1):\n", "finetuning_completion": " \r\n    frequency = {} \r\n    max_val = 0\r\n    result = None\r\n    for item in list1: \r\n        if (item in frequency): \r\n            frequency[item] += 1\r\n        else: \r\n            frequency[item] = 1\r\n        if frequency[item] > max_val: \r\n            max_val = frequency[item] \r\n            result = item \r\n  \r\n    return (result)", "task_id": 13750}
{"finetuning_prompt": "\"\"\"\nSupposing an array A of size N, write a program to found the maximum number of inversions.\n\"\"\"\n\ndef count_inversions(A):\n", "finetuning_completion": " \r\n    inversions = 0\r\n    for i in range(len(A)): \r\n        for j in range(i + 1, len(A)): \r\n            if A[i] > A[j]: \r\n                inversions += 1 \r\n    return inversions", "task_id": 13752}
{"finetuning_prompt": "\"\"\"\nWrite a function to transform the given list of integers into a dictionary using the given key number.\n\"\"\"\n\ndef convert_list_to_dict(test,key):\n", "finetuning_completion": " \r\n    return {each:each+key for each in test} \r\n  \r\ntest=[7, 4, 5, 13, 8] \r\nkey=10\r\nprint(convert_list_to_dict(test,key))", "task_id": 13753}
{"finetuning_prompt": "\"\"\"\nWrite a method to check for overlapping intervals in a given array of intervals and return true if overlapping is present.\n\"\"\"\n\ndef check_overlap(arr):\n", "finetuning_completion": " \r\n    arr.sort() \r\n  \r\n    for i in range(1, len(arr)): \r\n        if arr[i][0]<arr[i-1][1]: \r\n            return True\r\n  \r\n    return False", "task_id": 13754}
{"finetuning_prompt": "\"\"\"\nGenerate a dictionary with the value at each key being the sum of the values at the previous two keys.\n\"\"\"\n\ndef generate_Sum_Dictionary(n):\n", "finetuning_completion": " \r\n    dic = { 0: 0, 1: 1 } \r\n  \r\n    for i in range(2, n): \r\n        dic[i] = dic[i - 2] + dic[i - 1] \r\n    return dic", "task_id": 13766}
{"finetuning_prompt": "\"\"\"\nGiven a list of strings, generate code to check if the given element is present in a string.\n\"\"\"\n\ndef check_presence(elements, string):\n", "finetuning_completion": " \n    for element in elements: \n        if element in string: \n            return True \n    return False", "task_id": 13775}
{"finetuning_prompt": "\"\"\"\nGenerate code to copy the elements of one list to another list.\n\"\"\"\n\ndef copy_list(in_list, out_list):\n", "finetuning_completion": " \r\n    for element in in_list: \r\n        out_list.append(element) \r\n    return out_list", "task_id": 13777}
{"finetuning_prompt": "\"\"\"\nGenerate code to bubble sort an unsorted list of numbers.\n\"\"\"\n\ndef bubbleSort(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    for i in range(n): \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j] \r\n    return arr", "task_id": 13780}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers in sorted order, write code to find the number of occurrences of a given number\n\"\"\"\n\ndef occurrences(arr, n):\n", "finetuning_completion": " \n    left = 0 \r\n    right = len(arr) - 1 \r\n    left_index = -1 \r\n    right_index = -1 \r\n    while (left <= right): \r\n        mid = left + (right - left) // 2\r\n        \r\n        if arr[mid] == n: \r\n            left_index = mid \r\n            right = mid - 1 \r\n        elif arr[mid] > n: \r\n            right = mid - 1 \r\n        else: \r\n            left = mid + 1\r\n    left = 0 \r\n    right = len(arr) - 1 \r\n    while (left <= right): \r\n        mid = left + (right - left) // 2\r\n        \r\n        if arr[mid] == n: \r\n            right_index = mid \r\n            left = mid + 1 \r\n        elif arr[mid] > n: \r\n            right = mid - 1 \r\n        else: \r\n            left = mid + 1 \r\n    return right_index-left_index + 1", "task_id": 13783}
{"finetuning_prompt": "\"\"\"\nDevelop a function which returns the largest element in a 2d array.\n\"\"\"\n\n# Function to find the largest element \r\ndef largest_element(a):\n", "finetuning_completion": " \r\n    # Initialize maximum element \r\n    max = a[0][0] \r\n  \r\n    # Traverse 2d array or matrix \r\n    for i in range(len(a)): \r\n        for j in range(len(a[0])):  \r\n            if a[i][j] > max: \r\n                max = a[i][j]\r\n  \r\n    return max\r\n    \r\na = [[1, 8, 6],\r\n[4, 9, 2],\r\n[7, 2, 3]]  \r\n\r\nprint(largest_element(a))", "task_id": 13784}
{"finetuning_prompt": "\"\"\"\nWrite a function to detect a given word in a 2D board.\n\"\"\"\n\ndef exist(board, word):\n", "finetuning_completion": "\n    if len(word) == 0:\n        return True\n        \n    seen = [[False] * len(board[0]) for _ in board]\n    \n    for row in range(len(board)):\n        for col in range(len(board[0])):\n            if board[row][col] == word[0]:\n                if dfs(row, col, board, word, seen):\n                    return True\n    return False\n    \n    \ndef dfs(row, col, board, word, seen):\n    if len(word) == 0:\n        return True\n        \n    if row < 0 or col < 0 or row >= len(board) or col >= len(board[0]) or seen[row][col] or board[row][col] != word[0]:\n        return False\n        \n    seen[row][col] = True\n    found = (dfs(row + 1, col, board, word[1:], seen) \n        or dfs(row, col + 1, board, word[1:], seen) \n        or dfs(row - 1, col, board, word[1:], seen) \n        or dfs(row, col - 1, board, word[1:], seen))\n    seen[row][col] = False\n    \n    return found", "task_id": 13786}
{"finetuning_prompt": "\"\"\"\nWrite a function to find all numbers divisible by 6 in the given array?\n\"\"\"\n\ndef CheckDivisibility(arr,n):\n", "finetuning_completion": " \r\n    result = list() \r\n    for i in range(n): \r\n        if (arr[i] % 6 == 0): \r\n            result.append(arr[i]) \r\n    return result", "task_id": 13787}
{"finetuning_prompt": "\"\"\"\nGenerate a new array by concatenating the given arrays.\n\"\"\"\n\ndef concat_arrays(arr1,arr2):\n", "finetuning_completion": "\r\n  return arr1 + arr2", "task_id": 13788}
{"finetuning_prompt": "\"\"\"\nCreate a function to take two strings and return a string that combines both.\n\"\"\"\n\ndef combine_strings(string1,string2):\n", "finetuning_completion": "\r\n  return string1 + \" \" + string2", "task_id": 13790}
{"finetuning_prompt": "\"\"\"\nGenerate code to implement a great circle distance from coordinates of latitudes and longitudes.\n\"\"\"\n\nimport math \r\n\r\n# To find the great circle distance \r\ndef great_circle_dis(lat1, long1, lat2, long2):\n", "finetuning_completion": " \r\n\t# to convert degree to radians \r\n\tlat1 = math.radians(lat1) \r\n\tlong1 = math.radians(long1) \r\n\tlat2 = math.radians(lat2) \r\n\tlong2 = math.radians(long2) \r\n\t\t\r\n\t# Haversine formula \r\n\tdlon = long2 - long1 \r\n\tdlat = lat2 - lat1 \r\n\ta = math.pow(math.sin(dlat / 2), 2) + math.cos(lat1) * math.cos(lat2) * math.pow(math.sin(dlon / 2), 2) \r\n\tc = 2 * math.asin(math.sqrt(a)) \r\n\t# Radius of earth in kilometers. Use 3956 for miles \r\n\tr = 6371\r\n\t# calculate the result \r\n\treturn(c * r) \r\n\t\r\nlat1 = 39.2\r\nlong1 = 90.2\r\nlat2 = 39.4\r\nlong2 = 91.4\r\n  \r\ndistance = great_circle_dis(lat1,long1,lat2,long2) \r\nprint(\"The distance between the points is %.2f kilometers\" %distance)", "task_id": 13797}
{"finetuning_prompt": "\"\"\"\nCreate a function to strip all punctuation from a string.\n\"\"\"\n\nimport string\ndef strip_punctuation(s):\n", "finetuning_completion": "\n  return s.translate(str.maketrans('', '', string.punctuation))", "task_id": 13805}
{"finetuning_prompt": "\"\"\"\nCreate a program to edit a given string, such that every odd character is uppercase and every even character is lowercase.\n\"\"\"\n\ndef edit_string(s):\n", "finetuning_completion": " \n    l = len(s) \n    s_edit = \"\" \n  \n    for i in range(l): \n        if i % 2 == 0: \n            s_edit += s[i].lower() \n        else: \n            s_edit += s[i].upper() \n  \n    return s_edit", "task_id": 13809}
{"finetuning_prompt": "\"\"\"\nCreate a python script to find all unique elements in a given list.\n\"\"\"\n\ndef unique_elements(lst):\n", "finetuning_completion": "\r\n    \"\"\"Find all unique elements in a given list.\"\"\"\r\n    unique_list = [] \r\n    for ele in lst: \r\n        if ele not in unique_list: \r\n            unique_list.append(ele) \r\n    return unique_list", "task_id": 13811}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to insert a new element into the given array.\n\"\"\"\n\ndef insert_Element(arr, n, x) :\n", "finetuning_completion": " \n    arr.append(x); \n    for j in range(n,0,-1) : \r\n        arr[j] = arr[j-1] \r\n    arr[0] = x;  \n    return arr", "task_id": 13822}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a list of prime numbers between two integer values.\n\"\"\"\n\ndef prime_numbers(lower_limit, upper_limit):\n", "finetuning_completion": " \r\n\tprime_list = [] \r\n\tfor num in range(lower_limit, upper_limit + 1): \r\n\t\t# check if num is prime \r\n\t\tif num > 1: \r\n\t\t\tfor i in range(2, num): \r\n\t\t\t\tif (num % i) == 0: \r\n\t\t\t\t\tbreak\r\n\t\t\telse: \r\n\t\t\t\tprime_list.append(num) \r\n\treturn prime_list", "task_id": 13823}
{"finetuning_prompt": "\"\"\"\nMarshall the list containing dictionary values into corresponding dictionary form.\n\"\"\"\n\ndef marshall(test_list):\n", "finetuning_completion": "\r\n    new_dict = {}\r\n    for item in test_list:\r\n        for key in item:\r\n            new_dict[key] = item[key]\r\n    return new_dict", "task_id": 13824}
{"finetuning_prompt": "\"\"\"\nMake a program which will demonstrate a basic calculator.\n\"\"\"\n\ndef calculator (operation, num1, num2):\n", "finetuning_completion": " \n  \n\tif (operation == \"add\"): \n\t\treturn num1 + num2 \n\telif (operation == \"subtract\"): \n\t\treturn num1 - num2 \n\telif (operation == \"multiply\"): \n\t\treturn num1 * num2 \n\telif (operation == \"divide\"): \n\t\treturn num1 / num2 \n\telse: \n\t\treturn \"Invalid operation\"", "task_id": 13828}
{"finetuning_prompt": "\"\"\"\nCreate a program to return the sum of the unique numbers in the given sequence.\n\"\"\"\n\ndef sum_unique(test_seq):\n", "finetuning_completion": " \n   res = sum([el for i, el in enumerate(test_seq) if test_seq[:i].count(el) == 0]) \n   return (res)", "task_id": 13836}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes two arrays of integers and returns the largest absolute difference between two elements in the same index position.\n\"\"\"\n\ndef max_difference(list1, list2):\n", "finetuning_completion": "\n    diff = []\n    for i in range(len(list1)):\n        diff.append(abs(list1[i] - list2[i]))\n    return max(diff)", "task_id": 13841}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script to check a given list for a given number.\n\"\"\"\n\ndef check_num(list1, num):\n", "finetuning_completion": " \n  for i in range (len(list1)): \n     if list1[i] == num:\n        return i\n  return -1", "task_id": 13844}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a program to classify the characters into different types.\n\"\"\"\n\ndef classify_chars(test_str):\n", "finetuning_completion": " \n    alpha_list = [c for c in test_str if c.isalpha() ]\n    num_list =[c for c in test_str if c.isdigit()]\n    special_list = [c for c in test_str if not c.isalnum() ]\n    return (alpha_list, num_list, special_list)", "task_id": 13847}
{"finetuning_prompt": "\"\"\"\nCreate a python script to calculate the sum of corresponding elements from two separate lists.\n\"\"\"\n\ndef list_sum(list1,list2):\n", "finetuning_completion": " \r\n    result = [sum(x) for x in zip(list1, list2)]\r\n    return result", "task_id": 13848}
{"finetuning_prompt": "\"\"\"\nCreate a function to search and extract a specific string from within a larger string.\n\"\"\"\n\ndef extractString(long_string,target):\n", "finetuning_completion": " \n \n    if target in long_string: \n        print(\"Target string found\")\n        return long_string[long_string.index(target):]\n    else: \n        print(\"Target string not found\")", "task_id": 13871}
{"finetuning_prompt": "\"\"\"\nWrite a function that finds the most common word in the given string.\n\"\"\"\n\ndef most_Common_Word(string):\n", "finetuning_completion": " \r\n    words = string.split()\r\n    freq_dict = {} \r\n    for word in words: \r\n        if word in freq_dict: \r\n            freq_dict[word] += 1\r\n        else: \r\n            freq_dict[word] = 1\r\n\r\n    max_freq = 0\r\n    for key, value in freq_dict.items(): \r\n        if value > max_freq: \r\n            max_freq = value \r\n            res = key \r\n\r\n    return res", "task_id": 13873}
{"finetuning_prompt": "\"\"\"\nDevelop a program to convert in-game currency to real-world currency.\n\"\"\"\n\ndef convert_to_Real_World_Currency(in_game_coins):\n", "finetuning_completion": " \r\n    conversion_rate = 0.1 \r\n    real_world_currency = in_game_coins * conversion_rate\r\n\r\n    return real_world_currency", "task_id": 13874}
{"finetuning_prompt": "\"\"\"\nWrite a function to integrate a given function using mathematical integration methods.\n\"\"\"\n\ndef integrate(f, a, b):\n", "finetuning_completion": " \r\n    \"\"\"\r\n    The function takes the function f(x), the limits of integration a, b and returns the numerical answer of integration of f(x) from a to b.\r\n    \"\"\"\r\n    dx = 0.00001\r\n    area = 0\r\n    while (a + dx < b):\r\n        area = area + f(a) * dx\r\n        a = a + dx\r\n    return area", "task_id": 13891}
{"finetuning_prompt": "\"\"\"\nCreate a program to input a list of numbers and determine the partition point where the list is split into two sublists such that the sums of the elements of these two sublists are equal.\n\"\"\"\n\ndef findPartition(list1):\n", "finetuning_completion": " \r\n  \r\n    sumList = sum(list1) \r\n    leftSum = list1[0]\r\n    for i in range(1,len(list1)):\r\n        if leftSum == sumList - leftSum - list1[i]: \r\n            return i + 1\r\n        leftSum += list1[i] \r\n    return -1", "task_id": 13899}
{"finetuning_prompt": "\"\"\"\nCreate a program to implement Greedy algorithm to solve knapsack problem.\n\"\"\"\n\ndef knapsack(Values, Weights, MaxWeight):\n", "finetuning_completion": "\n\t\n\t# Calculating value per unit of weight\n\tvals_per_unit = [v/w for v, w in zip(Values, Weights)]\n \n\t# Sorting in descending order of value per unit of weight\n\tsorted_idxs = sorted(range(len(vals_per_unit)), key = lambda x : vals_per_unit[x], reverse = True)\n\t\n\t# Greedy Algorithm\n\tmax_val = 0\n\ti = 0\n\twhile MaxWeight > 0 and i < len(Values):\n\t\t\n\t\t# Calculating max weight to take\n\t\tmax_weight_to_take = min(Weights[sorted_idxs[i]], MaxWeight)\n\t\t\n\t\t# Calculating max Value achievable\n\t\tmax_val += (max_weight_to_take * vals_per_unit[sorted_idxs[i]])\n\t\t\n\t\t# Decrementing max weight\n\t\tMaxWeight -= max_weight_to_take\n\t\ti += 1\n\t\n\treturn max_val\n\nValues = [60, 100, 120] \nWeights = [10, 20, 30] \nMaxWeight = 50\n\nprint (knapsack(Values, Weights, MaxWeight))", "task_id": 13908}
{"finetuning_prompt": "\"\"\"\nDevelop a function to toggle each character in a given string.\n\"\"\"\n\ndef toggleString(string):\n", "finetuning_completion": " \n    toggle = \"\" \r\n    for char in string: \n        if char.islower(): \r\n            toggle += char.upper() \r\n        else: \r\n            toggle += char.lower() \r\n    return toggle", "task_id": 13911}
{"finetuning_prompt": "\"\"\"\nWrite a python program that finds the longest substring without repetitions in a given string.\n\"\"\"\n\ndef longestSubstringWithoutRepeatingChars(str):\n", "finetuning_completion": "  \r\n    str_len = len(str)  \r\n    result = 0 \r\n    i = 0\r\n    j = 0\r\n    visited = [-1] * 256\r\n    \r\n    while j < str_len: \r\n        if visited[ord(str[j])] == -1 or visited[ord(str[j])] < i: \r\n            visited[ord(str[j])] = j \r\n            j += 1\r\n            result = max(result, j - i) \r\n        else: \r\n            i = visited[ord(str[j])] + 1\r\n            visited[ord(str[j])] = j \r\n            j += 1\r\n    return result", "task_id": 13912}
{"finetuning_prompt": "\"\"\"\nEdit the following function to remove the redundant code.\n\"\"\"\n\ndef printData(data):\n", "finetuning_completion": "\n  print(\"The data is\",data)", "task_id": 13920}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes the names of three cities as input and creates a list with those cities sorted by their population.\n\"\"\"\n\ndef sorted_cities(city1, city2, city3):\n", "finetuning_completion": "\n    city_to_population = {\n        'New York' : 8175133,\n        'Los Angeles' : 3792621,\n        'Chicago' : 2695598\n    }\n    cities = [city1, city2, city3]\n    cities.sort(key= lambda x: city_to_population[x])\n    return cities", "task_id": 13924}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, create a new array without any duplicate numbers.\n\"\"\"\n\ndef unique(arr):\n", "finetuning_completion": " \r\n    unique_arr = [] \r\n    for i in range(len(arr)): \r\n        if arr[i] not in unique_arr: \r\n            unique_arr.append(arr[i]) \r\n  \r\n    return unique_arr", "task_id": 13933}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to unzip a list of tuples of form (key, value).\n\"\"\"\n\ndef unzip(lt):\n", "finetuning_completion": "\r\n  keys = []\r\n  values = []\r\n  for (key,value) in lt:\r\n    keys.append(key)\r\n    values.append(value)\r\n\r\n  return (keys,values)", "task_id": 13934}
{"finetuning_prompt": "\"\"\"\nWrite a python code that searches for a specific text pattern in a given source code.\n\"\"\"\n\nimport re\r\ndef search_pattern(code):\n", "finetuning_completion": " \r\n    pattern = re.compile(r'Hello World!') \r\n    res = re.search(pattern,code) \r\n    if res: \r\n        return True\r\n    else: \r\n        return False", "task_id": 13940}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the letters that are shared between two different strings.\n\"\"\"\n\nfrom collections import Counter \r\n  \r\ndef common_letters(a, b):\n", "finetuning_completion": " \r\n    x = Counter(a) \r\n    y = Counter(b) \r\n    commonDict = x & y \r\n    common = sum(commonDict.values()) \r\n    return common\n\nstring_1 = \"Hello World!\" \r\nstring_2 = \"Good Morning!\"\nprint(\"The number of common letters are : \", common_letters(string_1, string_2))", "task_id": 13946}
{"finetuning_prompt": "\"\"\"\nImplement a timeout report in your program.\n\"\"\"\n\nimport signal\r\n  \r\ndef timeout_report(n):\n", "finetuning_completion": "\r\n    def timeout_handler(signum, frame):\r\n        raise Exception(\"Timeout !!!\")\r\n    signal.signal(signal.SIGALRM, timeout_handler)\r\n    signal.alarm(n) # n seconds\r\n    \r\n# sets a timeout report after n seconds", "task_id": 13947}
{"finetuning_prompt": "\"\"\"\nGenerate a function to classify each letter as a consonant or a vowel in a given string.\n\"\"\"\n\ndef classify_letters(string):\n", "finetuning_completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u'] \n    result = []\n    for i in range(len(string)):\n        char = string[i]\n        if char in vowels:\n            result.append([char, 'Vowel'])\n        else:\n            result.append([char, 'Consonant'])\n    return result", "task_id": 13949}
{"finetuning_prompt": "\"\"\"\nConstruct a program to sort the sentence in alphabetical order.\n\"\"\"\n\ndef sort_sentence(sentence):\n", "finetuning_completion": " \n\twords = sentence.split(\" \") \n\twords.sort() \n\treturn \" \".join(words) \n\nprint(sort_sentence(\"Ah, the fool thinks himself wise\"))", "task_id": 13994}
{"finetuning_prompt": "\"\"\"\nBalance the given parentheses string.\n\"\"\"\n\ndef balance_Parentheses(string):\n", "finetuning_completion": " \r\n    s = [] \r\n    for char in string: \r\n  \r\n        if char in ['(', '{', '[']: \r\n            s.append(char) \r\n        else: \r\n            if not s: \r\n                return \"Unbalanced\"\r\n            current_char = s.pop() \r\n            if current_char == '(': \r\n                if char != \")\": \r\n                    return \"Unbalanced\"\r\n            elif current_char == '{': \r\n                if char != \"}\": \r\n                    return \"Unbalanced\"\r\n            elif current_char == '[': \r\n                if char != \"]\": \r\n                    return \"Unbalanced\"\r\n  \r\n    if not s: \r\n        return \"Balanced\"", "task_id": 14000}
{"finetuning_prompt": "\"\"\"\nInsert an item in an ordered list of integers.\n\"\"\"\n\ndef insert_ordered(ordered_list, item):\n", "finetuning_completion": "\n    if item > ordered_list[-1]:\n        ordered_list.append(item)\n    else: \n        i = 0\n        while item >= ordered_list[i]:\n            i += 1\n        ordered_list.insert(i, item)\n    return ordered_list", "task_id": 14007}
{"finetuning_prompt": "\"\"\"\nPerform a selection sort on the given list.\n\"\"\"\n\ndef selection_sort(my_list):\n", "finetuning_completion": "\n    n = len(my_list)\n    for i in range(n):\n        min_idx = i\n        for j in range(i + 1, n):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i] \n    return my_list", "task_id": 14012}
{"finetuning_prompt": "\"\"\"\nWrite a function to delete the given elements from the set.\n\"\"\"\n\ndef delete_elements(s1, elements):\n", "finetuning_completion": "\n    return s1 - set(elements)", "task_id": 14014}
{"finetuning_prompt": "\"\"\"\nCreate a function that accepts an array of numbers, and returns the sum of each of the numbers multiplied by 2.\n\"\"\"\n\ndef multiply_by_two(arr):\n", "finetuning_completion": " \r\n\tsum = 0 \r\n\tfor value in arr: \r\n\t\tsum += value * 2 \r\n\treturn sum", "task_id": 14016}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate the first 10 elements in the Fibonacci sequence.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \n\t#Assuming first and second element are 0 and 1 \n\tfib_list = [0,1] \n\tfor i in range(2, n): \n\t\tfib_list.append(fib_list[i-2]+fib_list[i-1]) \n\n\treturn (fib_list[0:n])", "task_id": 14023}
{"finetuning_prompt": "\"\"\"\nWrite a function to insert a symbol between the given words.\n\"\"\"\n\ndef insert_symbol(text, symbol):\n", "finetuning_completion": " \n\tres = symbol.join(text.split()) \n\treturn (res)", "task_id": 14025}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the most frequent character in the given string from the last two positions.\n\"\"\"\n\ndef get_most_frequent(text):\n", "finetuning_completion": " \n\n\t#Store characters \n\tcharacters = {} \n\n\t# store the last two characters in a variable  \n\tlast_two = text[-2:] \n\t\n\t#populate characters\t\n\tfor char in last_two: \n\t\tif char in characters: \n\t\t\tcharacters[char] += 1\n\t\telse: \n\t\t\tcharacters[char]= 1\n\t\t\t\n\t# Return maximum occurring character \n\tmaximum = 0\n\t\n\tfor char in characters: \n\t\tif characters[char]> maximum: \n\t\t\tmaximum = characters[char] \n\t\t\tmax_char = char \n\t\t\t\n\treturn max_char", "task_id": 14026}
{"finetuning_prompt": "\"\"\"\nDevelop a code to sort the dictionary by name.\n\"\"\"\n\ndef sort_dictionary(dic):\n", "finetuning_completion": "\r\n    lst_temp = list(dic.keys()) # list of names from the dictionary \r\n    lst_temp.sort() # list is sorted according to alphabetical order \r\n    dic_temp = {} # new temporary dictionary\r\n    \r\n    # elements from original dictionary are added to new dictionary \r\n    # according to their alphabetical order \r\n    for name in lst_temp:\r\n        dic_temp[name] = dic[name]\r\n    return(dic_temp)", "task_id": 14031}
{"finetuning_prompt": "\"\"\"\nCreate a program to print list elements as comma-separated values\n\"\"\"\n\ndef print_list(lst):\n", "finetuning_completion": " \r\n    res = \"\"\r\n    for ele in lst:\r\n        res += str(ele) + \", \"\r\n    \r\n    print(res[:-2]) # Remove the last comma at the end", "task_id": 14034}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the rankings of characters by occurrence frequency.\n\"\"\"\n\ndef calculate_character_rankings(text):\n", "finetuning_completion": "\r\n    char_frequency = {}\r\n    for char in text:\r\n        if char not in char_frequency:\r\n            char_frequency[char] = 0\r\n        char_frequency[char] += 1 # count frequency\r\n    sorted_char_freq = sorted(char_frequency.items(), key=lambda x: x[1], reverse=True) # sort by frequency \r\n    ranking = {}\r\n    rank = 1 \r\n    for pair in sorted_char_freq:\r\n        ranking[pair[0]] = rank\r\n        rank += 1\r\n    return ranking", "task_id": 14035}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate results from two separate lists\n\"\"\"\n\ndef generate_result(list_a, list_b):\n", "finetuning_completion": "\r\n    result = []\r\n    for a, b in zip(list_a, list_b):\r\n        result.append(str(a) + str(b)) # concatenate the elements\r\n    return result", "task_id": 14036}
{"finetuning_prompt": "\"\"\"\nGenerate a sorted list from the given dictionary.\n\"\"\"\n\ndef placed_by_value(my_dict):\n", "finetuning_completion": "\n    lst = [(k, my_dict[k]) for k in sorted(my_dict, key=my_dict.get, reverse = True)]\n    return lst", "task_id": 14038}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to print all the paths from the left corner of a given matrix to its right corner.\n\"\"\"\n\ndef printAllPathsUtil(matrix, i, j, m, n, path, pi): \n  \n    # Reached the bottom of the matrix \n    # so we are left with only option to \n    # move right \n    if (i == m - 1): \n        for k in range(j, n): \n            path[pi + k - j] = matrix[i][k] \n  \n        for l in range(pi + n - j): \n            print(path[l],end = \" \") \n        print(\"\") \n        return\n  \n    # Reached the right corner of the matrix \n    # we are left with only the downward movement. \n    if (j == n - 1): \n        for k in range(i, m): \n            path[pi + k - i] = matrix[k][j] \n          \n        for l in range(pi + m - i): \n            print(path[l],end = \" \") \n        print(\"\") \n        return\n  \n    # Add the current cell to the path being generated \n    path[pi] = matrix[i][j] \n  \n    # Print all the paths that are possible after moving down \n    printAllPathsUtil(matrix, i + 1, j, m, n, path, pi + 1) \n  \n    # Print all the paths that are possible after moving right \n    printAllPathsUtil(matrix, i, j + 1, m, n, path, pi + 1) \n\ndef printAllPaths(matrix, m, n):\n", "finetuning_completion": " \n  \n    # Reached the bottom of the matrix \n    # so we are left with only option to \n    # move right \n    if (i == m - 1): \n        for k in range(j, n): \n            path[pi + k - j] = matrix[i][k] \n  \n        for l in range(pi + n - j): \n            print(path[l],end = \" \") \n        print(\"\") \n        return\n  \n    # Reached the right corner of the matrix \n    # we are left with only the downward movement. \n    if (j == n - 1): \n        for k in range(i, m): \n            path[pi + k - i] = matrix[k][j] \n          \n        for l in range(pi + m - i): \n            print(path[l],end = \" \") \n        print(\"\") \n        return\n  \n    # Add the current cell to the path being generated \n    path[pi] = matrix[i][j] \n  \n    # Print all the paths that are possible after moving down \n    printAllPathsUtil(matrix, i + 1, j, m, n, path, pi + 1) \n  \n    # Print all the paths that are possible after moving right \n    printAllPathsUtil(matrix, i, j + 1, m, n, path, pi + 1) \n\ndef printAllPaths(matrix, m, n): \n    path = [None] * (m + n) \n    printAllPathsUtil(matrix, 0, 0, m, n, path, 0)", "task_id": 14041}
{"finetuning_prompt": "\"\"\"\nWrite a Python function to filter out the given dictionary by the given keys.\n\"\"\"\n\ndef filter_dict(test_dict, keys):\n", "finetuning_completion": "\n    return { key:test_dict[key] for key in test_dict.keys() & keys }", "task_id": 14042}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to add an element to a given set.\n\"\"\"\n\ndef add_item(test_set, add_ele):\n", "finetuning_completion": "\n  test_set.add(add_ele)\n  return test_set", "task_id": 14043}
{"finetuning_prompt": "\"\"\"\nWrite a function to select various data points from an array.\n\"\"\"\n\ndef selectDataPoints(arr, start, gap):\n", "finetuning_completion": " \n    res = [] \n    for i in range(start, len(arr), gap): \n        res.append(arr[i]) \n      \n    return (res)", "task_id": 14053}
{"finetuning_prompt": "\"\"\"\nRevisit the function you defined in question 16 and use vectorization method to optimize it.\n\"\"\"\n\ndef selectDataPoints(arr, start, gap):\n", "finetuning_completion": " \n    return arr[start::gap]", "task_id": 14054}
{"finetuning_prompt": "\"\"\"\nCreate a code to filter a list of numbers, such that only elements above a given threshold remain.\n\"\"\"\n\ndef filter_list(numbers_list, threshold):\n", "finetuning_completion": "\r\n  result = [x for x in numbers_list if x > threshold]\r\n  return result", "task_id": 14058}
{"finetuning_prompt": "\"\"\"\nPrint out the longest word in a given string using python.\n\"\"\"\n\ndef longest_word(string):\n", "finetuning_completion": "\r\n    words = string.split(\" \")\r\n    longest_word = \"\"\r\n    longest_length = 0\r\n    for word in words:\r\n        if len(word) > longest_length:\r\n            longest_length = len(word)\r\n            longest_word = word\r\n\r\n    return longest_word", "task_id": 14066}
{"finetuning_prompt": "\"\"\"\nMake a function to check if a given string is palindrome or not without using inbuilt reverse functions.\n\"\"\"\n\ndef isPalindrome(value):\n", "finetuning_completion": "  \r\n        temp = value  \r\n        rev = 0    \r\n        while(temp > 0):    \r\n            dig = temp % 10    \r\n            rev = rev * 10 + dig    \r\n            temp = temp // 10    \r\n        if value == rev:    \r\n            return True\r\n        else:    \r\n            return False", "task_id": 14068}
{"finetuning_prompt": "\"\"\"\nJoin two given strings and print the output.\n\"\"\"\n\ndef join_strings(str1, str2):\n", "finetuning_completion": " \r\n    return str1 + str2", "task_id": 14071}
{"finetuning_prompt": "\"\"\"\nWrite a function to return all possible permutations of a given number of items.\n\"\"\"\n\ndef permutation(items):\n", "finetuning_completion": " \r\n    n = len(items) \r\n    if n==0: \r\n        return [] \r\n    if n==1: \r\n        return [items] \r\n    l = [] # empty list that will store current permutation \r\n    for i in range(n): \r\n       m = items[i] \r\n       remaining_items = items[:i] + items[i+1:] \r\n       for p in permutation(remaining_items): \r\n           l.append([m] + p) \r\n    return l", "task_id": 14073}
{"finetuning_prompt": "\"\"\"\nWrite a code to create a simple calculator with two parameters.\n\"\"\"\n\ndef calculator(x, y):\n", "finetuning_completion": "\r\n    sum = x + y\r\n    diff = x - y\r\n    product = x * y\r\n    quotient = x / y\r\n\r\n    return (sum, diff, product, quotient)", "task_id": 14078}
{"finetuning_prompt": "\"\"\"\nGenerate a code to determine the area of an L-shape with inputted width and height\n\"\"\"\n\ndef lshape_area(width, height):\n", "finetuning_completion": " \r\n    return (width * height) + ((height/2) * (width/2))", "task_id": 14081}
{"finetuning_prompt": "\"\"\"\nEdit the following python code to output the squares of all numbers smaller than a given number (inputted)\n\"\"\"\n\ndef square_numbers(num):\n", "finetuning_completion": "\n    for i in range(num):\n        if i < num:\n            print(i**2)", "task_id": 14082}
{"finetuning_prompt": "\"\"\"\nCreate a python script to check whether a string contains any vowels or consonants.\n\"\"\"\n\ndef check_vowel_consonant(s):\n", "finetuning_completion": "\n    vowel = 0\n    consonant = 0\n    for x in s:\n        if (x == 'a' or x == 'e' or x == 'i' or x == 'o' or x =='u'): \n            vowel = 1\n        else: \n            consonant = 1\n    # will return true if it contains at least one consonant and one vowel\n    return vowel and consonant", "task_id": 14083}
{"finetuning_prompt": "\"\"\"\nGenerate an HTML table in python from a dataset.\n\"\"\"\n\ndef generateHTMLTable(data):\n", "finetuning_completion": "\r\n  html_string = '<table border=\"1px\">\\n'\r\n  for row in data:\r\n    html_string += '<tr>\\n'\r\n    for col in row:\r\n      html_string += '<td>' + str(col)  + '</td>\\n'\r\n      \r\n    html_string += '</tr>\\n'\r\n   \r\n  html_string += '</table>'\r\n  return html_string", "task_id": 14091}
{"finetuning_prompt": "\"\"\"\nCreate a program to print the items of a sequence with a word before each item in the list.\n\"\"\"\n\ndef print_list_with_words(lst):\n", "finetuning_completion": "\r\n    for item in lst:\r\n        print('The item is', item)", "task_id": 14095}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute basic statistics of a given list of numbers, such as mean, median, mode, standard deviation, variance, and range.\n\"\"\"\n\ndef stats(numbers):\n", "finetuning_completion": "\n    results = {}\n    n = len(numbers)\n    mean = sum(numbers)/n\n    results['mean'] = mean\n    median = (numbers[(n-1)//2] + numbers[n//2])/2 \n    results['median'] = median\n    try: \n        mode = max(set(numbers), key=numbers.count) \n    except:\n        mode = \"No mode\"\n    results['mode'] = mode\n    variance = sum((x-mean)**2 for x in numbers) / (n-1)\n    results['variance'] = variance\n    sd = variance**0.5\n    results['standard deviation'] = sd\n    rng = max(numbers)-min(numbers)\n    results['range'] = rng\n    return results", "task_id": 14098}
{"finetuning_prompt": "\"\"\"\nCreate a program to sort a given list of integers based on user's preference: ascending or descending order.\n\"\"\"\n\ndef sort_nums(nums,key):\n", "finetuning_completion": "\r\n    if key == 'ascending':\r\n        nums.sort()\r\n    elif key == 'descending':\r\n        nums.sort(reverse=True)\r\n    return nums", "task_id": 14099}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate an output string from a given input string in which every other character is doubled.\n\"\"\"\n\ndef double_string(string):\n", "finetuning_completion": "\r\n  result = \"\"\r\n  for i,char in enumerate(string):\r\n    if i % 2 == 0:\r\n      result += char * 2\r\n    else:\r\n      result += char\r\n  return result", "task_id": 14100}
{"finetuning_prompt": "\"\"\"\nCreate a function to detect anagrams in two comma separated strings.\n\"\"\"\n\ndef is_anagram(str1, str2):\n", "finetuning_completion": " \r\n    a = sorted(str1.replace(',', '').lower()) \r\n    b = sorted(str2.replace(',', '').lower()) \r\n    if a == b: \r\n        return True\r\n    else: \r\n        return False", "task_id": 14102}
{"finetuning_prompt": "\"\"\"\nClassify a given input in three classes: Positive, Negative, Neutral.\n\"\"\"\n\ndef classifier(string):\n", "finetuning_completion": "\r\n    if (string.find('good') != -1 or string.find('great') != -1):\r\n        return 'Positive'\r\n    elif (string.find('bad') != -1 or string.find('horrible') != -1):\r\n        return 'Negative'\r\n    else:\r\n        return 'Neutral'", "task_id": 14103}
{"finetuning_prompt": "\"\"\"\nCreate a function to capture the frequency distribution of a given text.\n\"\"\"\n\ndef frequency_distribution(text):\n", "finetuning_completion": "\r\n    frequency = {} \r\n    for char in text: \r\n        if char in frequency: \r\n            frequency[char] += 1\r\n        else: \r\n            frequency[char] = 1\r\n    return frequency", "task_id": 14108}
{"finetuning_prompt": "\"\"\"\nGenerate a function which collects elements with even indices from a given list.\n\"\"\"\n\ndef extract_even_indices(num_list):\n", "finetuning_completion": "\r\n    result_list = []\r\n    for i in range(0, len(num_list), 2): \r\n        result_list.append(num_list[i]) \r\n    return result_list", "task_id": 14109}
{"finetuning_prompt": "\"\"\"\nCraft an algorithm to classify a given list into even and odd numbers.\n\"\"\"\n\ndef classify_even_odd(num_list):\n", "finetuning_completion": " \r\n    evenList = [] \r\n    oddList = []\r\n    for num in num_list: \r\n        if (num % 2 == 0): \r\n            evenList.append(num) \r\n        else: \r\n            oddList.append(num) \r\n    return evenList, oddList", "task_id": 14110}
{"finetuning_prompt": "\"\"\"\nWrite a function that converts a given set of strings into a dictionary such that the key is the first letter in the string and the value is a list of possible strings that start with that letter.\n\"\"\"\n\ndef convert_strings(my_strings):\n", "finetuning_completion": " \r\n    dict1 = {} \r\n    for string in my_strings: \r\n        first_letter = string[0] \r\n  \r\n        if first_letter not in dict1: \r\n            dict1[first_letter] = [string] \r\n        else: \r\n            dict1[first_letter].append(string) \r\n  \r\n    return dict1", "task_id": 14113}
{"finetuning_prompt": "\"\"\"\nGiven a set of integers and a target sum, write a Python code to check if two of those numbers add up to the target sum.\n\"\"\"\n\ndef target_sum(s,target_sum):\n", "finetuning_completion": "\n    seen = set()\n    for i in s:\n        if target_sum - i in seen:\n            return True\n        seen.add(i)\n    return False", "task_id": 14114}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the number of substrings that contain the same character at least twice.\n\"\"\"\n\ndef count_substr(str):\n", "finetuning_completion": " \r\n  \r\n    # Keep track of all substrings \r\n    substr = set() \r\n\r\n    # Consider all substrings beginning \r\n    # with str[i] \r\n    for i in range(len(str)): \r\n        for j in range(i + 1, len(str) + 1): \r\n            sub_str = str[i : j] \r\n            if len(sub_str) == len(set(sub_str)): \r\n                continue\r\n            else: \r\n                substr.add(sub_str) \r\n\r\n    return len(substr)", "task_id": 14117}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sort the elements of an array according to the length of their longest common prefix.\n\"\"\"\n\ndef longest_common_prefix(arr):\n", "finetuning_completion": "  \r\n    arr.sort(key=len) \r\n    min_length = len(arr[0]) \r\n\r\n    result = \"\" \r\n    for i in range (min_length): \r\n        current = arr[0][i] \r\n\r\n        for j in range (1, len(arr)): \r\n            if arr[j][i] != current: \r\n                return result \r\n        result += current \r\n    return result", "task_id": 14119}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate total batting average for a player.\n\"\"\"\n\ndef battingAvg(AB,H):\n", "finetuning_completion": "\r\n    return(round((H*100)/AB,2))\r\nprint(battingAvg(510,128))", "task_id": 14122}
{"finetuning_prompt": "\"\"\"\nCreate a program for automated sentence completion.\n\"\"\"\n\ndef sentence_completion(sentence1, sentence2):\n", "finetuning_completion": " \r\n    words1 = sentence1.split(' ') \r\n    words2 = sentence2.split(' ') \r\n    result = []\r\n    for word1 in words1: \r\n        if word1 in words2: \r\n            result.append(word1) \r\n        else: \r\n            result.append('**') \r\n    return ' '.join(result)", "task_id": 14124}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate a given number's factorial using recursion.\n\"\"\"\n\ndef factorial(num):\n", "finetuning_completion": " \r\n    if num == 0: \r\n        return 1 \r\n    else: \r\n        return num * factorial(num-1)", "task_id": 14125}
{"finetuning_prompt": "\"\"\"\nCreate a program to convert full words into their abbreviation.\n\"\"\"\n\ndef abbreviate_words(sentence):\n", "finetuning_completion": " \n  words = sentence.split(\" \") \n  res = '' \n  for w in words: \n    res += w[0].upper()\n  return (res)", "task_id": 14126}
{"finetuning_prompt": "\"\"\"\nDevise an algorithm to arrange the given characters in alphabetical order?\n\"\"\"\n\ndef alpha_arrange(chars):\n", "finetuning_completion": "\n  # Sort the characters\n  chars.sort() \n  \n  # Create an empty list\n  arr = [] \n  \n  #Loop through the characters\n  for char in chars:\n    # Append the character at the end of the list\n    arr.append(char) \n  \n  return arr", "task_id": 14131}
{"finetuning_prompt": "\"\"\"\nGenerate a list of all even numbers in the range (1, 20).\n\"\"\"\n\ndef even_nums():\n", "finetuning_completion": "\r\n    return [i for i in range(1, 20) if i % 2 == 0]", "task_id": 14132}
{"finetuning_prompt": "\"\"\"\nEdit the following code so that it records the position of the lowest number.\n\"\"\"\n\ndef find_lowest_num(arr):\n", "finetuning_completion": " \r\n    lowest_num = arr[0]\r\n    lowest_index = 0\r\n  \r\n    for i in range(1, len(arr)): \r\n        if arr[i] < lowest_num: \r\n            lowest_num = arr[i]\r\n            lowest_index = i\r\n  \r\n    return lowest_index", "task_id": 14133}
{"finetuning_prompt": "\"\"\"\nWrite a python code for a bubble sort algorithm to sort the given list.\n\"\"\"\n\ndef bubble_sort(arr):\n", "finetuning_completion": "\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr)-i-1):\r\n            if arr[j]>arr[j+1]:\r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n    return arr", "task_id": 14134}
{"finetuning_prompt": "\"\"\"\nCreate a code to perform mathematical operations on two given complex numbers.\n\"\"\"\n\ndef math_complex_num(a,b):\n", "finetuning_completion": " \n    \n    \n    # addition \n    print(\"Addition is\", a+b)\n    \n    # subtraction\n    print(\"Subtraction is\", a-b)\n    \n    # multiplication\n    print(\"Multiplication is\", a*b)\n    \n    # division\n    print(\"Division is\", a/b)", "task_id": 14138}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to implement a list in which each element is a pair of two integers and design an algorithm to calculate their sum.\n\"\"\"\n\ndef sum_pair_in_list(n_list):\n", "finetuning_completion": " \r\n    # Initialize result \r\n    result = 0\r\n  \r\n    # Iterate through every pair \r\n    for pair in n_list: \r\n        # Add first and second element \r\n        result = result + (pair[0] + pair[1])\r\n  \r\n    return result", "task_id": 14139}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to rotate a given array by k positions in the right direction.\n\"\"\"\n\ndef rotate_array(arr, k):\n", "finetuning_completion": "\r\n    n = len(arr)\r\n    result = [0] * n\r\n    for i in range(n): \r\n        new_position = (i + (k % n)) % n\r\n        result[new_position] = arr[i]\r\n    return result", "task_id": 14140}
{"finetuning_prompt": "\"\"\"\nRegardless of the input data structure, write a Python program to remove duplicate items from a list.\n\"\"\"\n\ndef remove_duplicates(list1):\n", "finetuning_completion": " \r\n    uniq_list = [] \r\n    for x in list1: \r\n        if x not in uniq_list: \r\n            uniq_list.append(x) \r\n    return uniq_list", "task_id": 14143}
{"finetuning_prompt": "\"\"\"\nGenerate a function to check whether a string has any number.\n\"\"\"\n\ndef chk_string_num(string):\n", "finetuning_completion": " \r\n    count = 0\r\n    n = len(string) \r\n    for i in range(0, n): \r\n        if (string[i] >= '0' and string[i] <= '9'): \r\n            count = 1\r\n\r\n    if (count == 0): \r\n        return 'No numbers'\r\n    else: \r\n        return 'String contains number'", "task_id": 14148}
{"finetuning_prompt": "\"\"\"\nWrite a python program to create a decorator that counts and prints the number of times a function has been executed.\n\"\"\"\n\ndef counter_decorator(func):\n", "finetuning_completion": " \r\n  \r\n    def inner(*args, **kwargs): \r\n        inner.calls += 1\r\n        print(\"{0} has been called {1} times\".format\r\n              (func.__name__, inner.calls)) \r\n  \r\n        return func(*args, **kwargs) \r\n    inner.calls = 0\r\n  \r\n    return inner", "task_id": 14152}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm which takes an array of strings and returns a new array of words separated by hyphens (-).\n\"\"\"\n\ndef hyphen_separator(words):\n", "finetuning_completion": "\n    result = []\r\n    for word in words:\n        result.append('-'.join(word))\r\n    return result", "task_id": 14164}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate all time-series data points and their corresponding values.\n\"\"\"\n\ndef generate_time_series(arr):\n", "finetuning_completion": " \n    result_list = [] \n    for i, num in enumerate(arr): \n        item = (i+1, num) \n        result_list.append(item) \n    return result_list", "task_id": 14166}
{"finetuning_prompt": "\"\"\"\nFind the common elements in the given two lists using sets.\n\"\"\"\n\ndef commonElements(list1, list2):\n", "finetuning_completion": " \r\n\treturn list(set(list1) & set(list2)) \r\n\t\r\nlist1 = [1,3,4,5,62,2]\r\nlist2 = [4,2,6,8,7]\r\nprint(commonElements(list1, list2))", "task_id": 14169}
{"finetuning_prompt": "\"\"\"\nFind two numbers which add up to the given target number using two-pointer technique.\n\"\"\"\n\ndef twoSum(list, target):\n", "finetuning_completion": " \n\ti, j = 0, len(list) - 1\n\t\n\twhile i < j:\n\t\tsum = list[i] + list[j]\n\t\t\n\t\tif sum == target: \n\t\t\treturn (i, j) \n\n\t\tif sum > target: \n\t\t\tj -= 1\n\t\telse: \n\t\t\ti += 1\n\t\n\treturn (None, None)\n\ntarget = 16\nlist = [2, 5, 6, 9, 12]\nprint(twoSum(list, target))", "task_id": 14171}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to print the items in a specified list after a specified number of indices.\n\"\"\"\n\ndef print_spec_list(my_list, index):\n", "finetuning_completion": " \r\n    print(my_list[index:])", "task_id": 14188}
{"finetuning_prompt": "\"\"\"\nSort a list of numbers in O(n log n) time complexity.\n\"\"\"\n\ndef merge_sort(lst):\n", "finetuning_completion": "\r\n    if len(lst) > 1:\r\n        mid = len(lst) // 2\r\n        L = lst[:mid]\r\n        R = lst[mid:]\r\n        merge_sort(L)\r\n        merge_sort(R)\r\n        i = j = k = 0\r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]:\r\n                lst[k] = L[i]\r\n                i += 1\r\n            else:\r\n                lst[k] = R[j]\r\n                j += 1\r\n            k += 1\r\n        while i < len(L):\r\n            lst[k] = L[i]\r\n            i += 1\r\n            k += 1\r\n        while j < len(R):\r\n            lst[k] = R[j]\r\n            j += 1\r\n            k += 1\r\n        return lst", "task_id": 14189}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that can predict the stock returns.\n\"\"\"\n\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef predict_returns(X, y):\n", "finetuning_completion": "\r\n    model = LinearRegression().fit(X, y)\r\n    return model.predict(X)", "task_id": 14191}
{"finetuning_prompt": "\"\"\"\nWrite a function to categorize the items in a given array based on a given category.\n\"\"\"\n\ndef categorize_items(items, category):\n", "finetuning_completion": " \r\n # Create an empty list to store the categorized items \r\n categorized_items = []\r\n \r\n # Iterate through the items \r\n for item in items: \r\n  # Append the item with its category \r\n  categorized_items.append({'item': item, 'category': category}) \r\n  \r\n # Return the categorized items \r\n return categorized_items", "task_id": 14196}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given list of dictionaries into an array of their corresponding values.\n\"\"\"\n\ndef convert_dictionaries_to_array(dictionaries):\n", "finetuning_completion": " \r\n # Initialize an empty array \r\n output = []\r\n \r\n # Iterate over each dictionary \r\n for dict in dictionaries:\r\n  # Extract the values and append them to the output array\r\n  output.extend(list(dict.values()))\r\n  \r\n # Return the output array \r\n return output", "task_id": 14197}
{"finetuning_prompt": "\"\"\"\nWrite a function to search for a given word in a given array of strings and return the corresponding index if the word is found.\n\"\"\"\n\ndef search_string(strings, query):\n", "finetuning_completion": " \r\n # Initialize the index to be -1, indicating the element is not found \r\n index = -1 \r\n \r\n # Iterate over all the strings in the array \r\n for i,string in enumerate(strings): \r\n  # If the element is found, update the index \r\n  if string == query: \r\n   index = i \r\n  \r\n # Return the index \r\n return index", "task_id": 14198}
{"finetuning_prompt": "\"\"\"\nWrite a function to add a given text to an existing string.\n\"\"\"\n\ndef add_text(text1, text2):\n", "finetuning_completion": " \r\n # Concatenate the two strings \r\n output = text1 + ' ' + text2 \r\n \r\n # Return the output \r\n return output", "task_id": 14199}
{"finetuning_prompt": "\"\"\"\nGenerate a list which contains the absolute difference between two numbers in a given list.\n\"\"\"\n\n#Calculate the absolute difference \r\ndef absolute_Difference(list):\n", "finetuning_completion": " \r\n    abs_diff = [abs(list[i] - list[i + 1]) \r\n            for i in range(len(list) - 1)] \r\n    return abs_diff \r\n#Driver Code \r\nlist = [2, 5]\r\nprint(absolute_Difference(list)) \n# Output: [3]", "task_id": 14201}
{"finetuning_prompt": "\"\"\"\nWrite a code to predict the output of a given programming problem, when the given input values are provided.\n\"\"\"\n\ndef predict_output(n1, n2, n3):\n", "finetuning_completion": " \n    return n1*n2 + n3 \r\n    \r\n# Driver Code \r\nn1 = 2\r\nn2 = 3\r\nn3 = 3\r\noutput = predict_output(n1, n2, n3) \r\nprint(output) \r\n# Output: 9", "task_id": 14204}
{"finetuning_prompt": "\"\"\"\nDesign a program that checks if an array has any duplicate elements.\n\"\"\"\n\ndef checkDuplicates(a):\n", "finetuning_completion": "\n  seen = set() \n  for i in a: \n      if i in seen:\n        return True \n      seen.add(i) \n  return False", "task_id": 14210}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm that finds the minimum number and its index in a given unsorted array.\n\"\"\"\n\ndef min_Index(arr):\n", "finetuning_completion": " \n  \n    # Initialize min value \n    min_val = arr[0] \n    min_idx = 0\n  \n    # Traverse array elements \n    # from second and compare \n    # every element with current  \n    # min, if element is smaller  \n    # than it then update the  \n    # min_val and its index \n    for i in range(1, len(arr)): \n        if arr[i] < min_val: \n            min_val = arr[i] \n            min_idx = i\n  \n    return [min_idx, min_val]", "task_id": 14211}
{"finetuning_prompt": "\"\"\"\nDesign a code to search for an item in an array and return its index.\n\"\"\"\n\ndef search_list(list, item):\n", "finetuning_completion": " \n    for index in range(len(list)):\n        if list[index] == item:\n            return index\n    return None", "task_id": 14219}
{"finetuning_prompt": "\"\"\"\nOptimize an existing code to find the maximum and minimum values in a given array.\n\"\"\"\n\ndef minMax(arr):\n", "finetuning_completion": " \r\n    # Initialize a max and min variables. \r\n    min = arr[0] \r\n    max = arr[0]\r\n      \r\n    # Iterate through the array and update min and max variable. \r\n    for i in range(1, len(arr)): \r\n        if arr[i] > max : \r\n            max = arr[i] \r\n        if arr[i] < min : \r\n            min = arr[i] \r\n          \r\n    return [min, max]", "task_id": 14223}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes a list of names as input, then orders them alphabetically, and prints the list.\n\"\"\"\n\ndef alphabetically_order_list(list_names):\n", "finetuning_completion": "\r\n    list_names.sort()\r\n    for item in list_names:\r\n        print(item)", "task_id": 14239}
{"finetuning_prompt": "\"\"\"\nWrite a code to reverse a string by words.\n\"\"\"\n\ndef reverse_words(str):\n", "finetuning_completion": " \r\n    ans = \"\" \r\n  \r\n    i = len(str) -1 \r\n    while i>= 0: \r\n  \r\n        if str[i] == ' ': \r\n            ans += ' '\r\n            i -= 1\r\n            continue\r\n        j = i \r\n        while j >= 0 and str[j] != ' ': \r\n            j -= 1 \r\n        ans += str[j+1:i+1]\r\n        i = j \r\n    return ans", "task_id": 14241}
{"finetuning_prompt": "\"\"\"\nCreate a function to generate an HTML table with a list of items.\n\"\"\"\n\ndef create_table(list):\n", "finetuning_completion": "\r\n  html_table = '<table> \\n'\r\n  for item in list:\r\n    html_table+=\"<tr><td>\"+item+\"</td></tr>\\n\"\r\n  html_table += '</table>'\r\n  return html_table", "task_id": 14243}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the string with the most anagrams in a given list of strings.\n\"\"\"\n\ndef most_anagrams(my_list):\n", "finetuning_completion": "\n  # build a dictionary of words and their anagrams\n    anagram_dict = dict()\n    for w in my_list:\n        s = ''.join(sorted(w))\n        anagram_dict[s] = anagram_dict.get(s, []) + [w]\n  # find the longest list of anagrams\n    max_anagrams = max(anagram_dict.values(), key=len)\n    return max_anagrams[0]", "task_id": 14260}
{"finetuning_prompt": "\"\"\"\nCreate a Python script for spider web client-side validation.\n\"\"\"\n\nimport re\r\ndef validate_client_side(data):\n", "finetuning_completion": "\r\n    if not data:\r\n        print('Please fill the form first')\r\n        return False\r\n    \r\n    patterns = {\r\n        \"username\": r'^[A-Za-z0-9_-]{3,20}',\r\n        \"password\": r'^[A-Za-z0-9-]{6,20}',\r\n        \"name\": r'[a-zA-Z]{2,20}',\r\n        \"email\": r'^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$'\r\n    }\r\n    for key in patterns:\r\n        pattern = patterns[key]\r\n        if key in data and re.search(pattern, data[key]) is None:\r\n            print(f'Invalid {key}')\r\n            return False\r\n    print('Validation successful')\r\n    return True", "task_id": 14261}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to partition a given list into two lists based on an element value.\n\"\"\"\n\ndef partition(my_list, n):\n", "finetuning_completion": "\n    low_list = [x for x in my_list if x < n]\r\n    high_list = [x for x in my_list if x >= n]\r\n    return low_list, high_list", "task_id": 14262}
{"finetuning_prompt": "\"\"\"\nConstruct a query to search a series of words in a string.\n\"\"\"\n\ndef SearchWords(string, words):\n", "finetuning_completion": " \r\n    res = [] \r\n  \r\n    for word in words: \r\n        if word in string: \r\n            res.append(word) \r\n  \r\n    return res", "task_id": 14272}
{"finetuning_prompt": "\"\"\"\nConstruct a function to calculate the median of three numbers, given in any order.\n\"\"\"\n\ndef medianOfThree(Nums):\n", "finetuning_completion": " \n    Nums = sorted(Nums) \n  \n    if len(Nums) % 2 == 0: \r\n        first = int(len(Nums) / 2) \r\n        second = int(len(Nums) / 2- 1) \r\n        median = (Nums[first]+Nums[second]) / 2\r\n    else: \r\n        median = Nums[len(Nums) // 2] \r\n    return median", "task_id": 14273}
{"finetuning_prompt": "\"\"\"\nSort the given array of strings in descending order with the help of merge sort algorithm.\n\"\"\"\n\ndef merge_sort(arr):\n", "finetuning_completion": " \r\n    if len(arr) <= 1:\r\n        return arr\r\n    mid = len(arr) // 2\r\n    left = merge_sort(arr[:mid]) \r\n    right = merge_sort(arr[mid:]) \r\n  \r\n    return merge(left, right) \r\n  \r\ndef merge(left, right): \r\n  \r\n    result = [] \r\n  \r\n    while len(left) > 0 and len(right) > 0: \r\n        if left[0].lower() > right[0].lower(): \r\n            result.append(left[0]) \r\n            left.pop(0) \r\n        else: \r\n            result.append(right[0]) \r\n            right.pop(0) \r\n  \r\n    for i in left: \r\n        result.append(i) \r\n    for i in right: \r\n        result.append(i) \r\n  \r\n    return result", "task_id": 14278}
{"finetuning_prompt": "\"\"\"\nDevelop a function to count the frequency of two-word phrases from a given string.\n\"\"\"\n\ndef count_phrases(text):\n", "finetuning_completion": " \r\n    words = text.split(' ') \r\n    phrase_dict = {} \r\n    for i in range(len(words) - 1): \n        phrase = ' '.join(words[i : i + 2]) \r\n        if phrase in phrase_dict: \r\n            phrase_dict[phrase] += 1\r\n        else: \r\n            phrase_dict[phrase] = 1\r\n  \r\n    return phrase_dict", "task_id": 14282}
{"finetuning_prompt": "\"\"\"\nUpdate the given matrix by filtering out outliers based on Median-Absolute-Deviation(MAD).\n\"\"\"\n\nimport numpy as np\r\n\r\ndef filter_outliers_MAD(matrix):\n", "finetuning_completion": "\r\n    med = np.median(matrix)\r\n    mad = np.median(np.abs(matrix - med))\r\n    \r\n    upper_bound = med + 2*mad\r\n    lower_bound = med - 2*mad\r\n    return np.where((matrix < lower_bound) | (matrix > upper_bound),  med, matrix)", "task_id": 14283}
{"finetuning_prompt": "\"\"\"\nCreate a program to expand a given string by replacing all occurences of '&' with the given charcter.\n\"\"\"\n\ndef expand_str(s, c):\n", "finetuning_completion": " \n    t = \"\" \r\n  \r\n    for i in s: \r\n        if i == '&': \r\n            t = t + c \r\n        else: \r\n            t = t + i \n  \r\n    return t", "task_id": 14286}
{"finetuning_prompt": "\"\"\"\nWrite a code to identify each character in a string and then print its ascii code.\n\"\"\"\n\ndef generate_codes(str):\n", "finetuning_completion": "\n     res = []\n     for char in str:\n         res.append(ord(char))\n     return res", "task_id": 14290}
{"finetuning_prompt": "\"\"\"\nWrite a routine to identify and remove all duplicate entries in a specified 2D array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \r\n    temp = [] \r\n    for i in range(len(arr)): \r\n        for j in range(len(arr[i])): \r\n            if arr[i][j] not in temp: \r\n                temp.append(arr[i][j]) \r\n    return [[x for x in row if x in temp]  \r\n                for row in arr]", "task_id": 14307}
{"finetuning_prompt": "\"\"\"\nCreate a program to remove the specified characters from a given string using regular expressions.\n\"\"\"\n\nimport re\r\ndef remove_char(s,remove):\n", "finetuning_completion": " \r\n    regex = re.compile('[%s]' % re.escape(''.join(remove))) \r\n    return regex.sub('', s)", "task_id": 14310}
{"finetuning_prompt": "\"\"\"\nCreate a program that outputs the nth row of Pascal's Triangle.\n\"\"\"\n\ndef pascal_row(n):\n", "finetuning_completion": "\r\n    if n == 0:\r\n        return [1]\r\n    current_row = [1]\r\n    for i in range(1,n):\r\n        previous_row = current_row\r\n        current_row = [1]\r\n        for j in range(1,i):\r\n            next_number = previous_row[j] + previous_row[j-1]\r\n            current_row.append(next_number)\r\n        current_row.append(1)\r\n    return current_row\r\n  \r\nprint(pascal_row(6))", "task_id": 14316}
{"finetuning_prompt": "\"\"\"\nGenerate a program for factorial computation.\n\"\"\"\n\ndef factorial(x):\n", "finetuning_completion": " \r\n    if x == 0: \r\n        return 1 \r\n    return x * factorial(x - 1);", "task_id": 14320}
{"finetuning_prompt": "\"\"\"\nGenerate code to print out all numbers between a given range.\n\"\"\"\n\ndef print_range(lowerlimit, upperlimit):\n", "finetuning_completion": " \r\n  for i in range(lowerlimit, upperlimit+1):  \r\n    print (i)", "task_id": 14326}
{"finetuning_prompt": "\"\"\"\nWrite a Python program toEdit a given user input string .\n\"\"\"\n\ndef edit_string(input):\n", "finetuning_completion": " \n  return input.replace(\"example\", \"Sample\")", "task_id": 14329}
{"finetuning_prompt": "\"\"\"\nCreate a program to print all natural numbers in reverse (from n to 1).\n\"\"\"\n\ndef print_reverse(number):\n", "finetuning_completion": "\r\n  for i in range(number, 0, -1): \r\n    print(i, end=\" \")", "task_id": 14340}
{"finetuning_prompt": "\"\"\"\nCreate a code to form a zero matrix from given input matrix.\n\"\"\"\n\ndef zero_matrix(matrix):\n", "finetuning_completion": " \n  row = [False] * len(matrix) \n  col = [False] * len(matrix[0]) \n  # Store the row and column index with \n  # value 0 \n  for i in range(0, len(matrix)): \n    for j in range(0, len(matrix[0])): \n      if (matrix[i][j] == 0): \n        row[i] = True\n        col[j] = True\n  # Nullify rows \n  for i in range(0, len(row)): \n    if row[i]: \n      nullify_row(matrix, i) \n  # Nullify columns \n  for j in range(0, len(col)): \n    if col[j]: \n      nullify_column(matrix, j) \n  return matrix \n\n# Set arr[i][j] to 0 if either row i or column j has a 0 \ndef nullify_row(matrix, i): \n  for j in range(0, len(matrix[0])): \n    matrix[i][j] = 0\n\n# Set arr[i][j] to 0 if either row i or column j has a 0 \ndef nullify_column(matrix, j): \n  for i in range(0, len(matrix)): \n    matrix[i][j] = 0", "task_id": 14343}
{"finetuning_prompt": "\"\"\"\nGenerate a function that is able to extract only the year from a given date.\n\"\"\"\n\ndef getYear(d):\n", "finetuning_completion": " \r\n    return int(d[:4])", "task_id": 14347}
{"finetuning_prompt": "\"\"\"\nCreate a function to transform the given array into a new array of the same size.\n\"\"\"\n\ndef transform_array(arr):\n", "finetuning_completion": " \r\n    n = len(arr)\r\n    next_arr = [] \r\n    for i in range(n): \r\n        curr_sum = 0 \r\n        for j in range(i + 1): \r\n            curr_sum += arr[j]\r\n        next_arr.append(curr_sum) \r\n    return next_arr", "task_id": 14353}
{"finetuning_prompt": "\"\"\"\nCreate a program to check if a sound wave sequence contains sounds below a given frequency threshold.\n\"\"\"\n\ndef check_frequency(sequence, threshold):\n", "finetuning_completion": "\r\n    isBelowThreshold = False\r\n    for frequency in sequence:\r\n        if frequency < threshold:\r\n            isBelowThreshold = True\r\n            break\r\n    return isBelowThreshold", "task_id": 14360}
{"finetuning_prompt": "\"\"\"\nCreate a program to verify if a given mathematical expression is valid.\n\"\"\"\n\ndef is_valid_expression(expression):\n", "finetuning_completion": "\r\n    try:\r\n        left, right = expression.split(\"=\")\r\n        left_val = eval(left)\r\n        right_val = eval(right)\r\n        return (left_val == right_val) \r\n    except:\r\n        return False", "task_id": 14362}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the median of five values.\n\"\"\"\n\ndef median_five(values):\n", "finetuning_completion": "\r\n    sorted_values = sorted(values)\r\n    mid_index = int(len(sorted_values)//2)\r\n    if len(values) % 2 == 0:\r\n        return (sorted_values[mid_index] + sorted_values[mid_index - 1]) / 2\r\n    else:\r\n        return sorted_values[mid_index]", "task_id": 14363}
{"finetuning_prompt": "\"\"\"\nDevelop a program which will find the most occurring character in a string.\n\"\"\"\n\ndef find_most_occur_char(string):\n", "finetuning_completion": "\r\n    char_dict = {}\r\n    for char in string:\r\n        char_dict[char] = char_dict.get(char, 0) + 1 \r\n      \r\n    max_char = ''\r\n    max_occur = 0\r\n    for char, occur in char_dict.items():\r\n        if occur > max_occur:\r\n            max_char = char\r\n            max_occur = occur\r\n    return (max_char, max_occur)", "task_id": 14365}
{"finetuning_prompt": "\"\"\"\nCreate a python algorithm to print all the numbers which are perfect squares in a given array of numbers.\n\"\"\"\n\ndef perfectSquares(list):\n", "finetuning_completion": "\n    result = []\n    for num in list:\n        sqrt = num**0.5\n        if ((sqrt - int(sqrt)) == 0):\n            result.append(int(sqrt))\n    print(result)", "task_id": 14368}
{"finetuning_prompt": "\"\"\"\nDesign a python script to detect questionable words in a given range.\n\"\"\"\n\ndef detect_questionable_words(words, range):\n", "finetuning_completion": "\r\n    result  = [w for w in words if len(w)>=range[0] and len(w)<=range[1]]\r\n    return result", "task_id": 14375}
{"finetuning_prompt": "\"\"\"\nWrite a function to slice a list of numbers from third index until eighth index.\n\"\"\"\n\ndef slice_list(list1):\n", "finetuning_completion": "\r\n    result = list1[2:8]\r\n    return result", "task_id": 14377}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm for determining the maximum sum combination in a given list.\n\"\"\"\n\ndef combination_max_sum(list1):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in range(len(list1)):\r\n        combi = list(itertools.combinations(list1, i+1))\r\n        max_sum = max([sum(x) for x in combi])\r\n        result.append(max_sum)\r\n    return max(result)", "task_id": 14378}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to print the left diagonal of a matrix.\n\"\"\"\n\ndef print_diagonal(mat):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in range(len(mat)):\r\n        result.append(mat[i][i])\r\n    return result", "task_id": 14379}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the index in a list that has the largest sum of elements on the left and right sides.\n\"\"\"\n\ndef max_index(nums):\n", "finetuning_completion": "\r\n    left_sum, right_sum = 0, sum(nums)\r\n    max_index = 0\r\n    for i in range(len(nums)):\r\n        right_sum -= nums[i]\r\n        if left_sum == right_sum:\r\n            max_index = i\r\n        left_sum += nums[i]\r\n    return max_index", "task_id": 14382}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the nearest point from a given set of coordinates.\n\"\"\"\n\ndef find_nearest_point(cord, target):\n", "finetuning_completion": "\r\n    nearest_dist = float('inf')\r\n    nearest_point = None\r\n    for pt in cord: \r\n        dist = math.sqrt((target[1] - pt[1])**2+(target[0] - pt[0])**2)\r\n        if dist < nearest_dist:\r\n            nearest_dist = dist\r\n            nearest_point = pt\r\n    return nearest_point", "task_id": 14392}
{"finetuning_prompt": "\"\"\"\nGenerate a Python code to remove the first and last names in a list\n\"\"\"\n\ndef remove_names(name_list):\n", "finetuning_completion": " \n    res_list = [item.split()[1] for item in name_list] \n    return res_list \n\nname_list = [\"John Smith\", \"Mary Jones\", \"Albert Einstein\"]\nprint(remove_names(name_list))", "task_id": 14398}
{"finetuning_prompt": "\"\"\"\nEstimate a system response time for a given set of specifications.\n\"\"\"\n\ndef estimate_response_time(nodes, traffic):\n", "finetuning_completion": "\r\n  time = nodes / traffic\r\n  return time", "task_id": 14399}
{"finetuning_prompt": "\"\"\"\nCreate a function to print out the data in a given dictionary according to the specified format.\n\"\"\"\n\ndef print_dict(dict):\n", "finetuning_completion": "\r\n  res = \"Name: {}\\nAge: {}\\nGender: {}\".format(dict['name'], dict['age'], dict['gender'])\r\n  return res", "task_id": 14400}
{"finetuning_prompt": "\"\"\"\nGenerate code to create a function that multiplies a list of numbers by a given number and returns the product.\n\"\"\"\n\ndef multiple_by(numbers, num):\n", "finetuning_completion": "\r\n  product = 1\r\n  for n in numbers:\r\n    product *= n*num\r\n  return product", "task_id": 14405}
{"finetuning_prompt": "\"\"\"\nGenerate a function to store and retrieve data from a given dictionary while maintaining the order of the entries.\n\"\"\"\n\ndef store_and_retrieve(dict):\n", "finetuning_completion": "\n    order = []\n    mapping = {}\n    for key, value in dict.items():\n        mapping[key] = value\n        order.append(key)\n    return mapping, order", "task_id": 14408}
{"finetuning_prompt": "\"\"\"\nOptimize a program to count all possible pairs in a given array.\n\"\"\"\n\ndef count_pair(arr):\n", "finetuning_completion": " \n    # create an empty list for store \n    # the pair \n    pairs = [] \n  \n    # calculate the length of the array \n    n = len(arr) \n  \n    # Fix the first element and \n    # calculate the second element of \n    # pair \n    for i in range(n): \n          \n        # Fix the second element of pair \n        # which is to be calculated \n        for j in range(i + 1 , n): \n          \n            # If a pair is found store it \n            if (arr[i] * arr[j] == arr[i]+arr[j]): \n                pairs.append((arr[i], arr[j])) \n  \n    # return the number of pairs \n    # found \n    return (len(pairs))", "task_id": 14415}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script to find a pair of numbers in a given list which add up to the given sum.\n\"\"\"\n\ndef find_pair_with_sum(givenNums, givenSum):\n", "finetuning_completion": " \n    numsMap = {} \n  \n    # Pair the elements with indices \n    for i, num in enumerate(givenNums): \n        if givenSum - num in numsMap: \n            pair = [givenSum - num, num]\n            # return if the pair is found \n            return pair \n        numsMap[num] = i \n  \n    # No pair is found \n    return []", "task_id": 14417}
{"finetuning_prompt": "\"\"\"\nEdit the code below to make the function return a list that contains the index of all matching substring.\n\"\"\"\n\ndef findIndex(string, sub):\n", "finetuning_completion": " \n    res = [] \n    i = 0\n    while i <= len(string) - len(sub): \n        flag = 1\n        for j in range(len(sub)): \n            if string[i + j] != sub[j]: \n                flag = 0\n        \n        if flag == 1: \n            res.append(i) \n            i += len(sub) \n        else: \n            i += 1\n    return res", "task_id": 14425}
{"finetuning_prompt": "\"\"\"\nCreate a program to count the number of trailing zeros in a factorial number in Python.\n\"\"\"\n\ndef count_trailing_zero(n):\n", "finetuning_completion": "  \n    count = 0\n    while (n != 0): \n        count += n // 5\n        n //= 5\n    return int(count) \n\n# Driver Code\nnum = 100 \nprint(count_trailing_zero(num))", "task_id": 14426}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a string with each word capitalized.\n\"\"\"\n\ndef capitalize_string(test_string):\n", "finetuning_completion": " \r\n    return test_string.title()", "task_id": 14427}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate 100 random numbers between 1 and 18.\n\"\"\"\n\nimport random\r\ndef random_numbers():\n", "finetuning_completion": "\r\n    return set([random.randint(1, 18) for _ in range(100)])", "task_id": 14429}
{"finetuning_prompt": "\"\"\"\nPrint the output of matrix multiplication in two-dimension array.\n\"\"\"\n\ndef matrix_mult(matrix_A, matrix_B):\n", "finetuning_completion": "\n    result = []\n    for i in range(len(matrix_A)):\n        result.append([])\n        for j in range(len(matrix_B[0])):\n            result[i].append(0)\n            for k in range(len(matrix_B)):\n                result[i][j] += matrix_A[i][k] * matrix_B[k][j]\n \n    for r in result:\n        print(r)", "task_id": 14432}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to count the number of lines where the third column is greater than 10.\n\"\"\"\n\ndef third_column_greater_10 (data):\n", "finetuning_completion": "\r\n    count = 0\r\n    for row in data.split('\\n'):\r\n        fields = row.split(',')\r\n        if int(fields[2]) > 10:\r\n            count += 1\r\n    return count", "task_id": 14438}
{"finetuning_prompt": "\"\"\"\nWrite a script to simulate a function for measuring the surface area of a cylinder.\n\"\"\"\n\ndef cylinder_surface_area(rad, height):\n", "finetuning_completion": "\r\n  return 2*3.14*rad*(rad + height)", "task_id": 14439}
{"finetuning_prompt": "\"\"\"\nWrite a function to take a list of integers and return a list of the largest two integers.\n\"\"\"\n\ndef largest_two(list):\n", "finetuning_completion": "\r\n    sorted_list = sorted(list, reverse=True) \r\n    return sorted_list[:2]", "task_id": 14446}
{"finetuning_prompt": "\"\"\"\nWrite a function to identify and count the number of palindromes in a sentence.\n\"\"\"\n\ndef count_palindromes(sentence):\n", "finetuning_completion": "\n    words = sentence.split()\r\n    palindromes = 0\r\n    for word in words: \r\n        if word == word[::-1]: \r\n            palindromes += 1\r\n    return palindromes", "task_id": 14447}
{"finetuning_prompt": "\"\"\"\nWrite a python program that finds the number of permutations possible.\n\"\"\"\n\ndef permutation(string):\n", "finetuning_completion": "\n    if len(string) == 1:\n        return [string]\n    l = []\n    for i in range(len(string)):\n        m = string[i]\n        rem_char = string[:i] + string[i+1:]\n        for p in permutation(rem_char):\n            l.append(m + p)\n    return l", "task_id": 14451}
{"finetuning_prompt": "\"\"\"\nCreate a function to identify comments in a given Python code.\n\"\"\"\n\ndef is_comment(string):\n", "finetuning_completion": " \n    return string.startswith('#')", "task_id": 14453}
{"finetuning_prompt": "\"\"\"\nGenerate a program to insert a new item into a given list at a given index.\n\"\"\"\n\ndef insert_item(test_list, index, item):\n", "finetuning_completion": " \n  test_list.insert(index, item)\r\n  return test_list", "task_id": 14456}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a list of tuples, where each tuple contains the sum of two items in a given list.\n\"\"\"\n\ndef sum_list(lst):\n", "finetuning_completion": "\r\n  result = []\r\n  for i in range(len(lst)):\r\n    for j in range(i+1, len(lst)):\r\n      result.append((lst[i] + lst[j], (lst[i], lst[j])))\r\n  return result", "task_id": 14460}
{"finetuning_prompt": "\"\"\"\nWrite a code to check any object is empty or not.\n\"\"\"\n\ndef is_empty(obj):\n", "finetuning_completion": "\n  if obj == None:\n    return True\n  elif len(obj) == 0:\n    return True\n  else:\n    return False", "task_id": 14462}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the minimum number of steps from one number to another\n\"\"\"\n\ndef minSteps(start, end):\n", "finetuning_completion": " \r\n\tdp = [float(\"Inf\") for i in range(end + 1)] \r\n\tdp[start] = 0\r\n\tfor i in range(start, end+1): \r\n\t\tif i % 2 == 0 and i + 1 <= end: \r\n\t\t\tdp[i+1] = min(dp[i]+1, dp[i+1])\r\n\t\tif i % 3 == 0 and i + 2 <= end: \r\n\t\t\tdp[i+2] = min(dp[i]+1, dp[i+2])\r\n\treturn dp[end]", "task_id": 14471}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sort a comma-separated string by its values.\n\"\"\"\n\ndef sortStrings(test_str):\n", "finetuning_completion": " \r\n    list = test_str.split(', ') \r\n    list.sort() \r\n    return ','.join(list)", "task_id": 14473}
{"finetuning_prompt": "\"\"\"\nWrite a function to that takes a list of strings as input and returns a string with the longest common prefix.\n\"\"\"\n\ndef maxprefix(test_list):\n", "finetuning_completion": " \r\n    n=len(test_list) \r\n    if n==0: \r\n        return \"\" \r\n    if n==1: \r\n        return test_list[0] \r\n    common_prefix=test_list[0] \r\n    for i in range(1,n): \r\n        prefix = \"\" \r\n        curr = test_list[i] \r\n        j = 0\r\n        while j<len(curr) and j<len(common_prefix): \r\n            if common_prefix[j]==curr[j]: \r\n                prefix=prefix+common_prefix[j] \r\n            else: \r\n                break \r\n            j+=1\r\n        common_prefix = prefix \r\n    return common_prefix", "task_id": 14474}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a list to a dictionary sorting all of the list's numeric values in ascending order.\n\"\"\"\n\ndef listToDict(nums):\n", "finetuning_completion": "\r\n    nums.sort() \r\n\r\n    dict_vals = {} \r\n    i = 0\r\n    for num in nums: \r\n        dict_vals[i] = nums[i] \r\n        i+=1\r\n    return dict_vals", "task_id": 14477}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the total cost of a given number of items, given the price and quantity.\n\"\"\"\n\ndef total_cost(price,quantity):\n", "finetuning_completion": " \r\n    cost = 0\r\n    for i in range(len(price)): \r\n        cost += price[i] * quantity[i]\r\n    return cost", "task_id": 14482}
{"finetuning_prompt": "\"\"\"\nWrite a function to find out the number of duplicate letters in a string.\n\"\"\"\n\ndef frequency(str1):\n", "finetuning_completion": " \r\n    str1 = str1.lower() \r\n    all_freq = {}  \r\n    for i in str1: \r\n        if i in all_freq: \r\n            all_freq[i] += 1\r\n        else: \r\n            all_freq[i] = 1\r\n    return all_freq", "task_id": 14484}
{"finetuning_prompt": "\"\"\"\nCreate a program to produce the kth permutation of a set of given numbers.\n\"\"\"\n\ndef kth_permutation(nums,k):\n", "finetuning_completion": " \r\n  permutations = list(itertools.permutations(nums)) \r\n  return (list(permutations[k-1]))", "task_id": 14485}
{"finetuning_prompt": "\"\"\"\nCreate a code to create a frequency table for the given list.\n\"\"\"\n\ndef freqtable(lst):\n", "finetuning_completion": " \r\n  \r\n    table = {} \r\n    for num in lst: \r\n        if num in table: \r\n            table[num] += 1\r\n        else: \r\n            table[num] = 1\r\n  \r\n    return table", "task_id": 14490}
{"finetuning_prompt": "\"\"\"\nCreate a code to find the maximum value in a 2D matrix.\n\"\"\"\n\ndef maximum_2Dmatrix(mat, n):\n", "finetuning_completion": " \r\n  \r\n    result = -9999999999 \r\n    for i in range(n): \r\n        for j in range(n): \r\n            if (mat[i][j] > result): \r\n                result = mat[i][j]\n  \r\n    return result", "task_id": 14491}
{"finetuning_prompt": "\"\"\"\nWrite a python program to print the most common element in a 2D matrix.\n\"\"\"\n\ndef most_common_element(arr):\n", "finetuning_completion": " \r\n    result = {} \r\n  \r\n    # traverse over the entire array \r\n    for i in range(len(arr)): \r\n        for j in range(len(arr[i])): \r\n            # count the occurrences of each element \r\n            if arr[i][j] in result: \r\n                result[arr[i][j]] += 1\r\n            else: \r\n                result[arr[i][j]] = 1\r\n  \r\n    maximum = 0\r\n    element = -1\r\n    for i in result: \r\n        # if current element has higher frequency \r\n        # than maximum so far \r\n        if maximum < result[i]: \r\n            maximum = result[i] \r\n            element = i \r\n    return element", "task_id": 14494}
{"finetuning_prompt": "\"\"\"\nGenerate a deep link URL from a given input URL.\n\"\"\"\n\ndef generate_deep_link(input_url):\n", "finetuning_completion": "\r\n  deep_link_url = \"myapp://\" + input_url\r\n  return deep_link_url", "task_id": 14504}
{"finetuning_prompt": "\"\"\"\nTranslate this pseudo-code into a Python function:\n\"\"\"\n\ndef functionName(inputString):\n", "finetuning_completion": "\r\n    outputString = \"\"\r\n    for i in range(0, len(inputString), 2):\r\n        outputString += inputString[i]\r\n    return outputString", "task_id": 14510}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate all palindromic numbers less than 500.\n\"\"\"\n\ndef generate_palindromes(limit):\n", "finetuning_completion": "\r\n    palindromes = []\r\n    for num in range(0, limit):\r\n        temp = num \r\n        rev = 0\r\n        while(num > 0): \r\n            dig = num % 10 \r\n            rev = rev * 10 + dig \r\n            num = num // 10 \r\n        if rev == temp: \r\n            palindromes.append(temp) \r\n    return palindromes", "task_id": 14511}
{"finetuning_prompt": "\"\"\"\nWrite a python code to delete an item from the list.\n\"\"\"\n\ndef delete_item(nums, delete):\n", "finetuning_completion": " \r\n    for item in delete: \r\n        nums.remove(item) \r\n    return nums", "task_id": 14513}
{"finetuning_prompt": "\"\"\"\nRe-index an array in ascending order\n\"\"\"\n\ndef reindex(arr):\n", "finetuning_completion": "\r\n    sorted_arr = sorted(arr)\r\n    output = []\r\n    for i in range(len(arr)):\r\n        for j in range(len(sorted_arr)):\r\n            if arr[i] == sorted_arr[j]:\r\n                output.append(j+1)\r\n                break \r\n    return output\r\n            \r\narr = [3, 8, 5, 4, 7] \r\nprint(reindex(arr))", "task_id": 14519}
{"finetuning_prompt": "\"\"\"\nWrite a function to obtain the cluster mean in a set of vectors.\n\"\"\"\n\ndef get_cluster_mean(vectors):\n", "finetuning_completion": "\r\n    clusters = [[vectors[0]]]\r\n    for vector in vectors[1:]:\r\n        if all(abs((vector[0] - c[0][0])) < 2 and abs((vector[1] - c[0][1])) < 2 for c in clusters):\r\n            clusters[-1].append(vector)\r\n        else:\r\n            clusters.append([vector])\r\n    mean_vectors = []\r\n    for cluster in clusters:\r\n        x = 0\r\n        y = 0\r\n        for vector in cluster:\r\n            x += vector[0]\r\n            y += vector[1]\r\n        mean_vectors.append([x / len(cluster), y / len(cluster)])\r\n    return mean_vectors", "task_id": 14521}
{"finetuning_prompt": "\"\"\"\nGenerate a Fibonacci sequence with n numbers.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \r\n    if n==0: \r\n        return 0 \r\n    elif n==1: \r\n        return 1 \r\n    else: \r\n        return Fibonacci(n-1)+Fibonacci(n-2)", "task_id": 14527}
{"finetuning_prompt": "\"\"\"\nCreate a program that implements a search algorithm to find the specified element from a given array.\n\"\"\"\n\ndef search(arr, target):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "task_id": 14529}
{"finetuning_prompt": "\"\"\"\nCreate a program to convert from Celsius to Fahrenheit and Fahrenheit to Celsius.\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n", "finetuning_completion": " \r\n    return celsius*(9/5) + 32 \r\n \r\ndef fahrenheit_to_celsius(fahrenheit): \r\n    return (fahrenheit - 32) * (5/9)", "task_id": 14532}
{"finetuning_prompt": "\"\"\"\nConvert a given string to title format by capitalizing the first letter of each word.\n\"\"\"\n\ndef to_titlecase(s):\n", "finetuning_completion": " \n    return ' '.join([word.capitalize() for word in s.split()])", "task_id": 14545}
{"finetuning_prompt": "\"\"\"\nGenerate code to create a vector of zeros with the given size.\n\"\"\"\n\ndef create_zeros(size):\n", "finetuning_completion": "\n  vector = []\n  for _ in range(size):\n    vector.append(0)\n  return vector", "task_id": 14554}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to sort a given array of numbers using the minimum number of swaps.\n\"\"\"\n\ndef sort_min_swaps(array):\n", "finetuning_completion": " \r\n\tposition = {x:i for i, x in enumerate(array)} \r\n\r\n\tswaps = 0\r\n\tfor i in range(0,len(array)): \r\n\t\tif array[i] != i + 1: \r\n\t\t\ttemp = array[i] \r\n\t\t\tarray[i], array[position[i + 1]] = i + 1, temp \r\n\t\t\tposition[temp] = position[i + 1] \r\n\t\t\tswaps += 1\r\n\treturn swaps", "task_id": 14561}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to find the maximum sum such that no two elements are adjacent in a given array.\n\"\"\"\n\ndef max_sum(array):\n", "finetuning_completion": " \n    dp = [-1]*len(array) \n    dp[0] = array[0] \n    dp[1] = max(array[0], array[1]) \n    for i in range(2, len(array)): \n        dp[i] = max(dp[i - 1], dp[i - 2] + array[i]) \n    return dp[-1]", "task_id": 14562}
{"finetuning_prompt": "\"\"\"\nGenerate a function to classify the given numbers into odd and even.\n\"\"\"\n\ndef classify_oddeven(num_list):\n", "finetuning_completion": " \n\tresult = {'odd': [], 'even': []} \n\tfor num in num_list: \n\t\tif num % 2 == 0: \n\t\t\tresult['even'].append(num) \n\t\telse: \n\t\t\tresult['odd'].append(num) \n\treturn result", "task_id": 14563}
{"finetuning_prompt": "\"\"\"\nGiven a list of N numbers, identify the most frequent number in the list\n\"\"\"\n\ndef most_frequent(arr):\n", "finetuning_completion": " \n\tdict_freq = {} \n\tmax_freq = 1\n\tres = arr[0] \n\tfor i in arr:  \n\t\tif i in dict_freq: \n\t\t\tdict_freq[i] += 1\t \n\t\telse: \n\t\t\tdict_freq[i] = 1 \n\t\tif max_freq < dict_freq[i]: \n\t\t\t\tmax_freq = dict_freq[i] \n\t\t\t\tres = i \n\t\t\t\t\n\treturn res", "task_id": 14564}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract all strings with certain substring in a list of strings.\n\"\"\"\n\ndef extract_substrings(lst,substring):\n", "finetuning_completion": " \r\n    res = [] \r\n    for s in lst: \r\n        if substring in s: \r\n            res.append(s) \r\n    return res", "task_id": 14567}
{"finetuning_prompt": "\"\"\"\nGenerate a script to segment a sentence into word tokens.\n\"\"\"\n\ndef segment_sentence(sentence):\n", "finetuning_completion": " \r\n    tokens = sentence.split(' ') \r\n    return tokens", "task_id": 14571}
{"finetuning_prompt": "\"\"\"\nWrite a meeting scheduler program to arrange the given list of customer requirements.\n\"\"\"\n\ndef meeting_scheduler(requirements):\n", "finetuning_completion": "\n  # Sort the customers by their start time\n  sorted_requirements = sorted(requirements.items(), key=lambda kv: kv[1][0])\n  \n  start_time = sorted_requirements[0][1][0]\n  end_time = sorted_requirements[0][1][1]\n  schedule = [sorted_requirements[0][0]]\n  \n  for item in sorted_requirements[1:]:\n    if item[1][0] >= end_time:\n      end_time = item[1][1]\n      schedule.append(item[0])\n  return (start_time, end_time, schedule)", "task_id": 14577}
{"finetuning_prompt": "\"\"\"\nDevelop a python function to determine the volume of a cylinder based on user input.\n\"\"\"\n\ndef vol_cylinder(Height,Radius):\n", "finetuning_completion": "\n  volume=(3.14)*(Height)*(Radius)*(Radius)\n  return volume", "task_id": 14594}
{"finetuning_prompt": "\"\"\"\nCreate a python program that encodes a message using the Caesar cipher technique.\n\"\"\"\n\ndef caesarCipher(message,shift):\n", "finetuning_completion": "\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += chr((ord(char) + shift - 65) % 26 + 65)\n            else:\n                result += chr((ord(char) + shift - 97) % 26 + 97)\n        else:\n            result += char\n    return result", "task_id": 14595}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, write a function to rearrange the array according to the given condition.\n\"\"\"\n\ndef condition_arrange(arr):\n", "finetuning_completion": " \r\n\tfor i in range (0, len(arr)): \r\n\t\tfor j in range (i+1, len(arr)): \r\n\t\t\tif arr[i] > arr[j]: \r\n\t\t\t\tarr[i], arr[j] = arr[j], arr[i] \r\n\treturn arr", "task_id": 14611}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to print a dictionary containing employee and their salaries sorted by the salary value.\n\"\"\"\n\nimport operator \n\ndef sort_dict_employees(employees):\n", "finetuning_completion": " \n\t# sort dictionary according to value \n\tsorted_employees = sorted(employees.items(), key = operator.itemgetter(1)) \n\t# printing employees in sorted manner \n\t# using loop \n\tfor employee, salary in sorted_employees: \n\t\tprint (\"{} : {}\".format(employee, salary))", "task_id": 14618}
{"finetuning_prompt": "\"\"\"\nCreate a function which prints the possible combination of given arrays.\n\"\"\"\n\ndef combination_arrays(arr1, arr2):\n", "finetuning_completion": " \r\n    result = [] \r\n    for item1 in arr1: \r\n        for item2 in arr2: \r\n            result.append([item1, item2]) \r\n    return result", "task_id": 14633}
{"finetuning_prompt": "\"\"\"\nCreate a function which determins if a given input is an even/odd number.\n\"\"\"\n\ndef even_odd(num):\n", "finetuning_completion": "\r\n    if num % 2 == 0:\r\n        return \"even\"\r\n    else:\r\n        return \"odd\"\r\n\r\neven_odd(5)  # Output: \"odd\"", "task_id": 14639}
{"finetuning_prompt": "\"\"\"\nGenerate a code which lists the IPV4 addresses present in the given text.\n\"\"\"\n\nimport re \r\n  \r\ndef get_IPv4_addresses(text):\n", "finetuning_completion": " \r\n    \r\n    # Regex pattern for IPv4 addresses \r\n    ip_pattern = r'(\\b(?:(?:2(?:[0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9])\\.){3}(?:(?:2([0-4][0-9]|5[0-5])|[0-1]?[0-9]?[0-9]))\\b)'\r\n    \r\n    # Compile the regex pattern \r\n    ip_pattern = re.compile(ip_pattern) \r\n  \r\n    # Get IPV4 addresses\r\n    res = re.findall(ip_pattern, text) \r\n  \r\n    # Return IPV4 addresses \r\n    return res", "task_id": 14645}
{"finetuning_prompt": "\"\"\"\nGenerate a code which returns the sum of the maximum and minimum number from a list.\n\"\"\"\n\ndef max_min_sum(lst):\n", "finetuning_completion": " \r\n    minimum = min(lst) \r\n    maximum = max(lst) \r\n  \r\n    return minimum + maximum", "task_id": 14646}
{"finetuning_prompt": "\"\"\"\nGenerate a code for merging two given dictionaries.\n\"\"\"\n\ndef merge_two_dicts(dict1, dict2):\n", "finetuning_completion": " \r\n    res = {**dict1, **dict2} \r\n    return res", "task_id": 14647}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine whether a list of numbers is unique.\n\"\"\"\n\ndef is_unique(the_list):\n", "finetuning_completion": "\n    return len(the_list) == len(set(the_list))", "task_id": 14654}
{"finetuning_prompt": "\"\"\"\nReformat a string to a given length by adding separator in appropriate position.\n\"\"\"\n\ndef reformatString(string, length):\n", "finetuning_completion": " \r\n    if len(string) > length: \r\n        return string[0:length]\r\n    else: \r\n        diff = length - len(string)\r\n        return string[:] + (diff * '-')", "task_id": 14661}
{"finetuning_prompt": "\"\"\"\nSort a number array in ascending order without using Array.sort().\n\"\"\"\n\ndef sort_array(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        for j in range(i+1, len(arr)): \r\n            if arr[i] > arr[j]: \r\n                arr[i], arr[j] = arr[j], arr[i] \r\n    return arr", "task_id": 14662}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to reverse a number.\n\"\"\"\n\ndef reverse_number(num):\n", "finetuning_completion": " \n\n    reversed_num = 0\n    while (num > 0): \n        rem = num % 10 \n        reversed_num = reversed_num * 10 + rem \n        num = num // 10\n    return reversed_num", "task_id": 14666}
{"finetuning_prompt": "\"\"\"\nGenerate a function to join the given tuples based on the specified key.\n\"\"\"\n\nperson = [(\"John\", \"Doe\", 23),(\"Sara\", \"Doe\", 27)]\n\ndef join_tuple(person,key):\n", "finetuning_completion": "\n  res = dict()\n  for i in person:\n    if i[key] in res:\n      res[i[key]].append(tuple(i[1:]))\n    else:\n      res[i[key]] = [tuple(i[1:])] \n  return res", "task_id": 14667}
{"finetuning_prompt": "\"\"\"\nCreate a program to print out the first spell of a word (i.e., initial consonants) using the hangul alphabet.\n\"\"\"\n\ndef first_spell(word):\n", "finetuning_completion": "\n    result = \"\"\n    for c in word:\n        if c in '\u1100\u1101\u1106\u1102\u1103\u1105\u1107\u1109\u110b\u110c':\n            result += c\n    return result", "task_id": 14674}
{"finetuning_prompt": "\"\"\"\nGenerate a code to search and return the longest strings in a given list.\n\"\"\"\n\ndef find_longest(strs):\n", "finetuning_completion": " \r\n    result = [] \r\n    max_len = 0\r\n    for el in strs: \r\n        el_len = len(el)\r\n        if el_len > max_len:\r\n            result = [el] \r\n            max_len = el_len\r\n        elif el_len == max_len: \r\n            result.append(el) \r\n    return result", "task_id": 14678}
{"finetuning_prompt": "\"\"\"\nCreate a program to compare two strings and return the number of characters (from left to right) that are different between the two strings.\n\"\"\"\n\ndef chars_diff(string1, string2):\n", "finetuning_completion": " \r\n    if len(string1)>len(string2): \r\n        result = len(string1)-len(string2) \r\n        for i in range(len(string2)): \r\n            if string1[i] != string2[i]: \r\n                result += 1\r\n    else: \r\n        result = len(string2) - len(string1)\r\n        for i in range(len(string1)): \r\n            if string1[i] != string2[i]: \r\n                result += 1\r\n    return result", "task_id": 14681}
{"finetuning_prompt": "\"\"\"\nWrite a function to add two integers and return a string representation of the result.\n\"\"\"\n\ndef add(a, b):\n", "finetuning_completion": " \r\n    return str(a + b)", "task_id": 14686}
{"finetuning_prompt": "\"\"\"\nCreate a function to solve a linear equation of form ax+b=0 for the value of x.\n\"\"\"\n\ndef linear_equation(a, b):\n", "finetuning_completion": " \n    if a == 0 and b == 0: \n        return \"All real numbers are the solution\"\n    elif a == 0 and b != 0: \n        return \"No real solution exists\"\n    else: \n        x = -1 * (b/a) \n        return \"The solution is \" + str(x)", "task_id": 14691}
{"finetuning_prompt": "\"\"\"\nWrite a function to distinguish between two users based on the given username and password parameters.\n\"\"\"\n\ndef login_auth(username, password):\n", "finetuning_completion": " \r\n    users = { 'joe123' :'abcd123' } \r\n    if username in users and users[username] == password: \r\n        return True \r\n    else: \r\n        return False", "task_id": 14692}
{"finetuning_prompt": "\"\"\"\nConstruct a program to detect outliers in a given dataset using the IQR method.\n\"\"\"\n\n# Function to detect outliers using IQR \ndef detect_outliers(data):\n", "finetuning_completion": " \n    quartile_1, quartile_3 = np.percentile(data, [25, 75]) \n    iqr = quartile_3 - quartile_1 \n    lower_bound = quartile_1 - (iqr * 1.5) \n    upper_bound = quartile_3 + (iqr * 1.5) \n    outliers = [x for x in data if x < lower_bound or x > upper_bound] \n    return outliers", "task_id": 14694}
{"finetuning_prompt": "\"\"\"\nGenerate a program that prints the day of the week for the given date in a given format.\n\"\"\"\n\nimport datetime\r\ndef day_of_week(day,month,year):\n", "finetuning_completion": "\r\n    x = datetime.datetime(int(year), int(month), int(day))   \r\n    return x.strftime(\"%A\")", "task_id": 14696}
{"finetuning_prompt": "\"\"\"\nWrite a python program to add two given numbers and check if the sum is greater than or equal to 100.\n\"\"\"\n\ndef is_sum_greater_than_100(num1,num2):\n", "finetuning_completion": "\r\n    value = num1+num2\r\n    if value>=100:\r\n        return True\r\n    else:\r\n        return False", "task_id": 14697}
{"finetuning_prompt": "\"\"\"\nWrite a function to compare two dictionaries and returns a list of similarities and differences.\n\"\"\"\n\ndef compare_dicts(d1, d2):\n", "finetuning_completion": " \r\n  similarities = [] \r\n  diff1 = {} \r\n  diff2 = {} \r\n  for key1, value1 in d1.items(): \r\n    for key2, value2 in d2.items(): \r\n      if key1 == key2: \r\n        if value1 == value2: \r\n          similarities.append((key1, value1)) \r\n        else: \r\n          diff1[key1] = value1 \r\n          diff2[key2] = value2 \r\n      else: \r\n        if key1 not in d2.keys(): \r\n          diff1[key1] = value1 \r\n        elif key2 not in d1.keys(): \r\n          diff2[key2] = value2 \r\n\r\n  return similarities, diff1, diff2", "task_id": 14699}
{"finetuning_prompt": "\"\"\"\nCreate a function to search a 2D matrix for a particular element.\n\"\"\"\n\ndef search_2d_matrix(matrix, x):\n", "finetuning_completion": " \r\n  for row in matrix: \r\n    if x in row: \r\n        return True \r\n  return False", "task_id": 14700}
{"finetuning_prompt": "\"\"\"\nDevelop a script to check if a given list of integers is increasing or decreasing.\n\"\"\"\n\ndef is_list_increasing_or_decreasing(nums):\n", "finetuning_completion": " \r\n    increasing = decreasing = True \r\n    for i in range(len(nums)-1):\r\n        if nums[i+1] < nums[i]: \r\n            increasing = False \r\n        if nums[i+1] > nums[i]: \r\n            decreasing = False \r\n  \r\n    if increasing: \r\n        return \"Increasing\" \r\n    elif decreasing: \r\n        return \"Decreasing\" \r\n    else: \r\n        return \"Neither\"", "task_id": 14702}
{"finetuning_prompt": "\"\"\"\nCreate a function to edit the given text document so that it has all the words in alphabetical order.\n\"\"\"\n\ndef sort_words(text):\n", "finetuning_completion": "\n    words = text.split()\n    words.sort()\n    new_text = ' '.join(words)\n    return new_text", "task_id": 14708}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to edit a given string and make it into a valid URL.\n\"\"\"\n\ndef editString(given):\n", "finetuning_completion": " \r\n    given = given.replace(\" \",\"\") \r\n    given = given.replace(\":\",\"\") \r\n    given = given.replace(\"www.\",\"\") \r\n    given = given.lower() \r\n    return(\"http://\"+ given)", "task_id": 14709}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to rotate the array elements by a given number K.\n\"\"\"\n\ndef rotateArray(nums,k):\n", "finetuning_completion": " \r\n\tfor i in range(k): \r\n\t\tnums.insert(0,nums.pop()) \n\treturn(nums)", "task_id": 14712}
{"finetuning_prompt": "\"\"\"\nFind out the 2nd least element in a given list.\n\"\"\"\n\ndef secLeast(nums):\n", "finetuning_completion": " \n\tnums.sort() \n\treturn(nums[1])", "task_id": 14713}
{"finetuning_prompt": "\"\"\"\nGenerate a program to compare two texts and find the number of matches.\n\"\"\"\n\ndef compare_text(text1, text2):\n", "finetuning_completion": " \r\n    matches = 0\r\n    i, j = 0, 0\r\n    while i < len(text1) and j < len(text2):\r\n        if text1[i] == text2[j]: \r\n            matches += 1\r\n            i += 1\r\n            j += 1\r\n        elif text1[i] != text2[j]: \r\n            i += 1\r\n    return matches", "task_id": 14717}
{"finetuning_prompt": "\"\"\"\nDevelop a logic to maximize the given recursive function.\n\"\"\"\n\ndef max_recursive_func(n):\n", "finetuning_completion": "\r\n  # base case\r\n  if n == 0:\r\n    return 0\r\n  # recursive step\r\n  else:\r\n    return max(n, max_recursive_func(n - 1))", "task_id": 14718}
{"finetuning_prompt": "\"\"\"\nDevelop a regular expression to validate a valid IBAN code.\n\"\"\"\n\nimport re\n \r\ndef ibanValidation(iban):\n", "finetuning_completion": " \r\n    regexp = \"^[A-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}[0-9]{7}(([a-zA-Z0-9]?){0,16})?$\"\r\n    if(re.search(regexp, iban)): \r\n        return True\r\n    else: \r\n        return False", "task_id": 14720}
{"finetuning_prompt": "\"\"\"\nGenerate code to calculate the average of numbers stored in a given array.\n\"\"\"\n\ndef calculate_avg(arr):\n", "finetuning_completion": "\r\n  sum = 0\r\n  for i in range(len(arr)):\r\n    sum += arr[i]\r\n  avg = sum/len(arr)\r\n  return avg", "task_id": 14722}
{"finetuning_prompt": "\"\"\"\nGenerate a code to print out each item in a list with its index.\n\"\"\"\n\ndef list_with_index(list):\n", "finetuning_completion": " \n  for i in range(len(list)): \n    print (i,list[i])", "task_id": 14727}
{"finetuning_prompt": "\"\"\"\nConstruct a program to calculate the combination of given values.\n\"\"\"\n\ndef combination(n, r):\n", "finetuning_completion": " \r\n\treturn math.factorial(n) // (math.factorial(r) * math.factorial(n - r))", "task_id": 14729}
{"finetuning_prompt": "\"\"\"\nCompute the Cross Entropy Loss for a binary classification problem.\n\"\"\"\n\ndef cross_entropy_loss(y_true, y_pred):\n", "finetuning_completion": "\r\n    loss = -(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))\r\n    return loss", "task_id": 14731}
{"finetuning_prompt": "\"\"\"\nCreate a function to identify all the words containing the same letter more than twice in a given paragraph.\n\"\"\"\n\ndef multiple_letters(paragraph):\n", "finetuning_completion": " \r\n    words = paragraph.split() \r\n    result = [] \r\n    for word in words: \r\n        count = Counter(word) \r\n        for key, value in count.items(): \r\n            if value > 2: \r\n                result.append(word) \r\n    return result", "task_id": 14736}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the maximum number of days a student can take in a year, given a number of hours of available study time each week.\n\"\"\"\n\ndef max_days(hours):\n", "finetuning_completion": " \r\n    hours_per_day = 8 \r\n    max_days = (hours / hours_per_day) \r\n    return int(max_days)", "task_id": 14737}
{"finetuning_prompt": "\"\"\"\nWrite a piece of code to print all combinations of a given set of numbers.\n\"\"\"\n\ndef all_combinations(lst):\n", "finetuning_completion": " \n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    l = [] \n    for i in range(len(lst)): \n       m = lst[i] \n       rem = lst[:i] + lst[i+1:] \n       for p in all_combinations(rem): \n           l.append([m] + p) \n    return l\n  \nall_combinations([2, 3, 4])", "task_id": 14740}
{"finetuning_prompt": "\"\"\"\nConstruct a program to convert a given string, containing only the letters a, b and c, into another string using the following rules:\n\na is converted to b\nb is converted to c\nc is converted to a.\n\"\"\"\n\ndef convertString(str):\n", "finetuning_completion": "\n    result = \"\"\n    for char in str:\n        if char == \"a\":\n            result += \"b\"\n        elif char == \"b\":\n            result += \"c\"\n        elif char == \"c\":\n            result += \"a\"\n    return result", "task_id": 14747}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to calculate the sum of the following series: \nSn = 1/4 + 1/5 + 1/6 + ... 1/n\n\"\"\"\n\ndef sum_series_calculator(n):\n", "finetuning_completion": "\n    sum_series = 0\n    for i in range(4, n+1):\n        sum_series += 1/i\n    return sum_series", "task_id": 14748}
{"finetuning_prompt": "\"\"\"\nCompose a function to calculate the sum of the following geometric progression based on the given parameters.\n\nSn = a + ar + ar^2 + ar^3 + ... + ar^(n-1)\n\"\"\"\n\ndef geometric_progression_calculator(a, r, n):\n", "finetuning_completion": " \n    sum_geo_progression = 0\n    for i in range(n):\n        sum_geo_progression += a*(r**i)\n    return sum_geo_progression", "task_id": 14749}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to round a float number up to the next largest integer value.\n\"\"\"\n\ndef round_up(test_num):\n", "finetuning_completion": " \n    return math.ceil(test_num)", "task_id": 14751}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to minimize the number of moves while sorting a stack.\n\"\"\"\n\ndef sort_stack(stack):\n", "finetuning_completion": " \n    tmp_stack = [] \n    while(len(stack) > 0): \n            \n        # pop out the first element \n        temp = stack.pop(-1) \n  \n        # while temporary stack is not empty and \n        # top of stack is greater than temp \n        while(len(tmp_stack) > 0 and tmp_stack[-1] > temp): \n            stack.append(tmp_stack.pop(-1)) \n  \n        # push temp in temporary stack \n        tmp_stack.append(temp) \n  \n\t# insert the sorted elements from tmp_stack \n    # one by one to stack \n    while len(tmp_stack) > 0: \n        stack.append(tmp_stack.pop(-1)) \n\n    return stack", "task_id": 14762}
{"finetuning_prompt": "\"\"\"\nCreate a program to build an SQL query to search for specific values in a database.\n\"\"\"\n\ndef getSQLQueryString(tableName, searchTerm):\n", "finetuning_completion": " \n    return \"SELECT * FROM \" + tableName + \" WHERE value LIKE '%\" + searchTerm + \"%';\"", "task_id": 14763}
{"finetuning_prompt": "\"\"\"\nWrite a function to estimate the speed of a car from given clockwise sequences of time and distance.\n\"\"\"\n\ndef estimate_Car_Speed(time, distance):\n", "finetuning_completion": "\r\n    speed = []\r\n    for i in range(len(time)-1):\r\n        d = distance[i+1] - distance[i]\r\n        t = time[i+1] - time[i]\r\n        speed.append(d/t)\r\n    return speed", "task_id": 14765}
{"finetuning_prompt": "\"\"\"\nWrite a function to apply a series of transformations to a given array input.\n\"\"\"\n\ndef apply_Transformations(input):\n", "finetuning_completion": " \r\n  result = input \r\n  # apply transformations\r\n  result = [i+1 for i in result] \r\n  result = [i*i for i in result] \r\n  result = [i*2 for i in result] \r\n  return result", "task_id": 14767}
{"finetuning_prompt": "\"\"\"\nWrite a function for implementation of binary search on an array.\n\"\"\"\n\ndef binary_search(arr, x):\n", "finetuning_completion": " \r\n\r\n    start = 0\r\n    end = len(arr) - 1\r\n    while start <= end: \r\n  \r\n        mid = (start + end) // 2\r\n\r\n        # Check if x is present at mid \r\n        if arr[mid] < x: \r\n            start = mid + 1\r\n\r\n        # If x is greater, ignore left half \r\n        elif arr[mid] > x: \r\n            end = mid - 1\r\n  \r\n        # If x is smaller, ignore right half \r\n        else: \r\n            return mid \r\n  \r\n    # If we reach here, then the element was not present \r\n    return -1", "task_id": 14768}
{"finetuning_prompt": "\"\"\"\nGiven a list of students' names and marks, write a program to print out the name of the student with the highest score.\n\"\"\"\n\ndef get_highest_score(data):\n", "finetuning_completion": " \r\n    highest_score = 0\r\n    student_name = \"\"\r\n    for student in data: \r\n        if student[1] > highest_score: \r\n            highest_score = student[1]\r\n            student_name = student[0]\r\n    return student_name", "task_id": 14775}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect if two rectangles intersect.\n\"\"\"\n\ndef do_intersect(rectangle_1, rectangle_2):\n", "finetuning_completion": " \r\n  \r\n    # If one rectangle is on left of other \r\n    if (rectangle_1[0][0] > rectangle_2[1][0] or rectangle_2[0][0] > rectangle_1[1][0]): \r\n        return False\r\n  \r\n    # If one rectangle is above other \r\n    if (rectangle_1[0][1] < rectangle_2[1][1] or rectangle_2[0][1] < rectangle_1[1][1]): \r\n        return False\r\n  \r\n    return True", "task_id": 14777}
{"finetuning_prompt": "\"\"\"\nCreate a program that prints out a string eight times.\n\"\"\"\n\ndef print_eight_times(string):\n", "finetuning_completion": " \r\n    for x in range(8):\r\n        print(string)", "task_id": 14781}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the maximum and minimum elements in an array of integers, and return the index of their positions.\n\"\"\"\n\ndef find_max_min_index(arr):\n", "finetuning_completion": " \r\n    max_index = 0\r\n    min_index = 0\r\n    max_num = arr[0]\r\n    min_num = arr[0]\r\n    for i, num in enumerate(arr): \r\n        if max_num < num:\r\n            max_num = num \r\n            max_index = i\r\n        if min_num > num:\r\n            min_num = num \r\n            min_index = i \r\n    return max_index, min_index", "task_id": 14782}
{"finetuning_prompt": "\"\"\"\nCreate a program to group the items in a given list by the length of each item.\n\"\"\"\n\ndef group_by_length(my_list):\n", "finetuning_completion": " \r\n    res_dict = {} \r\n    for elem in my_list: \r\n        length = len(elem) \r\n        if res_dict.get(length): \r\n            res_dict[length].append(elem) \r\n        else: \r\n            res_dict[length] = [elem] \r\n    return res_dict", "task_id": 14784}
{"finetuning_prompt": "\"\"\"\nConstruct a function to calculate the number of bits set to 1 in a given integer.\n\"\"\"\n\ndef bit_count_set(num):\n", "finetuning_completion": " \r\n    count = 0\r\n    while (num): \r\n        num &= (num - 1) \r\n        count += 1\r\n    return count", "task_id": 14785}
{"finetuning_prompt": "\"\"\"\nCreate a function to find all anagrams of a given string in a set of words.\n\"\"\"\n\ndef find_anagrams(words, string):\n", "finetuning_completion": " \r\n    # Create dictionary with frequencies of characters in string \r\n    string_freq = {}\r\n    for char in string: \r\n        string_freq[char] = string_freq.get(char, 0) + 1\r\n    # Create list of anagrams\r\n    anagrams = []\r\n    for word in words:\r\n        # Check if words are same length\r\n        if len(word) != len(string): \r\n            continue\r\n        # Create dictionary with frequencies of characters in word\r\n        word_freq = {}\r\n        for char in word:\r\n            word_freq[char] = word_freq.get(char, 0) + 1\r\n        # Check if frequency of characters is same in both words\r\n        if word_freq == string_freq: \r\n            anagrams.append(word)\r\n    return anagrams", "task_id": 14786}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove records from spreadsheet that have an empty cell in a specific column.\n\"\"\"\n\ndef remove_empty_records(data,column):\n", "finetuning_completion": "\r\n    new_data = []\r\n    for row in data:\r\n        if row[column]!=\"\":\r\n            new_data.append(row)\r\n    return new_data", "task_id": 14789}
{"finetuning_prompt": "\"\"\"\nWrite a function to scan the strings and returns a dictionary with words as the key and their frequency as their value.\n\"\"\"\n\ndef plant_word_frequency(data):\n", "finetuning_completion": "\r\n    d = dict()\r\n    for word in data.split(' '): \r\n        if word in d: \r\n            d[word] = d[word] + 1\r\n        else: \r\n            d[word] = 1\r\n    return d", "task_id": 14790}
{"finetuning_prompt": "\"\"\"\nDesign a function that uses a parameter to reconcile duplicate data between two datasets.\n\"\"\"\n\ndef reconcile_data(data1, data2):\n", "finetuning_completion": "\r\n    data1_map = dict()\r\n    for item in data1: \r\n        if item not in data1_map:\r\n            data1_map[item] = 1\r\n        else:\r\n            data1_map[item] += 1\r\n    \r\n    data2_map = dict()\r\n    for item in data2: \r\n        if item in data1_map and item not in data2_map:\r\n            data2_map[item] = data1_map[item]\r\n        elif item in data1_map and item in data2_map:\r\n            data2_map[item] += data1_map[item]\r\n    return data2_map", "task_id": 14792}
{"finetuning_prompt": "\"\"\"\nCreate a program to transfer numerical data into an array.\n\"\"\"\n\ndef arrayify(data):\n", "finetuning_completion": "\r\n    array = [] \r\n    for item in data: \r\n        array.append([item]) \r\n    return array", "task_id": 14794}
{"finetuning_prompt": "\"\"\"\nWrite a function to detect and remove outliers from the given set of numerical data.\n\"\"\"\n\ndef remove_outliers(data):\n", "finetuning_completion": "\r\n    sorted_data = sorted(data)\r\n    q1, q3 = sorted_data[len(sorted_data)//4], sorted_data[3*len(sorted_data)//4]\r\n    iqr = q3 - q1\r\n    lower_bound = q1 - (1.5 * iqr) \r\n    upper_bound = q3 + (1.5 * iqr)\r\n    outliers = [x for x in data if x < lower_bound or x > upper_bound]\r\n    filtered_data = [x for x in data if x >= lower_bound and x <= upper_bound]\r\n    return outliers, filtered_data", "task_id": 14800}
{"finetuning_prompt": "\"\"\"\nConstruct a program to determine whether a given number is a perfect square.\n\"\"\"\n\ndef is_perfect_square(number):\n", "finetuning_completion": " \r\n  \r\n    # square root of the number \r\n    sqr_num = number ** 0.5\r\n  \r\n    # check if the square root is an integer \r\n    if sqr_num == int(sqr_num): \r\n        return True\r\n    else: \r\n        return False", "task_id": 14806}
{"finetuning_prompt": "\"\"\"\nModify the code below to include try and except blocks to handle exceptions.\n\"\"\"\n\ndef div(a,b):\n", "finetuning_completion": " \n    try: \n        return a/b \n    except ZeroDivisionError:\n        print(\"Division by zero is not allowed.\")", "task_id": 14810}
{"finetuning_prompt": "\"\"\"\nConstruct a function to delete all characters in a given string except for vowels.\n\"\"\"\n\ndef delete_characters(inputString):\n", "finetuning_completion": "\n    vowels = 'aeiouAEIOU'\n    filteredString = \"\"\n    for i in range(len(inputString)):\n        if inputString[i] in vowels:\n            filteredString += inputString[i]\n    return filteredString", "task_id": 14815}
{"finetuning_prompt": "\"\"\"\nConstruct a function to determine if a given string contains only punctuation characters.\n\"\"\"\n\ndef check_punctuations(myString):\n", "finetuning_completion": "\n    punctuations = '?!.,\\''\n    for i in range(len(myString)): \n        if myString[i] not in punctuations: \n            return False \n    return True", "task_id": 14816}
{"finetuning_prompt": "\"\"\"\nFind and replace a particular word in a given string and report the number of occurrences.\n\"\"\"\n\ndef find_replace(txt, find, replace):\n", "finetuning_completion": "\r\n    count = 0 \r\n    words = txt.split() \r\n    for i, word in enumerate(words):\r\n        if word == find: \r\n            words[i] = replace \r\n            count += 1\r\n    txt = \" \".join(words)\r\n    return txt, count", "task_id": 14818}
{"finetuning_prompt": "\"\"\"\nGenerate a code for a given matrix which mark the row and column which contain zero as 1 and other rows and columns as 0.\n\"\"\"\n\ndef markZeroMatrix(matrix):\n", "finetuning_completion": " \r\n    row, col = len(matrix), len(matrix[0]) \r\n    rows, cols = [False] * row, [False] * col \r\n\r\n    for i in range(row): \r\n        for j in range(col): \r\n            if matrix[i][j] == 0: \r\n                rows[i] = True\r\n                cols[j] = True \r\n\r\n    for i in range(row): \r\n        for j in range(col): \r\n            if rows[i] or cols[j]: \r\n                matrix[i][j] = 0 \r\n    return matrix", "task_id": 14824}
{"finetuning_prompt": "\"\"\"\nImplement a python code to search for the matching pattern from a given string using regular expressions.\n\"\"\"\n\nimport re\r\ndef text_find(text):\n", "finetuning_completion": "\r\n  patterns = 'Python'\r\n  if re.search(patterns,  text):\r\n    return ('Found!')\r\n  else:\r\n    return ('Not Found!')", "task_id": 14828}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to remove all occurrences of an element from the given array.\n\"\"\"\n\ndef remove_all_occurrences(arr, val):\n", "finetuning_completion": "\r\n    new_arr = []\r\n    for element in arr:\r\n        if element != val:\r\n            new_arr.append(element)\r\n    \r\n    return new_arr\r\n\r\narr = [1, 2, 3, 4, 1, 2, 3]\r\nval = 1\r\n\r\nresult = remove_all_occurrences(arr, val)\r\n\r\nprint(result)", "task_id": 14832}
{"finetuning_prompt": "\"\"\"\nGiven an array and a sum, generate a python program to find a pair with a given sum in the input array.\n\"\"\"\n\ndef find_pair_with_given_sum(arr, sum):\n", "finetuning_completion": "\n    hash_map = {}\n    for i in range(len(arr)):\n        current_sum = sum - arr[i] \n        if current_sum in hash_map:\n            return (arr[i], current_sum) \n        \n        hash_map[arr[i]] = i \n       \n    return None\n\narr = [1, 5, 7, -1, 5]\nsum = 6\n\nresult = find_pair_with_given_sum(arr, sum)\n\nprint(result)", "task_id": 14834}
{"finetuning_prompt": "\"\"\"\nWrite a Python code to classify a set of numerical numbers into two categories.\n\"\"\"\n\ndef classify_numbers(nums):\n", "finetuning_completion": " \r\n    evens = [] \r\n    odds = [] \r\n    for num in nums: \r\n        if num %2 == 0: \r\n            evens.append(num) \r\n        else: \r\n            odds.append(num) \r\n    return evens, odds", "task_id": 14839}
{"finetuning_prompt": "\"\"\"\nWrite a python program that takes a list of email address strings and performs an MD5 hashing algorithm on them.\n\"\"\"\n\nimport hashlib \r\ndef hash_emails(emails):\n", "finetuning_completion": " \r\n\thashed_emails = [] \r\n\tfor email in emails: \r\n\t\thashed_emails.append(hashlib.md5(email.encode('utf-8')).hexdigest()) \r\n\treturn hashed_emails", "task_id": 14840}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter elements of a list by specified criteria.\n\"\"\"\n\ndef filter_list_criteria(list1,criteria):\n", "finetuning_completion": "\r\n  result = []\r\n  for x in list1:\r\n    if x % criteria == 0:\r\n      result.append(x)\r\n  return result", "task_id": 14842}
{"finetuning_prompt": "\"\"\"\nUse the greedy algorithm to find the minimum edit distance between two given strings.\n\"\"\"\n\ndef minEditDistance(str1, str2):\n", "finetuning_completion": " \r\n    m = len(str1) \r\n    n = len(str2)\r\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \r\n\r\n    for i in range(m+1): \r\n        for j in range(n+1): \r\n\r\n            if i == 0: \r\n                dp[i][j] = j\r\n            elif j == 0: \r\n                dp[i][j] = i\r\n            elif str1[i-1] == str2[j-1]: \r\n                dp[i][j] = dp[i-1][j-1] \r\n            else: \r\n                dp[i][j] = 1 + min(dp[i][j-1],    dp[i-1][j],   dp[i-1][j-1]) \r\n  \r\n    return dp[m][n]", "task_id": 14846}
{"finetuning_prompt": "\"\"\"\nModify the given code to quickly sort a list using the bubble sort algorithm.\n\"\"\"\n\ndef buble_sort(unsorted_list):\n", "finetuning_completion": " \r\n  \r\n    for iter_num in range(len(unsorted_list)-1,0,-1): \r\n        for idx in range(iter_num): \r\n            if unsorted_list[idx]>unsorted_list[idx+1]: \r\n                temp = unsorted_list[idx] \r\n                unsorted_list[idx] = unsorted_list[idx+1] \r\n                unsorted_list[idx+1] = temp \r\n  \r\n    return unsorted_list", "task_id": 14854}
{"finetuning_prompt": "\"\"\"\nAdd a user-defined function to Python to calculate the surface area of a cylinder.\n\"\"\"\n\ndef surface_area_of_cylinder(radius, height):\n", "finetuning_completion": " \r\n    top_area = 3.14 * radius * radius \r\n    side_area = 2 * 3.14 * radius * height \r\n    return  2 * top_area + side_area", "task_id": 14858}
{"finetuning_prompt": "\"\"\"\nConstruct a function which finds the nth prime number.\n\"\"\"\n\ndef nthPrime(n):\n", "finetuning_completion": " \r\n    prime = [2] \r\n    num = 3 \r\n  \r\n    while len(prime) < n : \r\n        if all(num % i != 0 for i in prime): \r\n            prime.append(num) \r\n        num += 2\r\n  \r\n    return prime[-1]", "task_id": 14863}
{"finetuning_prompt": "\"\"\"\nWrite a function to query the given JSON data to retrieve all entries with a particular value.\n\"\"\"\n\ndef query_json(data, job):\n", "finetuning_completion": "\r\n    res = []\r\n    for d in data:\r\n        if d['job'] == job:\r\n            res.append(d)\r\n    return res", "task_id": 14867}
{"finetuning_prompt": "\"\"\"\nDevelop a function to calculate the total area of all the rectangles in the list.\n\"\"\"\n\ndef calculate_area(rectangles):\n", "finetuning_completion": " \r\n\ttotal_area = 0 \r\n\tfor x, y in rectangles: \r\n\t\ttotal_area += x*y \r\n\treturn total_area", "task_id": 14870}
{"finetuning_prompt": "\"\"\"\nWrite a function that finds the index of nearest element in an array.\n\"\"\"\n\ndef find_nearest_index(a, val):\n", "finetuning_completion": "\r\n    index = None\r\n    min_d = float('inf')\r\n    for i, num in enumerate(a):\r\n        d = abs(num - val)\r\n        if d < min_d:\r\n            index = i\r\n            min_d = d\r\n    return index", "task_id": 14875}
{"finetuning_prompt": "\"\"\"\nDevelop a program to print all possible states of n bulbs in a room.\n\"\"\"\n\ndef generate_states(n):\n", "finetuning_completion": " \r\n    result = []  \r\n    for i in range(2 ** n): \r\n        s = bin(i)[2:]  \r\n        s = '0'*(n-len(s)) + s \r\n        result.append([int(i) for i in s]) \r\n          \r\n    return result", "task_id": 14877}
{"finetuning_prompt": "\"\"\"\nEdit a function to compare two strings and return the user the indices of their similarity.\n\"\"\"\n\ndef compareString(str1, str2):\n", "finetuning_completion": " \r\n    indices = [] \r\n    for i in range (len(str1)): \r\n        for j in range (len(str2)): \r\n            if str1[i] == str2[j]: \r\n                indices.extend([i,j]) \r\n                break \r\n    if indices: \r\n        return indices \r\n    else: \r\n        return [-1]", "task_id": 14884}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes an input of a list of numbers and groups them according to their division by 3.\n\"\"\"\n\ndef group3Mod(list1):\n", "finetuning_completion": " \r\n    output = [[],[],[]]\r\n    for i in list1: \r\n        if i % 3 == 0: \r\n            output[0].append(i) \r\n        elif i % 3 == 1: \r\n            output[1].append(i) \r\n        else: \r\n            output[2].append(i) \r\n  \r\n    return output", "task_id": 14885}
{"finetuning_prompt": "\"\"\"\nCreate a mean and median function to calculate the mean or median of the numbers in a given list.\n\"\"\"\n\ndef mean_median(lst):\n", "finetuning_completion": "\r\n  n = len(lst)\r\n  mean = sum(lst)/n\r\n  lst.sort()\r\n  if (n % 2 == 0):\r\n    median = (lst[(n//2)-1] + lst[n//2])/2\r\n  else:\r\n    median = lst[n//2]\r\n  return(mean, median)", "task_id": 14887}
{"finetuning_prompt": "\"\"\"\nGenerate a program to determine if two numbers are coprime.\n\"\"\"\n\ndef is_coprime(a, b):\n", "finetuning_completion": "\r\n    if (hcf(a, b) == 1):\r\n        return True\r\n    else:\r\n        return False\n    \r\ndef hcf(x, y): \r\n   if x > y: \r\n       sm = y \r\n   else: \r\n       sm = x \r\n   for i in range(1, sm+1): \r\n       if((x % i == 0) and (y % i == 0)): \r\n           hcf = i \r\n   return hcf", "task_id": 14888}
{"finetuning_prompt": "\"\"\"\nWrite a python script to print out the Armstrong numbers between 1 and 1000.\n\"\"\"\n\ndef armstrong_Numbers():\n", "finetuning_completion": " \r\n    for num in range(1,1001):  \r\n       # order of number  \r\n       order = len(str(num))  \r\n          \r\n       # initialize sum  \r\n       sum = 0  \r\n  \r\n       # find the sum of the cube of each digit  \r\n       temp = num  \r\n       while(temp>0):  \r\n           digit = temp % 10  \r\n           sum += digit ** order  \r\n           temp //= 10  \r\n  \r\n       if(num == sum):  \r\n           print(num)", "task_id": 858}
{"finetuning_prompt": "\"\"\"\nCreate a python program to filter out the string words from a given list of strings.\n\"\"\"\n\ndef filter_string(list):\n", "finetuning_completion": "\r\n    return [item for item in list if isinstance(item, str)]", "task_id": 872}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the number of real roots for the given equation in terms of x.\n\"\"\"\n\ndef roots_of_equation(a, b, c):\n", "finetuning_completion": " \r\n    discriminant = (b*b) - (4*a*c) \r\n    if discriminant < 0: \r\n        roots = 0\r\n    elif discriminant == 0: \r\n        roots = 1\r\n    else: \r\n        roots = 2\r\n    return roots", "task_id": 878}
{"finetuning_prompt": "\"\"\"\nSort the given dictionary of students by their GPA in descending order.\n\"\"\"\n\ndef sort_by_gpa(student_dict):\n", "finetuning_completion": " \r\n    temp_dict = student_dict.copy() \r\n    output = [] \r\n    for key, value in sorted(temp_dict.items(), \r\n                             key = lambda x: x[1],  \r\n                             reverse = True): \r\n        output.append((key, value)) \r\n    return output", "task_id": 881}
{"finetuning_prompt": "\"\"\"\nGenerate a function to create a dictionary of characters with their positions in the given string.\n\"\"\"\n\ndef char_position(string):\n", "finetuning_completion": " \r\n    dict = {} \r\n    for n in range(len(string)): \r\n        dict[string[n]] = n  \r\n    return dict", "task_id": 885}
{"finetuning_prompt": "\"\"\"\nConstruct a program to sort the given list of strings by their lengths.\n\"\"\"\n\ndef sort_by_length(list):\n", "finetuning_completion": " \r\n  list.sort(key = len) \r\n  return list", "task_id": 888}
{"finetuning_prompt": "\"\"\"\nConstruct a program to delete the duplicate words from a given sentence.\n\"\"\"\n\ndef delete_duplicates(sentence):\n", "finetuning_completion": "\n    words = sentence.split()\n    unique = []\n    for word in words:\n        if word not in unique:\n            unique.append(word)\n    new_sentence = ' '.join(unique)\n    return new_sentence", "task_id": 890}
{"finetuning_prompt": "\"\"\"\nCreate a python program to classify a give list of numbers into negative, positive and zero.\n\"\"\"\n\ndef classify_list(list):\n", "finetuning_completion": "\n    negative = []\r\n    positive = []\r\n    zero = []\r\n\r\n    for n in list:\r\n        if n < 0:\r\n            negative.append(n)\r\n        elif n > 0:\r\n            positive.append(n)\r\n        else:\r\n            zero.append(n)\r\n    return negative, positive, zero", "task_id": 891}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if two given strings are anagrams of another.\n\"\"\"\n\ndef isAnagram(str1, str2):\n", "finetuning_completion": " \r\n\t# create the lists of letters \r\n\tlist1 = [letter for letter in str1.lower()] \r\n\tlist2 = [letter for letter in str2.lower()] \r\n\r\n\t# sort the lists \r\n\tlist1.sort() \r\n\tlist2.sort() \r\n\r\n\t# if the sorted lists are equal, then the strings are anagrams \r\n\treturn list1 == list2", "task_id": 894}
{"finetuning_prompt": "\"\"\"\nCreate a program to forward a string character by the given number of positions.\n\"\"\"\n\ndef forward_characters(str, num):\n", "finetuning_completion": "\r\n    new_str = \"\"\r\n    for char in str:\r\n        new_str += chr(ord(char)+num)\r\n    return new_str\r\n    \r\nprint(forward_characters(\"Hello\", 3)) # Khoor", "task_id": 904}
{"finetuning_prompt": "\"\"\"\nWrite a function to compare two given dictionaries and output the changed values.\n\"\"\"\n\ndef compare_dictionaries(dic1, dic2):\n", "finetuning_completion": "\r\n    diff = {k: dic1[k] for k in dic1 if k not in dic2}\r\n    diff.update({k: dic2[k] for k in dic2 if k not in dic1})\r\n    for k in set(dic1) & set(dic2):\r\n        if dic1[k] != dic2[k]:\r\n            diff[k] = (dic1[k], dic2[k])\r\n    return diff", "task_id": 911}
{"finetuning_prompt": "\"\"\"\nDevelop a function to determine if a given number is a palindrome.\n\"\"\"\n\ndef is_palindrome(num):\n", "finetuning_completion": " \n    temp = num \n    rev = 0\n    while temp != 0: \n        rev = (rev * 10) + (temp % 10) \n        temp = temp // 10\n    if num == rev: \n        return True\n    else: \n        return False", "task_id": 915}
{"finetuning_prompt": "\"\"\"\nCreate a code to print the frequency of each character in the provided string.\n\"\"\"\n\ndef char_freq(str1):\n", "finetuning_completion": " \r\n    dict = {i:str1.count(i) for i in str1} \r\n    return dict", "task_id": 922}
{"finetuning_prompt": "\"\"\"\nDevelop a sorting algorithm to arrange a given set of numbers in ascending order.\n\"\"\"\n\ndef bubble_sort(nums):\n", "finetuning_completion": " \r\n    for i in range(len(nums)-1): \r\n        for j in range(len(nums) - 1 - i):\r\n            if (nums[j] > nums[j + 1]):\r\n                #swap elements\r\n                temp = nums[j]\r\n                nums[j] = nums[j+1]\r\n                nums[j+1] = temp\n    return nums", "task_id": 930}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two integers as arguments and finds the greatest common divisor.\n\"\"\"\n\ndef find_GCD(num1, num2):\n", "finetuning_completion": " \r\n    while(num2): \r\n        num1, num2 = num2, num1 % num2 \r\n  \r\n    return num1 \r\n      \r\nprint(find_GCD(8, 12)) # Output: 4", "task_id": 935}
{"finetuning_prompt": "\"\"\"\nConstruct an efficient algorithm to join two sorted arrays.\n\"\"\"\n\ndef join_sorted_arrays(a1, a2):\n", "finetuning_completion": "\r\n    result = []\r\n    i, j = 0, 0\r\n    while i < len(a1) and j < len(a2):\r\n        if a1[i] < a2[j]:\r\n            result.append(a1[i])\r\n            i += 1\r\n        else:\r\n            result.append(a2[j])\r\n            j += 1\r\n    result += a1[i:]\r\n    result += a2[j:]\r\n    return result", "task_id": 938}
{"finetuning_prompt": "\"\"\"\nCreate a reverse word lookup search program.\n\"\"\"\n\ndef reverse_word_lookup(word):\n", "finetuning_completion": "\r\n  reversed_word = ''\r\n  for char in word:\r\n    reversed_word = char + reversed_word\r\n  return reversed_word\r\n  \r\nword = 'Hello'\r\nprint(reverse_word_lookup(word))", "task_id": 944}
{"finetuning_prompt": "\"\"\"\nDesign a program to extract the top 5 recurring words in a given text.\n\"\"\"\n\ndef get_top_words(input_string):\n", "finetuning_completion": " \n\timport collections \r\n\r\n\t# split the string into words \r\n\tsplit_it = input_string.split() \r\n\t\r\n\t# Pass the split_it list to instance of Counter class. \r\n\tCounter = collections.Counter(split_it) \r\n\r\n\t# most_common() produces k frequently encountered \r\n\t# input values and their respective counts. \r\n\tmost_occur = Counter.most_common(5) \r\n\r\n\tprint(most_occur)", "task_id": 949}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine  if given a string is a valid parentheses combination\n\"\"\"\n\ndef valid_parentheses(s):\n", "finetuning_completion": " \n\tstack = [] \n\topens = ['(', '[', '{'] \n\tcloses = [')', ']', '}'] \n \n\tfor brace in s: \n\t\tif brace in opens: \n\t\t\tstack.append(brace) \n\t\telif brace in closes: \n\t\t\tif len(stack) == 0: \n\t\t\t\treturn False \n\t\t\topenbrace = stack.pop() \n\t\t\tif not opens.index(openbrace) == closes.index(brace): \n\t\t\t\treturn False \n\tif len(stack) > 0: \n\t\treturn False \n\telse: \n\t\treturn True", "task_id": 960}
{"finetuning_prompt": "\"\"\"\nGiven two lists, write a function to find the elements present in both lists.\n\"\"\"\n\ndef find_elements_in_both(list1,list2):\n", "finetuning_completion": "\r\n    result= []\r\n    for i in list1:\r\n        if i in list2:\r\n            result.append(i)\r\n    return result", "task_id": 967}
{"finetuning_prompt": "\"\"\"\nWrite a function to delete all the occurrences of a specified element in an array.\n\"\"\"\n\ndef delete_all(arr, element):\n", "finetuning_completion": "\r\n    new_arr = []\r\n    for item in arr:\r\n        if item != element:\r\n            new_arr.append(item)\r\n    return new_arr", "task_id": 972}
{"finetuning_prompt": "\"\"\"\nCreate a program to classify a given statement as true, false or uncertain.\n\"\"\"\n\ndef classify_statement(statement):\n", "finetuning_completion": "\r\n    words = statement.split()\r\n    if \"true\" in words or \"false\" in words:\r\n        return \"true\" if \"true\" in words else \"false\"\r\n    else:\r\n        return \"uncertain\"", "task_id": 973}
{"finetuning_prompt": "\"\"\"\nCreate a program to classify whether an integer is a prime or not.\n\"\"\"\n\ndef is_prime(n):\n", "finetuning_completion": "\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "task_id": 975}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute pairwise distance between two arrays of points.\n\"\"\"\n\nimport scipy.spatial \r\n  \r\ndef compute_pairwise_distance(Points1, Points2):\n", "finetuning_completion": " \r\n    return scipy.spatial.distance.cdist(Points1, Points2)", "task_id": 986}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate minimum number of coins change for a given sum.\n\"\"\"\n\ndef min_coin_change (sum, list_of_coins):\n", "finetuning_completion": " \r\n  \r\n\t# dynamic tabulation \r\n\t#initialize table of size sum+1  \r\n\ttable = [sum+1 for i in range(sum+1)] \r\n  \r\n\t# base case \r\n\ttable[0] = 0\r\n  \r\n\t# calculating minimum coins for value in range [1, sum] \r\n\tfor i in range(1, sum+1): \r\n  \r\n\t\t# calculate minimum coins for every j \r\n\t\tfor j in list_of_coins: \r\n\t\t\tif j <= i: \r\n\t\t\t\t# add 1 to previously calculated minimum  \r\n\t\t\t\t\t# coins since 1 is added to that minimum \r\n\t\t\t\ttable[i] = min(table[i], 1 + table[i-j]) \r\n\t\t\t\t\r\n\t#if the last value of table isn't INF then return table[sum] \r\n\treturn table[sum] if table[sum] != sum+1 else -1", "task_id": 992}
{"finetuning_prompt": "\"\"\"\nGenerate a python program for calculating factorial of a given number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \r\n    if n < 0: \r\n        return 0\r\n    elif n == 0 or n == 1: \r\n        return 1\r\n    else: \r\n        fact = 1\r\n        while (n > 1): \r\n            fact *= n\r\n            n -= 1 \r\n        return fact", "task_id": 994}
{"finetuning_prompt": "\"\"\"\nWrite a python program to display the current day and time from a given timestamp.\n\"\"\"\n\ndef display_day_time(input_timestamp):\n", "finetuning_completion": "\n    import datetime\n    current_day = datetime.datetime.fromtimestamp(input_timestamp).strftime('%A')\r\n    current_time = datetime.datetime.fromtimestamp(input_timestamp).strftime('%H:%M')\r\n    return (' Today is ' + current_day + ' and the current time is ' + current_time)\r\n\nprint(display_day_time(1594489322))", "task_id": 997}
{"finetuning_prompt": "\"\"\"\nWrite a function that, given an input array, creates a new array where each element is equal to the product of all elements in the original array, except itself.\n\"\"\"\n\ndef product_except_self(arr):\n", "finetuning_completion": "\n  if (len(arr) < 1): \n    return 0\n  temp = 1        \n  result = []\n  for i in arr:\n    result.append(temp)\n    temp *= i\n  temp = 1\n  for i in range(len(arr)-1,-1,-1):\n    result[i] *= temp\n    temp *= arr[i]\n  return result", "task_id": 1009}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two lists as input and returns a boolean value if their elements are the same.\n\"\"\"\n\ndef same_elements(test_list_1, test_list_2):\n", "finetuning_completion": " \r\n  set1 = set(test_list_1) \r\n  set2 = set(test_list_2) \r\n  return set1 == set2", "task_id": 1020}
{"finetuning_prompt": "\"\"\"\nCreate a program to remove all items from a given list of strings with length less than 8.\n\"\"\"\n\ndef remove_string(test_list):\n", "finetuning_completion": "\n  res = [str for str in test_list if len(str) >= 8]\n  return res", "task_id": 1021}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a list of strings and sorts them alphabetically in descending order.\n\"\"\"\n\n# Create a function that takes a list of strings\ndef alpha_sort(lst):\n", "finetuning_completion": " \n    # Sort the strings in descending order\n    lst.sort(reverse=True) \n  \n    # Return the result\n    return lst \n      \n# Input list of strings\nlst = ['apple', 'orange', 'banana']\n  \n# Call the function\nres = alpha_sort(lst) \n  \n# Print the result\nprint (\"Sorted List in Descending Order :\") \nfor i in res: \n    print (i)", "task_id": 1032}
{"finetuning_prompt": "\"\"\"\nWrite a python program to optimize a given program using dynamic programming.\n\"\"\"\n\n# Creating a knapsack function \r\ndef knapsack(w, val, W):\n", "finetuning_completion": " \r\n      \r\n    # Initializing the Matrix with 0's \r\n    matrix = [[0 for x in range(W + 1)] for y in range(len(w) + 1)] \r\n   \r\n    # Populating the Matrix using bottom-up approach \r\n    for i in range(len(w) + 1): \r\n        for j in range(W + 1): \r\n            # If no items or weight is 0 then the value is 0 \r\n            if i == 0 or j == 0: \r\n                matrix[i][j] = 0\r\n            # If weight of the item is  less than the current weight, then check which has greater total value. \r\n            elif w[i - 1] <= j: \r\n                matrix[i][j] = max(val[i - 1] + matrix[i - 1][j - w[i - 1]],   matrix[i - 1][j]) \r\n            # If weight > j, move to the left item \r\n            else: \r\n                matrix[i][j] = matrix[i - 1][j] \r\n  \r\n    # Return the greatest total value \r\n    return matrix[len(w)][W] \r\n  \r\n# Files for input and output \r\nw = [2, 3, 1, 6, 4] \r\nval = [20, 10, 5, 40, 15] \r\nW = 8\r\n  \r\n# Call the function    \r\nres = knapsack(w, val, W)\r\n# Print the result  \r\nprint (\"Maximum total value is: \", res)", "task_id": 1034}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, write a program to find the most frequent number.\n\"\"\"\n\ndef most_frequent(nums):\n", "finetuning_completion": "\r\n    n = len(nums)\r\n    max_frequency = 0\r\n    max_number = None\r\n    for i in range(n): \r\n        number = nums[i] \r\n        count = 1\r\n        for j in range(i + 1, n): \r\n            if (nums[j] == number): \r\n                count += 1\r\n        if (count > max_frequency): \r\n            max_frequency = count \r\n            max_number = number \r\n    return max_number", "task_id": 1049}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, sort it in decreasing order using insertion sort.\n\"\"\"\n\ndef insertion_sort_desc(arr):\n", "finetuning_completion": " \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key > arr[j] : \n                arr[j + 1] = arr[j] \r\n                j -= 1\r\n        arr[j + 1] = key \r\n    return arr", "task_id": 1050}
{"finetuning_prompt": "\"\"\"\nReverse an array in place.\n\"\"\"\n\ndef reverse_array(arr):\n", "finetuning_completion": " \n    n = len(arr) \n    for i in range(n // 2): \n        arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n    return arr", "task_id": 1054}
{"finetuning_prompt": "\"\"\"\nSort the given dictionary of lists based on the element\u2019s second value from low to high.\n\"\"\"\n\ndef sort_dict_list(test_dict):\n", "finetuning_completion": "\n    sorted_dict = dict(sorted(test_dict.items(), key=lambda kv: kv[1][1]))\n    return (sorted_dict)", "task_id": 1055}
{"finetuning_prompt": "\"\"\"\nWrite a python program to search for a specific word in a given text.\n\"\"\"\n\ndef search_Word(text, word):\n", "finetuning_completion": "\r\n    text_arr = text.split()\r\n    for word_ in text_arr:\r\n        if word_ == word:\r\n            return True\r\n    return False", "task_id": 1061}
{"finetuning_prompt": "\"\"\"\nWrite a python code to generate a multiplication table of size N.\n\"\"\"\n\ndef generate_Table(n):\n", "finetuning_completion": " \r\n    for i in range(1, n+1): \r\n        for j in range(1, n+1): \r\n            print(i * j, end='\\t') \r\n        print()", "task_id": 1062}
{"finetuning_prompt": "\"\"\"\nCreate a function in Python to calculate the maximum elements of a matrix.\n\"\"\"\n\ndef max_element_matrix(test_matrix):\n", "finetuning_completion": " \r\n    max_list = [] \r\n    for sublist in test_matrix: \r\n        max_list.append(max(sublist)) \r\n    return max(max_list)", "task_id": 1072}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the absolute frequency of each letter in a string.\n\"\"\"\n\ndef calc_freq(s):\n", "finetuning_completion": "\n    res = {} \n    for i in s: \n        if i in res: \n            res[i] += 1\n        else: \n            res[i] = 1\n    return res", "task_id": 1079}
{"finetuning_prompt": "\"\"\"\nCreate a function to print all elements in a given array in reverse order.\n\"\"\"\n\ndef reverse_array(arr):\n", "finetuning_completion": " \r\n    i = len(arr)-1\r\n    while i>=0: \n        print(arr[i], end=\" \") \r\n        i -= 1", "task_id": 1082}
{"finetuning_prompt": "\"\"\"\nImplement a function to produce an integer output from a given array of integers\n\"\"\"\n\ndef make_integer(input_list):\n", "finetuning_completion": " \n    integer_str = [str(num) for num in input_list] \n    out_str = \"\".join(integer_str) \n    return int(out_str)", "task_id": 1085}
{"finetuning_prompt": "\"\"\"\nFormat the given date string in the following format: YYYY/MM/DD\n\"\"\"\n\ndef format_date(date_str):\n", "finetuning_completion": " \n    day, month, year = date_str.split('/') \n    year_month_day = year + '/' + month + '/' + day \n    return year_month_day", "task_id": 1087}
{"finetuning_prompt": "\"\"\"\nSort the characters of the input string in alphabetical order.\n\"\"\"\n\ndef sort_characters(s):\n", "finetuning_completion": " \n    char_list = list(s) \n    char_list.sort() \n    return ''.join(char_list)", "task_id": 1088}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace all the vowels with a given character.\n\"\"\"\n\ndef replace_vowels(s, char):\n", "finetuning_completion": " \n    vowels =  \"aeiouAEIOU\" \n    for vowel in vowels: \n        s = s.replace(vowel, char) \n    return s", "task_id": 1089}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to search for a pattern in a string.\n\"\"\"\n\ndef find_pattern(str, pattern):\n", "finetuning_completion": " \r\n\tfor i in range(len(str) - len(pattern) + 1): \r\n\t\tj = 0\r\n\t\tfor j in range(0, len(pattern)): \r\n\t\t\tif str[i + j] != pattern[j]: \r\n\t\t\t\tbreak\r\n\t\tif j == len(pattern) - 1: \r\n\t\t\treturn i \r\n\treturn -1", "task_id": 1099}
{"finetuning_prompt": "\"\"\"\nGenerate a function to combine two streams of integers using the given function.\n\"\"\"\n\ndef combine_streams(stream1, stream2, comb_func):\n", "finetuning_completion": "\n    res = []\n    for x in stream1:\n        for y in stream2:\n            res.append(comb_func(x,y))\n    return res", "task_id": 1103}
{"finetuning_prompt": "\"\"\"\nWrite a function that creates a unique array using the given variables.\n\"\"\"\n\ndef create_unique_array(arr1, arr2):\n", "finetuning_completion": " \n    unq_arr = [] \n    for i in arr1 + arr2: \n        if i not in unq_arr: \n            unq_arr.append(i) \n    return unq_arr", "task_id": 1107}
{"finetuning_prompt": "\"\"\"\nCreate a program to search for a list item in another list.\n\"\"\"\n\ndef search_list(list1, list2):\n", "finetuning_completion": "\n  for item in list1:\n    if item in list2:\n      return True\n  return False", "task_id": 1110}
{"finetuning_prompt": "\"\"\"\nGenerate an array with the square of all the elements of the given array.\n\"\"\"\n\ndef squared_array(arr):\n", "finetuning_completion": " \r\n\tsq_arr = [] \r\n\tfor i in arr: \r\n\t\tsq_arr.append(int(i)**2) \r\n\treturn sq_arr", "task_id": 1115}
{"finetuning_prompt": "\"\"\"\nWrite a function to print out the items in order from lowest to highest from a given list.\n\"\"\"\n\ndef order_print(input_list):\n", "finetuning_completion": "\r\n    input_list.sort()\r\n    print(input_list)", "task_id": 1119}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to calculate the total number of vowels in a given sentence.\n\"\"\"\n\ndef number_of_vowels(sentence):\n", "finetuning_completion": "\n    vowels = 'aeiouAEIOU'\r\n    count = 0\r\n    for i in sentence:\r\n        if i in vowels:\r\n            count += 1\r\n    return count", "task_id": 1123}
{"finetuning_prompt": "\"\"\"\nInvent a function that takes two paths and returns whether one is a subdirectory of another.\n\"\"\"\n\ndef is_subdir(parent, child):\n", "finetuning_completion": "\r\n  parent_list = parent.split('/')\r\n  child_list = child.split('/')\r\n  if len(child_list) <= len(parent_list):\r\n    return False\r\n  return all(p == c for p, c in zip(parent_list, child_list))", "task_id": 1126}
{"finetuning_prompt": "\"\"\"\nWrite a python function that can format given string with two levels of text indentation.\n\"\"\"\n\ndef insert(s, idx,val):\n", "finetuning_completion": " \r\n    return s[:idx] + val + \"\\t\" + s[idx:]", "task_id": 1132}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the number of unique characters in a string.\n\"\"\"\n\ndef get_unique(s):\n", "finetuning_completion": " \n    # use a set to store the unique characters  \n    chars = set() \n    for c in s: \n        # add the character to the set if it does not exist \n        if  c not in chars: \n            chars.add(c) \r\n    # return the length of the set (number of unique characters) \n    return len(chars)", "task_id": 1136}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a range of numbers from 'm' to 'n' without using loops.\n\"\"\"\n\ndef generate_range(m, n):\n", "finetuning_completion": "  \n    # initialize a list  \r\n    arr = []  \r\n    # recursively append the numbers to the list  \r\n    arr = _generate_range(arr, m, n) \r\n  \r\n    return arr \r\n  \r\ndef _generate_range(arr, m, n) : \r\n  \r\n    # base case \r\n    if m > n : \r\n        return arr \r\n  \r\n    # append the number to the list \r\n    arr.append(m)  \r\n      \r\n    # recursively call  \r\n    arr = _generate_range(arr, m + 1, n) \r\n  \r\n    return arr", "task_id": 1139}
{"finetuning_prompt": "\"\"\"\nGenerate a function in python to calculate the maximum contiguous subset sum in an array.\n\"\"\"\n\ndef maxSubsetSum(arr):\n", "finetuning_completion": "\n    globalMax, localMax = -100000000000, 0\n    for x in arr: \n       localMax = max(x, x + localMax) \n       globalMax = max(globalMax, localMax) \n    return globalMax", "task_id": 1142}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two strings as input and returns the longest common sub-sequence.\n\"\"\"\n\ndef lcs(X, Y):\n", "finetuning_completion": " \n    m = len(X) \r\n    n = len(Y) \r\n  \r\n    L = [[0 for x in range(n+1)] for x in range(m+1)] \r\n  \r\n    for i in range(m+1): \r\n        for j in range(n+1): \r\n            if i == 0 or j == 0: \r\n                L[i][j] = 0\r\n            elif X[i-1] == Y[j-1]: \r\n                L[i][j] = L[i-1][j-1] + 1\r\n            else: \r\n                L[i][j] = max(L[i-1][j], L[i][j-1]) \r\n  \r\n    index = L[m][n] \r\n  \r\n    lcs=[\"\"]*(index+1) \r\n    lcs[index] = \"\" \r\n  \r\n    i = m \r\n    j = n \r\n    while i > 0 and j > 0: \r\n  \r\n        if X[i-1] == Y[j-1]: \r\n            lcs[index - 1] = X[i-1] \r\n            i-=1\r\n            j-=1\r\n            index-=1\r\n  \r\n        elif L[i-1][j] > L[i][j-1]: \r\n            i-=1\r\n        else: \r\n            j-=1\r\n  \r\n    return \"\".join(lcs)", "task_id": 1147}
{"finetuning_prompt": "\"\"\"\nUsing the given list of words, create a function to identify how many words are palindromes.\n\"\"\"\n\ndef count_palindromes(word_list):\n", "finetuning_completion": " \r\n    count = 0\r\n    for word in word_list: \r\n        if word == word[::-1]: \r\n            count += 1\r\n    return count", "task_id": 1151}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to find the longest common sub-string in two given strings.\n\"\"\"\n\ndef LCSubStr(X, Y, m, n):\n", "finetuning_completion": " \r\n    # Create a table to store lengths of  \r\n    # longest common suffixes of substrings.  \r\n    # Note that LCSuff[i][j] contains length  \r\n    # of longest common suffix of X[0..i-1]  \r\n    # and Y[0..j-1]. The first row and \r\n    # first column entries have no logical  \r\n    # meaning, they are used only for  \r\n    # simplicity of program \r\n    LCSuff = [[0 for k in range(n+1)] for l in range(m+1)] \r\n  \r\n    # To store the length of  \r\n    # longest common substring \r\n    result = 0 \r\n  \r\n    # Following steps to build \r\n    # LCSuff[m+1][n+1] in bottom \r\n    # up fashion \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if (i == 0 or j == 0): \r\n                LCSuff[i][j] = 0\r\n            elif (X[i-1] == Y[j-1]): \r\n                LCSuff[i][j] = LCSuff[i-1][j-1] + 1\r\n                result = max(result, LCSuff[i][j]) \r\n            else: \r\n                LCSuff[i][j] = 0\r\n    return result", "task_id": 1160}
{"finetuning_prompt": "\"\"\"\nGenerate a code to return the unique element in an array by removing all duplicate elements.\n\"\"\"\n\ndef unique_array_elements(arr):\n", "finetuning_completion": " \r\n  \r\n    # Get unique values \r\n    unique_array = [] \r\n    for i in range(len(arr)): \r\n        if arr[i] not in unique_array: \r\n            unique_array.append(arr[i]) \r\n  \r\n    return unique_array", "task_id": 1163}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the maximum product using multiplication of elements of an array.\n\"\"\"\n\ndef max_product_array(arr):\n", "finetuning_completion": " \n  \n    # Sorting the given array  \n    arr.sort() \n  \n    # Returning the last two maximum multiplied elements to get maximum product  \n    return arr[-1]*arr[-2]", "task_id": 1164}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the different characters in two strings.\n\"\"\"\n\ndef find_diff_character(str1, str2):\n", "finetuning_completion": " \n  \n    # Using set() to remove the duplicate characters \n    s1 = set(str1) \n    s2 = set(str2) \n  \n    # Find and print the difference between two strings \n    result = s1 - s2 \n  \r\n    # Print result \r\n    return result \r\n  \r\nstr1 = \"abcdef\" \r\nstr2 = \"aiopq\" \r\nresult = find_diff_character(str1, str2) \r\nprint(result)", "task_id": 1165}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the sum of successive Fibonacci numbers upto a given number n.\n\"\"\"\n\n# function to find fibonacci series upto n \r\ndef successive_sum_fibonacci(n):\n", "finetuning_completion": " \r\n\r\n    # Initialize first two Fibonacci \r\n    # numbers and their sum \r\n    a = 0\r\n    b = 1\r\n    sm = a + b \r\n\r\n    # Add remaining terms \r\n    while (n-2): \r\n        c = a + b \r\n        sm = sm + c \r\n        # update values  \r\n        a = b \r\n        b = c \r\n        n = n - 1\r\n  \r\n    return sm \n  \n# Driver's code \r\nn = 18\r\nprint(\"Sum of Fibonacci numbers is :\", \r\n           successive_sum_fibonacci(n))", "task_id": 1168}
{"finetuning_prompt": "\"\"\"\nConstruct a function to find the maximum sum of all paths from top left to bottom right of a given matrix.\n\"\"\"\n\ndef maxSumPath(mat):\n", "finetuning_completion": "\n    m = len(mat) \n    n = len(mat[0]) \n    dp = [[0 for i in range(n)] for i in range(m)] \n    # Filling dp[i][0] \n    dp[0][0] = mat[0][0] \n\n    # Filling first column of \n    # the dp matrix \n    for i in range(1, m): \n        dp[i][0] = mat[i][0] + dp[i-1][0] \n    # Filling first row of the \n    # dp matrix \n    for j in range(1, n): \n        dp[0][j] = mat[0][j] + dp[0][j-1] \n    # Filling the remaining  \n    # elements  \n    for i in range(1, m): \n        for j in range(1, n): \n            dp[i][j] = mat[i][j] + max(dp[i][j-1], \n                                 dp[i-1][j]) \n    return dp[m-1][n-1]", "task_id": 1173}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the maximum sum of elements in a subarray of size k.\n\"\"\"\n\ndef max_sum_subarr(arr, k):\n", "finetuning_completion": " \n\tmax_sum = 0\n\tcurr_sum = 0\n\tfor i in range(len(arr)): \n\t\tcurr_sum += arr[i] \n\t\tif i >= k-1: \n\t\t\tmax_sum = max(max_sum, curr_sum) \n\t\t\tcurr_sum -= arr[i-(k-1)] \n\treturn max_sum;", "task_id": 1174}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to find the maximum sum of an increasing subsequence in an array.\n\"\"\"\n\ndef maxSumIS(arr):\n", "finetuning_completion": " \n\tn = len(arr) \n\tmax = 0\n\tMSIS = [0] * n \n\tfor i in range(n): \n\t\tMSIS[i] = arr[i] \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and MSIS[i] < MSIS[j] + arr[i]): \n\t\t\t\tMSIS[i] = MSIS[j] + arr[i] \n\tfor i in range(n): \n\t\tif (max < MSIS[i]): \n\t\t\tmax = MSIS[i] \n\treturn max", "task_id": 1176}
{"finetuning_prompt": "\"\"\"\nDevelop a program to print the total number of items in a given dictionary.\n\"\"\"\n\ndef get_total_items_in_dict(dict_input):\n", "finetuning_completion": "\n    return len(dict_input)", "task_id": 1179}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm for binary search.\n\"\"\"\n\ndef binary_search(arr, target):\n", "finetuning_completion": " \r\n    low = 0\r\n    high = len(arr) - 1\r\n \r\n    while low <= high: \r\n        mid = (low + high) // 2\r\n \r\n        # Check if target is present at mid \r\n        if arr[mid] == target: \r\n            return mid \r\n \r\n        # If target is greater, ignore left half \r\n        elif arr[mid] < target: \r\n            low = mid + 1\r\n \r\n        # If element is smaller, ignore right half \r\n        else: \r\n            high = mid - 1\r\n  \r\n    # If element is not present \r\n    return -1", "task_id": 1180}
{"finetuning_prompt": "\"\"\"\nCreate a function to find all the prime numbers in an array.\n\"\"\"\n\ndef get_prime_nums(arr):\n", "finetuning_completion": "\r\n    prime_nums = []\r\n    for i in arr:\r\n        if i > 1:\r\n            for j in range(2, i):\r\n                if (i%j) == 0:\r\n                    break\r\n            else:\r\n                prime_nums.append(i)\r\n    return prime_nums", "task_id": 1183}
{"finetuning_prompt": "\"\"\"\nWrite a function to tokenize text into bigrams.\n\"\"\"\n\ndef to_bigrams(text):\n", "finetuning_completion": " \n    bigrams = []  \n    words = text.split() \n    for i in range(len(words) - 1): \n        bigrams.append((words[i], words[i + 1])) \n    return bigrams", "task_id": 1185}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a given string and replaces all the occurances of a given word with its synonym.\n\"\"\"\n\ndef replace_with_synonym(text,replacing_word):\n", "finetuning_completion": " \r\n    words = text.split(' ') \r\n    for i,w in enumerate(words): \r\n        if w == replacing_word: \r\n            words[i] = 'mewed' \r\n    return ' '.join(words)", "task_id": 1187}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to remove duplicate characters from a string preserving the order of other characters.\n\"\"\"\n\ndef removeDuplicate(InputString):\n", "finetuning_completion": " \r\n    resultString = [] \r\n    seen = set() \r\n    for char in InputString: \r\n        if char not in seen: \r\n            seen.add(char) \r\n            resultString.append(char) \r\n  \r\n    return ''.join(resultString)", "task_id": 1190}
{"finetuning_prompt": "\"\"\"\nFind the most common elements in a list using a python program.\n\"\"\"\n\nfrom collections import Counter \r\n\r\ndef common_elements(myList):\n", "finetuning_completion": " \r\n\tcnt = Counter(myList) \r\n\tmax_occur = max(cnt.values()) \r\n\tlist_of_common = [k for k, v in cnt.items() if v == max_occur] \r\n    \r\n\treturn list_of_common", "task_id": 1192}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to find the maximum and minimum of three numbers.\n\"\"\"\n\ndef maximum_and_minimum(a, b, c):\n", "finetuning_completion": " \r\n\tmax_num = max(a, b, c)\r\n\tmin_num = min(a, b, c)\r\n\treturn max_num, min_num", "task_id": 1193}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to determine the sum of all even numbers in a given range.\n\"\"\"\n\ndef sum_of_even_numbers(start, end):\n", "finetuning_completion": " \r\n    even_numbers = [] \r\n    for num in range(start, end + 1): \r\n        if (num % 2 == 0): \r\n            even_numbers.append(num)\r\n    return sum(even_numbers)", "task_id": 1195}
{"finetuning_prompt": "\"\"\"\nCreate a python program to determine a check if a given array contains a subarray with zero sum?\n\"\"\"\n\ndef contains_zero_sum_subarray(myArray):\n", "finetuning_completion": " \r\n    curr_sum = 0\r\n    s = set()\r\n    for num in myArray: \r\n        curr_sum += num \r\n        if curr_sum == 0 or curr_sum in s: \r\n            return True\r\n        s.add(curr_sum)\r\n    return False", "task_id": 1196}
{"finetuning_prompt": "\"\"\"\nWrite a python program to determine if an array contains three values in sequence.\n\"\"\"\n\ndef have_three_values_in_sequence(myArray):\n", "finetuning_completion": " \r\n    for i in range(len(myArray)-2): \r\n        if myArray[i]+1 == myArray[i+1] and myArray[i+1]+1 == myArray[i+2]: \r\n            return True\r\n    return False", "task_id": 1197}
{"finetuning_prompt": "\"\"\"\nWrite a python program to search through a list of numbers by performing a binary search.\n\"\"\"\n\ndef binary_search(list, target):\n", "finetuning_completion": "\r\n    low = 0\r\n    high = len(list) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if list[mid] == target:\r\n            return mid\r\n        elif list[mid] < target:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return -1", "task_id": 1201}
{"finetuning_prompt": "\"\"\"\nDesign a python script that returns the most common element in a given array.\n\"\"\"\n\ndef most_common_element(sample_list):\n", "finetuning_completion": "\r\n    counts = {}\r\n    for element in sample_list:\r\n        counts[element] = counts.get(element, 0) + 1\r\n    return max(counts, key=counts.get)", "task_id": 1217}
{"finetuning_prompt": "\"\"\"\nGenerate a program to add a given number of elements in a list starting from a given index.\n\"\"\"\n\ndef add_elements_in_list(items, index, elements_to_add):\n", "finetuning_completion": "\n    result = items[:index]\n    for i in range(0, elements_to_add):\n        result.append(0)\n    result = result + items[index:]\n    return result", "task_id": 1227}
{"finetuning_prompt": "\"\"\"\nCreate a function to clean a string containing unnecessary whitespaces.\n\"\"\"\n\ndef cleanString(string):\n", "finetuning_completion": "\r\n    # Remove leading and trailing whitespaces\r\n    cleanString = string.strip() \r\n  \r\n    # Remove duplicate whitespaces \r\n    cleanString = \" \".join(cleanString.split()) \r\n  \r\n    return cleanString", "task_id": 1231}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort a list of tuples based on the tuple values.\n\"\"\"\n\ndef sort_tuple(tuples):\n", "finetuning_completion": " \r\n  \r\n    # key is set to sort using second  element of  \r\n    # sublist present in the main list \r\n    tuples.sort(key = lambda x: x[1])  \r\n    return tuples", "task_id": 1234}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the total cost of an item, including sales tax.\n\"\"\"\n\ndef total_cost(cost, tax):\n", "finetuning_completion": "\r\n  return round(cost + cost * (tax/100),2)", "task_id": 1243}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the square root of a number without using the sqrt() function\n\"\"\"\n\ndef squareRoot(a):\n", "finetuning_completion": "\n    error = 0.00001\n    x = a\n    while ( x - a/x > error ): \n        x = (x + a/x) / 2\n    return x", "task_id": 1245}
{"finetuning_prompt": "\"\"\"\nProduce a code for a program for merging two given sorted lists.\n\"\"\"\n\ndef merge_sorted_lists(list1, list2):\n", "finetuning_completion": "\r\n    list3 = []\r\n\r\n    while list1 and list2:\r\n        if list1[0] < list2[0]:\r\n            list3.append(list1.pop(0))\r\n        else: \r\n            list3.append(list2.pop(0))\r\n    while list1:\r\n        list3.append(list1.pop(0))\r\n    while list2: \r\n        list3.append(list2.pop(0))\r\n\r\n    return list3", "task_id": 1249}
{"finetuning_prompt": "\"\"\"\nFormulate a program to find all the pairs in a given array, which has a sum k.\n\"\"\"\n\ndef find_pairs_sum_k(arr, k):\n", "finetuning_completion": "\n    seen = set()  \n    output = set() \n    for num in arr:\n        if (k - num) in seen: \n            output.add((min(num, k-num), max(num, k-num))) \n        seen.add(num)\n    return output", "task_id": 1252}
{"finetuning_prompt": "\"\"\"\nCreate a procedure to find the length of the longest substring in an array of characters in Python.\n\"\"\"\n\ndef longest_substring(arr1):\n", "finetuning_completion": " \r\n\ts = \"\"\r\n\tlongest_substr =\"\"\r\n\tfor i in range(0,len(arr1)): \r\n\t\tif (arr1[i] in s): \r\n\t\t\tif (len(s) > len(longest_substr)): \r\n\t\t\t\tlongest_substr = s \r\n\t\t\t\ts = s[s.index(arr1[i]) + 1:] \r\n\t\t\telse: \r\n\t\t\t\ts = s[s.index(arr1[i]) + 1:] \r\n\t\ts += arr1[i] \r\n\tif (len(s) > len(longest_substr)): \r\n\t\tlongest_substr = s \r\n\treturn len(longest_substr)", "task_id": 1262}
{"finetuning_prompt": "\"\"\"\nDesign a complex algorithm to determine whether the input string has all unique characters\n\"\"\"\n\ndef is_unique(string1):\n", "finetuning_completion": " \n\tchars = set()\n\tfor char in string1: \n\t\tif char in chars: \n\t\t\treturn False\n\t\telse: \n\t\t\tchars.add(char)\n\treturn True", "task_id": 1266}
{"finetuning_prompt": "\"\"\"\nTranslate the following pseudocode into a Python function.\n\"\"\"\n\ndef reverse_str(str1):\n", "finetuning_completion": " \r\n  \r\n    to_reverse = str1 \r\n    reverse_str = \"\" \r\n  \r\n    for i in range(len(to_reverse)-1, -1, -1): \r\n        reverse_str += to_reverse[i] \r\n  \r\n    return reverse_str \nprint(reverse_str(\"engineer\")) # output: reenigne", "task_id": 1272}
{"finetuning_prompt": "\"\"\"\nEdit the existing python program to find the GCD of two numbers using LCM.\n\"\"\"\n\n# Python program to find GCD \n# of two numbers using LCM \n# Function to return gcd of a and b \ndef gcd(a, b):\n", "finetuning_completion": "  \n    if a == 0 or b == 0: \n        return 0 \n      \n    # Same as Euclid's algorithm \n    if a == b: \n        return a \n  \n    # If a is greater \n    if a > b: \n        return gcd(a-b, b) \n    return gcd(a, b-a) \n  \n# Returns GCD of two numbers \ndef gcdCalc(a, b): \n    return gcd(a, b) \n  \n# Returns LCM of two numbers \ndef lcm(a, b): \n    return (a*b) / gcdCalc(a, b) \n  \n# Driver program to test above function \na = 15\nb = 20\nprint('GCD of', a, 'and', b, 'is', gcdCalc(a, b))  \nprint('LCM of', a, 'and', b, 'is', lcm(a, b))", "task_id": 1273}
{"finetuning_prompt": "\"\"\"\nGenerate an array of all prime numbers between the two given numbers.\n\"\"\"\n\ndef prime_array(min,max):\n", "finetuning_completion": " \n    prime_list = [] \n    for num in range(min,max + 1): \n        if num > 1: \n            for i in range(2,num): \n                if (num % i) == 0: \n                    break \n            else: \n                 prime_list.append(num) \n    return prime_list", "task_id": 1277}
{"finetuning_prompt": "\"\"\"\nWrite a function to return a new list that contains the only items in the list supplied that are not prime numbers.\n\"\"\"\n\ndef get_non_prime_numbers(nums):\n", "finetuning_completion": "\r\n    result = []\r\n    for n in nums:\r\n        if not is_prime(n):\r\n            result.append(n)\r\n    return result\r\n    \r\ndef is_prime(n):\r\n    if n <= 1: \r\n        return False\r\n    for i in range(2, n): \r\n        if n % i == 0: \r\n            return False\r\n    return True", "task_id": 1282}
{"finetuning_prompt": "\"\"\"\nBuild a program to return any number greater than 2 but less than 8 that appears only once in an array.\n\"\"\"\n\ndef find_unique_number(arr):\n", "finetuning_completion": "\r\n    array_set = set(arr)\r\n    for val in array_set:\r\n        if val > 2 and val < 8 and arr.count(val) == 1:\r\n            return val\r\n    return -1", "task_id": 1283}
{"finetuning_prompt": "\"\"\"\nGenerate a function to calculate the earnings for a given employee after tax\n\"\"\"\n\ndef post_tax_income(gross_salary):\n", "finetuning_completion": "\n    TAX_BRACKETS = [\n        (0, 0.10),\n        (1800, 0.15),\n        (4600, 0.25),\n        (10000, 0.28),\n        (30000, 0.33),\n        (40000, 0.35),\n        (60000, 0.396),\n    ]\n    tax = 0\n    remainder = gross_salary\n    for offset, rate in TAX_BRACKETS:\n        if remainder >= offset:\n            slab_income = min(remainder - offset, offset)\n            tax += slab_income * rate\n        remainder -= slab_income\n    return gross_salary - tax", "task_id": 1286}
{"finetuning_prompt": "\"\"\"\nWrite a recursive function to print Fibonacci numbers.\n\"\"\"\n\ndef Fibonacci(number):\n", "finetuning_completion": " \r\n\tif number <= 0: \r\n\t\tprint(\"Incorrect input\") \r\n\telif number == 1: \r\n\t\treturn 0\r\n\telif number == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn Fibonacci(number-1) + Fibonacci(number-2)", "task_id": 1288}
{"finetuning_prompt": "\"\"\"\nDefine a function to validate a given IPv4 address.\n\"\"\"\n\ndef is_valid_IPv4_address(IPv4Address):\n", "finetuning_completion": "\n    split_IP = IPv4Address.split(\".\")\n\n    # check if IP has 4 octets \n    if(len(split_IP) != 4): \n        return False\n    \n    # check each octet \n    for octet in split_IP: \n        if not octet.isdigit(): \n            return False\n        if(int(octet) > 255):\n            return False \n        \n    return True", "task_id": 1297}
{"finetuning_prompt": "\"\"\"\nDesign a function to combine two databases.\n\"\"\"\n\ndef merge_databases(database1, database2):\n", "finetuning_completion": "\n    combined = {**database1, **database2}\n    return combined", "task_id": 1298}
{"finetuning_prompt": "\"\"\"\nEstimate the average age of a given list of customers.\n\"\"\"\n\ndef mean_age(customers):\n", "finetuning_completion": "\r\n    age_total = 0\r\n    for i in customers:\r\n        age_total += i[\"age\"]\r\n    return age_total/len(customers)", "task_id": 1300}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to auto-generate a list of 10 numbers which are multiples of 6.\n\"\"\"\n\ndef list_of_multiples(num):\n", "finetuning_completion": " \r\n  \r\n    result=[] \r\n    for i in range(1, 11): \r\n        result.append(num*i) \r\n    return result \r\n  \r\nresult = list_of_multiples(6) \r\nprint (result)", "task_id": 1305}
{"finetuning_prompt": "\"\"\"\nGenerate a program to extract the last two words in a given string.\n\"\"\"\n\ndef last_two_words(string):\n", "finetuning_completion": "\r\n    str = string.split()\r\n    return str[-2] + str[-1]", "task_id": 1316}
{"finetuning_prompt": "\"\"\"\nEdit a given program to replace all the '0' with '-1' in the output list.\n\"\"\"\n\ndef iq_Test(string):\n", "finetuning_completion": "\n    res = []\n    for i in string:\n        if i == '0':\n            res.append(-1)\n        else :\n            res.append(1)\n    return res", "task_id": 1317}
{"finetuning_prompt": "\"\"\"\nDevelop a program to test if two given strings are an anagram.\n\"\"\"\n\ndef anagram_checker(str1, str2):\n", "finetuning_completion": "  \r\n    # Remove all whitespaces and convert string to lower case  \r\n    # to simplify comparison  \r\n    str1 = str1.replace(\" \",\"\").lower()  \r\n    str2 = str2.replace(\" \",\"\").lower()  \r\n  \r\n    # We have to disregard duplicates in the comparison  \r\n    # to simplify it, we can just sort them in alphabetical order  \r\n    str1 = ''.join(sorted(str1))  \r\n    str2 = ''.join(sorted(str2)) \r\n  \r\n    if(str1 == str2): \r\n        return True \r\n    else: \r\n        return False", "task_id": 1326}
{"finetuning_prompt": "\"\"\"\nCode an algorithm to check if the given string is an anagram.\n\"\"\"\n\ndef anagram(s1, s2):\n", "finetuning_completion": " \r\n  \r\n    n1 = len(s1) \r\n    n2 = len(s2) \r\n  \r\n    if n1 != n2: \r\n        return False\r\n  \r\n    s1 = sorted(s1) \r\n    s2 = sorted(s2) \r\n  \r\n    for i in range(0, n1): \r\n        if s1[i] != s2[i]: \r\n            return False\r\n  \r\n    return True", "task_id": 1328}
{"finetuning_prompt": "\"\"\"\nConstruct a program to place/remove obstacles on a given path in a maze.\n\"\"\"\n\ndef add_obstacle(maze, x, y):\n", "finetuning_completion": " \r\n    maze[x][y] = 1 \r\n \r\ndef remove_obstacle(maze, x, y): \r\n    maze[x][y] = 0", "task_id": 1331}
{"finetuning_prompt": "\"\"\"\nWrite a code to search for a string in a given list of strings.\n\"\"\"\n\ndef string_Search(list1, search_str):\n", "finetuning_completion": " \r\n\tans =[] \r\n\tfor i in range(len(list1)): \r\n\t\tif list1[i] == search_str: \r\n\t\t\tans.append(i) \r\n\treturn ans", "task_id": 1340}
{"finetuning_prompt": "\"\"\"\nWrite a code to compute the sorted intersection of two sorted lists.\n\"\"\"\n\ndef intersection(list1,list2):\n", "finetuning_completion": "  \r\n\tanswer = []  \r\n\ti = j = 0\r\n\twhile (i < len(list1) and j < len(list2)): \r\n\t\tif list1[i] == list2[j]:  \r\n\t\t\tanswer.append(list1[i]) \r\n\t\t\ti += 1\r\n\t\t\tj += 1\r\n\t\telif list1[i] < list2[j]:  \r\n\t\t\ti += 1\r\n\t\telse:  \r\n\t\t\tj += 1\r\n\treturn answer", "task_id": 1342}
{"finetuning_prompt": "\"\"\"\nCreate a python module which encodes a given text.\n\"\"\"\n\nimport base64 \r\n\r\ndef encode(text):\n", "finetuning_completion": "  \r\n\ttext_bytes = text.encode('ascii') \r\n\tbase64_bytes = base64.b64encode(text_bytes) \r\n\treturn base64_bytes.decode('ascii')", "task_id": 1346}
{"finetuning_prompt": "\"\"\"\nWrite a python program to implement the heap sort algorithm on an array.\n\"\"\"\n\ndef heapSort(arr):\n", "finetuning_completion": " \r\n\tn = len(arr) \r\n\tfor i in range(n, -1, -1): \r\n\t\theapify(arr, n, i)   \r\n\tfor i in range(n-1, 0, -1): \r\n\t\tarr[i], arr[0] = arr[0], arr[i]  \r\n\t\theapify(arr, i, 0) \r\n\treturn arr\r\ndef heapify(arr, n, i): \r\n\tlargest = i  \r\n\tl = 2 * i + 1\t \r\n\tr = 2 * i + 2\t \r\n\tif l < n and arr[i] < arr[l]: \r\n\t\tlargest = l  \r\n\tif r < n and arr[largest] < arr[r]: \r\n\t\tlargest = r  \r\n\tif largest != i: \r\n\t\tarr[i],arr[largest] = arr[largest],arr[i]  \r\n\t\theapify(arr, n, largest)", "task_id": 1352}
{"finetuning_prompt": "\"\"\"\nGenerate a python script to collect all the unique substrings of length n from a string.\n\"\"\"\n\ndef unique_substrings(str, n):\n", "finetuning_completion": " \r\n  \r\n    # result \r\n    result = set() \r\n  \r\n    # start point \r\n    for i in range(len(str)): \r\n  \r\n        # end point \r\n        for j in range(i + 1,\r\n                            len(str) + 1): \r\n  \r\n            # length of substring \r\n            if (j - i == n): \r\n  \r\n                # add substring in set \r\n                result.add(str[i:j]) \r\n  \r\n    return result \r\n  \r\n# function call \r\nstr = \"hello world\"\r\nn = 3\r\nprint(unique_substrings(str, n))", "task_id": 1361}
{"finetuning_prompt": "\"\"\"\nDesign a python program to solve 2D knapsack problem.\n\"\"\"\n\ndef knapSack(weights, values, capacity):\n", "finetuning_completion": " \n    n = len(values) \n    \n    # Create a matrix \n    t = [[0 for j in range(capacity + 1)]  \n            for i in range(n + 1)] \n    \n    for i in range(n + 1): \n        for j in range(capacity + 1): \n            \n            # Base cases \n            if i==0 or j==0: \n                t[i][j] = 0\n            # If weight of item is more than Knapsack \n            # capacity, item can't be included \n            elif weights[i-1] <= j: \n                t[i][j] = max(values[i-1]  \n                                + t[i - 1][j - weights[i-1]], \n                                 t[i - 1][j]) \n            # Not taking the item \n            else: \n                t[i][j] = t[i - 1][j] \n    return t[n][capacity] \n\n# Driver code \nweights = [2, 3, 4, 6] \nvalues = [3, 4, 5, 8] \ncapacity = 8\nprint(knapSack(weights, values, capacity))", "task_id": 1365}
{"finetuning_prompt": "\"\"\"\nWrite a python program to encode a given array of strings.\n\"\"\"\n\ndef encode_Array(arr):\n", "finetuning_completion": " \r\n    # create a new array to store encoded words \r\n    new_arr = [] \r\n  \r\n    for i in range(len(arr)): \r\n        # encode each word in array \r\n        encoded = arr[i].encode('UTF-8') \r\n        # add encoded word to new array \r\n        new_arr.append(encoded) \r\n  \r\n    return new_arr", "task_id": 1372}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the longest common prefix among an array of strings.\n\"\"\"\n\ndef findLength(arr, n):\n", "finetuning_completion": " \r\n    minLen = len(arr[0]) \r\n\r\n    for i in range(1,n): \r\n        if (len(arr[i]) < minLen): \r\n            minLen = len(arr[i]) \r\n\r\n    for i in range(1,n): \r\n        j = 0\r\n        while (j < minLen and (arr[0][j] == arr[i][j])): \r\n            j+=1\r\n\r\n        minLen = j \r\n\r\n    return minLen \r\n    \r\narr = ['geeksforgeeks', 'geeks', 'geek', 'geezer'] \r\nn = len(arr) \r\nprint (\"The longest common prefix length is\", \r\n      findLength(arr, n));", "task_id": 1374}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the largest and the smallest elements in the given list, and print them out.\n\"\"\"\n\ndef find_maxmin(list):\n", "finetuning_completion": "\r\n    max_value= max(list) \r\n    min_value= min(list)\r\n    print (\"Largest element:\", max_value) \r\n    print (\"Smallest element:\", min_value)", "task_id": 1378}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove the negatives from a given list of numbers, and then multiply all remaining numbers by 2.\n\"\"\"\n\ndef remove_negatives(list):\n", "finetuning_completion": "\r\n    new_list = [num*2 for num in list if num >= 0]  \r\n    return new_list", "task_id": 1380}
{"finetuning_prompt": "\"\"\"\nDesign a python function to regex and search a given text stream.\n\"\"\"\n\nimport re\r\ndef search_text(text):\n", "finetuning_completion": "\r\n    pattern = re.compile(r\"\\bI\\b\")\r\n    result = re.search(pattern, text)\r\n    if result is not None:\r\n        return True\r\n    else:\r\n        return False", "task_id": 1385}
{"finetuning_prompt": "\"\"\"\nCreate a python program to mimic a cross match of two sets of alphabet.\n\"\"\"\n\ndef cross_match(set1, set2):\n", "finetuning_completion": " \r\n    output = [] \r\n    for elem1 in set1: \r\n        for elem2 in set2: \r\n            if elem1 == elem2: \r\n                output.append(elem1) \r\n    \r\n    return output", "task_id": 1386}
{"finetuning_prompt": "\"\"\"\nDesign a python program to check whether a given number is even or odd.\n\"\"\"\n\ndef check_number(num):\n", "finetuning_completion": " \r\n    if num % 2 == 0: \r\n        return \"Even\" \r\n    else: \r\n        return \"Odd\"", "task_id": 1388}
{"finetuning_prompt": "\"\"\"\nCreate a python function to print the starting and last index of each letter in the given string.\n\"\"\"\n\ndef index_string(string):\n", "finetuning_completion": " \r\n  char_dict = {} \r\n  for i in range(0, len(string)): \r\n    if string[i] in char_dict: \r\n      char_dict[string[i]][1] = i \r\n    else: \r\n      char_dict[string[i]] = [i, i] \r\n  return char_dict", "task_id": 1389}
{"finetuning_prompt": "\"\"\"\nConstruct a python function to find the smallest difference between 2 sets of numbers.\n\"\"\"\n\ndef diff_sets(set1, set2):\n", "finetuning_completion": " \r\n    min = float('inf') \r\n    for num1 in set1: \r\n        for num2 in set2: \r\n            diff = abs(num1 - num2) \r\n            if diff < min: \r\n                min = diff \r\n    return min", "task_id": 1392}
{"finetuning_prompt": "\"\"\"\nDesign a python function to group an array of strings into sublists of equal size.\n\"\"\"\n\ndef group_list(lst, n):\n", "finetuning_completion": " \r\n    sub_lists = [lst[i : i+n] for i in range(0, len(lst), n)] \r\n    return sub_lists", "task_id": 1393}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace all occurrences of a given string in an array with another string.\n\"\"\"\n\ndef replace_in_array(data, old_string, new_string):\n", "finetuning_completion": "\n  res = []\r\n  for i in data:\n    if i == old_string:\n      res.append(new_string)\n    else:\n      res.append(i)\n  return (res)", "task_id": 1397}
{"finetuning_prompt": "\"\"\"\nFind the number of different routes a person can take to go from point A to point B.\n\"\"\"\n\ndef num_routes(a, b):\n", "finetuning_completion": "\n    m = abs(a[0] - b[0])\n    n = abs(a[1] - b[1])\n    return int(math.factorial(m + n) / (math.factorial(m) * math.factorial(n)))", "task_id": 1416}
{"finetuning_prompt": "\"\"\"\nConstruct a search algorithm to find a specific item in an array.\n\"\"\"\n\ndef search_array(arr, target):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "task_id": 1419}
{"finetuning_prompt": "\"\"\"\nConstruct a code to remove the duplicates from a given dictionary.\n\"\"\"\n\ndef remove_duplicates(dictionary):\n", "finetuning_completion": "\n    seen = set()\n    new_dict = {}\n    for key, val in dictionary.items():\n        if val not in seen:\n            seen.add(val)\n            new_dict[key] = val\n    return new_dict", "task_id": 1420}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two string and compare them.\n\"\"\"\n\ndef compare_strings(string1, string2):\n", "finetuning_completion": "\n    if (string1 == string2):\n        return \"The strings are equal.\"\n    else:\n        return \"The strings are not equal.\"", "task_id": 1433}
{"finetuning_prompt": "\"\"\"\nWrite a function that multiplies two numbers without using the asterisk operator.\n\"\"\"\n\ndef multiply(a, b):\n", "finetuning_completion": " \r\n    # base case \r\n    if (b == 0): \r\n        return 0\r\n  \r\n    # add a to the result b times recursively \r\n    return a + multiply(a, b - 1)", "task_id": 1448}
{"finetuning_prompt": "\"\"\"\nWrite a python function to calculate the annual rate of return of an investment.\n\"\"\"\n\ndef annualRate_of_return(initial_investment,final_value):\n", "finetuning_completion": "\n  rate = (final_value - initial_investment) / initial_investment * 100\n  return rate\n\nprint(\"The annual rate of return is\",annualRate_of_return(10000,12000),\"%\")", "task_id": 1454}
{"finetuning_prompt": "\"\"\"\nWrite a function to get the arrival time of a bus given the start time and duration.\n\"\"\"\n\ndef getArrivalTime(start_time, duration):\n", "finetuning_completion": "\n    hrs = int(start_time.split(':')[0])\n    mins = int(start_time.split(':')[1])\n    total_mins = (hrs*60 + mins) + (duration*60)\n    arrival_hrs = total_mins//60\n    arrival_mins = total_mins%60\n    return str(arrival_hrs)+':'+str(arrival_mins)\n\nprint(\"Arrival time is: \",getArrivalTime('11:00', 2))", "task_id": 1455}
{"finetuning_prompt": "\"\"\"\nWrite a recursive function to check if a given substring is present in a larger string.\n\"\"\"\n\ndef check_substr(string, sub):\n", "finetuning_completion": "\r\n    if not string:\r\n        return False\r\n    elif string[:len(sub)] == sub:\r\n        return True\r\n \r\n    return check_substr(string[1:], sub)", "task_id": 1457}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a camelCase variable name given a string of words.\n\"\"\"\n\ndef parse_string_to_camelcase(words):\n", "finetuning_completion": "\n    words_list = words.split(' ')\n    res = \"\"\n    \n    for word in words_list:\n        res += word[0].upper() + word[1:]\n        \n    res = res[0].lower() + res[1:]\n    return res", "task_id": 1460}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect a palindrome from a given sentence.\n\"\"\"\n\ndef isPalindrome(sentence):\n", "finetuning_completion": "\n    sentence = sentence.lower().replace(\" \", \"\")\n    rev_sentence = sentence[::-1]\n    if rev_sentence == sentence:\n        return True\n    return False", "task_id": 1461}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a sublist from a list by given index range.\n\"\"\"\n\ndef generate_sublist(list_values, start_index, end_index):\n", "finetuning_completion": "\n    return list_values[start_index : end_index + 1]", "task_id": 1467}
{"finetuning_prompt": "\"\"\"\nCode a function that takes an array of integers and returns the largest minimum number in the array.\n\"\"\"\n\ndef largest_min_number(arr):\n", "finetuning_completion": " \r\n    min_number = arr[0] \r\n    for num in arr[1:]: \r\n        if num < min_number: \r\n            min_number = num \r\n    return min_number", "task_id": 1472}
{"finetuning_prompt": "\"\"\"\nGenerate a program to generate a list from two given lists.\n\"\"\"\n\ndef list_from_two_given_lists(list1, list2):\n", "finetuning_completion": " \r\n    new_list = [] \r\n    for i in list1: \r\n        for j in list2: \r\n            new_list.append(i + j) \r\n    return new_list", "task_id": 1474}
{"finetuning_prompt": "\"\"\"\nCreate a script for searching for elements in an array.\n\"\"\"\n\ndef search_array(arr, n):\n", "finetuning_completion": " \r\n    for i in range (0, len(arr)): \r\n        if arr[i] == n: \r\n            return i \r\n    return -1", "task_id": 1476}
{"finetuning_prompt": "\"\"\"\nOptimize the code using memoization to calculate the Fibonacci series of a given number.\n\"\"\"\n\ndef fibonacci_op(n, memo={}):\n", "finetuning_completion": " \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n in memo.keys():\n        return memo[n]\n    else: \n        memo[n] = fibonacci_op(n-1) + fibonacci_op(n-2) \n        return fibonacci_op(n-1) + fibonacci_op(n-2)", "task_id": 1481}
{"finetuning_prompt": "\"\"\"\nWrite a function for detecting anomalies in a given dataset.\n\"\"\"\n\ndef detect_anomaly(data):\n", "finetuning_completion": "\r\n    mean = np.mean(data)\r\n    stdev = np.std(data)\r\n    \r\n    anomalies = []\r\n    for x in data:\r\n        if abs(x - mean) > 2*stdev:\r\n            anomalies.append(x)\r\n    return anomalies", "task_id": 1482}
{"finetuning_prompt": "\"\"\"\nDesign a program where a string will be input, and the output will be a list containing tuples of each two characters in the string.\n\"\"\"\n\ndef create_pairs(string):\n", "finetuning_completion": " \r\n    result = []\r\n    for i in range(0, len(string)-1): \r\n        pair = (string[i], string[i + 1]) \r\n        result.append(pair) \r\n    return result\r\n\r\nprint(create_pairs(\"algorithm\"))", "task_id": 1488}
{"finetuning_prompt": "\"\"\"\nImplement a program to convert a binary string to a decimal integer.\n\"\"\"\n\ndef bin_to_dec(string):\n", "finetuning_completion": " \n    return int(string, 2)\n\nprint(bin_to_dec(\"110\"))", "task_id": 1489}
{"finetuning_prompt": "\"\"\"\nDesign a program to remove the duplicates from a list of strings.\n\"\"\"\n\ndef remove_duplicates(languages):\n", "finetuning_completion": " \n    result = [] \n    for element in languages: \n        if element not in result: \n            result.append(element) \n  \n    return result\n\nprint(remove_duplicates([\"python\", \"java\", \"C\", \"python\", \"java\"]))", "task_id": 1491}
{"finetuning_prompt": "\"\"\"\nWrite a python program to get the min, max, and average of the numbers in a list of numbers.\n\"\"\"\n\ndef analyze_nums(input_list):\n", "finetuning_completion": "\r\n    minVal = min(input_list)\r\n    maxVal = max(input_list)\r\n    avgVal = sum(input_list) / len(input_list) \r\n    return minVal, maxVal, avgVal", "task_id": 1495}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the prime factors of a positive integer.\n\"\"\"\n\ndef prime_factors(n):\n", "finetuning_completion": " \n    prime_factors = []\n    i = 2\n    while i * i <= n: \n        if n % i: \n            i += 1\n        else: \n            n //= i \n            prime_factors.append(i) \n    if n > 1: \n        prime_factors.append(n) \n    return prime_factors", "task_id": 1498}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, write a program to calculate the maximum sum subsequence.\n\"\"\"\n\ndef find_MaxSumSubseq(arr):\n", "finetuning_completion": "\n    n = len(arr)\n    max_sum = arr[0]\n    curr_sum = arr[0]\n \n    for i in range(1,n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum,curr_sum)\n \n    return max_sum", "task_id": 1499}
{"finetuning_prompt": "\"\"\"\nWrite a python code to pick the top 3 scores from a given list.\n\"\"\"\n\ndef top_3_scores(list_data):\n", "finetuning_completion": "\n\tfirst_place = max(list_data)\n\tlist_data.pop(list_data.index(first_place))\n\tsecond_place = max(list_data)\n\tlist_data.pop(list_data.index(second_place))\n\tthird_place = max(list_data)\n\treturn [first_place, second_place, third_place]\n\nprint(top_3_scores([90, 70, 80, 60, 95])) # prints [95, 90, 80]", "task_id": 1501}
{"finetuning_prompt": "\"\"\"\nWrite a python code to print the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5)) # prints 120", "task_id": 1502}
{"finetuning_prompt": "\"\"\"\nWrite a python code to classify a given text as belonging to one of three classes.\n\"\"\"\n\ndef classify_text(text):\n", "finetuning_completion": "\n    classes = [\"Class A\", \"Class B\", \"Class C\"]\n    if text.count(\"Ich bin es!\") >= 1:\n        return classes[0]\n    elif text.count(\"Ich bin nicht du\") >= 1:\n        return classes[1]\n    else:\n        return classes[2]\n\nprint(classify_text(\"Ich bin es! Ich bin es!\")) # prints \"Class A\"", "task_id": 1503}
{"finetuning_prompt": "\"\"\"\nCreate a program to check whether a given email address follows the applicable RFC822 rules.\n\"\"\"\n\nimport re\r\ndef is_valid_email(address):\n", "finetuning_completion": "\r\n\tif re.match(r\"^[\\w\\.\\+\\-]+\\@[\\w]+\\.[a-z]{2,3}$\", address):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "task_id": 1505}
{"finetuning_prompt": "\"\"\"\nDevelop a python program to find the longest substring in lexicographical order.\n\"\"\"\n\ndef longest_substr_lexo(str):\n", "finetuning_completion": " \r\n\tMax = 0\r\n\ttemp = 0 \r\n\tl_L = 0\r\n\tfor i in range(len(str)-1): \r\n\t\tif (str[i] <= str[i+1]): \r\n\t\t\ttemp += 1\r\n\t\telse: \r\n\t\t\tif Max < temp: \r\n\t\t\t\tMax = temp \r\n\t\t\t\tl_L = i-temp+1\r\n\t\t\ttemp = 0\r\n\tif Max < temp: \r\n\t\tMax = temp \r\n\t\tl_L = i-temp+1\r\n\treturn str[l_L : l_L + Max+1]", "task_id": 1509}
{"finetuning_prompt": "\"\"\"\nDevelop a python script that takes input from the user and prints the length of the longest palindrome that exists in the substring of a given string.\n\"\"\"\n\ndef longest_palindrome_substring_length(string):\n", "finetuning_completion": " \r\n\tlongest = 0\r\n\tfor i in range(len(string)): \r\n\t\tfor j in range(i + 1, len(string)): \r\n\t\t\tif(is_palindrome(string, i, j)): \r\n\t\t\t\tif(longest < j - i + 1): \r\n\t\t\t\t\tlongest = j - i + 1 \r\n\treturn longest\r\n\r\ndef is_palindrome(string, start, end): \r\n\twhile(start < end): \r\n\t\tif(string[start] != string[end]): \r\n\t\t\treturn False\r\n\t\tstart += 1 \r\n\t\tend -= 1\r\n\treturn True", "task_id": 1511}
{"finetuning_prompt": "\"\"\"\nDevelop a python program to check if a given variable represents a valid JSON data.\n\"\"\"\n\nimport json \ndef check_json(json_data):\n", "finetuning_completion": " \n\ttry: \n\t\tparsed_json = json.loads(json_data) \n\t\treturn True \n\texcept: \n\t\treturn False", "task_id": 1512}
{"finetuning_prompt": "\"\"\"\nDevelop a recursive algorithm to generate all possible combinations of a given number.\n\"\"\"\n\ndef generate_combinations(arr, index, num):\n", "finetuning_completion": " \n\tif index == num: \n\t\tfor i in range(num): \n\t\t\tprint(arr[i], end = \" \") \n\t\tprint() \n\t\treturn \n   \n\tfor i in range(index, num): \n\t\tarr[index], arr[i] = arr[i], arr[index] \n\t\tgenerate_combinations(arr, index + 1, num) \n\t\tarr[index], arr[i] = arr[i], arr[index]", "task_id": 1514}
{"finetuning_prompt": "\"\"\"\nCalculate the median of the given list of numbers.\n\"\"\"\n\ndef median_calc( num_list ):\n", "finetuning_completion": " \r\n    NumList = sorted(num_list)\r\n    if len(NumList) % 2 != 0:\r\n        median = NumList[int(len(NumList)/2)] \r\n    else:\r\n        median = ( NumList[int(len(NumList)/2) - 1] + NumList[int(len(NumList)/2)] )/2    \r\n    return median\n\nprint(median_calc([10,7,4,5,3,6]))", "task_id": 1519}
{"finetuning_prompt": "\"\"\"\nWrite a function that finds the largest product of three numbers in a list of numbers.\n\"\"\"\n\ndef largest_product(nums):\n", "finetuning_completion": "\n    max_product = float('-inf')\r\n    for i in range(len(nums)):\r\n        for j in range(i + 1, len(nums)):\r\n            for k in range(j + 1, len(nums)):\r\n                curr_prod = nums[i] * nums[j] * nums[k]\r\n                max_product = max(max_product, curr_prod)\n    \r\n    return max_product", "task_id": 1525}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the common elements in two dictionaries.\n\"\"\"\n\ndef find_common_keys(dict_A, dict_B):\n", "finetuning_completion": "\n  common_keys = set(dict_A.keys()).intersection(dict_B.keys())\n  return common_keys", "task_id": 1527}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert any number between 0 and 255 to binary.\n\"\"\"\n\ndef decimal_to_binary(decimal):\n", "finetuning_completion": "\n  binary = bin(decimal)[2:] \n  return binary", "task_id": 1528}
{"finetuning_prompt": "\"\"\"\nWrite a python program to convert a dictionary of lists into a multi-dimensional array.\n\"\"\"\n\nimport numpy as np\r\n\r\ndef dict_to_array(dict_in):\n", "finetuning_completion": " \r\n    array_out = np.array([list(i) for i in dict_in.values()]) \r\n    return array_out", "task_id": 1532}
{"finetuning_prompt": "\"\"\"\nCreate a function to generate and print a dictionary where the keys are numbers between 1 and 15 (both included) and values are square of keys.\n\"\"\"\n\ndef generate_dict():\n", "finetuning_completion": " \r\n    dict1 = dict() \r\n  \r\n    for i in range(1,16): \r\n        dict1[i] = i*i \r\n  \r\n    return dict1", "task_id": 1539}
{"finetuning_prompt": "\"\"\"\nWrite a python script to compare two lists based on length.\n\"\"\"\n\ndef compare_lists(list1, list2):\n", "finetuning_completion": " \r\n    if len(list1) > len(list2): \r\n        return list1 \r\n    elif len(list1) < len(list2): \r\n        return list2 \r\n    else : \r\n        return \"The two lists have equal length.\"", "task_id": 1540}
{"finetuning_prompt": "\"\"\"\nDevelop a program that sorts two-dimensional array across rows.\n\"\"\"\n\ndef sort_2d_array(arr):\n", "finetuning_completion": " \r\n    for row in arr:  \r\n        row.sort() \r\n    return arr", "task_id": 1542}
{"finetuning_prompt": "\"\"\"\nRewrite the following code in Python without using recursion.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\r\n    result = 1\r\n    for i in range (1,n+1): \r\n        result = result * i \r\n    return result", "task_id": 1543}
{"finetuning_prompt": "\"\"\"\nDevelop a program that prints all permutations of a given list.\n\"\"\"\n\ndef all_permutations(list1):\n", "finetuning_completion": "\r\n    result = [] \r\n    if len(list1) == 1: \r\n        result = [list1] \r\n    else: \r\n        for i in range(len(list1)): \r\n           m = list1[i] \r\n           \r\n           # Extract lis1[i] or m from the list1 \r\n           remLst = list1[:i] + list1[i+1:] \r\n       \r\n           # Generating all permutations where m is first element \r\n           for p in all_permutations(remLst): \r\n               result.append([m] + p) \r\n    return result", "task_id": 1547}
{"finetuning_prompt": "\"\"\"\nDetermine the length of the longest increasing subsequence in a given list.\n\"\"\"\n\ndef lis(arr):\n", "finetuning_completion": "\r\n    n=len(arr)\r\n\r\n    # declaring an array to store the dynamic \r\n    # programming results\r\n    lis=[1 for _ in range(n)]\r\n    \r\n    # looping from left to right\r\n    for i in range (1,n):\r\n        # looping from 0 to i-1 in arr\r\n        for j in range (0,i):\r\n            # updating the lis array if the \r\n            # ith value is greater than jth value\r\n            # and the corresponding lis value\r\n            if arr[i]>arr[j] and lis[i]<lis[j]+1 :\r\n                lis[i]=lis[j]+1\r\n    \r\n    # finding the maximum value in lis array \r\n    return max(lis)", "task_id": 1548}
{"finetuning_prompt": "\"\"\"\nWrite a python program to create a dictionary with keys as integers and values as double of keys.\n\"\"\"\n\ndef create_Dict(n):\n", "finetuning_completion": " \r\n    my_dict = {}\r\n    for i in range(1, n+1): \r\n        my_dict[i] = 2 * i\r\n    return my_dict", "task_id": 1569}
{"finetuning_prompt": "\"\"\"\nDevelop a program to detect anomalies in given dataset.\n\"\"\"\n\nimport numpy as np\n\ndef detect_anomalies(data):\n", "finetuning_completion": "\n    data_mean, data_std = np.mean(data), np.std(data)\n    anomaly_cut_off = data_std * 3\n    \n    lower_limit  = data_mean - anomaly_cut_off \n    upper_limit = data_mean + anomaly_cut_off\n    anomalies = []\n    for outlier in data:\n        if outlier > upper_limit or outlier < lower_limit:\n            anomalies.append(outlier)\n    return anomalies", "task_id": 1578}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the maximum size square sub-matrix with all 1s in given binary matrix.\n\"\"\"\n\ndef findMaxSubSquare(mat, n, m):\n", "finetuning_completion": " \n  \n    # Initializing S[][] \n    S = [[0 for k in range(m)] for l in range(n)] \n  \n    # Copy first row and columns as it is from \n    # mat[][] to S[][] \n    for i in range(m): \n        S[0][i] = mat[0][i] \n    for j in range(n): \n        S[j][0] = mat[j][0] \n  \n    # Construct other entries of S[][] \n    for i in range(1, n): \n        for j in range(1, m): \n            if (mat[i][j] == 1): \n                S[i][j] = min(S[i][j-1], \n                            S[i-1][j], \n                            S[i-1][j-1]) + 1\n            else: \n                S[i][j] = 0\n  \n    # Find the maximum entry and \n    # its corresponding indices in S[][] \n    max_of_s = S[0][0] \n    max_i = 0\n    max_j = 0\n    for i in range(n): \n        for j in range(m): \n            if (max_of_s < S[i][j]): \n                max_of_s = S[i][j] \n                max_i = i \n                max_j = j \n  \n    return max_of_s", "task_id": 1580}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate an integer array of given length, with an arithmetic progression\n\"\"\"\n\ndef generate_array(length):\n", "finetuning_completion": " \r\n    res = [0] * length \r\n    start = 0\r\n    diff = 1\r\n    for i in range(length): \r\n        res[i] = start \r\n        start += diff \r\n    return res", "task_id": 1586}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to determine whether an integer is a perfect square.\n\"\"\"\n\ndef is_perfect_square(num):\n", "finetuning_completion": " \r\n    if num < 0: \r\n        return False\r\n  \r\n    sqrt = int(num**(1/2)) \r\n    return sqrt**2 == num", "task_id": 1591}
{"finetuning_prompt": "\"\"\"\nCreate a program to find perfect squares in a given range.\n\"\"\"\n\ndef perfect_squares(start, end):\n", "finetuning_completion": "\r\n  squares = []\r\n  for i in range(start,end+1):\r\n    if math.sqrt(i) % 1 == 0:\r\n      squares.append(i)\r\n  return squares", "task_id": 1596}
{"finetuning_prompt": "\"\"\"\nGenerate a Fibonacci sequence of 10 elements.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": "\r\n    result = [0, 1]\r\n    for i in range(2,n): \r\n        result.append(result[i-2] + result[i-1])  \r\n    return result[:n]", "task_id": 1615}
{"finetuning_prompt": "\"\"\"\nFind the minimum positive number missing from a given array\n\"\"\"\n\ndef min_missing_positive(A):\n", "finetuning_completion": " \r\n    if 1 not in A: \r\n        return 1\r\n    n = len(A) \r\n    for i in range(n): \r\n        if A[i] <= 0 or A[i] > n: \r\n            A[i] = 1\r\n    for i in range(n): \r\n        num = abs(A[i])\r\n        if num > 0:\r\n            if A[num - 1] > 0: \r\n                A[num - 1] = -A[num - 1] \r\n  \r\n    for i in range(n): \r\n        if A[i] > 0: \r\n            return i+1\r\n      \r\n    return n + 1\r\n  \r\nA = [-1,0,1,2,3,4,5]\r\nmissing = min_missing_positive(A)\r\nprint(missing )\r\n# Output: 6", "task_id": 1622}
{"finetuning_prompt": "\"\"\"\nCreate a function to detect location in a text.\n\"\"\"\n\nimport re\r\ndef detect_location(text):\n", "finetuning_completion": "\r\n  pattern = r'\\b[A-Z][a-zA-Z ]*\\b'\r\n  matches = re.findall(pattern, text)\r\n  locations = []\r\n  for match in matches:\r\n    if match != \"in\" and match != \"of\" and match != \"at\":\r\n      locations.append(match)\r\n  return locations", "task_id": 1628}
{"finetuning_prompt": "\"\"\"\nWrite a function to select the rows with values greater than a certain value from an array.\n\"\"\"\n\ndef select_row(arr, val):\n", "finetuning_completion": "\r\n  res = []  \r\n  for sublist in arr:  \r\n    if (sublist[0] > val):  \r\n      res.append(sublist)  \r\n  return res", "task_id": 1630}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm for sorting a list of integers.\n\"\"\"\n\ndef sort_list(arr):\n", "finetuning_completion": "   \r\n    for i in range(len(arr)):   \r\n        for j in range(len(arr)-1):   \r\n            if arr[j] > arr[j+1]:  \r\n                temp = arr[j] \r\n                arr[j]= arr[j+1] \r\n                arr[j+1]= temp  \r\n    return arr", "task_id": 1632}
{"finetuning_prompt": "\"\"\"\nCalculate the sum of all numbers from l to r.\n\"\"\"\n\ndef sum_in_Range(l, r):\n", "finetuning_completion": " \r\n    Sum = 0\r\n    for num in range (l, r + 1): \r\n        Sum += num\r\n    return Sum", "task_id": 1633}
{"finetuning_prompt": "\"\"\"\nCalculate the sum of elements of a tuple if all the numbers are positive.\n\"\"\"\n\ndef positive_sum(tup):\n", "finetuning_completion": " \r\n  total = 0\r\n  for num in tup: \r\n    if num > 0: \r\n      total += num \r\n  return total", "task_id": 1634}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the closest pair of points within an array of points.\n\"\"\"\n\nimport math \r\ndef closest_pair(points):\n", "finetuning_completion": " \r\n    min_dist = float(\"inf\") \r\n    min_pair = [] \n    for i in range(len(points)): \r\n        for j in range(i + 1, len(points)): \r\n            dist = math.sqrt( ((points[i][0] - points[j][0]) ** 2) + \r\n                              ((points[i][1] - points[j][1]) ** 2) ) \r\n            if dist < min_dist : \r\n                min_dist = dist \r\n                min_pair = [points[i], points[j]]  \r\n    return min_pair", "task_id": 1636}
{"finetuning_prompt": "\"\"\"\nDesign a program that takes a number as an input and prints all prime factors of the number.\n\"\"\"\n\ndef prime_factors(num):\n", "finetuning_completion": " \r\n    factors = [] \r\n    i = 2\r\n    while num >= i * i: \r\n        if num % i: \r\n            i += 1 \r\n        else: \r\n            num //= i \r\n            factors.append(i) \r\n    if num > 1: \r\n        factors.append(num) \r\n    return factors", "task_id": 1644}
{"finetuning_prompt": "\"\"\"\nDesign a program that can generate a 3D dataset from a given input which contains multiple points.\n\"\"\"\n\nimport random\r\n\r\ndef generate_3d_dataset(input_data):\n", "finetuning_completion": " \r\n    x = [] \r\n    y = [] \r\n    z = []\r\n    for each in input_data: \r\n        x.append(each[0]) \r\n        y.append(each[1]) \r\n        z.append(each[2]) \r\n\r\n    return (x, y, z)", "task_id": 1645}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace each character in a given string with its corresponding ASCII value.\n\"\"\"\n\ndef ascii_values(string):\n", "finetuning_completion": "\r\n    ascii_str = \"\"\r\n    for char in string:\r\n        ascii_str += str(ord(char))\r\n    return ascii_str", "task_id": 1650}
{"finetuning_prompt": "\"\"\"\nCreate a function to encrypt messages via a caesar cipher without using any external libraries and without exceeding a single line.\n\"\"\"\n\ndef caesar_cipher(message, shift):\n", "finetuning_completion": "\r\n     return ''.join(chr((ord(c) + shift - 97)  % 26 + 97) for c in message)", "task_id": 1653}
{"finetuning_prompt": "\"\"\"\nWrite a classifier to identify the language in which a given sentence is written.\n\"\"\"\n\ndef detect_language(sentence):\n", "finetuning_completion": "\r\n    \r\n    languages = ['en', 'fr', 'de', 'es', 'it']\r\n    probabilities = dict.fromkeys(languages, 0)\r\n    \r\n    for word in sentence.split(' '):\r\n        for language in languages:\r\n            probabilities[language] = probabilities[language] + word.count(language)\r\n    \r\n    best_language = max(probabilities, key=probabilities.get)\r\n    \r\n    return best_language", "task_id": 1660}
{"finetuning_prompt": "\"\"\"\nGiven 3 points (x, y) for a triangle, write a python program to calculate the angle of the triangle.\n\"\"\"\n\nimport math \r\n \r\ndef calcAngle(x1, y1, x2, y2, x3, y3):\n", "finetuning_completion": " \r\n\tAB=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\r\n\tBC=math.sqrt((x3-x2)*(x3-x2)+(y3-y2)*(y3-y2))\r\n\tCA=math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1))\r\n\tang=math.acos((BC*BC+CA*CA-AB*AB)/(2*BC*CA))\r\n\treturn round(math.degrees(ang), 2)", "task_id": 1667}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to print out all the elements of a nested list of integers.\n\"\"\"\n\ndef list_element_print(lst):\n", "finetuning_completion": " \r\n   for i in range(len(lst)): \r\n      for j in range(len(lst[i])): \r\n            print(lst[i][j],end=\" \") \r\n   return \"\"", "task_id": 1673}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to parse a math expression string and return its result.\n\"\"\"\n\nimport math\r\n\r\ndef evaluate(expression):\n", "finetuning_completion": "\r\n    return eval(expression)", "task_id": 1675}
{"finetuning_prompt": "\"\"\"\nCreate a function to reverse a string in-place.\n\"\"\"\n\ndef reverse_string_contents(string):\n", "finetuning_completion": " \r\n  \r\n    # convert string into list \r\n    # and reverse list \r\n    string = list(string) \r\n    string.reverse() \r\n  \r\n    # join list and return \r\n    string = ''.join(string) \r\n    return string", "task_id": 1680}
{"finetuning_prompt": "\"\"\"\nWrite a python program to replace all the characters in a string,except a-z and 0-9,with a question mark.\n\"\"\"\n\ndef change_String(String):\n", "finetuning_completion": "\n    temp = \"\" \r\n    for ch in String: \n        if not ((ch >= 'a' and ch <= 'z') or (ch >= '0' and ch <= '9')):\n            temp += '?'\n        else:\n            temp += ch\n    return temp", "task_id": 1684}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to rotate a given array by N elements left or right.\n\"\"\"\n\ndef rotate_array(array, N):\n", "finetuning_completion": "\n    N = N % len(array) \n    return array[N:] + array[:N]", "task_id": 1688}
{"finetuning_prompt": "\"\"\"\nGenerate code to evaluate a machine learning classifier.\n\"\"\"\n\nfrom sklearn.metrics import accuracy_score\r\ndef eval_metrics(y_true, y_pred):\n", "finetuning_completion": "\r\n    accuracy = accuracy_score(y_true, y_pred)\r\n    print(\"Accuracy is {:.2f}\".format(accuracy))", "task_id": 1694}
{"finetuning_prompt": "\"\"\"\nDesign and code a program to find out if two words are anagrams.\n\"\"\"\n\ndef anagram(first, second):\n", "finetuning_completion": "\n\n# first remove all the white spaces      \n    first = first.replace(\" \", \"\")\n    second = second.replace(\" \", \"\")\n\n# then convert both the strings into lowercase \n    first = first.lower()\n    second = second.lower()\n\n# sort the strings\n    sorted1 = ''.join(sorted(first))\n    sorted2 = ''.join(sorted(second))\n\n# if sorted strings are same return True else return False\n    if sorted1 == sorted2:\n        return True\n    else:\n        return False", "task_id": 1699}
{"finetuning_prompt": "\"\"\"\nGenerate Python code to filter out strings from an array based on a given condition.\n\"\"\"\n\ndef filter_strings(arr, condition):\n", "finetuning_completion": "\n    result = []\n    for string in arr:\n        if condition(string):\n            result.append(string)\n    return result", "task_id": 1700}
{"finetuning_prompt": "\"\"\"\nGenerate a program to evaluate the expression (x + y)(x - y).\n\"\"\"\n\ndef expression_evaluator(x,y):\n", "finetuning_completion": "\n    answer = (x+y)*(x-y)\n    return answer", "task_id": 1705}
{"finetuning_prompt": "\"\"\"\nCreate a code generator to generate a code that can control a robot arm based on inputs.\n\"\"\"\n\ndef robot_arm_code_generator():\n", "finetuning_completion": "\r\n    # code generator to generate code to control robot arm\r\n    code = \"def robot_arm_controller(input):\\n\"\r\n    code += \"\\t# Robot-arm controller code\\n\"\r\n    code += \"\\ttarget_pose = calculate_target_pose(input)\\n\"\r\n    code += \"\\tangle_list, velocity_list = motion_planning(target_pose)\\n\"\r\n    code += \"\\trun_robot_motion(angle_list, velocity_list)\\n\"\r\n    return code", "task_id": 1708}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate an HTML table with two columns and one row for the given two strings.\n\"\"\"\n\ndef generate_html_table(str1, str2):\n", "finetuning_completion": "\n    table_template = \"<table>\\n<tr>\\n<td>{0}</td>\\n<td>{1}</td>\\n</tr>\\n</table>\\n\"\n    return table_template.format(str1, str2)", "task_id": 1719}
{"finetuning_prompt": "\"\"\"\nCreate a function to output a list of prime numbers between a given range.\n\"\"\"\n\ndef prime_nums(start,end):\n", "finetuning_completion": "\r\n    result=[]\r\n    for n in range(start,end+1):\r\n        c=0\r\n        for i in range(2,n):\r\n            if n%i==0:\r\n                c=1\r\n        if c==0:\r\n            result.append(n)\r\n    return result", "task_id": 1722}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the greatest common divisor of three numbers.\n\"\"\"\n\ndef gcd_3(num1, num2, num3):\n", "finetuning_completion": " \r\n    gcd_pair1 = math.gcd(num1, num2) \r\n    gcd_pair2 = math.gcd(gcd_pair1, num3) \r\n    return gcd_pair2", "task_id": 1725}
{"finetuning_prompt": "\"\"\"\nCreate a python program to edit the given string by replacing all characters with the character 'a'.\n\"\"\"\n\ndef replace_all_char(input_string):\n", "finetuning_completion": "\r\n    new_str = \"\"\r\n    for letter in input_string:\r\n        new_str += 'a'\r\n    return new_str", "task_id": 1738}
{"finetuning_prompt": "\"\"\"\nDesign a recursive function to find the nth number of a given fibonacci sequence.\n\"\"\"\n\ndef get_fibonacci(n):\n", "finetuning_completion": "\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return get_fibonacci(n-1)+get_fibonacci(n-2)", "task_id": 1741}
{"finetuning_prompt": "\"\"\"\nCreate a code to remove duplicates from the given list.\n\"\"\"\n\ndef remove_duplicates(list1):\n", "finetuning_completion": " \n    result = [] \n    for element in list1: \n        if element not in result: \n            result.append(element) \n    return result \n  \nprint(remove_duplicates([2,3,4,3,4,5,6]))", "task_id": 1748}
{"finetuning_prompt": "\"\"\"\nGenerate a code to count the number of elements in the given dictionary.\n\"\"\"\n\ndef Count_Elements(dictionary):\n", "finetuning_completion": " \n    count = 0\r \r\n    for key, value in dictionary.items(): \r\n        count += 1 \r\n    return count \r\n  \r\nprint(Count_Elements({\"Hello\": \"World\", \"Foo\": \"Bar\"}))", "task_id": 1749}
{"finetuning_prompt": "\"\"\"\nCreate a code to compute the average of the top three scores of a given list.\n\"\"\"\n\ndef avg_Top_Three_score(list1):\n", "finetuning_completion": " \n    list1.sort(reverse=True)  \n    return (list1[0] + list1[1] + list1[2])/3\n  \nprint(avg_Top_Three_score([10,20,15,30,25]))", "task_id": 1750}
{"finetuning_prompt": "\"\"\"\nGenerate code for a program that capitalizes each word in a given sentence.\n\"\"\"\n\ndef capitalize(sentence):\n", "finetuning_completion": "\r\n    words = sentence.split(' ')\r\n    result = []\r\n    for word in words:\r\n        result.append(word.capitalize())\r\n    return ' '.join(result)", "task_id": 1754}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort the elements of a given list in an increasing order.\n\"\"\"\n\ndef sort_list(input_list):\n", "finetuning_completion": " \r\n    return sorted(input_list)", "task_id": 1755}
{"finetuning_prompt": "\"\"\"\nWrite a function to parse the html tags from a given string.\n\"\"\"\n\nimport re \r\n\r\ndef parse_html_tags(html):\n", "finetuning_completion": " \r\n    tags_list = re.findall('(<[^>]+>)', html)\r\n    return tags_list", "task_id": 1756}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the average rounded to the nearest integer of a given list of numbers.\n\"\"\"\n\ndef round_average(list_of_numbers):\n", "finetuning_completion": " \r\n    avg = sum(list_of_numbers) / len(list_of_numbers)\r\n    return int(round(avg))", "task_id": 1757}
{"finetuning_prompt": "\"\"\"\nGenerate code to convert the given number from binary to decimal.\n\"\"\"\n\ndef binary_to_decimal(num):\n", "finetuning_completion": " \r\n    decimal = 0\r\n    index = 0\r\n    while(num > 0): \r\n        digit = num % 10\r\n        decimal += digit * pow(2, index) \r\n        num = int(num / 10) \r\n        index += 1\r\n    return decimal", "task_id": 1762}
{"finetuning_prompt": "\"\"\"\nGenerate code to determine the maximum and the minimum element of a given array.\n\"\"\"\n\ndef minmax(arr):\n", "finetuning_completion": " \r\n    max = arr[0] \r\n    min = arr[0]\r\n\r\n    for i in range(len(arr)): \r\n        if arr[i] > max: \r\n            max = arr[i] \r\n        elif arr[i] < min: \r\n            min =arr[i] \r\n    return (max, min)", "task_id": 1763}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify each customer review into one of the five sentiment classes.\n\"\"\"\n\ndef sentiment_classify(text):\n", "finetuning_completion": "\n    if 'wonderful' in text.lower():\n        return 'positive'\n    elif 'terrible' in text.lower():\n        return 'negative'\n    elif 'good' in text.lower():\n        return 'positive'\n    elif 'bad' in text.lower():\n        return 'negative'\n    else:\n        return 'neutral'", "task_id": 1765}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine if a given string is a valid identifier in a specific language.\n\"\"\"\n\ndef is_valid_identifier(string):\n", "finetuning_completion": "\n    if not string.isidentifier():\n        return False\n    if string[0].isdigit():\n        return False\n    # check for keywords\n    # add checks for other language-specifc\n    #  invalid identifier characteristics\n    return True", "task_id": 1766}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to detect the longest palindrome within a given string\n\"\"\"\n\ndef longestPalindrome(s):\n", "finetuning_completion": " \n    n = len(s) # get length of input string \n  \n    # Create a table to store results of subproblems \n    palindrome = [[0 for x in range(n)] for y in range(n)] \n  \n    # All substrings of length 1 are palindromes \n    max_length = 1\n    i = 0\n    while (i < n): \n        palindrome[i][i] = True\n        i = i + 1\n  \n    # check for sub-string of length 2. \n    start = 0\n    i = 0\n    while i < n - 1:\n        if (s[i] == s[i + 1]): \n            palindrome[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n  \n    # Check for lengths greater than 2. \n    # k is the length\n    k = 3\n    while k <= n: \n        # starting point \n        i = 0\n        while i < (n - k + 1): \n            # Get ending point of substring \n            j = i + k - 1\n  \n            if (palindrome[i + 1][j - 1] and \n                s[i] == s[j]): \n                palindrome[i][j] = True\n  \n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    return s[start:start + max_length]", "task_id": 1771}
{"finetuning_prompt": "\"\"\"\nCreate a recursive algorithm to print a dictionary in the order of insertion.\n\"\"\"\n\ndef print_dict_in_order(input_dict):\n", "finetuning_completion": "\n \n    # base case: empty dictionary \n    if len(input_dict) == 0:\n        return\n \n    # print first element \n    first = list(input_dict.keys())[0]\n    print(first, '->', input_dict[first])\n \n    # create a new dictionary \n    copy = input_dict.copy()\n    del copy[first]\n \n    # pass recursively \n    print_dict_in_order(copy)", "task_id": 1776}
{"finetuning_prompt": "\"\"\"\nWrite a python program to fill a matrix with certain elements.\n\"\"\"\n\ndef initializeMatrix(m, n):\n", "finetuning_completion": " \n    matrix = [[0 for x in range(n)] for y in range(m)] \n  \n    for i in range(m): \n        for j in range(n): \n            matrix[i][j] = i * j \n    return matrix", "task_id": 1777}
{"finetuning_prompt": "\"\"\"\nWrite a python program to remove the song titles in a given list that contain the word Jazz.\n\"\"\"\n\ndef remove_jazz(lst):\n", "finetuning_completion": "\r\n    res = [] \r\n  \r\n    # iterate over the elements \r\n    for elem in lst:\r\n        if not \"Jazz\" in elem:\r\n            res.append(elem)\r\n     \r\n    return res", "task_id": 1779}
{"finetuning_prompt": "\"\"\"\nWrite a python code to sort the dictionary using bubble sort technique.\n\"\"\"\n\ndef bubbleSort(dict):\n", "finetuning_completion": "\n  for i in range(len(dict)-1):\n     for j in range(0, len(dict)-i-1):\n        if dict[list(dict.keys())[j]] > dict[list(dict.keys())[j+1]]:\n           dict[list(dict.keys())[j]], dict[list(dict.keys())[j+1]] = dict[list(dict.keys())[j+1]], dict[list(dict.keys())[j]] \n  return dict", "task_id": 1782}
{"finetuning_prompt": "\"\"\"\nWrite a python code to search for an element in the given given list.\n\"\"\"\n\ndef searchElement(list, elem_to_search):\n", "finetuning_completion": "\n    for i in range(len(list)):\n        if list[i] == elem_to_search:\n            return i\n    return -1", "task_id": 1789}
{"finetuning_prompt": "\"\"\"\nWrite a python program to perform vector addition on two given vectors.\n\"\"\"\n\ndef vector_add(vector1, vector2):\n", "finetuning_completion": "\n    result = []\n    for i in range(len(vector1)):\n        result.append(vector1[i] + vector2[i])\n    return result", "task_id": 1790}
{"finetuning_prompt": "\"\"\"\nWrite a function to edit a given string by removing the duplicate characters from it.\n\"\"\"\n\ndef remove_duplicate(string):\n", "finetuning_completion": "\n    result = \"\"\n    \n    for char in string:\n        if char not in result:\n            result += char\n    return result", "task_id": 1791}
{"finetuning_prompt": "\"\"\"\nOutline a program that can find a specific item from a given list of items.\n\"\"\"\n\ndef find_item(list_items, item):\n", "finetuning_completion": "\n    for i in list_items:\n        if item == i:\n            return \"Item found!\"\n    return \"Item not found!\"", "task_id": 1799}
{"finetuning_prompt": "\"\"\"\nCreate a function to classify emails into spam and not spam\n\"\"\"\n\ndef classify_email(email_text):\n", "finetuning_completion": "\n    if \"free\" in email_text.lower() or \"offer\" in email_text.lower():\n        return \"spam\"\n    else:\n        return \"not spam\"", "task_id": 1800}
{"finetuning_prompt": "\"\"\"\nCreate a function that returns an array containing all prime numbers up to a given number.\n\"\"\"\n\ndef prime_numbers(n):\n", "finetuning_completion": " \r\n    lst = []\r\n    for num in range(2,n+1):\r\n        if num>1: \r\n            for i in range(2,num): \r\n                if (num % i == 0): \r\n                    break\r\n            else: \r\n                lst.append(num) \r\n    return lst", "task_id": 1805}
{"finetuning_prompt": "\"\"\"\nWrite a function to implement linear regression model with given independent and dependent variables.\n\"\"\"\n\ndef linear_regression(X, y):\n", "finetuning_completion": "\n    a = np.linalg.lstsq(X, y, rcond=None)[0]\n    return a", "task_id": 1809}
{"finetuning_prompt": "\"\"\"\nDevelop a function to provide output as a set of unique elements in a given list.\n\"\"\"\n\ndef uniqueList(list):\n", "finetuning_completion": "\n    return set(list)", "task_id": 1810}
{"finetuning_prompt": "\"\"\"\nCreate a python function that returns the 3rd smallest element in an array using the most efficient way you can?\n\"\"\"\n\ndef find_Third_Smallest(arr, n) :\n", "finetuning_completion": " \r\n  \r\n    first = second = third = float('inf') \r\n    for i in range(n) :  \r\n        if (arr[i] < first) : \r\n            third = second \r\n            second = first \r\n            first = arr[i] \r\n        elif (arr[i] < second) : \r\n            third = second \r\n            second = arr[i] \r\n        elif (arr[i] < third) : \r\n            third = arr[i] \r\n  \r\n    return third", "task_id": 1813}
{"finetuning_prompt": "\"\"\"\nWrite a python function to help optimize an array of integers to give the minimum sum.\n\"\"\"\n\ndef optimize_Array(arr):\n", "finetuning_completion": "\r\n    arr.sort()\r\n    result = 0\r\n    for i in range(len(arr)):\r\n        if i%2 == 0:\r\n            result += arr[i]\r\n        else:\r\n            result -= arr[i]\r\n    return result", "task_id": 1822}
{"finetuning_prompt": "\"\"\"\nGenerate a python code for converting a binary string to an integer.\n\"\"\"\n\ndef binary_string_to_integer(string):\n", "finetuning_completion": " \r\n    return int(string, 2)", "task_id": 1825}
{"finetuning_prompt": "\"\"\"\nWrite a python program to identify the longest word.\n\"\"\"\n\ndef longestWord(string):\n", "finetuning_completion": " \r\n    list_words = string.split(', ') \r\n    length_list=list(map(len,list_words))\r\n    max_length = max(length_list)\r\n    max_length_words = list(filter(lambda x: len(x)==max_length,list_words))\r\n    return max_length_words[0]", "task_id": 1830}
{"finetuning_prompt": "\"\"\"\nGenerate code that removes duplicate elements from a list.\n\"\"\"\n\ndef remove_duplicates(lst):\n", "finetuning_completion": " \n    result_list = [] \r\n    for num in lst: \r\n        if num not in result_list: \r\n            result_list.append(num) \r\n    return result_list \n    \nresult = remove_duplicates([1, 2, 3, 3, 4, 5, 5]) \nprint (result)", "task_id": 1834}
{"finetuning_prompt": "\"\"\"\nGenerate a program to return a list with unique elements from the given 2 lists.\n\"\"\"\n\ndef unique_list(list1, list2):\n", "finetuning_completion": " \n    unique_list = list(set(list1 + list2)) \r\n    return unique_list\n    \r\nresult = unique_list([2, 3, 5, 2], [7, 1, 5, 3]) \nprint(\"Unique list:\", result)", "task_id": 1839}
{"finetuning_prompt": "\"\"\"\nWrite a code that determines whether a given number is prime or not.\n\"\"\"\n\ndef is_prime(number):\n", "finetuning_completion": "\r\n    if number == 1:\r\n        return False\r\n    for i in range(2,number):\r\n        if number % i == 0: \r\n            return False\r\n    return True", "task_id": 1852}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm that takes in a list of strings and returns the count of all distinct strings.\n\"\"\"\n\ndef distinct_count(mylist):\n", "finetuning_completion": "\n    myset = set(mylist)\n    return len(myset)", "task_id": 1853}
{"finetuning_prompt": "\"\"\"\nCreate a Python program that prints the top 10 elements in a list after sorting them in descending order.\n\"\"\"\n\ndef top_10(elements):\n", "finetuning_completion": "\n    sorted_list = sorted(elements, reverse=True)\n    top_10 = sorted_list[:10]\n    for element in top_10:\n        print(element)", "task_id": 1854}
{"finetuning_prompt": "\"\"\"\nCreate a program in Python that takes an array of numbers as an argument and returns the index of the largest number.\n\"\"\"\n\ndef largest_number_index(numbers):\n", "finetuning_completion": "\n    max_index = 0\n    for index, element in enumerate(numbers):\n        if element > numbers[max_index]:\n            max_index = index\n    return max_index", "task_id": 1855}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes a sorted array and an element x and returns the index where x is located in the array.\n\"\"\"\n\ndef search_index(elements, x):\n", "finetuning_completion": "\n    for i in range(len(elements)): \n        if elements[i] == x : \n            return i \n    return -1", "task_id": 1859}
{"finetuning_prompt": "\"\"\"\nCreate a program to classify numbers into even and odd.\n\"\"\"\n\ndef even_odd(num):\n", "finetuning_completion": " \r\n    if num % 2 == 0: \r\n        return \"Even\"\r\n    else: \r\n        return \"Odd\"\r\nprint(\"The number is \"+even_odd(5))", "task_id": 1862}
{"finetuning_prompt": "\"\"\"\nWrite a method to correctly format the date from a given string format.\n\"\"\"\n\ndef format_date(date_str):\n", "finetuning_completion": " \r\n  date_elements = date_str.split(\"-\")\r\n  formatted_date = \"{}/{}/{}\".format(date_elements[2], date_elements[1], date_elements[0])\r\n  return formatted_date", "task_id": 1864}
{"finetuning_prompt": "\"\"\"\nCreate a function that returns the elements that appear an odd number of times in a given list.\n\"\"\"\n\ndef odd_occurences(input_list):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in input_list: \r\n        if input_list.count(i) % 2 != 0 and i not in result: \r\n            result.append(i) \r\n    return result", "task_id": 1873}
{"finetuning_prompt": "\"\"\"\nGenerate a function to implement round-robin scheduling for jobs.\n\"\"\"\n\ndef round_robin_scheduling(jobs, n):\n", "finetuning_completion": " \r\n    # stores time quantum for each job  \r\n    quantum = [] \r\n    for i in range(n): \r\n        quantum.append(int(jobs[i][1])) \r\n          \r\n    answer = [] # stores finished jobs \r\n          \r\n    time = 0 # tracks current time \r\n          \r\n    # store jobs which are not done \r\n    unfinished_jobs = [i for i in range(n)]  \r\n          \r\n    # if all jobs  are not done \r\n    while len(unfinished_jobs) > 0: \r\n  \r\n        # select the first job in unfinished_jobs \r\n        job = unfinished_jobs[0]  \r\n          \r\n        if quantum[job] > 0: \r\n            unfinished_jobs.append(job) # Push the current job into the back \r\n            unfinished_jobs.pop(0) # Remove the current job in the front \r\n            quantum[job] -= 1 # Reduce the time quantum of job \r\n  \r\n            # Increment time \r\n            time += 1\r\n            answer.append(job)  \r\n  \r\n        else: \r\n            #Remove the current job \r\n            unfinished_jobs.pop(0)  \r\n      \r\n    print(\"The order of execution of jobs: \", answer) \r\n    print(\"Total time taken for execution: \", time)", "task_id": 1880}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a program to find all palindromic substrings.\n\"\"\"\n\ndef find_palindrome(string):\n", "finetuning_completion": "\r\n    pal_list = []\r\n    for i in range(len(string)):\r\n        for j in range(len(string), i, -1):\r\n            substr = string[i:j]\r\n            if substr == substr[::-1] and len(substr) > 1:\r\n                pal_list.append(substr)\r\n    return pal_list", "task_id": 1882}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse a particular word within a string.\n\"\"\"\n\ndef reverse_word(string):\n", "finetuning_completion": " \r\n    words = string.split(\" \")\r\n    rev_words = [word[::-1] for word in words]\r\n    rev_string = \" \".join(rev_words)\r\n    return rev_string", "task_id": 1884}
{"finetuning_prompt": "\"\"\"\nCreate a function for adding two complex numbers.\n\"\"\"\n\ndef add_complex_nums(a, b):\n", "finetuning_completion": " \r\n    \r\n    real = a[0] + b[0] \r\n    imag = a[1] + b[1] \r\n    return (real,imag)", "task_id": 1887}
{"finetuning_prompt": "\"\"\"\nWrite a code to select only distinct elements in an array.\n\"\"\"\n\ndef distinct_elements(list):\n", "finetuning_completion": "\n    distinct = [] \n    for i in list:\n        if i not in distinct:\n            distinct.append(i)\n    return distinct\n\nlist = [1, 5, 3, 9, 5, 1]\nprint(distinct_elements(list))", "task_id": 1892}
{"finetuning_prompt": "\"\"\"\nConvert the given currency format from GBP to USD.\n\"\"\"\n\ndef currency_convert(currencyFormat):\n", "finetuning_completion": "\r\n    targetCurrency = \"USD\"\r\n    curr = currencyFormat.strip(\"\u00a3\")\r\n    rate = 1.29\r\n    value = float(curr) * rate\r\n    return f\"{targetCurrency}{value:.2f}\"", "task_id": 1894}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes in a list of numbers and prints out the maximum difference between two consecutive numbers.\n\"\"\"\n\ndef max_difference(nums):\n", "finetuning_completion": " \r\n    diff = float('-inf') \r\n    for i in range(1, len(nums)): \r\n        if nums[i] - nums[i - 1] > diff: \r\n            diff = nums[i] - nums[i - 1] \r\n    return diff", "task_id": 1897}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes in a string and replaces all vowels in the string with special characters.\n\"\"\"\n\ndef replace_vowels(string):\n", "finetuning_completion": " \r\n    newstring = \"\" \r\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] \r\n    for character in string: \r\n        if character in vowels:\r\n            newstring+=\"$\" \r\n        else:\r\n            newstring+=character \r\n    return newstring", "task_id": 1898}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine whether a given string consists only of digits from 0 to 9.\n\"\"\"\n\ndef check_digits(string):\n", "finetuning_completion": " \r\n    if string.isdigit(): \r\n        return True\r\n    return False", "task_id": 1904}
{"finetuning_prompt": "\"\"\"\nWrite a python program that takes in two strings s1 and s2 and prints the length of the longest common substring.\n\"\"\"\n\ndef lcs(s1, s2):\n", "finetuning_completion": " \r\n \r\n    m = len(s1) \r\n    n = len(s2) \r\n  \r\n    dp = [[0 for i in range(n+1)] for j in range(m+1)] \r\n  \r\n    for i in range (m+1): \r\n        for j in range(n+1): \r\n            if i == 0 or j == 0: \r\n                dp[i][j] = 0\r\n            elif s1[i-1] == s2[j-1]: \r\n                dp[i][j] = dp[i-1][j-1] + 1\r\n            else: \r\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \r\n  \r\n    return dp[m][n]", "task_id": 1906}
{"finetuning_prompt": "\"\"\"\nWrite a python code that takes in a list of strings and appends all integers found in the strings to a new list.\n\"\"\"\n\ndef get_int_list(list1):\n", "finetuning_completion": " \n    result = [] \n    for i in list1: \n        for j in i: \n            if j.isdigit(): \n                result.append(int(j)) \n    return result", "task_id": 1907}
{"finetuning_prompt": "\"\"\"\nGiven two arrays, create a function to show the common elements.\n\"\"\"\n\ndef commonElements(arr1, arr2):\n", "finetuning_completion": " \n    result = []\n    for i in arr1: \n        if i in arr2: \n            result.append(i)\n    return result", "task_id": 1912}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the square of a given number and print it.\n\"\"\"\n\ndef findSquare(num):\n", "finetuning_completion": " \n    square = num * num\n    print(\"Square =\",square)", "task_id": 1913}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to filter out all the even numbers from a given array.\n\"\"\"\n\ndef filter_even_numbers(array):\n", "finetuning_completion": "\r\n    return [el for el in array if el % 2 == 0]", "task_id": 1915}
{"finetuning_prompt": "\"\"\"\nDevelop a program to classify the given sequence of numbers into the two categories - odds and evens.\n\"\"\"\n\ndef classify_sequence(l):\n", "finetuning_completion": "\r\n    even = []\r\n    odd = []\r\n    for num in l:\r\n        if num % 2 == 0:\r\n            even.append(num)\r\n        else:\r\n            odd.append(num)\r\n    return even, odd", "task_id": 1917}
{"finetuning_prompt": "\"\"\"\nCreate a program to automatically generate a histogram for a given array.\n\"\"\"\n\nimport matplotlib.pyplot as plt\n\ndef hist_array(arr):\n", "finetuning_completion": "\n    plt.hist(arr)\n    plt.show()", "task_id": 1928}
{"finetuning_prompt": "\"\"\"\nWrite a Python program that prints 3 prime numbers from the given list of numbers.\n\"\"\"\n\ndef get_prime_number(numbers):\n", "finetuning_completion": "\r\n  prime_list = []\r\n  \r\n  for number in numbers:\r\n    count = 0\r\n    for i in range(1,number+1):\r\n      if number % i == 0:\r\n        count +=1\r\n    if count == 2:\r\n      prime_list.append(number)\r\n\r\n  return prime_list[:3]", "task_id": 1934}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the maximum number of elements that are incresingly ordered in a given array.\n\"\"\"\n\ndef find_max_order(arr):\n", "finetuning_completion": " \n\tmax_length = 1\n\ttemp_length = 1\n    \n\t# Traverse through the given array  \n\tfor i in range(len(arr)-1): \n\t\t# Compare adjacent elements \n\t\tif (arr[i] < arr[i+1]): \n\t\t\ttemp_length+=1\n\t\t\tmax_length = max(max_length, temp_length) \n\t\telse: \n\t\t\ttemp_length = 1\n\treturn max_length", "task_id": 1941}
{"finetuning_prompt": "\"\"\"\nWrite a function to search for a key and return its value from a nested dictionary.\n\"\"\"\n\ndef search_nested_dict(data, key):\n", "finetuning_completion": "\r\n    if key in data.keys():\r\n        return data[key]\r\n    for k, v in data.items():\r\n        if isinstance(v,dict):\r\n            item = search_nested_dict(v, key)\r\n            if item is not None:\r\n                return item", "task_id": 1945}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to print all prime numbers in a given range.\n\"\"\"\n\ndef print_primes(start, end):\n", "finetuning_completion": "\r\n    for num in range(start, end + 1):  \r\n       if num > 1:  \r\n           for i in range(2,num):  \r\n               if (num % i) == 0:  \r\n                   break  \r\n           else:  \r\n               print(num)", "task_id": 1951}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a single integer value and returns a list of prime factors of that number.\n\"\"\"\n\ndef prime_factors(num):\n", "finetuning_completion": " \n    factors = [] \n    divisor = 2\n    while num >= 2: \n        if num % divisor == 0: \n            factors.append(divisor) \n            num //= divisor \n        else: \n            divisor += 1 \n            if divisor*divisor > num: \n                if num > 1: \n                    factors.append(num) \n                    break \n    return factors", "task_id": 1953}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to reverse the elements of a given array in-place (without creating any other array).\n\"\"\"\n\ndef reverse_array(array):\n", "finetuning_completion": " \r\n    start = 0\r\n    end = len(array)-1\r\n    while start < end: \r\n        temp = array[start] \r\n        array[start] = array[end] \r\n        array[end] = temp \r\n        start += 1\r\n        end -= 1\r\n    return array", "task_id": 1956}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a 2-D array of given size.\n\"\"\"\n\ndef create_2d_array(row, col):\n", "finetuning_completion": " \r\n   array2D = [[0 for x in range(row)] for y in range(col)] \r\n   return array2D", "task_id": 1960}
{"finetuning_prompt": "\"\"\"\nDesign a basic calculator complete with add, subtract, multiply and divide operations.\n\"\"\"\n\ndef basic_calculator(num1, num2, operation) :\n", "finetuning_completion": " \r\n    if operation == \"add\": \r\n        return num1 + num2 \r\n    elif operation == \"subtract\": \r\n        return num1 - num2 \r\n    elif operation == \"multiply\": \r\n        return num1 * num2 \r\n    elif operation == \"divide\": \r\n        return num1 / num2", "task_id": 1961}
{"finetuning_prompt": "\"\"\"\nWrite a function to check for balanced parentheses in a given expression.\n\"\"\"\n\ndef bal_paren(exp):\n", "finetuning_completion": " \n    s = [] \n    for i in range (len(exp)): \n        if exp[i] in (\"(\", \"{\" , \"[\"): \n            s.append(exp[i]) \n        elif exp[i] in (\")\", \"}\", \"]\"): \n            if len(s) == 0: \n                return False\n            if exp[i] == ')' and s[-1]=='(': \n                s.pop() \n            elif exp[i] == '}' and s[-1] == '{': \n                s.pop() \n            elif exp[i] == ']' and s[-1] == '[': \n                s.pop() \n    if len(s) != 0: \n        return False\n    return True", "task_id": 1965}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total cost by applying a given discount.\n\"\"\"\n\ndef apply_discount(total_cost, discount):\n", "finetuning_completion": " \n    return total_cost * (100 - discount) / 100", "task_id": 1966}
{"finetuning_prompt": "\"\"\"\nFind a maximum sum contiguous subarray of size k from a given array\n\"\"\"\n\ndef maxSumSubarray(array,  k):\n", "finetuning_completion": " \r\n    current_sum = 0 \r\n    max_sum = 0 \r\n    for i in range(len(array)-k+1): \r\n        current_sum = 0\r\n        for j in range(k): \r\n            current_sum += array[i + j] \r\n        if max_sum < current_sum: \r\n            max_sum = current_sum \r\n    return max_sum", "task_id": 1970}
{"finetuning_prompt": "\"\"\"\nWrite a code to remove all the duplicate characters from an input string.\n\"\"\"\n\ndef remove_duplicates(input_string):\n", "finetuning_completion": "\n    char_dict = {}\r\n    result_string = ''\r\n    for char in input_string:\r\n        if char not in char_dict:\r\n            char_dict[char] = 1\r\n            result_string += char\r\n    return result_string", "task_id": 1975}
{"finetuning_prompt": "\"\"\"\nWrite a code to check a given string for parentheses, braces, and brackets matching.\n\"\"\"\n\ndef check_paren(expression):\n", "finetuning_completion": " \n    s = [] \n    for char in expression: \n        if char in ['(', '{', '[']: \n            s.append(char) \n        elif char in [')', '}', ']']: \n            if(len(s) == 0): \n                return False\n            if not Match(s[-1], char): \n                return False\n            else: \n                s.pop() \n    return (len(s)==0) \ndef Match(open, close): \n    if(open == '(' and close == ')'): \n        return True\n    if(open == '{' and close == '}'): \n        return True\n    if(open == '[' and close == ']'): \n        return True\n    return False", "task_id": 1979}
{"finetuning_prompt": "\"\"\"\nDesign a function to calculate the total cost of a shopping cart given the items and their cost.\n\"\"\"\n\ndef calculate_cost(items):\n", "finetuning_completion": " \r\n    total = 0 \r\n    for item in items: \r\n        total += item[1] \r\n    return total", "task_id": 1986}
{"finetuning_prompt": "\"\"\"\nDesign a function to return the area of a triangle given 3 sides.\n\"\"\"\n\ndef triangle_area(sides):\n", "finetuning_completion": " \r\n    s = (sides[0] + sides[1] + sides[2])/2 \r\n    area = round(math.sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])),3) \r\n    return area", "task_id": 1987}
{"finetuning_prompt": "\"\"\"\nCreate a function to classify a given number into prime or composite.\n\"\"\"\n\ndef prime_check(number):\n", "finetuning_completion": " \r\n    if number > 1:  \r\n        for i in range(2, number//2 + 1): \r\n            if (number % i) == 0: \r\n                output = \"Composite\"\r\n                break\r\n        else: \r\n            output = \"Prime\"\r\n    else: \r\n        output = \"Composite\"\r\n\r\n    return output", "task_id": 1988}
{"finetuning_prompt": "\"\"\"\nDesign a code to multiply each item of a given list.\n\"\"\"\n\ndef list_multiply(num_list):\n", "finetuning_completion": " \r\n      \r\n    # Multiply each item in the list and store it in the new_list  \r\n    new_list = [item*2 for item in num_list] \r\n\r\n    # return the new list \r\n    return new_list", "task_id": 1990}
{"finetuning_prompt": "\"\"\"\nDesign a code for reverse sorting a list of numbers.\n\"\"\"\n\ndef reverse_sort_list(num_list):\n", "finetuning_completion": "\r\n    # Sort the numbers in the list in descending order  \r\n    num_list.sort(reverse = True) \r\n\r\n    # return the sorted list  \r\n    return num_list", "task_id": 1992}
{"finetuning_prompt": "\"\"\"\nDesign a code to check if two given integers are equal.\n\"\"\"\n\ndef check_ints_equal(a,b):\n", "finetuning_completion": " \r\n    # check if two given integers are equal \r\n    if a == b: \r\n        res = \"Equal\"\r\n    else: \r\n        res = \"Not Equal\"\r\n    return res", "task_id": 1994}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace all non-alphanumeric characters from a given string.\n\"\"\"\n\ndef replace_non_alphanumeric(str):\n", "finetuning_completion": "\r\n  new_str = \"\"\r\n  for i in str:\r\n    if i.isalnum():\r\n      new_str = new_str + i\r\n  return new_str", "task_id": 2002}
{"finetuning_prompt": "\"\"\"\nGenerate a dictionary that stores characters and the index of the characters.\n\"\"\"\n\ndef getDict(string):\n", "finetuning_completion": " \r\n    dic = {} \r\n  \r\n    for i in range(len(string)): \r\n        dic[string[i]] = i\r\n      \r\n    return dic", "task_id": 2006}
{"finetuning_prompt": "\"\"\"\nCompose a Regular Expression to check whether a string contains a valid set of numbers.\n\"\"\"\n\nimport re\ndef check_num(text):\n", "finetuning_completion": "\n    regex = '^[0-9 ]+$'\n    if(re.search(regex, text)):\n        return True\n    else:\n        return False", "task_id": 2011}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers and a target number, write a function to check if the target can be achieved by adding all the numbers in the list.\n\"\"\"\n\ndef check_sum(arr, target):\n", "finetuning_completion": " \r\n\tlength = len(arr)\r\n\tfor i in range(1 << length): \r\n\t\tsum = 0\r\n\t\tfor j in range(length): \r\n\t\t\tif (i & (1 << j)): \r\n\t\t\t\tsum += arr[j] \r\n\t\t\tif (sum == target): \r\n\t\t\t\treturn True\r\n\treturn False", "task_id": 2022}
{"finetuning_prompt": "\"\"\"\nDesign a function to check if two strings are equal when all whitespaces are\n\"\"\"\n\ndef check_equal(str1, str2):\n", "finetuning_completion": "\n  str1 = str1.replace(\" \",\"\") \n  str2 = str2.replace(\" \",\"\") \n  return str1 == str2", "task_id": 2032}
{"finetuning_prompt": "\"\"\"\nWrite a python function to get the row wise sum of a matrix.\n\"\"\"\n\ndef sumMatrix(X):\n", "finetuning_completion": " \r\n    rowsum = 0\r\n    list = [] \r\n    for i in range(len(X)): \r\n        for j in range(len(X[i])): \r\n            rowsum += X[i][j] \r\n        list.append(rowsum) \r\n        rowsum = 0\r\n    return list \n    \r\n# Output: \r\n# [3, 7, 11]", "task_id": 2041}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the closest points in a given set of points.\n\"\"\"\n\ndef closestDistance(points):\n", "finetuning_completion": " \r\n    min_dist = float(\"inf\")\r\n    for i in range(len(points)): \r\n        for j in range(i + 1, len(points)): \r\n            dist = sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2) \r\n            if dist < min_dist and i!= j: \r\n                min_dist = dist \r\n    return min_dist", "task_id": 2046}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a matrix multiplication of given matrices.\n\"\"\"\n\nimport numpy as np\ndef matrix_multiply(A, B):\n", "finetuning_completion": "\n  return np.matmul(A, B)", "task_id": 2054}
{"finetuning_prompt": "\"\"\"\nCreate a python function to insert an element into a given list at a specified index.\n\"\"\"\n\ndef insert(list1 , x,y):\n", "finetuning_completion": " \r\n  list1.insert(x,y)  \r\n  return list1", "task_id": 2056}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a string containing phone numbers into a list of integers.\n\"\"\"\n\ndef convert_phone_number(test_string):\n", "finetuning_completion": "\r\n  result = [int(i) for i in test_string.split('-')]\r\n  return result", "task_id": 2059}
{"finetuning_prompt": "\"\"\"\nGiven a sample array, write a function to separate positive and negative numbers into separate arrays.\n\"\"\"\n\ndef separate_pos_and_neg(test_arr):\n", "finetuning_completion": "\r\n  pos_arr = []\r\n  neg_arr = []\r\n  for x in test_arr:\r\n    if x >= 0:\r\n      pos_arr.append(x)\r\n    else:\r\n      neg_arr.append(x)\r\n  return pos_arr, neg_arr", "task_id": 2060}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if a given string can be rearranged into a palindrome.\n\"\"\"\n\ndef is_string_palindrome(test_string):\n", "finetuning_completion": "\r\n    all_char = set(test_string)\r\n    count_char = {}\r\n    for x in test_string:\r\n        if x in count_char:\r\n            count_char[x] += 1\r\n        else:\r\n            count_char[x] = 1\r\n    num_odd_char = 0\r\n    for count in count_char.values():\r\n        if count%2 != 0:\r\n            num_odd_char += 1\r\n    return num_odd_char <=1", "task_id": 2063}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if an array contains a pair of numbers with given sum.\n\"\"\"\n\ndef pair_sum(arr, sum):\n", "finetuning_completion": " \r\n    c = 0\r\n    for i in range(len(arr)): \r\n        for j in range(i+1, len(arr)): \r\n            if arr[i] + arr[j] == sum: \r\n                c += 1\r\n    return c > 0", "task_id": 2070}
{"finetuning_prompt": "\"\"\"\nWrite a function to encrypt a given string using Caesar's Cipher.\n\"\"\"\n\ndef encryption(message, key):\n", "finetuning_completion": " \r\n    # each string in alphabet is assigned a number \r\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\r\n    encrypted_message = \"\" \r\n  \r\n    for character in message: \r\n        if character in alphabet: \r\n            position = alphabet.find(character) \r\n            newPosition = (position + key) % 26\r\n            encrypted_message += alphabet[newPosition] \r\n        else: \r\n            encrypted_message += character \r\n    return encrypted_message", "task_id": 2074}
{"finetuning_prompt": "\"\"\"\nWrite a code to classify a given sentence as either positive or negative.\n\"\"\"\n\ndef classify_sentiment(sentence):\n", "finetuning_completion": "\r\n  if(\"not\" not in sentence):\r\n    if(\"boring\" in sentence):\r\n      return \"Negative\"\r\n    else: \r\n      return \"Positive\"\r\n  else: \r\n    return \"Negative\"", "task_id": 2076}
{"finetuning_prompt": "\"\"\"\nWrite a code to update an existing list with data from a range of given numbers.\n\"\"\"\n\ndef update_list(input_list, start,end):\n", "finetuning_completion": "\n  input_list+=list(range(start,end+1))\n  return input_list", "task_id": 2081}
{"finetuning_prompt": "\"\"\"\nCreate a program to output the frequency of each word in a given sentence.\n\"\"\"\n\ndef word_frequency(input_string):\n", "finetuning_completion": "\n    words = {}\n    for word in input_string.split():\n        if word not in words:\n            words[word] = 1\n        else:\n            words[word] += 1\n    return words", "task_id": 2085}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the occurrence of a specific word within a sentence.\n\"\"\"\n\ndef count_Occurence(sentence, word):\n", "finetuning_completion": " \n    return sentence.split().count(word)", "task_id": 2087}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify the input number as either odd or even.\n\"\"\"\n\ndef is_odd_or_even(num):\n", "finetuning_completion": "\r\n  if (num % 2 == 0):\r\n    return 'even'\r\n  else:\r\n    return 'odd'", "task_id": 2100}
{"finetuning_prompt": "\"\"\"\nSort a given list according to their length.\n\"\"\"\n\ndef sort_by_length(words):\n", "finetuning_completion": " \n    return sorted(words, key = len) \n  \nwords = ['apple', 'banana', 'grapes', 'cherry', 'lemon', 'lime'] \n  \nprint(sort_by_length(words))", "task_id": 2108}
{"finetuning_prompt": "\"\"\"\nFind the total number of different permutaions of a given string.\n\"\"\"\n\ndef number_permutations(string):\n", "finetuning_completion": " \n    n = len(string) \n    a = [0]*n \n    total = 1 \n    for i in range(n): \n        total *= (i + 1) \n        a[i] = total \n    return total", "task_id": 2113}
{"finetuning_prompt": "\"\"\"\nWrite a code to find if any given number is even or odd.\n\"\"\"\n\ndef even_odd(num):\n", "finetuning_completion": " \n    if num % 2 == 0: \n        return print(\"Number is even.\")  \n    else: \n        return print(\"Number is odd.\")", "task_id": 2114}
{"finetuning_prompt": "\"\"\"\nCompare the following strings for similarity.\n\"\"\"\n\ndef compare_similarity(string1, string2):\n", "finetuning_completion": " \n    m = len(string1) \r\n    n = len(string2) \r\n  \r\n    # Creating an array to store the \r\n    # dp values. \r\n    dp = [[0 for x in range(n + 1)] for x \r\n            in range(m + 1)] \r\n  \r\n    # Calculating the similarity \r\n    # by filling the array dp[][] \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if i == 0: \r\n                dp[i][j] = j  \r\n            elif j == 0: \r\n                dp[i][j] = i  \r\n            elif string1[i - 1] == string2[j - 1]: \r\n                dp[i][j] = dp[i - 1][j - 1] \r\n            else: \r\n                dp[i][j] = 1 + min(dp[i][j - 1], \r\n                                   dp[i - 1][j], \r\n                                   dp[i - 1][j - 1]) \r\n  \r\n    # Returning the result \r\n    return dp[m][n]", "task_id": 2117}
{"finetuning_prompt": "\"\"\"\nGenerate an array of given size containing prime numbers only.\n\"\"\"\n\ndef isPrime(n):  \n    for i in range(2,int(math.sqrt(n)+1)): \n        if n % i == 0: \n            return False\n    return True\n\ndef generatePrimeArray(n):\n", "finetuning_completion": "  \n    for i in range(2,int(math.sqrt(n)+1)): \n        if n % i == 0: \n            return False\n    return True\n\ndef generatePrimeArray(n):\n    prime_array = []\n    for i in range(2, n+1): \n        if isPrime(i): \n            prime_array.append(i)\n    return prime_array\n\nprint(generatePrimeArray(10)) # Output : [2, 3, 5, 7]", "task_id": 2120}
{"finetuning_prompt": "\"\"\"\nCheck if the given string can be converted to a palindrome by changing the order of its letters.\n\"\"\"\n\ndef palindrome_String(test_string):\n", "finetuning_completion": " \r\n\tif test_string == test_string[::-1]: \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False", "task_id": 2133}
{"finetuning_prompt": "\"\"\"\nCreate a function to sort a dictionary based on its value.\n\"\"\"\n\ndef sort_dictionary(dictionary):\n", "finetuning_completion": "\n    sorted_dict = {k: v for k, v in sorted(dictionary.items(), key=lambda item: item[1])}\n    return sorted_dict", "task_id": 2136}
{"finetuning_prompt": "\"\"\"\nOptimize the following code so that it runs faster.\n\"\"\"\n\ndef add(x, y):\n", "finetuning_completion": " \r\n   return (y * (y + 1)) // 2 - (x * (x - 1)) // 2", "task_id": 2140}
{"finetuning_prompt": "\"\"\"\nImprove the efficiency of the following code by changing the data structure used.\n\"\"\"\n\ndef improved_function(list_of_numbers):\n", "finetuning_completion": "\r\n    list_of_numbers.sort()\r\n    return list_of_numbers", "task_id": 2142}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to generate all possible valid parentheses combinations of a given length.\n\"\"\"\n\ndef generate_parentheses(n):\n", "finetuning_completion": "  \r\n    ans = []                \r\n    def backtrack(S='', left=0, right=0): \r\n        if len(S) == 2*n: \r\n            ans.append(S)  \r\n            return  \r\n        if left < n: \r\n            backtrack(S+'(', left+1, right) \r\n        if right < left: \r\n            backtrack(S+')', left, right+1) \r\n\r\n    backtrack() \r\n    return ans", "task_id": 2148}
{"finetuning_prompt": "\"\"\"\nCreate a function to classify a given object into an appropriate class.\n\"\"\"\n\ndef classify(object):\n", "finetuning_completion": " \r\n    if object==\"House\": \r\n        return \"Building\"\n    else: \r\n        return \"Unknown\"", "task_id": 2158}
{"finetuning_prompt": "\"\"\"\nGenerate a program to create a sequence of numbers in increasing order starting from 1.\n\"\"\"\n\ndef increasing_Sequence(n):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in range(1, n + 1): \r\n        result.append(i) \r\n    return result", "task_id": 2159}
{"finetuning_prompt": "\"\"\"\nGenerate a function to delete an element at the given index from a given list.\n\"\"\"\n\ndef delete_element(list, index):\n", "finetuning_completion": " \r\n    del list[index] \r\n    return list", "task_id": 2167}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the length of the longest increasing subsequence of a list.\n\"\"\"\n\ndef find_longest_increasing_subsequence(lst):\n", "finetuning_completion": "\r\n    n = len(lst)   \r\n    lis = [1]    \r\n    for i in range (1 , n):  \r\n        max_val = 0\r\n        for j in range(i):       \r\n            if lst[i] > lst[j] and lis[j] > max_val: \r\n                max_val = lis[j]      \r\n        lis.append(max_val + 1)     \r\n    return max(lis)", "task_id": 2171}
{"finetuning_prompt": "\"\"\"\nEdit a given program to make it more compact and efficient.\n\"\"\"\n\ndef sum_exists(list, x):\n", "finetuning_completion": " \r\n\t# Two-pointer technique \r\n\ti = 0\r\n\tj = len(list)-1\r\n\twhile i<j: \r\n\t\tif list[i] + list[j] == x: \r\n\t\t\treturn True\t\t\t\r\n\t\tif list[i] + list[j] < x: \t\t\t\r\n\t\t\ti+=1\r\n\t\telse: \t\t\t\t\t   \r\n\t\t\tj-=1\t\t   \r\n\treturn False", "task_id": 2173}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify a given array of numbers into labels of 1 or 2.\n\"\"\"\n\ndef classify(arr):\n", "finetuning_completion": "\r\n    out = [] \r\n    for i in range(len(arr)):\r\n        if arr[i] % 2 == 0:\r\n            out.append(2)\r\n        else:\r\n            out.append(1)\r\n    return out", "task_id": 2174}
{"finetuning_prompt": "\"\"\"\nModify the below code, so that the program returns the given customer order correctly.\n\"\"\"\n\ndef get_order(customer):\n", "finetuning_completion": " \r\n\torder = customer['order']\r\n\titems = order['items']\r\n\tprice = order['price']\r\n\treturn (items, price)", "task_id": 2177}
{"finetuning_prompt": "\"\"\"\nWrite a python program to remove duplicates, and create a new list of unique elements from a given list.\n\"\"\"\n\ndef remove_duplicates(a):\n", "finetuning_completion": " \r\n    final_list = [] \r\n    for num in a: \r\n        if num not in final_list: \r\n            final_list.append(num) \r\n    return final_list", "task_id": 2181}
{"finetuning_prompt": "\"\"\"\nWrite a python program to remove a list element at a given index.\n\"\"\"\n\ndef remove_element_by_index(Sample_List, Index):\n", "finetuning_completion": " \r\n    del Sample_List[Index] \r\n    return Sample_List", "task_id": 2183}
{"finetuning_prompt": "\"\"\"\nGenerate a program to check whether a number is a palindrome.\n\"\"\"\n\ndef isPalindrome(num):\n", "finetuning_completion": " \n    temp = num\n    rev = 0\n      \n    while(num > 0): \n        dig = num % 10\n        rev = rev * 10 + dig \n        num = num // 10\n      \n    # If the number is equal \n    # to its reverse then   \n    # return True \n    if(temp == rev): \n        return True\n    return False", "task_id": 2190}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find all combinations of words that can be formed from the given characters.\n\"\"\"\n\ndef combinations(chars):\n", "finetuning_completion": " \n    results = []\n    for i in range(1 << len(chars)):\n        result = []\n        for j in range(len(chars)):\n            if i & (1 << j):\n                result.append(chars[j])\n        results.append(''.join(result))\n    return results", "task_id": 2191}
{"finetuning_prompt": "\"\"\"\nEdit a function to calculate the maximum of two numbers and print the maximum in console.\n\"\"\"\n\ndef find_max(x, y):\n", "finetuning_completion": " \n    if x > y: \n        maximum = x \n    else: \n        maximum = y \n    print(\"The maximum number is\", maximum)", "task_id": 2195}
{"finetuning_prompt": "\"\"\"\nGenerate an array of unique elements from a given array where the input array may contain duplicate elements.\n\"\"\"\n\ndef removeDuplicates(arr):\n", "finetuning_completion": " \r\n    out = [] \r\n    seen = set() \r\n    for item in arr:\r\n        if item not in seen: \r\n            out.append(item) \r\n            seen.add(item) \r\n    return out \r\n  \r\n# input array \r\narr = [1, 2, 5, 2, 4, 0, 5] \r\n# passing to the function \r\narrWithoutDuplicates = removeDuplicates(arr) \r\n\r\n# printing result \r\nprint(*arrWithoutDuplicates, sep=\" \")", "task_id": 2198}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a tuple with elements from given two tuples with same size.\n\"\"\"\n\ndef tuple_combine(tup1, tup2):\n", "finetuning_completion": " \r\n    \r\n    tup3 = () \r\n    for i in range(0,len(tup1)): \r\n        tup3 = tup3 + (tup1[i], tup2[i]) \r\n    \r\n    return tup3 \r\n\r\ntuple1 = (4, 5, 6) \r\ntuple2 = (3, 7, 8)\r\n  \r\nresult = tuple_combine(tuple1, tuple2) \r\n  \r\nprint(\"The resulting tuple is : \" +  str(result))", "task_id": 2199}
{"finetuning_prompt": "\"\"\"\nWrite a python script to print the given factorial series up to nth term.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \r\n\tfact = 1\r\n\tfor i in range(1,n+1): \r\n\t\tfact = fact * i \r\n\treturn fact\r\n\r\nn = 6\r\nprint(factorial(n))", "task_id": 2212}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to calculate the sum of least-significant digits of all sub-arrays of a given array.\n\"\"\"\n\ndef sum_of_subarrays(arr):\n", "finetuning_completion": " \r\n\r\n  res = 0\r\n  for i in range (0, len(arr)): \r\n    for j in range(i+1, len(arr)+1): \r\n\r\n      subarray = arr[i:j] \r\n      for k in subarray: \r\n        res += k % 10\r\n  \r\n  return res", "task_id": 2215}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to create a string of all unique characters that appear multiple times in a given string\n\"\"\"\n\ndef unique_characters(str1):\n", "finetuning_completion": "\n  result = \"\"\n  for char in str1:\n    if str1.count(char) > 1 and char not in result:\n      result += char\n  return result", "task_id": 2217}
{"finetuning_prompt": "\"\"\"\nGiven a list, write a function to find the most common element.\n\"\"\"\n\ndef find_mode(nums):\n", "finetuning_completion": "\r\n    counts = {}\r\n    for num in nums:\r\n        if num in counts:\r\n            counts[num] += 1\r\n        else:\r\n            counts[num] = 1 \n    max_freq = 0\r\n    mode = None \r\n    \r\n    for num, freq in counts.items(): \r\n        if freq > max_freq:\r\n            max_freq = freq\r\n            mode = num\r\n    return mode", "task_id": 2222}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes an array of integers and prints the maximum product of any 2 numbers in the array.\n\"\"\"\n\ndef maximumProduct(arr):\n", "finetuning_completion": " \n    firstMax = max(arr[0], arr[1])\r\n    secMax = min(arr[0], arr[1]) \r\n    thirdMax = -float('inf')\r\n    firstMin = min(arr[0], arr[1])\r\n    secMin = max(arr[0], arr[1]) \r\n\r\n    for i in range(2, len(arr)): \r\n        if arr[i] > firstMax: \r\n            thirdMax = secMax \r\n            secMax = firstMax \r\n            firstMax = arr[i] \r\n        elif arr[i] > secMax: \r\n            thirdMax = secMax \r\n            secMax = arr[i] \r\n        elif arr[i] > thirdMax: \r\n            thirdMax = arr[i] \r\n            \r\n        if arr[i] < firstMin: \r\n            secMin = firstMin \r\n            firstMin = arr[i] \r\n  \r\n        elif arr[i] < secMin: \r\n            secMin = arr[i] \r\n            \r\n    return max(firstMax*secMax, firstMin*secMin)", "task_id": 2223}
{"finetuning_prompt": "\"\"\"\nProduce a function to validate a coordinate pair.\n\"\"\"\n\ndef validate_coordinates(x, y):\n", "finetuning_completion": "\r\n    if(x >= 0 and x <= 8) and (y >= 0 and y <= 8):\r\n        return True\r\n    else:\r\n        return False", "task_id": 2231}
{"finetuning_prompt": "\"\"\"\nCompose a program that searches for a given string in a given array of strings.\n\"\"\"\n\ndef find_string(arr, s):\n", "finetuning_completion": "\r\n    for i in range(len(arr)):\r\n        if arr[i] == s:\r\n            return True\r\n    return False", "task_id": 2234}
{"finetuning_prompt": "\"\"\"\nDevelop a function to convert a given base 10 number to a binary number.\n\"\"\"\n\ndef base10_to_binary(number):\n", "finetuning_completion": "\r\n    return bin(number).split('b')[1]", "task_id": 2235}
{"finetuning_prompt": "\"\"\"\nCreate a program that converts a given string to the pig latin format.\n\"\"\"\n\ndef pig_latin_converter(string):\n", "finetuning_completion": "\r\n    vowels = ['a', 'e', 'i', 'o', 'u']\r\n    words = string.lower().split()\r\n    words_converted = []\r\n    for word in words:\r\n        if word[0] in vowels: \r\n            word = word + 'way'\r\n        else: \r\n            word = word[1:] + word[0] + 'ay'\r\n        words_converted.append(word)\r\n    return ' '.join(words_converted)", "task_id": 2236}
{"finetuning_prompt": "\"\"\"\nCreate a function that compares two numbers and outputs the bigger one.\n\"\"\"\n\ndef bigger_of_two(a, b):\n", "finetuning_completion": "\r\n    if a > b:\r\n        return a\r\n    elif b > a:\r\n        return b\r\n    else:\r\n        return \"Numbers are equal\"", "task_id": 2237}
{"finetuning_prompt": "\"\"\"\nWrite code to find the maximum subarray sum of a given array of numbers.\n\"\"\"\n\ndef maxSubArraySum(arr):\n", "finetuning_completion": " \r\n    max_so_far = -float(\"inf\")\r\n    max_ending_here = 0\r\n    start = 0\r\n    end = 0\r\n    s = 0\r\n    for i in range(0, len(arr)): \r\n        max_ending_here += arr[i]\r\n        if max_so_far < max_ending_here:  \r\n            max_so_far = max_ending_here \r\n            start = s \r\n            end = i \r\n        if max_ending_here < 0:  \r\n            max_ending_here = 0\r\n            s = i + 1\r\n    return max_so_far, start, end", "task_id": 2243}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two input strings and returns one ordered alphabetically.\n\"\"\"\n\ndef order_strings(str1, str2):\n", "finetuning_completion": "\n  if str1 < str2: \n    return str1 + ' ' + str2 \n  else: \n    return str2 + ' ' + str1", "task_id": 2268}
{"finetuning_prompt": "\"\"\"\nGiven a list of integers and a threshold, write a function to find all pairs of numbers in the list which sum up to at least the threshold.\n\"\"\"\n\ndef find_pairs_threshold(list1, thresh):\n", "finetuning_completion": "\n    result = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] + list1[j] >= thresh:\n                result.append((list1[i], list1[j]))\n    return result", "task_id": 2270}
{"finetuning_prompt": "\"\"\"\nGenerate a code that can calculate the sum of multiples of 3 and 5 below a given number.\n\"\"\"\n\ndef multiples(limit):\n", "finetuning_completion": " \r\n    if (limit < 3): \r\n        return 0; \r\n  \r\n    sum = 0; \r\n  \r\n    # Loop to find the multiples of 3 and 5 \r\n    # below the provided limit \r\n    for i in range(3, limit): \r\n        if (i % 3 == 0 or i % 5 == 0): \r\n            sum += i; \r\n  \r\n    return sum;", "task_id": 2276}
{"finetuning_prompt": "\"\"\"\nGenerate a function that is capable of removing duplicate characters from a given string.\n\"\"\"\n\ndef remove_duplicate_characters(s):\n", "finetuning_completion": " \r\n    result = '' \r\n    seen = set() \r\n    for ch in s: \r\n        if ch not in seen: \r\n            seen.add(ch) \r\n            result += ch  \r\n    return result", "task_id": 2277}
{"finetuning_prompt": "\"\"\"\nCreate a function to negates every bit of a given number.\n\"\"\"\n\ndef negateBits(num):\n", "finetuning_completion": " \r\n  \r\n    # convert number into  \r\n    # binary first  \r\n    # binary(num) = bin(num) \r\n    binary = bin(num) \r\n  \r\n    # to negate binary number \r\n    negated_bin = '' \r\n    for bit in binary[2:]: \r\n        if(bit == '1'): \r\n            negated_bin += '0'\r\n        else: \r\n            negated_bin += '1'\r\n  \r\n    # convert negated binary to \r\n    # decimal  \r\n    decimal = int(negated_bin, 2) \r\n  \r\n    return decimal", "task_id": 2278}
{"finetuning_prompt": "\"\"\"\nWrite a function to fetch a web page.\n\"\"\"\n\nimport requests \r\n  \r\ndef fetch_page(url):\n", "finetuning_completion": " \r\n    \"\"\" \r\n    Requests a given web page. \r\n  \r\n    Args: \r\n        url (str): The web page URL. \r\n  \r\n    Returns: \r\n        response (Response): The response of the request. \r\n    \"\"\"  \r\n    try: \r\n        response = requests.get(url) \r\n        return response\r\n  \r\n    except requests.exceptions.RequestException as e: \r\n        print(e)", "task_id": 2281}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate a moving average.\n\"\"\"\n\ndef moving_average(data, window_size):\n", "finetuning_completion": " \n    moving_average_list = [] \n    for num in range(len(data) - window_size + 1): \n        current_window = data[num: (num + window_size)] \n        window_avg = sum(current_window) / window_size \n        moving_average_list.append(window_avg)\n    return moving_average_list", "task_id": 2283}
{"finetuning_prompt": "\"\"\"\nDevelop a function to remove any leading, trailing and extra in-between whitespaces from a given string.\n\"\"\"\n\ndef remove_whitespace(string):\n", "finetuning_completion": " \n    return \" \".join(string.split())", "task_id": 2286}
{"finetuning_prompt": "\"\"\"\nDevelop a python program to validate a given phone number using regular expressions.\n\"\"\"\n\nimport re\r\ndef check_phoneno(phone):\n", "finetuning_completion": "\r\n    pattern='^[2-9][0-9]{2}-[2-9][0-9]{2}-[0-9]{4}$'\r\n    if re.search(pattern,phone):\r\n        return 'Valid number'\r\n    return 'Invalid number'", "task_id": 2290}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to index a given set of integers.\n\"\"\"\n\ndef index_integers(lst):\n", "finetuning_completion": " \r\n  index_dict = {} \r\n  for i, num in enumerate(lst): \r\n    index_dict[i] = num \r\n  return index_dict", "task_id": 2296}
{"finetuning_prompt": "\"\"\"\nCreate a function to search and return index of an element in a given sorted array.\n\"\"\"\n\ndef binary_search(arr, elem):\n", "finetuning_completion": " \r\n    start = 0\r\n    end = len(arr)-1\r\n    found = -1\r\n\r\n    while start <= end and found == -1: \r\n        mid = int(start + (end - start) / 2)\r\n\r\n        if arr[mid] == elem: \r\n            found = mid \r\n  \r\n        elif arr[mid] > elem: \r\n            end = mid - 1\r\n  \r\n        else: \r\n            start = mid + 1\r\n  \r\n    return found", "task_id": 2297}
{"finetuning_prompt": "\"\"\"\nCreate a program to clean a text in a given string and return a new string.\n\"\"\"\n\nimport re\r\ndef clean_line(text):\n", "finetuning_completion": " \r\n  clean_text = re.sub(r'[\\W]+', '', text) \r\n  return clean_text", "task_id": 2301}
{"finetuning_prompt": "\"\"\"\nCreate a function to find a missing number in an array.\n\"\"\"\n\ndef find_missing(arr):\n", "finetuning_completion": " \r\n    n = len(arr) + 1\r\n    total = (n * (n+1))//2\r\n    arr_sum = sum(arr) \r\n    missing = total - arr_sum \r\n    return missing", "task_id": 2303}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a range from an array of numbers.\n\"\"\"\n\ndef create_range(lst):\n", "finetuning_completion": " \n    ng = list(range(lst[0],lst[-1]+1)) \n    return ng", "task_id": 2304}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the arithmetic mean of a 1-D list of numbers\n\"\"\"\n\ndef mean(nums):\n", "finetuning_completion": "\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum/len(nums)", "task_id": 2305}
{"finetuning_prompt": "\"\"\"\nWrite a function to pad a list to a given length in the beginning\n\"\"\"\n\ndef pad_list(lst,length):\n", "finetuning_completion": " \n    while len(lst) < length:\n        lst.insert(0, 0) \n    return lst", "task_id": 2307}
{"finetuning_prompt": "\"\"\"\nWrite a code for finding least common multiple for list of integers.\n\"\"\"\n\ndef lcms(int_list):\n", "finetuning_completion": " \r\n\tlcm = 1    \r\n\tfor i in int_list:  \t\t\r\n\t\tlcm = lcm*i/gcd(lcm, i) \r\n\treturn lcm \r\n     \r\n# exponents of all prime factors  \r\ndef primeFactors(n):  \r\n    expo = [] \r\n    cnt = 0\r\n    while n % 2 == 0: \r\n        cnt+=1\r\n        n = n / 2\r\n    if cnt>0:\r\n        expo.append(cnt) \r\n          \r\n    # n must be odd at this point  \r\n    # so a skip of 2 ( i = i + 2) can be used  \r\n    for i in range(3, int(math.sqrt(n))+1, 2):  \r\n        cnt = 0\r\n        while n % i == 0: \r\n            cnt+=1\r\n            n = n / i \r\n        if cnt>0:  \r\n            expo.append(cnt)          \r\n      \r\n    # prime factor greater than 2 \r\n    if n > 2: \r\n        expo.append(1) \r\n          \r\n    return expo\r\n     \r\n# finding gcd of more than two no.  \r\ndef gcd(a, b): \r\n    if a == 0 : return b  \r\n    return gcd(b%a, a)", "task_id": 2308}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the sum of two integers.\n\"\"\"\n\ndef add_Integers(int1, int2):\n", "finetuning_completion": " \n  \n    return int1 + int2", "task_id": 2324}
{"finetuning_prompt": "\"\"\"\nCreate a program to sanitize user input by removing all the special characters from it.\n\"\"\"\n\ndef sanitize_input(user_input):\n", "finetuning_completion": " \n    special_characters = '@#$%^&*()_=+-<>' \n    for char in special_characters: \n        user_input = user_input.replace(char, '') \n    return user_input", "task_id": 2326}
{"finetuning_prompt": "\"\"\"\nGiven a list of pairs, generate the pairs of corresponding elements from the given lists.\n\"\"\"\n\ndef pairs_list(list1, list2):\n", "finetuning_completion": " \r\n    res = [(list1[i],list2[i]) for i in range(len(list1))] \r\n    return res", "task_id": 2330}
{"finetuning_prompt": "\"\"\"\nDesign a program to compare two text strings and calculate their similarity score.\n\"\"\"\n\ndef similarity_score(str1, str2):\n", "finetuning_completion": " \r\n    # split the strings into words\r\n    words1 = str1.split() \r\n    words2 = str2.split() \r\n    # remove the words which are duplicate\r\n    list_words1 = sorted(set(words1)) \r\n    list_words2 = sorted(set(words2)) \r\n    # calculate the common words count\r\n    common_words = len(list(set(list_words1).intersection(list_words2))) \r\n    # calculate the total words count\r\n    total_words = len(list_words1) + len(list_words2) \r\n    # calculate the similarity score\r\n    score = common_words/total_words *100\r\n    return score", "task_id": 2337}
{"finetuning_prompt": "\"\"\"\nWrite a efficiency algorithm to solve a given code optimization problem.\n\"\"\"\n\ndef minimum_swaps(arr):\n", "finetuning_completion": " \n    n = len(arr) \n    arr_pos = [*enumerate(arr)] \n    \n    arr_pos.sort(key = lambda it:it[1]) \n\n    visited = {k:False for k in range(n)} \n    \n    ans = 0\n    for i in range(n): \n        if visited[i] or arr_pos[i][0] == i: \n            continue\n            \n        cycle_size = 0\n        j = i \n        while not visited[j]: \n            visited[j] = True\n            j = arr_pos[j][0] \n            cycle_size += 1\n        \n        if cycle_size > 0: \n            ans += (cycle_size - 1) \n    return ans", "task_id": 2338}
{"finetuning_prompt": "\"\"\"\nGenerate a code to calculate the standard deviation of an array of numbers.\n\"\"\"\n\nimport math \r\ndef calculate_standard_deviation(nums):\n", "finetuning_completion": " \r\n    mean = sum(nums) / len(nums) \r\n    variance = sum([pow(x-mean,2) for x in nums]) / len(nums) \r\n    return math.sqrt(variance)", "task_id": 2344}
{"finetuning_prompt": "\"\"\"\nGenerate an array of size n such that each element is the sum of its previous two elements.\n\"\"\"\n\ndef fibonacci(n):\n", "finetuning_completion": " \r\n    if n == 1 : \r\n        return [0] \r\n    elif n == 2 : \r\n        return [0,1] \r\n    a = 0 \r\n    b = 1\r\n    c = a+b \r\n    arr=[a,b] \r\n    for i in range(2,n) : \r\n        c=a+b \r\n        arr.append(c) \r\n        a = b \r\n        b = c \r\n    return arr", "task_id": 2345}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse a string but preserve the capitalization of words.\n\"\"\"\n\ndef reverse(s):\n", "finetuning_completion": " \r\n    s = s.split() \r\n    s = s[::-1] \r\n    s = ' '.join(s) \r\n    ans='' \r\n    for i in range(len(s)): \r\n        if s[i].islower(): \r\n            ans = ans + s[i] \r\n        elif s[i].isupper(): \r\n            ans= ans + s[i].lower() \r\n            if i+1<len(s) and s[i+1].islower(): \r\n                ans = ans + s[i+1].upper() \r\n                i += 1\r\n  \r\n    return ans", "task_id": 2350}
{"finetuning_prompt": "\"\"\"\nWrite a method to search for an item in a rotated sorted array.\n\"\"\"\n\ndef search(arr, low, high, key):\n", "finetuning_completion": " \r\n  \r\n    while low <= high: \r\n        mid = (low + high) // 2\r\n  \r\n        # Check if key is present at mid \r\n        if arr[mid] == key: \r\n            return mid \r\n  \r\n        # If arr[l...mid] is sorted \r\n        if arr[low] <= arr[mid]: \r\n            if key >= arr[low] and key <= arr[mid]: \r\n                high = mid - 1\r\n            else: \r\n                low = mid + 1\r\n  \r\n        # If arr[l...mid] is not sorted \r\n        else: \r\n            if key >= arr[mid] and key <= arr[high]: \r\n                low = mid + 1\r\n            else: \r\n                high = mid - 1\r\n          \r\n    return -1\n\n# Driver code \r\narr = [3, 4, 5, 6, 7, 8, 1, 2] \r\nkey = 6\r\n  \r\ni = search(arr, 0, len(arr)-1, key) \r\nif i != -1: \r\n    print(\"Index: % d\"%i) \nelse: \r\n    print(\"Key not found\")", "task_id": 2353}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove duplicates from an array and return a new array without the duplicates.\n\"\"\"\n\ndef remove_duplicates(given_list):\n", "finetuning_completion": "\r\n  result = [] \r\n  for i in given_list:\r\n    if i not in result:\r\n      result.append(i)\r\n  return result", "task_id": 2360}
{"finetuning_prompt": "\"\"\"\nGiven an input array, write a function to sort it in ascending order.\n\"\"\"\n\ndef sort_array_ascending(arr):\n", "finetuning_completion": " \r\n  arr.sort() \r\n  return arr", "task_id": 2361}
{"finetuning_prompt": "\"\"\"\nWrite a loop to print the elements of an array in reverse order.\n\"\"\"\n\ndef print_elements_reverse(arr):\n", "finetuning_completion": " \n    for i in range(len(arr)-1, -1, -1): \n        print(arr[i], end = ' ')", "task_id": 2364}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to flatten a given nested array.\n\"\"\"\n\ndef flattenArr(arr):\n", "finetuning_completion": " \r\n    res = []\r\n    for element in arr: \r\n        if isinstance(element, list): \r\n            res.extend(flattenArr(element)) \r\n        else:\r\n            res.append(element) \r\n    return res\n\nprint(flattenArr([[1, [2, 3], [4,[5]]]]))", "task_id": 2366}
{"finetuning_prompt": "\"\"\"\nWrite a code to transpose a matrix.\n\"\"\"\n\ndef transposeMatrix(matrix):\n", "finetuning_completion": " \n    rows = len(matrix) \n    cols = len(matrix[0]) \n  \n    result_matrix = [[0 for i in range(rows)] for j in range(cols)] \n  \n    for i in range(rows): \n        for j in range(cols): \n            result_matrix[j][i] = matrix[i][j] \n  \n    return result_matrix", "task_id": 2373}
{"finetuning_prompt": "\"\"\"\nCreate a code to remove duplicate members from a list.\n\"\"\"\n\ndef removeDuplicates(arr):\n", "finetuning_completion": " \n    newArr = [] \n    for item in arr: \n        if item not in newArr: \n            newArr.append(item) \n    return newArr", "task_id": 2374}
{"finetuning_prompt": "\"\"\"\nGenerate a code to determine if the two strings contain the same letters regardless of order.\n\"\"\"\n\ndef is_anagram(str1, str2):\n", "finetuning_completion": " \n    counts_str1 = dict.fromkeys(str1, 0) \n    counts_str2 = dict.fromkeys(str2, 0) \n  \n    for char in str1: \n        counts_str1[char] += 1\n  \n    for char in str2: \n        counts_str2[char] += 1\n  \n    return counts_str1 == counts_str2", "task_id": 2375}
{"finetuning_prompt": "\"\"\"\nGenerate a python methond which can convert any given positive integer to its equivalent binary representation.\n\"\"\"\n\ndef int_to_binary(num):\n", "finetuning_completion": "\r\n    if num == 0:\r\n        return \"0\"\r\n    result = \"\"\r\n    while num > 0:\r\n        result = str(num % 2) + result\r\n        num = num // 2\r\n    return result", "task_id": 2380}
{"finetuning_prompt": "\"\"\"\nGenerate a python code which can identify all the possible words from a given word scramble.\n\"\"\"\n\ndef word_scramble(chars):\n", "finetuning_completion": "\r\n    words = []\r\n    for i in range(len(chars)): \r\n        for j in range(len(chars)+1): \r\n            s = chars[i:j]\r\n            words.append(s)\r\n    words = list(dict.fromkeys(words))\r\n    words = [word for word in words if word]\r\n\r\n    return words", "task_id": 2387}
{"finetuning_prompt": "\"\"\"\nProduce a python function to detect whether number is Armstrong or not.\n\"\"\"\n\ndef armstrong_check(num):\n", "finetuning_completion": " \r\n    sum = 0  \r\n    temp = num  \r\n    while temp > 0:  \r\n        digit = temp % 10  \r\n        sum += digit ** 3  \r\n        temp //= 10  \r\n  \r\n    if num == sum: \r\n        return True\r\n    else: \r\n        return False", "task_id": 2389}
{"finetuning_prompt": "\"\"\"\nEdit the given python function such that it returns the biggest element in a given 2D array.\n\"\"\"\n\ndef biggest_element(arr):\n", "finetuning_completion": "\n  # set the variable 'biggest' to the first value in the array.\n  biggest = arr[0][0]\n  \n  # loop through each element of the array and update the value of 'biggest' if the item is larger than the current value.\n  for row in arr:\n    for e in row:\n      if e > biggest:\n        biggest = e\n  \n  # return the value of 'biggest'.\n  return biggest", "task_id": 2406}
{"finetuning_prompt": "\"\"\"\nCorrect the following code block and minimize redundancy.\n\"\"\"\n\ndef findSum(array):\n", "finetuning_completion": "\r\n  summation = 0\r\n  for num in array:\r\n    if isinstance(num, int):\r\n      summation += num\r\n  return summation", "task_id": 2414}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to remove a duplicate character from a given string.\n\"\"\"\n\ndef remove_duplicate_char(str1):\n", "finetuning_completion": " \n    duplicates_removed = '' \n    for char in str1: \n\n        if char not in duplicates_removed: \n            duplicates_removed = duplicates_removed + char \n        else: \n            continue\n    return duplicates_removed", "task_id": 2415}
{"finetuning_prompt": "\"\"\"\nCreate a function to classify an IPv4 address into its corresponding network class.\n\"\"\"\n\ndef ipv4_classification(ip):\n", "finetuning_completion": " \n    ip = ip.split(\".\")\n    octet1 = int(ip[0])\n    if octet1 <= 127:\n        return \"Class A\"\n    elif octet1 >= 128 and octet1 <= 191:\n        return \"Class B\"\n    elif octet1 >= 192 and octet1 <= 223:\n        return \"Class C\"\n    elif octet1 >= 224 and octet1 <= 239:\n        return \"Class D\"\n    else:\n        return \"Class E\"", "task_id": 2416}
{"finetuning_prompt": "\"\"\"\nEdit the given code to implement a search algorithm with a time complexity of O(log n).\n\"\"\"\n\ndef search(arr, key):\n", "finetuning_completion": " \r\n  \r\n    # Step 1: Calculate the mid index \r\n    start = 0\r\n    end = (len(arr)-1)\r\n  \r\n    while start <= end: \r\n  \r\n        mid = (start + end)//2\r\n  \r\n        # Step 2: Check for the key at mid index \r\n        if arr[mid] == key: \r\n            return mid \r\n  \r\n        # Step 3: To check whether to  \r\n        # move to the left half or  \r\n        # the right half of the array \r\n        elif arr[mid] < key: \r\n            start = mid + 1\r\n        else: \r\n            end = mid - 1\r\n  \r\n    return -1", "task_id": 2427}
{"finetuning_prompt": "\"\"\"\nGenerate a program to encrypt a string with a given key.\n\"\"\"\n\ndef encrypt_string(s, key):\n", "finetuning_completion": " \r\n    s = list(s) \r\n    for i in range(len(s)): \r\n        s[i] = chr((ord(s[i]) - ord('a') + int(key)) % 26 + ord('a')) \r\n    return ''.join(s) \r\n  \r\nstr = \"Hello World\" \r\nkey = \"5\"\r\n  \r\nprint(encrypt_string(str, key))", "task_id": 2428}
{"finetuning_prompt": "\"\"\"\nEdit the given code to search for an element in a sorted array.\n\"\"\"\n\ndef searchSortedArray(arr, target):\n", "finetuning_completion": " \r\n  \r\n    lo = 0\r\n    hi = len(arr) - 1\r\n  \r\n    while lo <= hi: \r\n        mid = (hi + lo) // 2\r\n          \r\n        if arr[mid] == target: \r\n            return mid \r\n  \r\n        if arr[mid] < target: \r\n            lo = mid + 1\r\n        else: \r\n            hi = mid - 1\r\n  \r\n    return -1\n  \narr = [2, 3, 6, 8, 11, 15, 19] \r\ntarget = 8\r\nindex = searchSortedArray(arr,target) \r\nif index != -1: \r\n    print(\"Element found at index\",index) \nelse: \r\n    print(\"Element not found\")", "task_id": 2430}
{"finetuning_prompt": "\"\"\"\nWrite a function in Python that takes a text string as input and returns a dictionary with words and the number of times each word is used in the text.\n\"\"\"\n\ndef word_count(str):\n", "finetuning_completion": "\n    counts = dict()\r\n    words = str.split()\r\n\r\n    for word in words:\r\n        if word in counts:\r\n            counts[word] += 1\r\n        else:\r\n            counts[word] = 1\r\n\r\n    return counts", "task_id": 2443}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine if a string is a valid palindrome (a word, phrase, or sequence that reads the same backward as forward)\n\"\"\"\n\ndef is_valid_palindrome(s):\n", "finetuning_completion": " \n  rev = ''.join(reversed(s)) \n  \n  if (s == rev): \n    return True\n  return False", "task_id": 2456}
{"finetuning_prompt": "\"\"\"\nDevelop a program to calculate factorials on a large number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\r\n    if n == 0 or n == 1:\r\n        return 1\r\n    else:\r\n        return n * factorial(n - 1)", "task_id": 2466}
{"finetuning_prompt": "\"\"\"\nCreate a program to group a given list of strings by their length.\n\"\"\"\n\nfrom collections import defaultdict\r\ndef grouped_by_length(string_list):\n", "finetuning_completion": "\r\n    grouped_strings = defaultdict(list)\r\n    for string in string_list:\r\n        grouped_strings[len(string)].append(string)\r\n    return grouped_strings", "task_id": 2467}
{"finetuning_prompt": "\"\"\"\nGenerate an encryption algorithm for a given text.\n\"\"\"\n\ndef generate_encryption(text):\n", "finetuning_completion": "\r\n    encrypted_text = ''\r\n    for letter in text:\r\n        encrypted_text += chr(ord(letter)+1)\r\n    return encrypted_text", "task_id": 2470}
{"finetuning_prompt": "\"\"\"\nCreate a function to insert a given string into another string.\n\"\"\"\n\ndef insert_string(string1, string2):\n", "finetuning_completion": "\r\n    return string1 + \" \" + string2", "task_id": 2471}
{"finetuning_prompt": "\"\"\"\nGenerate the Fibonacci number sequence which starts with the given two numbers and the length of the sequence.\n\"\"\"\n\ndef fibonacci_sequence(start1, start2, length):\n", "finetuning_completion": " \r\n    lst = [start1, start2] \r\n    for i in range(2, length): \r\n        lst.append(lst[i-1] + lst[i-2]) \r\n    return lst", "task_id": 2484}
{"finetuning_prompt": "\"\"\"\nGenerate a program to check whether a binary number is divisible by 5 or not.\n\"\"\"\n\ndef is_divisible_by_5(binary):\n", "finetuning_completion": " \r\n  decimal = int(binary,2) \r\n  if (decimal % 5 == 0): \r\n    return True\r\n  else: \r\n    return False", "task_id": 2502}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the closest value in the list.\n\"\"\"\n\ndef closestVal(list, target):\n", "finetuning_completion": " \r\n  \r\n    min_diff = float('inf') \r\n    closest_val = None\r\n    for val in list:  \r\n        diff = abs(target - val) \r\n        if (diff < min_diff):  \r\n            min_diff = diff \r\n            closest_val = val \r\n  \r\n    return closest_val", "task_id": 2520}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to classify a given input to a specific group.\n\"\"\"\n\ndef classifyInput(input):\n", "finetuning_completion": "\r\n    output_list = [] \r\n  \r\n    for num in input: \r\n        if num < 5: \r\n            output_list.append(\"Few\") \r\n        elif num < 10: \r\n            output_list.append(\"Several\") \r\n        elif num < 20: \r\n            output_list.append(\"Pack\") \r\n        elif num < 50: \r\n            output_list.append(\"Lots\") \r\n        elif num < 100: \r\n            output_list.append(\"Horde\") \r\n        elif num >= 100: \r\n            output_list.append(\"Throng\") \r\n  \r\n    return output_list \r\n  \r\ninput = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\noutput = classifyInput(input) \r\nprint(output)", "task_id": 2525}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to encrypt a given string using a simple substitution cipher.\n\"\"\"\n\ndef encrypt(text):\n", "finetuning_completion": " \r\n    result = \"\" \r\n      \r\n    for i in range(len(text)): \r\n        char = text[i]  \r\n        if (char.isupper()): \r\n            result += chr((ord(char) + 5-65) % 26 + 65) \r\n        elif (char.islower()):    \r\n            result += chr((ord(char) + 5-97) % 26 + 97) \r\n        else:     \r\n            result += char \r\n  \r\n    return result\r\n  \r\ntext = \"This is a secret message\"\r\nout = encrypt(text) \r\nprint(out)", "task_id": 2527}
{"finetuning_prompt": "\"\"\"\nWrite a code to filter out elements from a list that appear more than once in the list.\n\"\"\"\n\ndef filter_list(input_list):\n", "finetuning_completion": " \r\n    unique_list = [] \r\n    for elem in input_list: \r\n        if elem not in unique_list: \r\n            unique_list.append(elem) \r\n    return unique_list", "task_id": 2557}
{"finetuning_prompt": "\"\"\"\nChange the following program to a recursive function.\n\"\"\"\n\ndef sum_numbers(n):\n", "finetuning_completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + sum_numbers(n - 1)", "task_id": 2560}
{"finetuning_prompt": "\"\"\"\nIdentify whether the given string is a palindrome or not.\n\"\"\"\n\ndef is_palindrome(string1):\n", "finetuning_completion": "\n    rev_str = string1[::-1]\n    if (string1 == rev_str):\n        return True\n    return False", "task_id": 2561}
{"finetuning_prompt": "\"\"\"\nEdit the code to return a sorted list of tuples containing the names and score of the highest scorers in a given list of dictionaries.\n\"\"\"\n\ndef highestScorer(d):\n", "finetuning_completion": "\n    Scorelist = sorted([(v['name'], v['score']) for v in d], key=lambda x:x[1], reverse=True)\n    return Scorelist", "task_id": 2562}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to find the maximum value of an array after applying a given operation '*' between each pair of elements.\n\"\"\"\n\ndef max_value(Array):\n", "finetuning_completion": "\r\n  max_val = 0\r\n  \r\n  for i in range(len(Array)):\r\n    for j in range(i+1, len(Array)):\r\n      max_val = max(max_val, Array[i] * Array[j])\r\n      \r\n  return max_val\r\n        \r\nprint(max_value([1,2,3,4]))  \r\n# Output: 12", "task_id": 2572}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove duplicates from a given list while preserving the order of the elements.\n\"\"\"\n\ndef remove_duplicates(list):\n", "finetuning_completion": "\n  out = []\n  for i in list:\n    if i not in out:\n      out.append(i)\n  return out\n\nprint(remove_duplicates([7, 9, 3, 2, 3, 10]))\n# Output: [7, 9, 3, 2, 10]", "task_id": 2575}
{"finetuning_prompt": "\"\"\"\nCreate a function to get the longest common substring from two given strings.\n\"\"\"\n\ndef longestSubstring(s1, s2):\n", "finetuning_completion": " \r\n\tm = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \r\n\tlongest, x_longest = 0, 0\r\n\tfor x in range(1, 1 + len(s1)): \r\n\t\tfor y in range(1, 1 + len(s2)): \r\n\t\t\tif s1[x - 1] == s2[y - 1]: \r\n\t\t\t\tm[x][y] = m[x - 1][y - 1] + 1\r\n\t\t\t\tif m[x][y] > longest: \r\n\t\t\t\t\tlongest = m[x][y] \r\n\t\t\t\t\tx_longest = x \r\n\t\t\telse: \r\n\t\t\t\tm[x][y] = 0\r\n\t\t\t\t\r\n\treturn s1[x_longest - longest: x_longest]", "task_id": 2579}
{"finetuning_prompt": "\"\"\"\nCreate a function to insert a space between every two characters in a string.\n\"\"\"\n\ndef insertSpace(string):\n", "finetuning_completion": " \n\tres = \"\" \n\tfor i in range(len(string)): \n\t\tres += string[i] \n\t\tif i != len(string)-1: \n\t\t\tres += \" \"\r\n\treturn res", "task_id": 2580}
{"finetuning_prompt": "\"\"\"\nCreate a function from a given array of integers to return two lists, one containing only odd numbers and another containing only even numbers.\n\"\"\"\n\ndef split_arr(arr):\n", "finetuning_completion": " \r\n    oddlist = [] \r\n    evenlist = [] \r\n    for i in arr: \r\n        if(i %2 != 0): \r\n            oddlist.append(i) \r\n        else: \r\n            evenlist.append(i) \r\n    return oddlist, evenlist", "task_id": 2591}
{"finetuning_prompt": "\"\"\"\nCreate a function that prints the frequency of each element in an array.\n\"\"\"\n\ndef frequency(arr):\n", "finetuning_completion": " \r\n    freq_dict = {} \r\n    for i in range (0, len(arr)): \r\n        if arr[i] in freq_dict: \r\n            freq_dict[arr[i]] +=1\r\n        else: \r\n            freq_dict[arr[i]] =1\r\n    for key, value in freq_dict.items(): \r\n        print(str(key) + \": \" +str(value))", "task_id": 2592}
{"finetuning_prompt": "\"\"\"\nCreate a script that prints the words of a string in reverse order.\n\"\"\"\n\ndef print_reverse(string):\n", "finetuning_completion": " \r\n    words = string.split() \r\n    words.reverse()  \r\n    rstring = \" \".join(words) \r\n    print(rstring)", "task_id": 2601}
{"finetuning_prompt": "\"\"\"\nGenerate a dictionary containing words and count for each word in a sentence.\n\"\"\"\n\ndef create_dict(string):\n", "finetuning_completion": " \r\n    words = string.split() \r\n    dic = {} \r\n    for word in words: \r\n        if word in dic: \r\n            dic[word] += 1  \r\n        else : \r\n            dic[word] = 1  \r\n    return dic", "task_id": 2602}
{"finetuning_prompt": "\"\"\"\nCreate a python program which finds the longest string in each row of the given matrix.\n\"\"\"\n\ndef find_longest_string(matrix):\n", "finetuning_completion": "\r\n    result = []\r\n    for row in matrix:\r\n        max_len = 0\r\n        longest_string = ''\r\n        for element in row:\r\n            if len(element) > max_len:\r\n                longest_string = element\r\n                max_len = len(element)\r\n        result.append(longest_string)\r\n    return result\r\n\r\nmatrix = [['ABC', 'DEF', 'GHI', 'JKL'], \r\n['MNOPQRS', 'TUV', 'XYZ'],\r\n['PQRST', 'UVW','ABCD','EF','GH','IJK']]\r\n\r\nprint(find_longest_string(matrix))", "task_id": 2610}
{"finetuning_prompt": "\"\"\"\nDevelop a program that changes the spelling of a given word using phonetic alphabet substitutions.\n\"\"\"\n\ndef phonetic_substitution(word):\n", "finetuning_completion": "\n    phonetics = {'a': 'alpha', 'b': 'bravo', 'c': 'charlie', 'd': 'delta', 'e': 'echo', 'f': 'foxtrot', \n    'g': 'golf', 'h': 'hotel', 'i': 'india', 'j': 'juliet', 'k': 'kilo', 'l': 'lima', 'm': 'mike',\n    'n': 'november', 'o': 'oscar', 'p': 'papa', 'q': 'quebec', 'r': 'romeo', 's': 'sierra', \n    't': 'tango', 'u': 'uniform', 'v': 'victor', 'w': 'whiskey', 'x': 'xray', 'y': 'yankee',\n    'z': 'zulu'\n}\n    phonetic_word = ''\n    for character in word:\n        phonetic_word += phonetics[character.lower()] + \" \"\n    phonetic_word = phonetic_word[:-1]\n    return phonetic_word\n\nword = \"robot\"\nprint(phonetic_substitution(word))", "task_id": 2616}
{"finetuning_prompt": "\"\"\"\nCreate a program to list all prime number between 1 to n.\n\"\"\"\n\ndef getPrimes(n):\n", "finetuning_completion": " \r\n    prime_numbers = [] \r\n    for num in range(2, n + 1):  \r\n        if all(num % i != 0 for i in range(2, num)): \r\n            prime_numbers.append(num) \r\n    return prime_numbers", "task_id": 2621}
{"finetuning_prompt": "\"\"\"\nDevelop a function to categorize the positive, negative and zero values of the given list.\n\"\"\"\n\ndef categorize_values(list):\n", "finetuning_completion": " \r\n    pos, neg, zero = 0, 0, 0  \r\n    for i in list: \r\n        if i > 0: \r\n            pos += 1 \r\n        elif i < 0: \r\n            neg += 1 \r\n        else: \r\n            zero += 1 \r\n    return [pos, neg, zero]", "task_id": 2630}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm for finding the longest increasing subsequence in an array.\n\"\"\"\n\ndef longest_increasing_subsequence(arr):\n", "finetuning_completion": " \r\n    \r\n    n = len(arr) \r\n  \r\n    lis = [1] * n \r\n  \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    maximum = 0\r\n  \r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i]) \r\n  \r\n    return maximum", "task_id": 2635}
{"finetuning_prompt": "\"\"\"\nWrite a code that distinguishes good and bad strings.\n\"\"\"\n\ndef check_string(string):\n", "finetuning_completion": "\r\n    return \"Good\" if (not 'bad' in string.lower()) else \"Bad\"", "task_id": 2639}
{"finetuning_prompt": "\"\"\"\nWrite a code to remove all duplicate elements from a list and return a new list containing only unique elements.\n\"\"\"\n\ndef remove_duplicates(my_list):\n", "finetuning_completion": " \r\n\tunique_list = [] \r\n\tfor item in my_list: \r\n\t\tif item not in unique_list: \r\n\t\t\tunique_list.append(item) \r\n\treturn unique_list", "task_id": 2645}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to check if two strings are a one-edit away.\n\"\"\"\n\ndef one_edit_away(s1, s2):\n", "finetuning_completion": "\n  if len(s1) == len(s2):\n    return one_edit_replace(s1, s2)\n  elif len(s1) + 1 == len(s2):\n    return one_edit_insert(s1, s2)\n  elif len(s1) == len(s2) + 1:\n    return one_edit_insert(s2, s1)\n  else:\n    return False\n\n\ndef one_edit_replace(s1, s2):\n  edited = False\n  for i in range(len(s1)):\n    if edited and s1[i] != s2[i]:\n        return False\n    if s1[i] != s2[i]:\n      edited = True\n  return True\n\ndef one_edit_insert(s1, s2):\n  index1 = 0\n  index2 = 0\n  while index2 < len(s2) and index1 < len(s1):\n    if s1[index1] != s2[index2]:\n      if index1 != index2:\n        return False\n      index2 += 1\n    else:\n      index1 += 1\n      index2 += 1\n\n  return True", "task_id": 2652}
{"finetuning_prompt": "\"\"\"\nSplit a given string into words and store each word in a different element in an array\n\"\"\"\n\ndef stringToArray(string):\n", "finetuning_completion": " \r\n    words = string.split(' ') \r\n    return words", "task_id": 2655}
{"finetuning_prompt": "\"\"\"\nOptimize an array by removing all duplicate values.\n\"\"\"\n\ndef optimizeArray(arr):\n", "finetuning_completion": "\n    optimized_arr = [] \n    for num in arr:\n        if num not in optimized_arr: \n            optimized_arr.append(num)\n    return optimized_arr", "task_id": 2657}
{"finetuning_prompt": "\"\"\"\nGenerate a secret key using SHA-256 encryption.\n\"\"\"\n\nimport hashlib \r\n  \r\ndef generate_secret_key():\n", "finetuning_completion": " \r\n    secret_key= hashlib.sha256(str(\"random-string\").encode()).hexdigest() \r\n    return secret_key", "task_id": 2658}
{"finetuning_prompt": "\"\"\"\nCreate a function to take a string of words and return a dictionary of all the words, with the count of each word.\n\"\"\"\n\ndef word_count(string):\n", "finetuning_completion": " \r\n    words_dict = {} \r\n      \r\n    string = string.split() \r\n      \r\n    for each in string: \r\n        if each in words_dict:  \r\n            words_dict[each] += 1\r\n        else: \r\n            words_dict[each] = 1\r\n    return words_dict", "task_id": 2669}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the combination for the sum 50 in the given array of numbers.\n\"\"\"\n\ndef find_combinations(arr):\n", "finetuning_completion": " \r\n    combination = [] \r\n    for i in range(0,len(arr)): \r\n        for j in range(i+1,len(arr)): \r\n            if (arr[i] + arr[j] is 50): \r\n                combination.append([arr[i], arr[j]]) \r\n    return combination \r\n\r\nres = find_combinations([25, 10, 15, 20, 5])\r\nprint(res)", "task_id": 2671}
{"finetuning_prompt": "\"\"\"\nDesign a function that takes in two strings and returns their longest common substring.\n\"\"\"\n\ndef longest_common_substring(string_1, string_2):\n", "finetuning_completion": " \r\n    # Find the length of two strings \r\n    m = len(string_1) \r\n    n = len(string_2) \r\n  \r\n    # Create an array to store string lengths \r\n    lcs = [[0 for i in range(n + 1)] for j in range(m + 1)] \r\n  \r\n    result = 0 \r\n  \r\n    # Traverse strings and mark the lengths of longest common substring \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if (i == 0 or j == 0): \r\n                lcs[i][j] = 0\r\n            elif (string_1[i - 1] == string_2[j - 1]): \r\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\r\n                result = max(result, lcs[i][j]) \r\n            else: \r\n                lcs[i][j] = 0\r\n  \r\n    return result", "task_id": 2676}
{"finetuning_prompt": "\"\"\"\nImplement a function to calculate the reverse Polish notation of an expression of mathematical operators.\n\"\"\"\n\ndef rpn(expression):\n", "finetuning_completion": " \n  \n    # split expression into list \n    expression_list = expression.split(\" \") \n  \n    # set the operator stack \n    operator_stack = [] \n  \n    # traverse through the expression to get output \n    for i in expression_list: \n      \n        # check if the element is a numeral or not \n        if i.isdigit(): \n            # convert it to int \n            n = int(i) \n              \n            # push to the output stack \n            operator_stack.append(n) \n          \n        # if element is an operator \n        else: \n            # get the last two elements from the output stack \n            a = operator_stack.pop() \n            b = operator_stack.pop() \n              \n            # call the respective operator function \n            if i == '+': \n                temp = b + a \n            if i == '-': \n                temp = b - a\n            if i == '*': \n                temp = b * a \n            if i == '/': \n                temp = b / a \n              \n            # append the result to the output stack \n            operator_stack.append(temp) \n      \n    # the result of RPN expression will be at the top of the stack \n    return operator_stack[-1]", "task_id": 2678}
{"finetuning_prompt": "\"\"\"\nOptimize a script to reduce the running time of a mergesort algorithm.\n\"\"\"\n\ndef merge_sort(array):\n", "finetuning_completion": " \r\n    # base case \r\n    if len(array) <= 1: \r\n        return array \r\n  \r\n    # recursive case \r\n    mid = len(array) // 2 \r\n    left = array[:mid] \r\n    right = array[mid:] \r\n  \r\n    left = merge_sort(left) \r\n    right = merge_sort(right) \r\n\r\n    return merge(left, right) \r\n  \r\ndef merge(left, right): \r\n    res = [] \r\n    i = j = 0\r\n    while i < len(left) and j < len(right): \r\n        if left[i] <= right[j]: \r\n            res.append(left[i]) \r\n            i += 1\r\n        else: \r\n            res.append(right[j]) \r\n            j += 1\r\n      \r\n    res.extend(left[i:]) \r\n    res.extend(right[j:]) \r\n    return res", "task_id": 2681}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find the maximum sum subarray of size k.\n\"\"\"\n\ndef maxSubArraySum(arr, size):\n", "finetuning_completion": " \r\n    max_sum = 0\r\n    window_sum = 0\r\n      \r\n    for i in range(0, size): \r\n        max_sum += arr[i] \r\n          \r\n    window_sum = max_sum \r\n  \r\n    for i in range(size, len(arr)): \r\n          \r\n        window_sum += arr[i] - arr[i - size] \r\n        max_sum = max(max_sum, window_sum) \r\n  \r\n    return max_sum", "task_id": 2688}
{"finetuning_prompt": "\"\"\"\nGenerate a program to take a list of numbers and find the mode, (the number that appear with the greatest frequency).\n\"\"\"\n\ndef mode(list1):\n", "finetuning_completion": " \r\n    cnt = 0\r\n    Freq = 0\r\n    n = len(list1)\r\n    max_fr = list1.count(list1[0]) \r\n    res = list1[0] \r\n    cnt = 0\r\n    while cnt < n: \r\n        if list1.count(list1[cnt]) > max_fr: \r\n            res = list1[cnt] \r\n            max_fr = list1.count(list1[cnt]) \r\n        cnt = cnt + 1\r\n    return res \n\nlist1 = [4, 6, 8, 8, 8, 9]\nprint (\"Mode of the given list is : \",mode(list1))", "task_id": 2690}
{"finetuning_prompt": "\"\"\"\nCreate a function to return the closest distance to the origin from a list of points.\n\"\"\"\n\nimport math\n\ndef closest_to_origin(points):\n", "finetuning_completion": "\n    min_distance = float(\"inf\")\n    result = []\n    \n    for point in points:\n        distance = math.sqrt(point[0]**2 + point[1]**2)\n        if min_distance > distance:\n            min_distance = distance\n            result = point\n    return result", "task_id": 2696}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to delete numbers divisible by 5 and 7 in a given list.\n\"\"\"\n\ndef remove_numbers(given_list):\n", "finetuning_completion": "\r\n  return [item for item in given_list if item % 5 != 0 and item % 7 != 0]", "task_id": 2700}
{"finetuning_prompt": "\"\"\"\nDevelop a program to print the 8 characters after the first non-whitespace character of a given string.\n\"\"\"\n\ndef return_eight(str):\n", "finetuning_completion": "\r\n    idx = str.index(str.strip()[0])\r\n    return str[idx+1:idx+9]", "task_id": 2704}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert uppercase letters in a given string to lowercase letters and vice versa.\n\"\"\"\n\ndef case_conversion(given_string):\n", "finetuning_completion": "\n    str_list = list(given_string) \r\n    for i in range(len(str_list)): \r\n        if str_list[i].isupper(): \r\n            str_list[i] = str_list[i].lower() \r\n        elif str_list[i].islower(): \r\n            str_list[i] = str_list[i].upper() \r\n    return ''.join(str_list)", "task_id": 2705}
{"finetuning_prompt": "\"\"\"\nDevelop a program to format the output of a given list of integers using the join() function.\n\"\"\"\n\ndef format_output(int_list):\n", "finetuning_completion": "\r\n    return '-'.join(map(str, int_list))", "task_id": 2707}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to search for an item in a given list and return its position.\n\"\"\"\n\ndef search_item(given_list, item):\n", "finetuning_completion": "\n    for iterate in range(0, len(given_list)):\n        if given_list[iterate] == item:\n            return iterate", "task_id": 2708}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a date from American date format (Month - Day - Year) to European date format (Day - Month - Year).\n\"\"\"\n\ndef us_to_eu_date(Input_date):\n", "finetuning_completion": " \n    return Input_date.split(\"-\")[1] + \"-\" + Input_date.split(\"-\")[0] + \"-\" + Input_date.split(\"-\")[2]", "task_id": 2711}
{"finetuning_prompt": "\"\"\"\nCreate a function to check if a given string consists of unique characters.\n\"\"\"\n\ndef string_Check(Input_String):\n", "finetuning_completion": " \n    l = len(Input_String) \n    for i in range(l): \n        for j in range(i + 1, l): \n            if Input_String[i] == Input_String[j]: \n                return False\n    return True", "task_id": 2714}
{"finetuning_prompt": "\"\"\"\nCreate a python program that takes a user input number and then generates a list that contains all the prime numbers up to the given number.\n\"\"\"\n\ndef sieve_of_eratosthenes(n):\n", "finetuning_completion": "\n    prime = [True] * (n+1) \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    res = []\n    for p in range(2, n+1): \n        if prime[p]: \n            res.append(p)\n    return res", "task_id": 2715}
{"finetuning_prompt": "\"\"\"\nDesign a python code to convert a given timestamp into readable format.\n\"\"\"\n\nimport datetime \r\ndef format_time(timestamp):\n", "finetuning_completion": " \r\n    date_time = datetime.datetime.fromtimestamp(timestamp/1000) \r\n    formatted_date = date_time.strftime('%Y-%m-%d %H:%M:%S') \r\n    return formatted_date", "task_id": 2725}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes in a string and returns the capitalized version?\n\"\"\"\n\ndef capitalizeString(str):\n", "finetuning_completion": "\n    return str.capitalize()", "task_id": 2734}
{"finetuning_prompt": "\"\"\"\nGiven a string, find its first non-repeating character.\n\"\"\"\n\ntest_str = \"Hello World\"\r\n \r\ndef non_repeating_char(str1):\n", "finetuning_completion": " \r\n    freq = {} \r\n    for ele in str1: \r\n        if ele in freq: \r\n            freq[ele] = freq[ele] + 1\r\n        else: \r\n            freq[ele] = 1\r\n  \r\n    for ele in str1: \r\n        if freq[ele] == 1: \r\n            return ele \r\n    return \"None\"", "task_id": 2736}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, remove elements with the same value.\n\"\"\"\n\ngiven_arr = [2, 4, 6, 2, 4]\r\n \r\ndef remove_duplicates(given_arr):\n", "finetuning_completion": " \r\n    num_hash = {} \r\n \r\n    for num in given_arr: \r\n        if num not in num_hash: \r\n            num_hash[num] = 0\r\n        num_hash[num] += 1\r\n       \r\n    updated_arr = [] \r\n  \r\n    for num in given_arr: \r\n        if num_hash[num] >= 1: \r\n            updated_arr.append(num)\r\n            num_hash[num] = -1\r\n  \r\n    return updated_arr", "task_id": 2737}
{"finetuning_prompt": "\"\"\"\nWrite a function to implement a breadth-first search algorithm on the given 2D array.\n\"\"\"\n\ndef search(arr, x):\n", "finetuning_completion": "\n    rows=len(arr) \n    cols=len(arr[0]) \n   \n    explored=[]\n    queue=[[0,0]]\n   \n    while queue:\n        curr=queue.pop(0)\n        curr_row=curr[0]\n        curr_col=curr[1]\n       \n        if arr[curr_row][curr_col]==x:\n            explored.append(curr)\n            return explored\n        if curr not in explored:\n            explored.append(curr)\n            if (curr_row+1<rows) and (curr_col+1<cols):\n                queue.append([curr_row+1,curr_col+1])\n            if curr_row+1<rows:\n                queue.append([curr_row+1,curr_col])\n            if curr_col+1<cols:\n                queue.append([curr_row,curr_col+1])\n\n    return False\n    \narr=[[1, 2, 3],[4, 5, 6],[7, 8, 9]]\nres=search(arr,5)\nprint(res)", "task_id": 2742}
{"finetuning_prompt": "\"\"\"\nOptimize the given function by employing any advanced techniques such as memoization, dynamic programming etc.\n\"\"\"\n\ndef foo(n, memo={}):\n", "finetuning_completion": "\n   if n == 1 or n == 2:\n      return 1\n   if n in memo:\n      return memo[n]\n   res = foo(n-1, memo) + foo(n-2, memo)\n   memo[n] = res\n   return res", "task_id": 2744}
{"finetuning_prompt": "\"\"\"\nCreate a function to store words in a set, remove duplicates and return a sorted list of the words.\n\"\"\"\n\ndef sort_words(words):\n", "finetuning_completion": "\n    word_list = words.split()\r\n    words_set = set(word_list)\n    words_list = list(words_set)\n    words_list.sort()\n    return words_list", "task_id": 2747}
{"finetuning_prompt": "\"\"\"\nDesign a program to detect and remove outliers from a given dataset using inter quartile range.\n\"\"\"\n\ndef remove_outliers(arr):\n", "finetuning_completion": " \n    arr = sorted(arr)\r\n    q1, q3= np.percentile(arr,[25,75]) \r\n    iqr = q3 - q1\r\n    lower_bound = q1 -(1.5 * iqr) \r\n    upper_bound = q3 +(1.5 * iqr)\r\n    \r\n    outliers = [x for x in arr if x < lower_bound or x > upper_bound] \r\n    non_outliers = [x for x in arr if x >= lower_bound and x <= upper_bound]\r\n\r\n    return non_outliers", "task_id": 2749}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to calculate the maximum number of cocktails that can be prepared with given ingredients.\n\"\"\"\n\ndef getMaxCocktails(vodka, orange_juice, cranberry_juice, tequila):\n", "finetuning_completion": "\n    maxCocktails = min(vodka // 2, orange_juice // 3, cranberry_juice // 3, tequila)\n    return maxCocktails", "task_id": 2759}
{"finetuning_prompt": "\"\"\"\nGiven a two dimensional array, write a function to find the only row with all 0s in it.\n\"\"\"\n\ndef zero_row(arr):\n", "finetuning_completion": "\r\n    for row in arr:\r\n        if sum(row) == 0:\r\n            return row\r\n    return None", "task_id": 2774}
{"finetuning_prompt": "\"\"\"\nCreate a boolean array to identify whether any number in a range is prime or not.\n\"\"\"\n\ndef primeChecker(max_num):\n", "finetuning_completion": "\r\n    prime = [True]*(max_num+1)\r\n    prime[0] = False\r\n    prime[1] = False\r\n    p = 2\r\n    while p*p <= max_num:\r\n        if not prime[p]:\r\n            p += 1\r\n            continue\r\n        for i in range(p* 2, max_num+1, p):\r\n            prime[i] = False\r\n        p += 1\r\n    return prime", "task_id": 2775}
{"finetuning_prompt": "\"\"\"\nGiven an array and a target sum, Write a function to determine if the target sum can be achieved using a subset of the array elements.\n\"\"\"\n\ndef targetSumSubset(arr, targetSum):\n", "finetuning_completion": " \n\tn = len(arr) \n\tdp = [[False for x in range(targetSum + 1)] for y in range(n)] \n\tfor i in range(n): \n\t\tdp[i][0] = True\n\tfor i in range(n): \n\t\tfor j in range(1, targetSum + 1): \n\t\t\tif j < arr[i]: \n\t\t\t\tdp[i][j] = (dp[i-1][j]) \n\t\t\telif j >= arr[i]: \n\t\t\t\tdp[i][j] = (dp[i-1][j] or dp[i-1][j - arr[i]]) \n\treturn (dp[n - 1][targetSum] == True)", "task_id": 2776}
{"finetuning_prompt": "\"\"\"\nWrite a code to convert the given binary number to an integer.\n\"\"\"\n\ndef binary_to_integer(bin_string):\n", "finetuning_completion": " \r\n    n = 0\r\n    for i in bin_string: \r\n        n = n * 2 + int(i) \r\n    return n", "task_id": 2790}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate an array from the given number to one.\n\"\"\"\n\ndef generate_array(num):\n", "finetuning_completion": " \r\n    return [x for x in range(num, 0, -1)] \n\ngenerate_array(5) \r\n# Output: [5, 4, 3, 2, 1]", "task_id": 2799}
{"finetuning_prompt": "\"\"\"\nCreate a program to split an input string into substrings of specified length.\n\"\"\"\n\ndef split_str(input_str, substring_length):\n", "finetuning_completion": "\r\n  res = [input_str[i: i + substring_length]\r\n      for i in range(0, len(input_str), substring_length)]\r\n  return (res)", "task_id": 2810}
{"finetuning_prompt": "\"\"\"\nWrite a function to encrypt data using the Caesar Cipher algorithm.\n\"\"\"\n\ndef caesar_encryption(plaintext, key):\n", "finetuning_completion": "\r\n    enc_text = \"\"\r\n    for i in plaintext:\r\n        if(ord(i) >= 65 and ord(i) <= 90):\r\n            c = chr((ord(i) - 65 + key)%26 + 65)\r\n            enc_text += c\r\n        elif(ord(i) >= 97 and ord(i) <= 122):\r\n            c = chr((ord(i) - 97 + key)%26 + 97)\r\n            enc_text += c\r\n        else: \r\n            enc_text += i\r\n\r\n    return enc_text\r\n\r\nplaintext = \"hello\"\r\nkey = 3\r\nprint(caesar_encryption(plaintext, key))", "task_id": 2813}
{"finetuning_prompt": "\"\"\"\nCreate a program to print anagrams in a given list of words.\n\"\"\"\n\ndef find_anagrams(words):\n", "finetuning_completion": "\n    anagrams = []\n    lookup = {}\n    \n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        if sorted_word in lookup:\n            anagrams.append((lookup[sorted_word], word))\n        else:\n            lookup[sorted_word] = word\n    \n    return anagrams\n\nwords = [\"snow\", \"dog\", \"banana\", \"rats\", \"scar\", \"act\"]\nprint(find_anagrams(words))\n# [('rats', 'scar'), ('act', 'cat')]", "task_id": 2815}
{"finetuning_prompt": "\"\"\"\nCreate a function to remove all elements from a given array of integer values leaving only 0s.\n\"\"\"\n\ndef remove_nonzeros(arr):\n", "finetuning_completion": "\n    new_arr = []\n    for x in arr:\n        if x == 0:\n            new_arr.append(x)\n    return new_arr", "task_id": 2819}
{"finetuning_prompt": "\"\"\"\nGenerate a function which takes a matix with n rows and columns, and outputs the sum for the first n elements\n\"\"\"\n\ndef matrix_sum_first_n(mat, n):\n", "finetuning_completion": "\r\n    total = 0\r\n    for row in mat[:n]:\r\n        for element in row[:n]:\r\n            total += element\r\n    return total", "task_id": 2822}
{"finetuning_prompt": "\"\"\"\nEdit the given function to produce the output as a list of strings.\n\"\"\"\n\ndef special_snowflake_func(s):\n", "finetuning_completion": "\r\n  upper_s = s.upper()\r\n  lower_s = s.lower()\r\n  return [upper_s, lower_s]", "task_id": 2823}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the longest substring of subarrays with the given size.\n\"\"\"\n\ndef find_longest_subarray_size(arr, size):\n", "finetuning_completion": " \r\n\tmax_len = 0\r\n\tfor i in range(len(arr) - size + 1): \r\n\t\tsubArray = arr[i : i + size] \r\n\t\tmax_len = max(max_len, len(subArray)) \r\n\treturn max_len", "task_id": 2826}
{"finetuning_prompt": "\"\"\"\nDetect if a given number n is a perfect square or not.\n\"\"\"\n\ndef perfect_square(n):\n", "finetuning_completion": "\n  sqrt = n**0.5\n  if(sqrt - int(sqrt) == 0):\n    return True \n  else:\n    return False", "task_id": 2842}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove the first-given item from the list.\n\"\"\"\n\ndef remove_first_item(list):\n", "finetuning_completion": "\n  if len(list) > 0:\n    del list[0]\n    return list\n  else:\n    return \"List empty\"", "task_id": 2843}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm for quick sort.\n\"\"\"\n\ndef quick_sort(arr):\n", "finetuning_completion": "\r\n    if len(arr) <= 1:\r\n        return arr\r\n    else:\r\n        pivot = arr[0]\r\n        left_arr = [x for x in arr[1:] if x <= pivot]\r\n        right_arr = [x for x in arr[1:] if x > pivot]\r\n        return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)\r\n  \r\n# Driver Code \r\narr = [9, 4, 12, 1, 7, 19, 5] \r\nresult = quick_sort(arr) \r\n  \r\n# Print the sorted array \r\nprint(result)", "task_id": 2856}
{"finetuning_prompt": "\"\"\"\nUsing regular expressions, add spaces between words of a sentence.\n\"\"\"\n\nimport re \r\ndef add_spaces(sentence):\n", "finetuning_completion": " \r\n    return re.sub(r'(\\S)([A-Z])', r'\\1 \\2', sentence)", "task_id": 2859}
{"finetuning_prompt": "\"\"\"\nUsing recursion, generate all possible valid words from a given set of letters.\n\"\"\"\n\ndef generate_words(letters, word=''):\n", "finetuning_completion": " \r\n    if len(letters) == 0: \r\n        if word != '': \r\n            print(word) \r\n        return\r\n    for i in range(len(letters)):  \r\n        cur = letters[i] \r\n        remainingLetters = letters[:i] + letters[i+1:] \r\n        generate_words(remainingLetters, word + cur)", "task_id": 2862}
{"finetuning_prompt": "\"\"\"\nCalculate the total sum of elements in a given nested list.\n\"\"\"\n\ndef sum_list(list1):\n", "finetuning_completion": " \r\n    total_sum = 0\r\n    for item in list1:  \r\n        if type(item) == list: \r\n            total_sum += sum_list(item) \r\n        else: \r\n            total_sum += item \r\n    return total_sum", "task_id": 2865}
{"finetuning_prompt": "\"\"\"\nWrite a function to produce an acknowledgement code from an integer.\n\"\"\"\n\ndef create_ack_code(x):\n", "finetuning_completion": " \r\n    code = \"\" \r\n    digit_sum = 0 \r\n    for digit in str(x): \r\n        digit_sum += int(digit) \r\n    code += str(digit_sum) \r\n    for digit in str(x): \r\n        index = int(digit) \r\n        char = chr(65 + index) \r\n        code += char \r\n    return code", "task_id": 2868}
{"finetuning_prompt": "\"\"\"\nDesign a program to print the characters at even indexes of a string.\n\"\"\"\n\ndef index_even(string):\n", "finetuning_completion": "\r\n    index_even_list = []\r\n    for i in range(0, len(string), 2):\r\n        index_even_list.append(string[i])\r\n    return ''.join(index_even_list)", "task_id": 2880}
{"finetuning_prompt": "\"\"\"\nWrite a regular expression to find strings between two hyphens.\n\"\"\"\n\nimport re\n\ndef regex_extract(str):\n", "finetuning_completion": "\n  pattern = r\"\\-(.*?)\\-\"\n  result = re.findall(pattern, str)\n  return result", "task_id": 2886}
{"finetuning_prompt": "\"\"\"\nCreate a program in Python to print all prime numbers between 1 and an entered number.\n\"\"\"\n\ndef prime_number(num):\n", "finetuning_completion": "\n    prime_nums = [2]\n    for i in range(3, num+1):\n        for j in prime_nums:\n            if i%j == 0:\n                break\n        else:\n            prime_nums.append(i)\n    return prime_nums", "task_id": 2904}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert an object's properties to an array.\n\"\"\"\n\ndef convert_obj_to_array(my_obj):\n", "finetuning_completion": "\r\n    array = []\r\n    for key, value in my_obj.items():\r\n        array.append(value)\r\n    return array", "task_id": 2909}
{"finetuning_prompt": "\"\"\"\nImplement a function to find the missing number in a given array of length N-1.\n\"\"\"\n\ndef missingNumber(arr):\n", "finetuning_completion": "\r\n    n = len(arr);\r\n    # Sum of natural numbers is n*(n+1)/2\r\n    total = (n + 1)*(n + 2)/2;\r\n    arr_sum = 0;\r\n\r\n    # Calculate sum of all elements of array\r\n    for i in range(0, n):\r\n        arr_sum = arr_sum + arr[i];\r\n\r\n    # Return the missing number\r\n    return int(total - arr_sum);", "task_id": 2910}
{"finetuning_prompt": "\"\"\"\nGenerate the code to throw an exception if the type of a given number is not integer.\n\"\"\"\n\ndef check_number_type(value):\n", "finetuning_completion": " \r\n    if type(value) != int: \r\n        raise TypeError(\"Input number should have integer type\")", "task_id": 2912}
{"finetuning_prompt": "\"\"\"\nWrite a function to simulate Conway's Game of Life.\n\"\"\"\n\ndef gameOfLife(board):\n", "finetuning_completion": "\r\n    # copy the original board to be updated at the same time\r\n    new_board = [[j for j in i] for i in board]\r\n    for i in range(len(board)):\r\n        for j in range(len(board[i])):\r\n            life = 0\r\n            # check 8 neighboring positions\r\n            for y in range(-1, 2):\r\n                for x in range(-1, 2):\r\n                    # calculate the new coordinate\r\n                    ny = i + y\r\n                    nx = j + x\r\n                    # continue if the position is out of range\r\n                    if ny < 0 or nx < 0 or ny > len(board)-1 or nx > len(board[i])-1:\r\n                        continue\r\n                    # check if the position is alive\r\n                    elif board[ny][nx]:\r\n                        life += 1\r\n            # exclude the current position from the count\r\n            if board[i][j]: life -= 1\r\n                    \r\n            # apply the game rules\r\n            if board[i][j] and (life < 2 or life > 3):\r\n                new_board[i][j] = 0\r\n            if not board[i][j] and life == 3:\r\n                new_board[i][j] = 1\r\n\r\n    # copy the updated board to the original board\r\n    for i in range(len(board)):\r\n        board[i] = [j for j in new_board[i]]", "task_id": 2913}
{"finetuning_prompt": "\"\"\"\nWrite a python script to strip words from a sentence by their letter count.\n\"\"\"\n\ndef strip_by_letter_count(sentence, l_count):\n", "finetuning_completion": "\n    words = sentence.split()\n    out_words = []\n    for word in words:\n        if len(word) > l_count:\n            out_words.append(word)\n    out_words = \" \".join(out_words)\n    return out_words\n\nstrip_by_letter_count('The quick brown fox jumps over the lazy dog.', 3)\n# Output: quick brown jumps over lazy", "task_id": 2916}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to print out the prime numbers between two given numbers.\n\"\"\"\n\ndef print_prime_nums(min, max):\n", "finetuning_completion": " \r\n  \r\n    for num in range(min, max + 1): \r\n        if num > 1: \r\n            for i in range(2, num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                print(num)", "task_id": 2921}
{"finetuning_prompt": "\"\"\"\nUpdate the following code to make it print the most frequent elements of the list.\n\"\"\"\n\ndef most_frequent_numbers(lst):\n", "finetuning_completion": "\n    frequency = {}\r\n    for num in lst:\n        if num not in frequency:\r\n            frequency[num] = 0\r\n        frequency[num] += 1\r\n    max_frequency = max(frequency.values())\r\n    for key, value in frequency.items():\r\n        if value == max_frequency:\r\n            print(key)", "task_id": 2927}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to convert a given number into its corresponding Roman Numerals.\n\"\"\"\n\ndef intToRoman(num):\n", "finetuning_completion": " \r\n\tval = [ \r\n\t\t1000, 900, 500, 400, \r\n\t\t100, 90, 50, 40, \r\n\t\t10, 9, 5, 4, \r\n\t\t1\r\n\t\t] \r\n\tsyb = [ \r\n\t\t\"M\", \"CM\", \"D\", \"CD\", \r\n\t\t\"C\", \"XC\", \"L\", \"XL\", \r\n\t\t\"X\", \"IX\", \"V\", \"IV\", \r\n\t\t\"I\"\r\n\t\t] \r\n\troman_num = '' \r\n\ti = 0\r\n\twhile  num > 0: \r\n\t\tfor _ in range(num // val[i]): \r\n\t\t\troman_num += syb[i] \r\n\t\t\tnum -= val[i] \r\n\t\ti += 1\r\n\treturn roman_num", "task_id": 2943}
{"finetuning_prompt": "\"\"\"\nGenerate a program to input an array and reverse the elements of the array.\n\"\"\"\n\ndef reverse_Array(arr):\n", "finetuning_completion": "\n\n    # Initialize start and end index\n    start = 0\n    end = len(arr) - 1\n\n    # Reverse elements in the array\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n  \n    # Return the resulting array\n    return arr\n\n# Driver code \narr = [3, 4, 9, 5]\nprint(reverse_Array(arr))", "task_id": 2954}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the top k items of an array.\n\"\"\"\n\ndef findTopKItems(arr, k):\n", "finetuning_completion": "\n\t\n\t# sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n\t\n\t# return the first k elements of sorted array\n    return sorted_arr[:k]", "task_id": 2957}
{"finetuning_prompt": "\"\"\"\nWrite a function for a Keyword search.\n\"\"\"\n\ndef keyword_search(sentence, keyword):\n", "finetuning_completion": "\n    words = sentence.split()\n    if keyword in words:\n        return True\n    else:\n        return False", "task_id": 2961}
{"finetuning_prompt": "\"\"\"\nCreate a program to compare two lists and identify all the elements present in one list and not present in the other.\n\"\"\"\n\ndef elements_not_common(a, b):\n", "finetuning_completion": " \n    result = [] # to store the result \n  \n    # traverse each element in list \n    for ele in a: \n        if ele not in b: \n            result.append(ele) \n  \n    for ele in b: \n        if ele not in a: \n            result.append(ele) \n          \n    return result", "task_id": 2962}
{"finetuning_prompt": "\"\"\"\nCreate a program to search for a given word in a matrix.\n\"\"\"\n\ndef search_word (mat, search) :\n", "finetuning_completion": " \n\tn = len(mat) \n\tfor i in range(0, n) : \n\t\tfor j in range (0, n) : \n\t\t\tif (mat[i][j] == search) : \n\t\t\t\treturn True\n\treturn False", "task_id": 2964}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode a given string which only contains \"a\" and \"b\" characters into an integer.\n\"\"\"\n\ndef encode_string(string):\n", "finetuning_completion": " \r\n  res = 0\r\n  for ele in string: \r\n    res = res << 1; \r\n    if ele == 'b': \r\n      res = res ^ 1; \r\n  return res", "task_id": 2968}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the largest increasing sequence in a given array.\n\"\"\"\n\ndef largest_increasing_sequence(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n  \r\n    lis = [1]*n \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    maximum = 0\r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i]) \r\n    return maximum", "task_id": 2973}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to find and print the first two largest elements of a given array.\n\"\"\"\n\ndef printTwoLargest(arr):\n", "finetuning_completion": "\n    \n    n = len(arr)\n\n    firstLargest = arr[0]\n    secondLargest = -9999999\n\n    for i in range(1, n):\n        if arr[i] > firstLargest:\n            secondLargest = firstLargest\n            firstLargest = arr[i]\n\n        elif arr[i] > secondLargest:\n            secondLargest = arr[i]\n\n    print(\"First largest element is\", firstLargest)   \n    print(\"Second largest element is\", secondLargest)", "task_id": 2975}
{"finetuning_prompt": "\"\"\"\nDevelop a program to select items from a list of given items that fit in a specified price range.\n\"\"\"\n\ndef select_item(items, price_range):\n", "finetuning_completion": "\r\n\tselected_items = []\r\n\tfor item in items:\r\n\t\tif item['price'] >= price_range[0] and item['price'] <= price_range[1]:\r\n\t\t\tselected_items.append(item)\r\n\treturn selected_items", "task_id": 2979}
{"finetuning_prompt": "\"\"\"\nDevelop a program to identify the position of a given item in a given list.\n\"\"\"\n\ndef get_position(original_list, item):\n", "finetuning_completion": "\r\n    for index, i in enumerate(original_list):\r\n        if item==i:\r\n            return index\r\n    return -1", "task_id": 2981}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the number of ways to reach a given number by adding and multiplication of some numbers.\n\"\"\"\n\ndef find_ways(number):\n", "finetuning_completion": " \r\n\tnumbers = [2, 3, 5] \r\n\tways=[1]+[0]*number\r\n\tfor num in numbers: \r\n\t\tfor i in range(num, number+1): \r\n\t\t\tways[i] += ways[i-num] \r\n\treturn ways[number]", "task_id": 2983}
{"finetuning_prompt": "\"\"\"\nGenerate a function to add two matrices of given sizes.\n\"\"\"\n\ndef add_matrices(A, B):\n", "finetuning_completion": " \r\n    rowsA = len(A) \r\n    colsA = len(A[0])\r\n  \r\n    rowsB = len(B) \r\n    colsB = len(B[0])\r\n  \r\n    # Checking for inequality in the dimensions of the given matrices \r\n    if(rowsA != rowsB) or (colsA != colsB): \r\n        print(\"Error! Incompatible Matrix Sizes\") \r\n  \r\n    # Creating the resultant matrix \r\n    result = [[0 for i in range(colsA)] for j in range(rowsA)] \r\n  \r\n    # Iterating through the two matrices and adding them \r\n    for i in range(rowsA): \r\n        for j in range(colsA): \r\n            result[i][j] = A[i][j] + B[i][j] \r\n  \r\n    return result", "task_id": 2984}
{"finetuning_prompt": "\"\"\"\nCreate a program to evaluate an expression for a given set of variables.\n\"\"\"\n\ndef evaluate_expression(expression, values):\n", "finetuning_completion": " \n    modified_expression = expression \n    for variable, value in values.items(): \n        modified_expression = modified_expression.replace(variable, str(value)) \n    return eval(modified_expression)", "task_id": 2987}
{"finetuning_prompt": "\"\"\"\nGenerate a function that searches a given list for the target element.\n\"\"\"\n\ndef search(list, target):\n", "finetuning_completion": " \r\n\t#n is the size of list \r\n\tn = len(list) \r\n\r\n\tfor i in range(n): \r\n\t\tif (list[i] == target): \r\n\t\t\treturn i; \r\n\treturn -1;", "task_id": 2997}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to calculate factorial of a provided number.\n\"\"\"\n\ndef factorial(num):\n", "finetuning_completion": " \r\n  \r\n    fact = 1\r\n    for i in range(1,num + 1): \r\n        fact = fact * i \r\n    return fact \r\n# Driver code \r\nnum = 5\r\nprint(factorial(num))", "task_id": 2998}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the company with the highest market capitalization.\n\"\"\"\n\ndef highest_mcap(companies):\n", "finetuning_completion": "\r\n  highest_mcap_company = max(companies,key = lambda x: x[1])\r\n  return highest_mcap_company", "task_id": 3009}
{"finetuning_prompt": "\"\"\"\nCreate a program to print a list of numbers from 1 to 25 without using range.\n\"\"\"\n\ndef print_list():\n", "finetuning_completion": " \r\n    for i in range(1, 26): \r\n        print(i, end =\" \")", "task_id": 3011}
{"finetuning_prompt": "\"\"\"\nProduce a program to remove specific letters from a text string.\n\"\"\"\n\nimport re \r\ndef remove_letters(text_string, letters):\n", "finetuning_completion": " \r\n    pattern = \"[\" + letters + \"]\"\r\n    return re.sub(pattern, \"\", text_string)", "task_id": 3013}
{"finetuning_prompt": "\"\"\"\nProduce a program to output the name and count of duplicate words in a given sentence.\n\"\"\"\n\nfrom collections import Counter \r\ndef duplicate_words(sentence):\n", "finetuning_completion": "\n\tsentence_list = sentence.split() \n\tword_count = Counter(sentence_list) \n\tduplicate_words = []\n\tfor word,count in word_count.items(): \n\t\tif count > 1: \n\t\t\tduplicate_words.append((word,count)) \n\treturn duplicate_words", "task_id": 3016}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find all the possible permutations of a string.\n\"\"\"\n\nfrom itertools import permutations \r\n  \r\ndef generate_permutations(string):\n", "finetuning_completion": " \r\n    perms = [''.join(p) for p in permutations(string)] \r\n    return set(perms)", "task_id": 3024}
{"finetuning_prompt": "\"\"\"\nDevelop a function to compute the covariance between two given arrays.\n\"\"\"\n\ndef covariance(x, y):\n", "finetuning_completion": "\r\n    x_mean = sum(x)/len(x)\r\n    y_mean = sum(y)/len(y)\r\n    sum_x = 0\r\n    sum_y = 0\r\n    for i in range(len(x)):\r\n        sum_x += (x[i] - x_mean) * (y[i] - y_mean)\r\n    return sum_x/(len(x) - 1)", "task_id": 3026}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to classify a given set of characters as either letters or numbers.\n\"\"\"\n\ndef letter_number_classifier(arr):\n", "finetuning_completion": "\n    classifier = []\r\n    for char in arr:\r\n        if char.isalpha():\r\n            classifier.append(\"letter\")\r\n        elif char.isnumeric():\r\n            classifier.append(\"number\")\r\n        else:\r\n            classifier.append(\"other\")\r\n    return classifier", "task_id": 3032}
{"finetuning_prompt": "\"\"\"\nCombine two given lists into a single list with unique values.\n\"\"\"\n\ndef combine_unique_list(list1, list2):\n", "finetuning_completion": "\r\n    \r\n    unified_list = [] \r\n\r\n    # Adding elements of list1 \r\n    for var in list1: \r\n        unified_list.append(var)\r\n\r\n    # Adding elements of list2  \r\n    for var in list2: \r\n        if var not in unified_list: \r\n            unified_list.append(var)\r\n\r\n    return unified_list", "task_id": 3040}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a list of strings from two different string lists.\n\"\"\"\n\ndef listOfStrings(list1, list2):\n", "finetuning_completion": " \r\n    strList = [] \r\n  \r\n    for i in list1: \r\n        for j in list2: \r\n            strList.append(i + \" \" + j) \r\n  \r\n    return strList", "task_id": 3041}
{"finetuning_prompt": "\"\"\"\nModify the given code to optimize performance.\n\"\"\"\n\ndef functionA():\n", "finetuning_completion": "\r\n    a = 0\r\n    b = 0\r\n    while a<1000:\r\n        a +=1\r\n        b += 3\r\n        if b > 1000: \r\n            break\r\n    print(a+b)", "task_id": 3042}
{"finetuning_prompt": "\"\"\"\nDesign a program to analyze the given text.\n\"\"\"\n\ndef word_count(text):\n", "finetuning_completion": "\r\n    # break the text into words and store in a list\r\n    word_list = text.split()\r\n\r\n    # create a dictionary to store the word counts\r\n    word_counts = {}\r\n\r\n    # iterate over each word in the list\r\n    for word in word_list:\r\n        if word in word_counts:\r\n        # increment the count if it already exists\r\n            word_counts[word] += 1\r\n        else:\r\n        # add the new word and set its count to 1\r\n            word_counts[word] = 1\r\n\r\n    return word_counts", "task_id": 3043}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the mean of each column of the given two-dimensional array.\n\"\"\"\n\ndef mean(arr, m, n):\n", "finetuning_completion": " \r\n    result  = [0] * n \r\n    for i in range(n): \r\n        col_sum = 0   \n        for j in range(m):  \r\n            col_sum += arr[j][i]\r\n        result[i] = col_sum/m  \r\n    return result", "task_id": 3048}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to compare two given strings and determine how many word differences they contain.\n\"\"\"\n\ndef word_diff(str1, str2):\n", "finetuning_completion": " \r\n    count = 0 \r\n    list1 = str1.split() \r\n    list2 = str2.split() \r\n  \r\n    for w in list1: \r\n        if w not in list2: \r\n            count += 1\r\n  \r\n    for w in list2: \r\n        if w not in list1: \r\n            count += 1\r\n  \r\n    return count \r\n  \r\n# Driver code \r\nstr1 = \"Hello World\"\r\nstr2 = \"Hi Mars\"\r\n  \r\nprint(word_diff(str1, str2))", "task_id": 3057}
{"finetuning_prompt": "\"\"\"\nCreate a dynamic programming algorithm to find the maximum sum of subarrays within an array.\n\"\"\"\n\ndef maximum_sum_subarray(arr):\n", "finetuning_completion": "\r\n  max_sum = float(\"-inf\")\r\n  cur_sum = 0\r\n\r\n  for i in range(len(arr)):\r\n    cur_sum = max(arr[i], cur_sum + arr[i])\r\n    max_sum = max(max_sum, cur_sum)\r\n  \r\n  return max_sum", "task_id": 3058}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes two strings and counts the number of times they appear in a single sentence.\n\"\"\"\n\ndef count(sentence, str1, str2):\n", "finetuning_completion": "\r\n  count1 = 0\r\n  count2 = 0\r\n  for word in sentence.split():\r\n    if word == str1:\r\n      count1 += 1\r\n    elif word == str2:\r\n      count2 += 1\r\n\r\n  return count1, count2", "task_id": 3061}
{"finetuning_prompt": "\"\"\"\nGenerate a program to slice a given string into a tuple of strings.\n\"\"\"\n\ndef slice_string(input_string):\n", "finetuning_completion": " \r\n\treturn tuple(input_string[i:j] for i in range(len(input_string)+1) \r\n\t\t\t\tfor j in range(i+1, len(input_string)+1)) \r\n\r\n# Driver code \r\ninput_string = \"Geeksforgeeks\"\r\nres = slice_string(input_string) \r\nprint(res)", "task_id": 3069}
{"finetuning_prompt": "\"\"\"\nCreate a program to sort the elements of a given list based on the length of the element.\n\"\"\"\n\ndef sort_elements_length(list1):\n", "finetuning_completion": "\r\n    return sorted(list1, key=len)", "task_id": 3073}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate grades for a given list of exam scores.\n\"\"\"\n\ndef grade_Calculator(scores):\n", "finetuning_completion": " \r\n    grades = [] \r\n    for score in scores: \r\n        if score >= 90: \r\n            grades.append('A') \r\n        elif score >= 80 and score < 90: \r\n            grades.append('B') \r\n        elif score >= 70 and score < 80:  \r\n            grades.append('C') \r\n        elif score >= 60 and score < 70:  \r\n            grades.append('D') \r\n        else: \r\n            grades.append('F') \r\n  \r\n    return grades", "task_id": 3082}
{"finetuning_prompt": "\"\"\"\nCreate a code to encrypt a given string based on a given hash.\n\"\"\"\n\ndef encrypt_string(data, hash):\n", "finetuning_completion": "\r\n    encrypted_string = ''\r\n    for i in data:\r\n        encrypted_string = encrypted_string + (str(ord(i)*int(hash)%9))\r\n    return encrypted_string", "task_id": 3084}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to detect if there is a subarray with a sum greater than a given number n.\n\"\"\"\n\ndef maximumSubarraySum(arr, n):\n", "finetuning_completion": " \r\n  \r\n    curr_sum = arr[0] \r\n    max_sum = arr[0] \r\n  \r\n    for i in range(1, len(arr)): \r\n        curr_sum = max(arr[i], curr_sum + arr[i]) \r\n        max_sum = max(max_sum, curr_sum) \r\n        if (max_sum > n): \r\n            return True\r\n    return False", "task_id": 3093}
{"finetuning_prompt": "\"\"\"\nCreate an optimization problem to find the sum of the smallest three numbers in a given array.\n\"\"\"\n\n# Python program to find the sum of the three smallest \n# numbers in the array \n  \n# Return sum of the three smallest numbers \ndef find_sum_3(arr):\n", "finetuning_completion": " \n  \n    # If size is less than 3, \n    # then return sum of all elements \n    arr_size = len(arr) \n    if arr_size < 3: \n        return sum(arr) \n  \n    # Initialize first three elements \n    first = arr[0] \n    second = float('Inf') \n    third = float('Inf') \n  \n    # Traverse array elements to find the \n    # third smallest elements \n    for i in range(1, arr_size): \n        if arr[i]<= first: \n            third = second \n            second = first \n            first = arr[i] \n        elif arr[i] <= second: \n            third = second \n            second = arr[i] \n        elif arr[i] <= third: \n            third = arr[i] \n    return first + second + third", "task_id": 3097}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse the order of a list of tuples?\n\"\"\"\n\ndef reverse_list(list_tuples):\n", "finetuning_completion": "\n  reversed_list = list_tuples[::-1]\n  return reversed_list", "task_id": 3106}
{"finetuning_prompt": "\"\"\"\nGiven two integer arrays of equal length, write a python function to find the minimum sum of the subtraction of elements in the respective positions of the two arrays.\n\"\"\"\n\ndef minimum_sum(arr1, arr2):\n", "finetuning_completion": " \r\n\tres = 0\r\n\tfor i in range(len(arr1)): \r\n\t\tres += min(arr1[i], arr2[i]) - max(arr1[i], arr2[i]) \r\n\treturn res", "task_id": 3116}
{"finetuning_prompt": "\"\"\"\nConstruct a function to create a Pascal's Triangle of a given size.\n\"\"\"\n\ndef create_pascal_triangle(n):\n", "finetuning_completion": " \r\n\tpascal_list = [] \r\n\tfor row in range(n): \r\n\t\tcurrent_row = [] \r\n\t\tfor element in range(row + 1): \r\n\t\t\tif element == 0 or element == row: \r\n\t\t\t\tcurrent_row.append(1) \r\n\t\t\telse: \r\n\t\t\t\tcurrent_row.append(pascal_list[row-1][element-1] + pascal_list[row-1][element]) \r\n\t\tpascal_list.append(current_row) \r\n\treturn pascal_list", "task_id": 3120}
{"finetuning_prompt": "\"\"\"\nUse python to write a program to find the cumulative sum of a list.\n\"\"\"\n\ndef cumulative_sum (arr):\n", "finetuning_completion": " \r\n    cum_sum = [] \r\n    cum_sum.append(arr[0]) \r\n    for i in range (1, len(arr)): \r\n        cum_sum.append(cum_sum[i - 1] + arr[i]) \r\n    return cum_sum", "task_id": 3126}
{"finetuning_prompt": "\"\"\"\nGenerate a python script to convert hexadecimal equivalent to its binary equivalent.\n\"\"\"\n\ndef hex2binary(hex_str):\n", "finetuning_completion": " \n    binary_str = \"\" \n    for i in range(0, len(hex_str)): \n        binary_str += bin(int(hex_str[i], 16))[2:].zfill(4)  \n    return binary_str", "task_id": 3127}
{"finetuning_prompt": "\"\"\"\nCreate a function to identify numbers which are divisible both by 3 and 7.\n\"\"\"\n\ndef is_divisible_by_37(num):\n", "finetuning_completion": "\n    if (num % 3 == 0 and num % 7 == 0): \n        return True\n    else: \n        return False", "task_id": 3128}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to invert a given dictionary.\n\"\"\"\n\ndef invert_dict(d):\n", "finetuning_completion": "\r\n    inv_d = {v: k for k, v in d.items()}\r\n    return inv_d", "task_id": 3129}
{"finetuning_prompt": "\"\"\"\nDevelop a function to parse a date and time string in the ISO 8601 format.\n\"\"\"\n\nimport re \n  \ndef parse_date(string):\n", "finetuning_completion": " \n    patterns = \"(\\d{4})\\-(\\d{2})\\-(\\d{2})[T\\s](\\d{2}):(\\d{2}):(\\d{2})(.*)\"\n    result = re.match(patterns, string) \n    return ( \n        int(result[1]), \n        int(result[2]), \n        int(result[3]), \n        int(result[4]), \n        int(result[5]), \n        int(result[6]), \n        result[7]\n    )", "task_id": 3132}
{"finetuning_prompt": "\"\"\"\nCreate a function in python to sorts the array in increasing order by its modulo with an arbitrary number.\n\"\"\"\n\ndef sort_array(arr, n):\n", "finetuning_completion": " \r\n    newarr = [] \r\n    for i in range(len(arr)): \r\n        remainder = arr[i]%n \r\n        newarr.append((remainder, arr[i])) \n      \r\n    newarr.sort() \r\n     \r\n    for i in range(len(arr)): \r\n        arr[i] = newarr[i][1] \n      \n    return arr", "task_id": 3143}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find an array element which appears only once in an array.\n\"\"\"\n\ndef only_once_in_array(array):\n", "finetuning_completion": " \n    result = 0 \n    for num in array:   \n        result ^= num \n    return result", "task_id": 3148}
{"finetuning_prompt": "\"\"\"\nWrite a Python function that takes a single argument and returns true or false.\n\"\"\"\n\ndef func(arg):\n", "finetuning_completion": " \r\n  if (arg): \r\n    return True\r\n  else: \r\n    return False", "task_id": 3155}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the largest subarray with zero sum.\n\"\"\"\n\ndef find_largest_subarray_with_zero_sum(array):\n", "finetuning_completion": " \n    max_len = min_len = 0 \n    sum_map = {} \n    cumulative_sum = 0 \n    for i, value in enumerate(array): \n        cumulative_sum += value \n        if cumulative_sum == 0: \n            max_len = i + 1    \n        if cumulative_sum in sum_map: \n            prev_index = sum_map[cumulative_sum] \n            min_len = min(min_len, (i - prev_index)) \n            max_len = max(max_len, (i - prev_index)) \n        else: \n            sum_map[cumulative_sum] = i \n    return max_len if max_len > 0 else min_len", "task_id": 3158}
{"finetuning_prompt": "\"\"\"\nRe-write a python function to filter a given positive integer array to output a valid IP address.\n\"\"\"\n\ndef filterArrayIntoIPAddress(array):\n", "finetuning_completion": "\r\n    resarray = [] \r\n    for i in range(3): \r\n        num = 0\r\n        for j in range(i * 4, i * 4 + 4): \r\n            num = num * 256 + array[j] \r\n        if(num >= 0 and num < 256): \r\n            resarray.append(str(num)) \r\n        else: \r\n            return \"Not A Valid IP Address\"\r\n    return '.'.join(resarray)", "task_id": 3160}
{"finetuning_prompt": "\"\"\"\nCreate a program to build a vocabulary where the key is a word and the value is a list of the words that follow it in the sentence.\n\"\"\"\n\ndef create_vocabulary(sentence):\n", "finetuning_completion": "\n\n  words = sentence.split()\n  vocabulary = {}\n  \r\n  for i in range(len(words) - 1):\r\n    if words[i] not in vocabulary:\r\n      vocabulary[words[i]] = [words[i+1]]\r\n    else:\r\n      vocabulary[words[i]].append(words[i+1])\r\n  \r\n  return vocabulary", "task_id": 3171}
{"finetuning_prompt": "\"\"\"\nWrite a python script to extract the first letter of each word in a sentence.\n\"\"\"\n\ndef first_letter_extract(sentence):\n", "finetuning_completion": " \r\n    t_list = sentence.split() \r\n    return ''.join([word[0] for word in t_list])", "task_id": 3173}
{"finetuning_prompt": "\"\"\"\nCreate a function to delete an element from an array if the element is greater than a set threshold.\n\"\"\"\n\ndef delete_above_threshold(arr, t):\n", "finetuning_completion": " \r\n  \r\n    # Customer function to delete elements from an array \r\n    # if element is greater than a given threshold \r\n    newArr = [] \r\n      \r\n    # traverse in the array \r\n    for i in range(0, len(arr)): \r\n          \r\n        # If elements are less than or equal to threshold \r\n        # then append them to new array \r\n        if arr[i] <= t: \r\n            newArr.append(arr[i]) \r\n              \r\n    return newArr", "task_id": 3178}
{"finetuning_prompt": "\"\"\"\nFind the maximum subsequence sum of an array of integers.\n\"\"\"\n\ndef maxSubSum(arr):\n", "finetuning_completion": " \n\tn = len(arr) \n\t\n\tmax_so_far = 0\n\tcurr_max = 0\n\n\tfor i in range(0, n): \n\t\tcurr_max = max(arr[i], curr_max + arr[i]) \n\t\tmax_so_far = max(max_so_far, curr_max) \n\n\treturn max_so_far", "task_id": 3184}
{"finetuning_prompt": "\"\"\"\nGenerate code to find the maximum subarray sum.\n\"\"\"\n\ndef maximum_subarray_sum(arr):\n", "finetuning_completion": "\n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(len(arr)):\n        max_ending_here = arr[i] + max_ending_here\n        if max_ending_here < 0:\n            max_ending_here=0\n \n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n \n    return max_so_far", "task_id": 3200}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert hours and minutes to seconds.\n\"\"\"\n\ndef hours_minutes_to_seconds(hours, minutes):\n", "finetuning_completion": "\n    return (hours * 3600) + (minutes * 60)", "task_id": 3201}
{"finetuning_prompt": "\"\"\"\nWrite a function which can generate all possible subsets of a set of numbers.\n\"\"\"\n\ndef subsets(s):\n", "finetuning_completion": " \n    res = [[]] \n    for x in s: \n        res = res + [y + [x] for y in res] \n    return res", "task_id": 3203}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert some given temperatures in Celsius to Fahrenheit.\n\"\"\"\n\ndef Celsius_to_Fahrenheit(temp_in_Celsius):\n", "finetuning_completion": " \n    temp_in_Fahrenheit = []\n    for celsius in temp_in_Celsius: \n        temp_in_Fahrenheit.append(celsius * 1.8 + 32)\n    return temp_in_Fahrenheit \n\nprint(Celsius_to_Fahrenheit([23,45,89]))", "task_id": 3209}
{"finetuning_prompt": "\"\"\"\nMake an algorithm to calculate the value of the polynomial for a given x.\n\"\"\"\n\ndef polynomial_function(x):\n", "finetuning_completion": " \n  return 3*x**5 + 2*x**4 - 5*x**3 - x**2 + 7*x - 6", "task_id": 3223}
{"finetuning_prompt": "\"\"\"\nCreate a program in Python to convert a given text into all lower case.\n\"\"\"\n\ndef convertLowerCase(text):\n", "finetuning_completion": " \n    return text.lower()", "task_id": 3227}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to remove characters from a given alphabet from a string.\n\"\"\"\n\ndef remove_chars(alphabet, string):\n", "finetuning_completion": " \n    alphabet = alphabet.split(',') \n    for char in alphabet:\n        string = string.replace(char, '')\n    return string", "task_id": 3228}
{"finetuning_prompt": "\"\"\"\nWrite a function to edit the given text by adding an extra word at a specified position in the text.\n\"\"\"\n\ndef edit_text(text, word, position):\n", "finetuning_completion": "\n  words = text.split()\n  words.insert(position, word)\n  return ' '.join(words)", "task_id": 3235}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the angle between two given 3-dimensional vectors expressed in Cartesian coordinates.\n\"\"\"\n\nimport math\n\ndef find_angle(v1, v2):\n", "finetuning_completion": "\n    dot_product = np.dot(v1, v2)\n    inner_product = dot_product / (np.linalg.norm(v1) * np.linalg.norm(v2))\n    angle = math.acos(inner_product)\n    return angle", "task_id": 3239}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate a multiplication table of any given smallest number up to a given largest number.\n\"\"\"\n\ndef multiplication_table(num1, num2):\n", "finetuning_completion": " \r\n    for i in range(num1, num2+1): \r\n        for j in range(num1, num2+1): \r\n            print(i*j, end = \"\\t\") \r\n        print()", "task_id": 3243}
{"finetuning_prompt": "\"\"\"\nGenerate a program to remove an element from a particular index from a given list.\n\"\"\"\n\ndef remove_el(list1, index):\n", "finetuning_completion": " \n    if index >= len(list1): \n        return list1 \n    else: \n        return list1[:index] + list1[index+1:]", "task_id": 3245}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to input an integer array and calculate the median of the given array.\n\"\"\"\n\ndef median_calc(int_array):\n", "finetuning_completion": " \n    int_array.sort()\n    if len(int_array) % 2 == 0:\n        median = (int_array[int(len(int_array)/2)-1] + int_array[int(len(int_array)/2)]) / 2\n    else:\n        median = int_array[int((len(int_array)-1)/2)]\n    return median", "task_id": 3255}
{"finetuning_prompt": "\"\"\"\nGenerate a code to compute text similarity between two strings by calculating Jaccard Similarity.\n\"\"\"\n\ndef jaccard_similarity(str1, str2):\n", "finetuning_completion": "\n    a = set(str1.split())\n    b = set(str2.split())\n    c = a.intersection(b)\n  \n    return float(len(c)) / (len(a) + len(b) - len(c))", "task_id": 3266}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the maximum length of a subarray with a sum of at most k.\n\"\"\"\n\ndef max_subarry_sum_k(arr, k):\n", "finetuning_completion": " \n    max_len = 0\n    cum_sum = 0\n    \n    start = 0\n    for i in range(len(arr)): \n        cum_sum += arr[i] \n        while(cum_sum > k and start < i):  \n            cum_sum -= arr[start] \n            start += 1\n  \n        if cum_sum <= k and max_len < i - start + 1: \n            max_len = i - start + 1 \n            \n    return max_len", "task_id": 3268}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert a string of numbers separated by commas into an array of floats.\n\"\"\"\n\ndef csv_to_floats(input):\n", "finetuning_completion": " \r\n    arr = input.split(','); \r\n    float_arr = [float(num) for num in arr]; \r\n    return float_arr;", "task_id": 3270}
{"finetuning_prompt": "\"\"\"\nGenerate a code to implement QuickSort on an array.\n\"\"\"\n\ndef quick_sort(arr, low, high):\n", "finetuning_completion": "\n    if (low < high): \r\n        pi = partition(arr, low, high)\r\n\r\n        quick_sort(arr, low, pi - 1) \r\n        quick_sort(arr, pi + 1, high) \r\n\r\ndef partition(arr, low, high):\r\n    pivot = arr[high]\r\n    i = (low - 1)\r\n\r\n    for j in range(low, high):\r\n        if arr[j] <= pivot:\r\n            i = i + 1\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n\r\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\r\n    return (i + 1)", "task_id": 3272}
{"finetuning_prompt": "\"\"\"\nWrite a function to add elements of an array of size n.\n\"\"\"\n\ndef add_elements(arr):\n", "finetuning_completion": "\n    total = 0\n    for i in arr:\n        total += i\n    return total", "task_id": 3284}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove an element at the specified index of an array.\n\"\"\"\n\ndef remove_at_index(arr, index):\n", "finetuning_completion": " \n\tif index >= len(arr) or index < 0: \n\t\treturn arr \n\telse: \n\t\tarr.pop(index) \n\t\treturn arr", "task_id": 3285}
{"finetuning_prompt": "\"\"\"\nUsing dynamic programming, solve the Longest Increasing Subsequence problem.\n\"\"\"\n\ndef LIS(arr, n):\n", "finetuning_completion": " \r\n    lis = [1]*n \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n    maximum = 0\r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i]) \r\n    return maximum", "task_id": 3289}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine all prime factors of a number.\n\"\"\"\n\ndef prime_factors(n):\n", "finetuning_completion": " \r\n    ans = []      \r\n    while n % 2 == 0: \r\n        ans.append(2) \r\n        n = n / 2\r\n          \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n          \r\n        while n % i== 0: \r\n            ans.append(i) \r\n            n = n / i \r\n              \r\n    if n > 2: \r\n        ans.append(n) \r\n  \r\n    return ans", "task_id": 3299}
{"finetuning_prompt": "\"\"\"\nWrite a function to split the given strings into three different arrays of strings\n\"\"\"\n\n# Function to split the strings into three different arrays of strings\ndef split_strs(test_strs):\n", "finetuning_completion": "\n  part1 = []\n  part2 = []\n  part3 = []\n  \n  # Add your code here\n  for str in test_strs:\n    parts = str.split(',')\n    part1.append(parts[0])\n    part2.append(parts[1])\n    part3.append(parts[2])\n  \n  return part1, part2, part3", "task_id": 3302}
{"finetuning_prompt": "\"\"\"\nConstruct a function to sort the given characters in lexicographical order.\n\"\"\"\n\ndef lexicoSort(test_str):\n", "finetuning_completion": "\n  # Sort the characters  \n  sorted_str = \"\".join(sorted(test_str))  \n  \n  return sorted_str", "task_id": 3303}
{"finetuning_prompt": "\"\"\"\nGenerate a function that returns a list of the important key and values from a dictionary.\n\"\"\"\n\ndef key_value_list(dict):\n", "finetuning_completion": " \r\n    key_list = list(dict.keys()) \r\n    val_list = list(dict.values()) \r\n  \r\n    return (key_list, val_list)", "task_id": 3306}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract positive real numbers from an array and add them together.\n\"\"\"\n\ndef extract_positive_sum(arr):\n", "finetuning_completion": "\r\n    positive_nums = [x for x in arr if x > 0]\r\n    return sum(positive_nums)", "task_id": 3315}
{"finetuning_prompt": "\"\"\"\nGenerate a program to parse a multi-dimensional array, and return a dictionary containing all elements of the array as keys and their respective indices as values.\n\"\"\"\n\ndef parse_array(arr):\n", "finetuning_completion": "\r\n    result_dict = dict()\r\n    for row_index, row in enumerate(arr):\r\n        for col_index, element in enumerate(row):\r\n            result_dict[element] = [row_index, col_index]\r\n    return result_dict", "task_id": 3316}
{"finetuning_prompt": "\"\"\"\nCompose a recursive algorithm that prints the binary version of a given number.\n\"\"\"\n\ndef binary_num(n):\n", "finetuning_completion": " \r\n    if n > 1: \r\n        binary_num(n//2) \r\n    print(n % 2,end = '')", "task_id": 3324}
{"finetuning_prompt": "\"\"\"\nGenerate a program to compute the total number of days in a given month and year.\n\"\"\"\n\ndef days_in_Month(year, month):\n", "finetuning_completion": " \r\n\r\n    # to check if both year and month input are valid\r\n    if year < 1 or month < 1 or month > 12: \r\n        return 'InvalidInput'\r\n\r\n    # check if month is February, \r\n    #Year is a leap year or not \r\n    if month == 2: \r\n        if (year % 400 == 0) or \\\r\n            ((year % 4 == 0) and (year % 100 != 0)): \r\n            return 29\r\n        else: \r\n            return 28\r\n\r\n    # all months have 30 or 31 days \r\n    if month in (4, 6, 9, 11): \r\n        return 30\r\n    else: \r\n        return 31", "task_id": 3328}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a min heap of given inputs.\n\"\"\"\n\ndef minHeapify(arr, n, i): \r\n    largest = i \r\n    l = 2 * i + 1\r\n    r = 2 * i + 2\r\n  \r\n    if l < n and arr[i] > arr[l]: \r\n        largest = l \r\n          \r\n    if r < n and arr[largest] > arr[r]: \r\n        largest = r \r\n          \r\n    if largest != i: \r\n        arr[i], arr[largest] = arr[largest], arr[i]\r\n        minHeapify(arr, n, largest)\r\n  \r\ndef buildMinHeap(arr):\n", "finetuning_completion": " \r\n    largest = i \r\n    l = 2 * i + 1\r\n    r = 2 * i + 2\r\n  \r\n    if l < n and arr[i] > arr[l]: \r\n        largest = l \r\n          \r\n    if r < n and arr[largest] > arr[r]: \r\n        largest = r \r\n          \r\n    if largest != i: \r\n        arr[i], arr[largest] = arr[largest], arr[i]\r\n        minHeapify(arr, n, largest)\r\n  \r\ndef buildMinHeap(arr): \r\n    n = len(arr) \r\n    for i in range(n , -1, -1): \r\n        minHeapify(arr, n, i)", "task_id": 3333}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to calculate the angle between the hour and minute hands of a clock.\n\"\"\"\n\ndef calculate_angle(h, m):\n", "finetuning_completion": " \r\n    hour_angle = 0.5 * (h*60 + m) \r\n    minute_angle = 6*m \r\n  \r\n    # Absolute angle (positive) \r\n    angle = abs(hour_angle - minute_angle) \r\n  \r\n    # Angle for negative case \r\n    angle = min(360 - angle, angle) \r\n  \r\n    return angle", "task_id": 3334}
{"finetuning_prompt": "\"\"\"\nGenerate a program to separate given words and numbers into two different lists.\n\"\"\"\n\ndef separate_words_number(input_list):\n", "finetuning_completion": "\n    words_list = []\n    numbers_list = []\n    for elem in input_list:\n        try:\n            numbers_list.append(int(elem))\n        except ValueError:\n            words_list.append(elem)\n    return words_list, numbers_list", "task_id": 3338}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to convert an array of string characters to an array of integers.\n\"\"\"\n\ndef arr_string_int(arr):\n", "finetuning_completion": " \r\n    newArr = []\r\n    for item in arr: \r\n        newArr.append(int(item)) \r\n    return newArr", "task_id": 3340}
{"finetuning_prompt": "\"\"\"\nGenerate a program to edit a given sentence to make the first letter of each word uppercase.\n\"\"\"\n\ndef title_case(s):\n", "finetuning_completion": "\r\n    word_list = s.split(\" \") \r\n    lower_case = [word.lower() for word in word_list] \r\n    new_words = [] \r\n    for w in lower_case: \r\n        new_words.append(w.capitalize()) \r\n    new_sentence = \" \".join(new_words) \r\n    return new_sentence", "task_id": 3349}
{"finetuning_prompt": "\"\"\"\nCreate a function that finds the maximum sum of adjacent numbers in the adjacent numbers.\n\"\"\"\n\ndef find_max_sum(nums):\n", "finetuning_completion": " \r\n    if len(nums) == 0: \r\n        return 0\r\n    \r\n    max_sum = nums[0] \r\n    for i in range(1, len(nums)): \r\n        nums[i] = max(nums[i], nums[i] + nums[i - 1]) \r\n        max_sum = max(max_sum, nums[i]) \r\n    return max_sum", "task_id": 3354}
{"finetuning_prompt": "\"\"\"\nWrite a function to create an encryption string where each character of the string is the sum of the its predecessor and the next character in the string.\n\"\"\"\n\ndef EncryptString(s):\n", "finetuning_completion": " \n    n = len(s) \n    if n > 1: \n        result = s[0] \n        for i in range(1,n-1): \n            result = result + chr(ord(s[i-1])+ord(s[i+1])) \n        result = result + s[-1] \n    elif n == 1: \n        result = s \n    return result", "task_id": 3356}
{"finetuning_prompt": "\"\"\"\nWrite a function to replace any character in the given string with an asterisk - *\n\"\"\"\n\ndef replaceAsterisks(string):\n", "finetuning_completion": "\n  return \"\".join(\"*\" if s.isalpha()\n  else s for s in string)", "task_id": 3366}
{"finetuning_prompt": "\"\"\"\nEdit a given array and make sure that only even numbers are present in it.\n\"\"\"\n\ndef even_array(array):\n", "finetuning_completion": "\r\n    array = [num for num in array if num % 2 == 0]\r\n    return array", "task_id": 3372}
{"finetuning_prompt": "\"\"\"\nFind the odd number in a given range of numbers.\n\"\"\"\n\ndef find_odd_in_range(start, end):\n", "finetuning_completion": "\r\n  for i in range(start, end + 1):\r\n    if (i % 2 != 0): \r\n      return i", "task_id": 3373}
{"finetuning_prompt": "\"\"\"\nGenerate a function to check for duplicate elements in the given array.\n\"\"\"\n\ndef has_duplicate(arr):\n", "finetuning_completion": " \n\tsize = len(arr) \n\tfor i in range(size): \n\t\tfor j in range(i + 1, size): \n\t\t\tif arr[i] == arr[j]: \n\t\t\t\treturn True\n\treturn False", "task_id": 3382}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the kth smallest element in an unsorted array without modifying the elements in the array.\n\"\"\"\n\ndef find_kth_smallest_element(arr, k):\n", "finetuning_completion": " \r\n\r\n\tif k > len(arr): \r\n\t\treturn None\r\n\t\t\r\n\tmin_element = min(arr) \r\n\tsecond_min_element = float('inf') \r\n\tfor i in range(0, len(arr)): \r\n\t\tif arr[i] < second_min_element and arr[i] > min_element: \r\n\t\t\tsecond_min_element = arr[i] \r\n\t\t\t\r\n\tif k == 2: \r\n\t\treturn second_min_element \r\n\t\r\n\ttemp = [] \r\n\tfor i in range(0, len(arr)): \r\n\t\tif arr[i] != min_element and arr[i] != second_min_element: \r\n\t\t\ttemp.append(arr[i]) \r\n\t\r\n\tif k == 1: \r\n\t\treturn min_element \r\n\telse: \r\n\t\treturn find_kth_smallest_element(temp, k - 2)", "task_id": 3390}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract all palindromes from a given set of words.\n\"\"\"\n\ndef find_palindromes(words):\n", "finetuning_completion": " \r\n    palindromes = [] \r\n  \r\n    for word in words: \r\n        if word == word[::-1]: \r\n            palindromes.append(word) \r\n    return palindromes \n  \r\nwords = ['level', 'civic', 'radar', 'solos', 'racecar', 'mom']\r\nprint(find_palindromes(words))", "task_id": 3392}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes three dates as argument, and returns the number of days between them.\n\"\"\"\n\nimport datetime \r\n  \r\ndef calculate_days(date1, date2, date3):\n", "finetuning_completion": " \r\n  \r\n    # Calculating Days between date1 and date2 \r\n    delta1 = date2 - date1 \r\n    days1 = delta1.days \r\n  \r\n    # Calculating Days between date2 and date3 \r\n    delta2 = date3 - date2 \r\n    days2 = delta2.days \r\n  \r\n    # Calculating total days \r\n    total_days = days1 + days2 \r\n    return total_days \r\n  \r\ndate1 = datetime.date(2018, 5, 1) \r\ndate2 = datetime.date(2018, 5, 9) \r\ndate3 = datetime.date(2018, 5, 15) \r\n\r\nprint(\"Total number of days =\", calculate_days(date1, date2, date3))", "task_id": 3394}
{"finetuning_prompt": "\"\"\"\nOptimize a given python program.\n\"\"\"\n\ndef f(x):\n", "finetuning_completion": "\r\n    return (x * (x-1)) // 2", "task_id": 3398}
{"finetuning_prompt": "\"\"\"\nCategorize the given data into two classes - 'positive' and 'negative'.\n\"\"\"\n\ndef categorize(data):\n", "finetuning_completion": "\n    result = []\n    for item in data:\n        if item >= 0:\n            result.append('positive')\n        else:\n            result.append('negative')\n    return result", "task_id": 3400}
{"finetuning_prompt": "\"\"\"\nCalculate the total cost of the given items.\n\"\"\"\n\ndef calculate_cost(items):\n", "finetuning_completion": "\n  total_cost = 0\n  for item in items:\n    total_cost += item[\"price\"] * item[\"quantity\"]\n  return total_cost", "task_id": 3403}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a program to print all the possible substrings of length greater than 1.\n\"\"\"\n\ndef substring(string):\n", "finetuning_completion": " \r\n    res = [] \r\n    for i in range(len(string)): \r\n        for j in range(i + 1, len(string) + 1): \r\n            res.append(string[i:j]) \r\n    return res", "task_id": 3416}
{"finetuning_prompt": "\"\"\"\nIdentify any duplicate elements in an array of integers.\n\"\"\"\n\ndef findDuplicates(arr):\n", "finetuning_completion": " \r\n    duplicates = []\r\n    for i in range(len(arr)): \r\n        for j in range(i + 1, len(arr)): \r\n            if arr[i] == arr[j]: \r\n                duplicates.append(arr[i]) \r\n    return set(duplicates)", "task_id": 3423}
{"finetuning_prompt": "\"\"\"\nDesign a strategy to solve 3-way partitioning problem.\n\"\"\"\n\ndef threeWayPart(arr, low, high):\n", "finetuning_completion": "\n\n# Set boundary variables\n    start = low\n    end = high\n    mid = low\n\n    while end >= mid:\n\n        # If arr[mid] is equal to pivot, increment mid\n        if arr[mid] == 0:\n            mid += 1\n            \n        # If arr[mid] is greater than pivot\n        elif arr[mid] > 0:\n            arr[mid], arr[end] = arr[end],arr[mid]\n            end -= 1\n            \n        # If arr[mid] is less than pivot\n        else:\n            arr[mid],arr[start] = arr[start],arr[mid]\n            start += 1\n            mid += 1\n    return mid", "task_id": 3434}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to identify palindromic words in a given sentence.\n\"\"\"\n\ndef count_palindrome_words(sentence):\n", "finetuning_completion": "\r\n  count = 0\r\n  words = sentence.split(\" \")\r\n  for word in words:\r\n    if word == word[ : : -1]:\r\n      count += 1\r\n  return count", "task_id": 3442}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to count the number of digits in a given integer.\n\"\"\"\n\ndef count_digits(num):\n", "finetuning_completion": "\n  count = 0\n  while (num > 0):\n    count += 1\n    num //= 10\n  return count", "task_id": 3443}
{"finetuning_prompt": "\"\"\"\nModify the following python program for calculating the minimum number of coins for a given amount.\n\"\"\"\n\ndef minCoinsChange(coins, m, amount):\n", "finetuning_completion": " \r\n    min_coins = [0 for i in range(amount + 1)] \r\n  \r\n    for i in range(1, amount + 1): \r\n        min_coins[i] = amount + 1\r\n    for i in range(m): \r\n        for j in range(coins[i], amount + 1): \r\n            if min_coins[j - coins[i]] + 1 < min_coins[j]: \r\n                min_coins[j] = min_coins[j - coins[i]] + 1\r\n  \r\n    return min_coins[amount]", "task_id": 3445}
{"finetuning_prompt": "\"\"\"\nGenerate code to convert a calendar month into the corresponding season.\n\"\"\"\n\ndef get_season (month):\n", "finetuning_completion": " \r\n\r\n\tif (month >= 3 and month < 6): \r\n\t\treturn \"spring\"\r\n\r\n\telif (month >= 6 and month < 9): \r\n\t\treturn \"summer\"\r\n\r\n\telif (month >= 9 and month < 12): \r\n\t\treturn \"autumn\"\r\n\r\n\telse: \r\n\t\treturn \"winter\"", "task_id": 3448}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the maximum length of a continuous sub array whose sum is less than or equal to a number.\n\"\"\"\n\ndef max_length_subarray_sum(arr, n, key):\n", "finetuning_completion": " \r\n\r\n\tmax_length = 0\r\n\tsum = 0\r\n\tstart = 0\r\n\tend = 0\r\n\twhile (end < n): \r\n\t\tsum += arr[end] \r\n\t\twhile (sum > key): \r\n\t\t\tsum -= arr[start] \r\n\t\t\tstart += 1\t\t\r\n\t\tif (sum <= key and\r\n\t\t\t\tend - start + 1 > max_length): \r\n\t\t\tmax_length = end - start + 1\r\n\t\tend += 1\r\n\treturn max_length;", "task_id": 3450}
{"finetuning_prompt": "\"\"\"\nDesign a code to form groups from a given list of integers based on the given group number.\n\"\"\"\n\ndef group_list(list, group_no):\n", "finetuning_completion": "\r\n    n = len(list)\r\n    res = [ [] for _ in range(group_no)]\r\n    \r\n    index = 0\r\n    for v in list:\r\n        res[index].append(v) \r\n        index = (index + 1) % group_no\r\n        \r\n    return res", "task_id": 3456}
{"finetuning_prompt": "\"\"\"\nDesign a code to generate the Cartesian product of two sets of integers.\n\"\"\"\n\ndef cartesian_product(set_a, set_b):\n", "finetuning_completion": "\n    return [(x,y) for x in set_a for y in set_b]", "task_id": 3457}
{"finetuning_prompt": "\"\"\"\nDetermine if the given string is a valid password.\n\"\"\"\n\ndef validatePassword(password):\n", "finetuning_completion": " \r\n\r\n    specialChars = \"@$#&+-*\"\r\n    val = True\r\n    \r\n    if len(password) < 6: \r\n        print('Length should be at least 6') \r\n        val = False\r\n  \r\n    if len(password) > 12: \r\n        print('Length should be not be greater than 12') \r\n        val = False\r\n  \r\n    if not any(char.isdigit() for char in password): \r\n        print('Password should have at least one numeral') \r\n        val = False\r\n  \r\n    if not any(char.isupper() for char in password): \r\n        print('Password should have at least one uppercase letter') \r\n        val = False\r\n  \r\n    if not any(char.islower() for char in password): \r\n        print('Password should have at least one lowercase letter') \r\n        val = False\r\n  \r\n    if not any(char in specialChars for char in password): \r\n        print('Password should have at least one of the symbols $@#') \r\n        val = False\r\n    if val: \r\n        return True\r\n    else: \r\n        return False", "task_id": 3460}
{"finetuning_prompt": "\"\"\"\nEdit the following code to print every second number in a list.\n\"\"\"\n\ndef printSecondNumber(list):\n", "finetuning_completion": "\n    #print the content of the list\n    for i in range(0,len(list),2):\n        print(list[i])", "task_id": 3463}
{"finetuning_prompt": "\"\"\"\nFind the missing number in the given sequence.\n\"\"\"\n\ndef missingNumber(arr):\n", "finetuning_completion": "\n    n = len(arr)\n    total = (n+1)*(n+2)/2\n    \n    for i in range(n):\n        total -= arr[i]\n    return total", "task_id": 3468}
{"finetuning_prompt": "\"\"\"\nCreate a program to partition a list into two parts.\n\"\"\"\n\ndef partition(A):\n", "finetuning_completion": " \r\n    left, right = [], []\r\n    for x in A: \r\n        if x < A[len(A)//2]: \r\n            left.append(x) \r\n        else: \r\n            right.append(x) \r\n    return left, right", "task_id": 3469}
{"finetuning_prompt": "\"\"\"\nWrite a function to return the maximum possible sum of a subarray.\n\"\"\"\n\ndef maxsum(arr):\n", "finetuning_completion": "\n    max_sum = 0\r\n    current_sum = 0\r\n    for e in arr:\n        current_sum += e\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "task_id": 3471}
{"finetuning_prompt": "\"\"\"\nCompress a given string using the RLE (run-length encoding) algorithm.\n\"\"\"\n\ndef compress(string):\n", "finetuning_completion": " \r\n    output_string = \"\" \r\n    count = 1\r\n    for i in range(1, len(string)): \r\n        if (string[i] == string[i-1]): \r\n            count += 1\r\n        else: \r\n            output_string += string[i-1] + str(count) \r\n            count = 1\r\n    output_string += string[i] + str(count) \r\n  \r\n    return output_string", "task_id": 3473}
{"finetuning_prompt": "\"\"\"\nCreate a python program to edit the given strings and make them similar.\n\"\"\"\n\ndef edit_strings(str1, str2):\n", "finetuning_completion": " \r\n    x = len(str1)\r\n    y = len(str2)\r\n    table = [[0 for i in range(y+1)] for j in range(x+1)] \r\n  \r\n    for i in range(x+1): \r\n        for j in range(y+1): \r\n            if (i == 0): \r\n                table[i][j] = j \r\n  \r\n            elif (j == 0): \r\n                table[i][j] = i \r\n            elif (str1[i-1] == str2[j-1]): \r\n                table[i][j] = table[i - 1][j - 1] \r\n            else: \r\n                table[i][j] = 1 + min(table[i][j - 1], table[i - 1][j], table[i - 1][j - 1]) \r\n                  \r\n    return table[x][y]", "task_id": 3479}
{"finetuning_prompt": "\"\"\"\nWrite a python function to traverse an array and perform a given mathematical operation on each element.\n\"\"\"\n\ndef traverse(arr, operation):\n", "finetuning_completion": "\r\n  for i in range(len(arr)):\r\n      arr[i] = operation(arr[i]) \r\n  return arr", "task_id": 3484}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert a hexadecimal number to its decimal equivalent.\n\"\"\"\n\ndef hex_to_dec(hex_num):\n", "finetuning_completion": " \r\n    hex_list = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15} \r\n    dec_num = 0\r\n    n = len(hex_num) \r\n    for i in range(n): \r\n        dec_num += hex_list[hex_num[i]]*(16**(n-i-1)) \r\n    return dec_num", "task_id": 3489}
{"finetuning_prompt": "\"\"\"\nCreate a program to capitalize the first letter of the words in a given sentence.\n\"\"\"\n\ndef capitalize_words(sentence):\n", "finetuning_completion": " \r\n    result = [] \r\n    for word in sentence.split(): \r\n        result.append(word[0].upper() + word[1:]) \r\n    return \" \".join(result)", "task_id": 3492}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a sentence as input and returns its length.\n\"\"\"\n\ndef sentence_length(sentence):\n", "finetuning_completion": "\n    words = sentence.split()\n    return len(words)", "task_id": 3496}
{"finetuning_prompt": "\"\"\"\nCode a Python program to calculate the total amount of money given an number of coins.\n\"\"\"\n\ndef total_amount(coin_value, coin_number):\n", "finetuning_completion": " \n    total = 0\n    for i in range(len(coin_value)):\n        total += coin_value[i] * coin_number[i] \n    return total\n  \ncoin_value = [1, 2, 5, 10] \ncoin_number = [4, 2, 5, 10] \nprint(\"Total amount:\", total_amount(coin_value, coin_number))", "task_id": 3497}
{"finetuning_prompt": "\"\"\"\nOptimize the following code to check if an array has even numbers.\n\"\"\"\n\ndef even_nums(arr):\n", "finetuning_completion": "\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "task_id": 3501}
{"finetuning_prompt": "\"\"\"\nGenerate code to classify the following sentence as positive or negative sentiment.\n\"\"\"\n\ndef classify_sentiment(sentence):\n", "finetuning_completion": "\n    if \"!\" in sentence:\n        return \"positive sentiment\"\n    else:\n        return \"negative sentiment\"\n\nsentence = \"This movie was fantastic!\"\nsentiment = classify_sentiment(sentence)\nprint(sentiment)", "task_id": 3502}
{"finetuning_prompt": "\"\"\"\nWrite a recursive function which generates all possible permutations of a list in Python.\n\"\"\"\n\ndef permutations(list):\n", "finetuning_completion": "\r\n    if len(list) == 0:\r\n        return []\r\n    if len(list) == 1:\r\n        return [list]\r\n    l = []\r\n    for i in range(len(list)):\r\n       m = list[i]\r\n       remList = list[:i] + list[i+1:]\r\n       for p in permutations(remList):\r\n           l.append([m] + p)\r\n    return l", "task_id": 3503}
{"finetuning_prompt": "\"\"\"\nEdit the function below to make it return the result without using an if-else condition\n\"\"\"\n\ndef foo(x, y):\n", "finetuning_completion": " \r\n    return x == y", "task_id": 3509}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode a text using hamming encoding.\n\"\"\"\n\ndef encode_text(text_string):\n", "finetuning_completion": "\r\n  data_list = list(text_string)\r\n  data_enc = []\r\n  for data in data_list:\r\n    ascii_value = ord(data)\r\n    binary_str = '{0:08b}'.format(ascii_value)\r\n    data_enc.append(binary_str)\r\n  encoded_data = ''.join(data_enc)\r\n  return encoded_data", "task_id": 3513}
{"finetuning_prompt": "\"\"\"\nWrite a function to apply the Klein-Gordon equation on a given set of data.\n\"\"\"\n\ndef klein_gordon_equation(x, y):\n", "finetuning_completion": "\n\n  return np.multiply(np.multiply(np.multiply((x ** 2 + y ** 2 - 5), (x ** 2 + y ** 2 - 2)), (x ** 2 + y ** 2 - 3)), np.exp(-2 * x + y ** 2))", "task_id": 3517}
{"finetuning_prompt": "\"\"\"\nImplement Quick Sort on a list of integers.\n\"\"\"\n\ndef quick_sort(my_list, low, high):\n", "finetuning_completion": "\r\n  if low < high:\r\n    partition_index = partition(my_list, low, high)\r\n    quick_sort(my_list, low, partition_index-1)\r\n    quick_sort(my_list, partition_index + 1, high)\r\n\r\ndef partition(my_list, low, high):\r\n  piv = my_list[high]\r\n  i = low - 1\r\n  for j in range(low, high):\r\n    if my_list[j] < piv:\r\n      i = i + 1\r\n      my_list[i], my_list[j] = my_list[j], my_list[i]\r\n  my_list[i + 1], my_list[high] = my_list[high], my_list[i + 1]\r\n  return i + 1", "task_id": 3525}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm for converting a decimal number to a Roman numeral.\n\"\"\"\n\ndef decimal_to_roman(num):\n", "finetuning_completion": "\r\n    thousands = ['', 'M', 'MM', 'MMM']\r\n    hundreds = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM']\r\n    tens = ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC']\r\n    ones = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\r\n    roman_numeral = thousands[num // 1000] + hundreds[(num % 1000) // 100] + tens[(num % 100) // 10] + ones[num % 10]\r\n\r\n    return roman_numeral", "task_id": 3526}
{"finetuning_prompt": "\"\"\"\nCreate a code to remove duplicates from an integer array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in arr:\r\n        if i not in result:\r\n            result.append(i)\r\n    return result", "task_id": 3532}
{"finetuning_prompt": "\"\"\"\nWrite a code to detect and replace palindrome from a string.\n\"\"\"\n\ndef replace_palindrome(string):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in string.split():\r\n        if i == i[::-1]:\r\n            result.append('#')\r\n        else:\r\n            result.append(i)\r\n    return ' '.join(result)", "task_id": 3533}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to check if x is an integer or not.\n\"\"\"\n\ndef is_integer(x):\n", "finetuning_completion": " \r\n    try: \r\n        x = int(x) \r\n        return True\r\n    except: \r\n        return False", "task_id": 3548}
{"finetuning_prompt": "\"\"\"\nCreate a Python function to calculate the Hamming distance between 2 strings.\n\"\"\"\n\ndef hamming_distance(s1, s2):\n", "finetuning_completion": " \r\n    # check for a different length strings \r\n    if(len(s1) != len(s2)): \r\n        return \"Strings are of different lengths\"\r\n    # calculate the hamming distance if strings have same length \r\n    else: \r\n        diff_count = 0 \r\n        for i in range(len(s1)): \r\n            if(s1[i] != s2[i]): \r\n                diff_count += 1 \r\n        return diff_count", "task_id": 3550}
{"finetuning_prompt": "\"\"\"\nCreate a function to swap the order of the words in the given string.\n\"\"\"\n\ndef swap_words(s):\n", "finetuning_completion": " \n    words = s.split(' ') \n    new_str = '' \n    for word in reversed(words): \n        new_str += word + ' ' \n    \r\n    return new_str[: -1]", "task_id": 3558}
{"finetuning_prompt": "\"\"\"\nFind a missing number in an array of consecutive integers starting from 1.\n\"\"\"\n\ndef find_missing_no(nums):\n", "finetuning_completion": " \r\n    return (max(nums) * (max(nums) + 1)) // 2 - sum(nums)", "task_id": 3562}
{"finetuning_prompt": "\"\"\"\nGenerate a code to check if two given strings are a rotation of each other.\n\"\"\"\n\ndef areRotations(str1, str2):\n", "finetuning_completion": " \r\n\tsize1 = len(str1) \r\n\tsize2 = len(str2) \r\n\ttemp = '' \r\n\tif size1 != size2: \r\n\t\treturn 0\r\n\r\n\ttemp = str1 + str1 \r\n\r\n\treturn (temp.count(str2) > 0) \r\n  \r\nstr1 = \"JAVA\"\r\nstr2 = \"AVAJ\"\r\n  \r\nif areRotations(str1, str2): \r\n\tprint(\"Yes\") \r\nelse: \r\n\tprint(\"No\")", "task_id": 3572}
{"finetuning_prompt": "\"\"\"\nGenerate a code to multiply a matrix by a scalar.\n\"\"\"\n\ndef multiplyMatrixScalar(matrix, number):\n", "finetuning_completion": " \r\n\tfor i in range(len(matrix)): \r\n\t\tfor j in range(len(matrix[0])): \r\n\t\t\tmatrix[i][j] *= number \r\n\treturn matrix \r\n\r\nmatrix = [[1, 2], [3, 4]]\r\nnumber = 5\r\n\r\nprint(\"Multiplied matrix:\", multiplyMatrixScalar(matrix, number))", "task_id": 3574}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the nth term in the Binomial Expansion.\n\"\"\"\n\ndef binomial_expansion(n):\n", "finetuning_completion": " \r\n    binomial_expansion = 1\r\n    for i in range(1,n+1): \r\n        binomial_expansion *= (n+1-i)/i \r\n    return binomial_expansion", "task_id": 3576}
{"finetuning_prompt": "\"\"\"\nWrite a function to divide one matrix with another one.\n\"\"\"\n\ndef divide_matrix(matrix1, matrix2):\n", "finetuning_completion": "\r\n  result = np.divide(matrix1, matrix2)\r\n  return result", "task_id": 3579}
{"finetuning_prompt": "\"\"\"\nCreate a program that can return a set of prime numbers between 0 and a given upper limit.\n\"\"\"\n\ndef primes_upto(limit):\n", "finetuning_completion": "  \n    is_prime = [False] * 2 + [True] * (limit - 1)  \n    for n in range(int(limit**0.5 + 1.5)):  \n        if is_prime[n]:  \n            for i in range(n*n, limit+1, n):  \n                is_prime[i] = False \n    return [i for i, prime in enumerate(is_prime) if prime]", "task_id": 3581}
{"finetuning_prompt": "\"\"\"\nWrite a python program to modify the given endpoint URL by appending the query parameters to the URL.\n\"\"\"\n\nurl = 'http://example.com'\nquery_params = {'param1': '123','param2': '456'}\ndef modify_url(url, query_params):\n", "finetuning_completion": "//example.com'\nquery_params = {'param1': '123','param2': '456'}\ndef modify_url(url, query_params):\n    modified_url = url + '?'\n    query_params_list = []\n    for key, value in query_params.items():\n        query_params_list.append(key + '=' + value) \n    modified_url += '&'.join(query_params_list)\n    return modified_url\n\nprint(modify_url(url, query_params))", "task_id": 3582}
{"finetuning_prompt": "\"\"\"\nWrite a function to take in a string and reverse all the words in the string.\n\"\"\"\n\ndef reverse_words(input_string):\n", "finetuning_completion": "\n    words = input_string.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string", "task_id": 3583}
{"finetuning_prompt": "\"\"\"\nWrite a script that identifies the longest consecutive sequence of equal elements in the list.\n\"\"\"\n\ndef longest_consec_sequence(A):\n", "finetuning_completion": "\n    longest_len = 1\r\n    prev = A[0]\r\n    curr_len = 1\r\n    fst = 0\r\n    for i in range(1,len(A)):\r\n        if A[i] == prev:\r\n            curr_len += 1\r\n            if curr_len > longest_len:\r\n                longest_len = curr_len\r\n                fst = i-longest_len+1\r\n        else:\r\n            curr_len = 1\r\n            prev = A[i]\r\n    return (A[fst:fst+longest_len])", "task_id": 3594}
{"finetuning_prompt": "\"\"\"\nGenerate a function to calculate all possible combinations of values in an array.\n\"\"\"\n\ndef allPossibleCombinations(arr):\n", "finetuning_completion": " \r\n    res = [] \r\n    stack = [] \r\n    stack.append([0, -1]) \r\n  \r\n    while len(stack) != 0: \r\n        curr = stack.pop() \r\n        i = curr[0] \r\n        last_choosen = curr[1] \r\n  \r\n        for j in range(last_choosen+1, len(arr)): \r\n            if i == len(arr)-1: \r\n                res.append(arr[j]) \r\n            else: \r\n                stack.append([i+1, j]) \r\n  \r\n    return res", "task_id": 3605}
{"finetuning_prompt": "\"\"\"\nGenerate a program to print a histogram given a set of data and their ranges.\n\"\"\"\n\ndef createHistogram(data, bounds):\n", "finetuning_completion": "\n\n    histogram = {}\n    \n    for bound in bounds:\n        histogram[bound] = 0\n        \n    for value in data:\n        for bound in bounds:\n            if value <= bound:\n                histogram[bound] += 1\n                break\n            \n    return histogram", "task_id": 3607}
{"finetuning_prompt": "\"\"\"\nCreate a function to group the given sequence of numbers in a list of lists such that all the elements in a sub-list are within the same range.\n\"\"\"\n\ndef group_by_range(arr):\n", "finetuning_completion": " \r\n    result = [] \r\n    curr_list = []\r\n    i = 0 \r\n    while i < len(arr): \r\n        curr_list.append(arr[i]) \r\n        while (i + 1 < len(arr)) and (arr[i] + 1 == arr[i + 1]): \r\n            curr_list.append(arr[i + 1]) \r\n            i += 1\r\n        result.append(curr_list.copy()) \r\n        i += 1 \r\n        curr_list.clear() \r\n          \r\n    return result", "task_id": 3610}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a list of a list to a dictionary.\n\"\"\"\n\ndef list_to_dict(my_list):\n", "finetuning_completion": " \r\n    my_dict = {} \r\n    for key, val in my_list: \r\n        my_dict[key] = val \r\n    return my_dict \r\n  \r\n# Driver code \r\nmy_list = [['a', 1], ['b', 2], ['c', 3]]\r\nprint(list_to_dict(my_list)) \r\n# Output: {'a': 1, 'b': 2, 'c': 3}", "task_id": 3616}
{"finetuning_prompt": "\"\"\"\nCreate a program to store products and prices in an array.\n\"\"\"\n\ndef Price_List(products, prices):\n", "finetuning_completion": " \r\n    price_list = [] \r\n    for i in range(len(products)): \r\n        price_product = (products[i],prices[i]) \r\n        price_list.append(price_product) \r\n    return price_list \r\n  \r\n# Driver code \r\nproducts = ['Apple', 'Samsung', 'Nokia'] \r\nprices = [500, 600, 700]\r\nprint(Price_List(products, prices)) \r\n# Output: [('Apple', 500), ('Samsung', 600), ('Nokia', 700)]", "task_id": 3617}
{"finetuning_prompt": "\"\"\"\nGenerate a program to detect the coreference resolution between two sentences.\n\"\"\"\n\ndef detect_resolution(sentence1, sentence2):\n", "finetuning_completion": " \n    pronoun_list = [\"her\", \"his\", \"she\", \"he\"] \n    sentence1_words = sentence1.split(\" \") \n    sentence2_words = sentence2.split(\" \") \n    for pronoun in pronoun_list: \n        if pronoun in sentence1_words and pronoun in sentence2_words: \n            index_in_sent1 = sentence1_words.index(pronoun) \n            index_in_sent2 = sentence2_words.index(pronoun) \n            if index_in_sent1 > 0 and index_in_sent2 == 0: \n                return sentence1_words[index_in_sent1 - 1] \n            else: \n                return \"no coreference resolution found\" \n        else: \n            return \"no coreference resolution found\"", "task_id": 3621}
{"finetuning_prompt": "\"\"\"\nDesign a code to convert a normal string to a camel case string.\n\"\"\"\n\ndef camelCase_Conversion(string):\n", "finetuning_completion": " \n    string = string.split(\" \") \n    result_string=\"\" \n    result_string += string[0].lower() \n  \n    for i in range(1,len(string)): \n        if string[i] != \"\": \n            result_string += string[i][0].upper() + string[i][1:].lower() \n    return result_string \n  \nresult = camelCase_Conversion(\"This is a normal string\") \nprint(result)", "task_id": 3622}
{"finetuning_prompt": "\"\"\"\nWrite a function to separate a list of numbers into a list of even and odd numbers.\n\"\"\"\n\ndef separate_even_odd(list_num):\n", "finetuning_completion": "\r\n    even_list = []\r\n    odd_list = []\r\n    for i in list_num:\r\n        if i%2 == 0:\r\n            even_list.append(i)\r\n        else:\r\n            odd_list.append(i)\r\n    return(\"Even Numbers: {} \\nOdd Numbers: {}\".format(even_list, odd_list))", "task_id": 3631}
{"finetuning_prompt": "\"\"\"\nConstruct a function to convert the given list of numbers into a string.\n\"\"\"\n\ndef list_to_string(nums):\n", "finetuning_completion": " \r\n  string = \"\"\r\n  for num in nums: \r\n    string = string + str(num) \r\n  return string", "task_id": 3640}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python to create a unique list of items from a given sequence.\n\"\"\"\n\ndef unique_list(in_list):\n", "finetuning_completion": " \r\n   out_list = []\r\n   for item in in_list: \r\n       if item not in out_list: \r\n           out_list.append(item) \r\n   return out_list", "task_id": 3641}
{"finetuning_prompt": "\"\"\"\nWrite code to implement the Towers of Hanoi problem in Python.\n\"\"\"\n\ndef towers_hanoi(n, start, aux, end):\n", "finetuning_completion": " \n    if n == 1: \n        print (\"Move disk 1 from peg\",start,\"to peg\",end)\n        return\n    towers_hanoi(n-1, start, end, aux) \n    print (\"Move disk\",n,\"from peg\",start,\"to peg\",end) \n    towers_hanoi(n-1, aux, start, end)", "task_id": 3643}
{"finetuning_prompt": "\"\"\"\nWrite a python program to multiply all the values in the dictionary with the given number n.\n\"\"\"\n\ndef multiply_dict_values(d, n):\n", "finetuning_completion": "  \r\n    for key in d: \r\n        d[key] = d[key] * n  \r\n    return d", "task_id": 3647}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a random Sudoku puzzle given the size of the puzzle.\n\"\"\"\n\nimport random\n\n# Function to check if a given sudoku board is valid or not\ndef is_valid(board): \n\t\n    # Check row \n    for row in board: \n        if len(row) != len(set(row)): \n            return False\n            \n    # Check columns \n    for i in range(len(board)): \n        column = [row[i] for row in board] \n        if len(column) != len(set(column)): \n            return False\n            \n    # Check subgrids \n    n = int(len(board)**(1/2)) \n    for i in range(0, len(board), n): \n        for j in range(0, len(board), n): \n            subgrid = [board[x][y] for x in range(i, i+n) for y in range(j, j+n)] \n            if len(subgrid) != len(set(subgrid)): \n                return False\n    \n    # If all tests passed\n    return True\n    \n    \ndef create_board(N):\n", "finetuning_completion": " \n\t\n    # Check row \n    for row in board: \n        if len(row) != len(set(row)): \n            return False\n            \n    # Check columns \n    for i in range(len(board)): \n        column = [row[i] for row in board] \n        if len(column) != len(set(column)): \n            return False\n            \n    # Check subgrids \n    n = int(len(board)**(1/2)) \n    for i in range(0, len(board), n): \n        for j in range(0, len(board), n): \n            subgrid = [board[x][y] for x in range(i, i+n) for y in range(j, j+n)] \n            if len(subgrid) != len(set(subgrid)): \n                return False\n    \n    # If all tests passed\n    return True\n    \n    \ndef create_board(N): \n    board = [[0 for _ in range(N*N)] \n                            for _ in range(N*N)] \n\t\n    # Fill the board \n    fill_board(board, 0, N) \n    return board \n    \n\ndef fill_board(board, index, n): \n    \n    i, j = index // n, index % n \n\t\n    # If we have gone through all the indexes, \n    # the board is filled \n    if index == (n * n): \n        return True\n\t\n\t# Check if current row and current \n    # column have unique element or not \n    if unique(board, i, j, n): \n\t\t\n        # Generate random numbers from 1 to \n        # n * n \n        for num in range(1, (n * n) + 1): \n            board[i][j] = num \n\t\t\t\n            # Fill the rest of the board recursively \n            if fill_board(board, index + 1, n): \n                return True\n\t\t\t\n        # If no number is possible, backtrack \n        board[i][j] = 0\n\t\n\t# Backtrack \n    return False\n\t\n\ndef unique(board, row, col, n): \n    return only_unique(board[row]) and \\\n           only_unique(get_column(board, col)) and \\\n           only_unique(get_subgrid(board, row, col, n)) \n\t\n\ndef only_unique(lst): \n    return len(lst) == len(set(lst))  \n    \n    \ndef get_column(board, col): \n\treturn [ board[i][col] for i in range(len(board)) ] \n    \n    \ndef get_subgrid(board, row, col, n): \n    grid = [] \n    size = int(len(board) ** (1/2)) \n    # Get the top-left corner row and col of the subgrid \n    top_left_row = (row // size) * size \n    top_left_col = (col // size) * size \n    \n    # Add subgrid's elements to the grid \n    for i in range(top_left_row, top_left_row + size): \n        for j in range(top_left_col, top_left_col + size): \n            grid.append(board[i][j]) \n            \n    return grid", "task_id": 3648}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to calculate a sum of two numbers using a recursive function.\n\"\"\"\n\ndef recursive_sum(num1,num2):\n", "finetuning_completion": " \r\n    # base case \r\n    if num2 == 0: \r\n        return num1 \r\n    else: \r\n        return recursive_sum(num1^num2,(num1&num2)<<1)", "task_id": 3650}
{"finetuning_prompt": "\"\"\"\nCreate a python program to generate a sentence in the format \"X is Y\" given two words X and Y\n\"\"\"\n\ndef generate_sentence(X, Y):\n", "finetuning_completion": "\r\n    # Generate sentence in format 'X is Y'\r\n    sentence = f'{X.capitalize()} is {Y}.'\r\n    \r\n    return sentence", "task_id": 3651}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the closest pair of points.\n\"\"\"\n\ndef closest_pair_distance(points):\n", "finetuning_completion": " \n    min_dist = float('inf') \n  \n    for i, point1 in enumerate(points): \n        for j in range(i + 1, len(points)): \n            point2 = points[j] \n            dist = ((point2[0] - point1[0]) ** 2 +\n                    (point2[1] - point1[1]) ** 2) ** 0.5 \n            if dist < min_dist: \n                min_dist = dist \n  \n    return min_dist", "task_id": 3656}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given list of integers to its equivalent binary format.\n\"\"\"\n\ndef int_to_binary(arr):\n", "finetuning_completion": "\r\n    res = []\r\n    for i in arr:\r\n        res.append(bin(i)[2:])\r\n    return res", "task_id": 3668}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to traverse the given list in reverse order.\n\"\"\"\n\ndef reverse_traverse(test_list):\n", "finetuning_completion": "\r\n    for i in reversed(range(len(test_list))):\r\n        print(test_list[i])", "task_id": 3672}
{"finetuning_prompt": "\"\"\"\nCreate a function to return the average of all even numbers in a given array.\n\"\"\"\n\ndef avg_evens(arr):\n", "finetuning_completion": "\n    evens = [x for x in arr if x % 2 == 0]\n    return sum(evens) / len(evens) if evens else 0", "task_id": 3680}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for in-place rotation of a matrix.\n\"\"\"\n\ndef rotateMatrix(mat, N):\n", "finetuning_completion": " \r\n    for x in range(0, int(N / 2)): \r\n        for y in range(x, N - x - 1): \r\n            # store current cell in temp variable \r\n            temp = mat[x][y] \r\n  \r\n            # move values from right to top \r\n            mat[x][y] = mat[y][N - 1 - x] \r\n  \r\n            # move values from bottom to right \r\n            mat[y][N - 1 - x] = mat[N - 1 - x][N - 1 - y] \r\n  \r\n            # move values from left to bottom \r\n            mat[N - 1 - x][N - 1 - y] = mat[N - 1 - y][x] \r\n  \r\n            # assign temp to left \r\n            mat[N - 1 - y][x] = temp", "task_id": 3690}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute the maximum possible sum of a subsequence with the condition that no two elements should be adjacent in the sequence\n\"\"\"\n\ndef maxSubSum(arr):\n", "finetuning_completion": " \r\n    incl = 0\r\n    excl = 0\r\n  \r\n    for i in arr: \r\n          \r\n        # Current max excluding i (No ternary in  \r\n        # Python) \r\n        new_excl = excl if excl>incl else incl \r\n  \r\n        # Current max including i \r\n        incl = excl + i \r\n        excl = new_excl \r\n  \r\n    # return max of incl and excl \r\n    return (excl if excl>incl else incl)", "task_id": 3695}
{"finetuning_prompt": "\"\"\"\nOptimise a pre-existing code by using a better algorithm and data structure.\n\"\"\"\n\ndef binarySearch(list, target):\n", "finetuning_completion": " \n\t\n\tl = 0\n\tr = len(list)-1\n\n\twhile l<=r: \n\t\t\n\t\tmid = l + (r-l)//2\n\t\t\n\t\tif list[mid] == target: \n\t\t\treturn True\n\t\telif list[mid] < target: \n\t\t\tl = mid + 1\n\t\telse: \n\t\t\tr = mid - 1\n\t\t\t\n\treturn False", "task_id": 3700}
{"finetuning_prompt": "\"\"\"\nWrite a function for data encoding for the given input data.\n\"\"\"\n\ndef encoding(data):\n", "finetuning_completion": "\r\n    encoded_data = []\r\n    for ele in data:\r\n        encoded_data_ele = bin(ele)[2:]   #converts ele to binary\r\n        encoded_data_ele = encoded_data_ele.zfill(8) #fills to make it length 8\r\n        encoded_data.append(encoded_data_ele)\r\n    return encoded_data", "task_id": 3703}
{"finetuning_prompt": "\"\"\"\nWrite a function to pad a given string to the given length.\n\"\"\"\n\ndef string_pad(test_string, length):\n", "finetuning_completion": "\r\n  # check if given string length is greater than given length\r\n  if (len(test_string) > length):\r\n    test_string = test_string[:length]\r\n  # check if given string length is lesser than given length\r\n  elif (len(test_string) < length):\r\n    test_string += (length - len(test_string)) * ' '\r\n  return test_string", "task_id": 3705}
{"finetuning_prompt": "\"\"\"\nWrite a python program to count maximum occurrences of a given digit across a column of an array.\n\"\"\"\n\ndef findMaxOccurrences(arr, digit):\n", "finetuning_completion": " \r\n    result = 0                    \r\n    for x in range(len(arr[0])):   \r\n        count = 0            \r\n        for y in range(len(arr)):  \r\n            if (arr[y][x] == digit): \r\n                count = count + 1\r\n            result = max(result, count) \r\n    return result", "task_id": 3713}
{"finetuning_prompt": "\"\"\"\nCreate a Python script to print the dictionary which contains the index of each item in the list.\n\"\"\"\n\ndef list_to_dict(myList):\n", "finetuning_completion": "\r\n    dictlist = dict()\r\n    for each in range(len(myList)):\r\n        dictlist[each] = myList[each]\r\n    return dictlist", "task_id": 3718}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total cost of a dinner that includes appetizers, desserts and drinks.\n\"\"\"\n\ndef dinner_cost(appetizers, desserts, drinks):\n", "finetuning_completion": "\r\n    total = 0\r\n    for item in appetizers:\r\n        total += item\r\n    for item in desserts:\r\n        total += item\r\n    for item in drinks:\r\n        total += item\r\n    return total", "task_id": 3729}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to replace a given string\u2019s whitespace with \u2018%20\u2019.\n\"\"\"\n\ndef replace_WhiteSpace(string):\n", "finetuning_completion": "\r\n    return string.replace(\" \", \"%20\")", "task_id": 3736}
{"finetuning_prompt": "\"\"\"\nCreate a program to select all the rows from a table where a specific value appears.\n\"\"\"\n\ndef select_rows(table, id):\n", "finetuning_completion": "\n\t# Initialize result variable\n\tresult = []\n\t\n\t# Loop over rows in the table\n\tfor row in table:\n\t\tif id in row:\n\t\t\t# Append row to result if the value is present\n\t\t\tresult.append(row)\n\t\n\t# Return result\n\treturn result", "task_id": 3743}
{"finetuning_prompt": "\"\"\"\nWrite a Python program that takes a list of numbers and prints the sum of each adjacent pair of numbers.\n\"\"\"\n\ndef adjacent_sum(my_list):\n", "finetuning_completion": "\n    # create an empty list to store value\n    result_list = [] \n    # loop through the provided list\n    for i in range(len(my_list)-1):\n        # calculate the sum of adjacent pairs\n        sum = my_list[i] + my_list[i+1]\n        # append the value to the list\n        result_list.append(sum)\n         \n    return result_list", "task_id": 3748}
{"finetuning_prompt": "\"\"\"\nWrite a python program to check for prime numbers in an interval.\n\"\"\"\n\ndef checkPrime(n): \r\n    if n < 2: \r\n        return False\r\n  \r\n    for i in range(2, int(math.sqrt(n)) + 1): \r\n        if n % i == 0: \r\n            return False\r\n  \r\n    return True\n  \ndef primeInInterval(a, b):\n", "finetuning_completion": " \r\n    if n < 2: \r\n        return False\r\n  \r\n    for i in range(2, int(math.sqrt(n)) + 1): \r\n        if n % i == 0: \r\n            return False\r\n  \r\n    return True\n  \ndef primeInInterval(a, b): \r\n    for i in range(a, b + 1): \r\n        if checkPrime(i): \r\n            print(i, end=\" \")", "task_id": 3754}
{"finetuning_prompt": "\"\"\"\nMake a python program to remove duplicate values from a given list.\n\"\"\"\n\ndef remove_duplicates(lst):\n", "finetuning_completion": " \n    res = [] \n    for i in lst: \n        if i not in res: \n            res.append(i) \n    return res", "task_id": 3759}
{"finetuning_prompt": "\"\"\"\nWrite a python function that returns the sum of two numbers and their absolute difference.\n\"\"\"\n\ndef sum_abs_diff(x,y):\n", "finetuning_completion": " \r\n\tsum = x + y \r\n\tdiff = abs(x-y) \r\n\treturn (sum, diff)", "task_id": 3773}
{"finetuning_prompt": "\"\"\"\nConstruct a function which can detect palindromes in a given string.\n\"\"\"\n\ndef is_palindrome(s):\n", "finetuning_completion": "  \r\n \r\n\trev = ''.join(reversed(s)) \r\n\r\n\tif (s == rev): \r\n\t\treturn True\r\n\treturn False", "task_id": 3776}
{"finetuning_prompt": "\"\"\"\nConvert an integer to its binary representation.\n\"\"\"\n\ndef int_to_binary(n):\n", "finetuning_completion": "\r\n    return bin(n).replace(\"0b\",\"\")", "task_id": 3784}
{"finetuning_prompt": "\"\"\"\nConstruct a function to return a list containing the number of occurences of each letter in a given string.\n\"\"\"\n\ndef letter_freq(string):\n", "finetuning_completion": " \r\n    \r\n    freq_list = [0] * 26 \r\n    for character in string: \r\n        if character.isalpha(): \r\n            pos = ord(character.lower()) - ord('a') \r\n            freq_list[pos] += 1\r\n  \r\n    return freq_list", "task_id": 3786}
{"finetuning_prompt": "\"\"\"\nWrite a function to determine if two strings have the same amount of unique characters.\n\"\"\"\n\ndef count_unique(string1, string2):\n", "finetuning_completion": " \n    set1 = set(string1) \n    set2 = set(string2) \n    if len(set1) == len(set2): \n        return True\n    else: \n        return False", "task_id": 3796}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to capitalize first letter of each word in a given string.\n\"\"\"\n\ndef capitalizeWords(input):\n", "finetuning_completion": " \n  \n    words = input.split(\" \") \n    capitalizedWords = [word.capitalize() for word in words] \n  \n    # join the capitalized words together \n    output = ('').join(capitalizedWords) \n  \n    return output", "task_id": 3799}
{"finetuning_prompt": "\"\"\"\nDesign a function to calculate the sum of all integers from a given string.\n\"\"\"\n\ndef sumStringNumbers(string):\n", "finetuning_completion": " \n  \n    # splits the string into an array \n    arr = string.split(' ') \n  \n    # initializes sum as 0 \n    sum = 0\n  \n    for i in arr: \n      \n        if i.isdigit() == True: \n            sum = sum + int(i) \n  \n    return sum", "task_id": 3800}
{"finetuning_prompt": "\"\"\"\nWrite a Python program for binary search.\n\"\"\"\n\ndef binary_search( nums, target):\n", "finetuning_completion": " \n  \n  left = 0\n  right = len(nums) - 1\n  \n  while left <= right: \n\n    mid = (right + left) // 2\n\n    if nums[mid] == target: \n      return mid \n\n    elif nums[mid] > target: \n      right = mid - 1\n\n    else:\n      left = mid + 1\n  \n  return -1", "task_id": 3802}
{"finetuning_prompt": "\"\"\"\nDetect whether a number is odd or even.\n\"\"\"\n\ndef detect_odd_or_even(number):\n", "finetuning_completion": "\r\n  if number % 2 == 0:\r\n    return 'Even'\r\n  else:\r\n    return 'Odd'", "task_id": 3807}
{"finetuning_prompt": "\"\"\"\nWrite a code to print all the strings in the given list of strings which contains the letter \u2018a\u2019.\n\"\"\"\n\ndef filter_string(l):\n", "finetuning_completion": "\r\n    for s in l:\r\n        if 'a' in s:\r\n            print(s)", "task_id": 3810}
{"finetuning_prompt": "\"\"\"\nWrite a function to separate odd and even numbers in an array.\n\"\"\"\n\ndef odd_even(list):\n", "finetuning_completion": " \r\n    odds = [] \r\n    evens = []\r\n    for i in list: \r\n        if i % 2: \r\n            odds.append(i) \r\n        else: \r\n            evens.append(i) \r\n    return odds, evens \n# Driver Code \nlist = [1,2,3,4,5,6,7,8] \r\nodds, evens = odd_even(list) \r\n\r\nprint(\"Odd numbers in the list: \", odds) \r\nprint(\"Even numbers in the list: \", evens)", "task_id": 3813}
{"finetuning_prompt": "\"\"\"\nGenerate pseudocode for a function to calculate the Levenshtein distance.\n\"\"\"\n\ndef levenshtein_distance(s1, s2):\n", "finetuning_completion": " \r\n    # Initialize the matrix with given strings \r\n    m, n = len(s1), len(s2) \r\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \r\n\r\n    # Calculate the Levenshtein Distance \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n            if i == 0: \r\n                dp[i][j] = j \r\n            elif j == 0: \r\n                dp[i][j] = i \r\n            elif s1[i - 1] == s2[j - 1]: \r\n                dp[i][j] = dp[i - 1][j - 1] \r\n            else: \r\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) \r\n\r\n    # Return the Levenshtein Distance \r\n    return dp[m][n]", "task_id": 3816}
{"finetuning_prompt": "\"\"\"\nWrite a Python function to insert a string in the middle of a string.\n\"\"\"\n\ndef insert_str(string, str_two):\n", "finetuning_completion": "\n    return (string[:int(len(string)/2)] + str_two + string[int(len(string)/2):])", "task_id": 3823}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the number of combinations of n elements taken k at a time.\n\"\"\"\n\ndef calculateCombinations(n, k):\n", "finetuning_completion": "\r\n    # Use the formula to calculate the number of combinations\r\n    return (int(math.factorial(n)/(math.factorial(k)*math.factorial(n-k))))", "task_id": 3852}
{"finetuning_prompt": "\"\"\"\nCreate a program to extract all the words from the given string.\n\"\"\"\n\ndef ExtractWords(String):\n", "finetuning_completion": "\r\n   # Split the string using whitespace as a separator\r\n   List = String.split(' ')\r\n\r\n   return List", "task_id": 3853}
{"finetuning_prompt": "\"\"\"\nCreate a function to classify a given array into two classes of positive and negative numbers.\n\"\"\"\n\ndef classify_array(arr):\n", "finetuning_completion": " \r\n    positive = []\r\n    negative = []\r\n    for ele in arr: \r\n        if ele >= 0: \r\n            positive.append(ele) \r\n        else: \r\n            negative.append(ele) \r\n    return positive, negative", "task_id": 3864}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a Fibonacci sequence given a limit.\n\"\"\"\n\ndef Fibonacci_Sequence_till_limit(n):\n", "finetuning_completion": "\n   a = 0\n   b = 1\n   list_Fibonacci = []\n   while a < n:\n      list_Fibonacci.append(a)\n      c = a + b\n      a = b\n      b = c\n   return list_Fibonacci", "task_id": 3872}
{"finetuning_prompt": "\"\"\"\nWrite a python code to check if the two given lists contain equal elements.\n\"\"\"\n\ndef check_list_equal(list1, list2):\n", "finetuning_completion": " \r\n    \r\n    if len(list1) != len(list2): \r\n        return False\r\n\r\n    list1.sort() \r\n    list2.sort()  \r\n  \r\n    for i in range(0, len(list1)): \r\n        if list1[i] != list2[i]: \r\n            return False\r\n    return True", "task_id": 3878}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a list of tuples that contains the common elements between two given lists.\n\"\"\"\n\ndef common_elements(list1, list2):\n", "finetuning_completion": " \n  res = list(set([(i, j) for i in list1 for j in list2 if i == j])) \n  return res", "task_id": 3894}
{"finetuning_prompt": "\"\"\"\nGenerate a function to classify strings based on a given set of characters.\n\"\"\"\n\ndef classify_strings(input_str, char_set):\n", "finetuning_completion": "\n    result = []\n    for s in input_str:\n        if set(s).issubset(char_set):\n            result.append(s)\n    return result", "task_id": 3897}
{"finetuning_prompt": "\"\"\"\nConstruct a Python program to generate the first n terms of the Fibonacci sequence.\n\"\"\"\n\ndef gen_fibonacci_seq(length):\n", "finetuning_completion": "\n    result = []\n    if length == 0:\n        return result\n    elif length == 1:\n        result.append(1)\n        return result\n    elif length == 2:\n        result.append(1)\n        result.append(1)\n        return result\n    elif length > 2:\n        result.append(1)\n        result.append(1)\n        for i in range(2,length):\n            result.append(result[i-1]+result[i-2])\n        return result", "task_id": 3898}
{"finetuning_prompt": "\"\"\"\nCreate a program to compare two strings and identify any differences between them.\n\"\"\"\n\ndef compare_strings(s1, s2):\n", "finetuning_completion": " \r\n    l1 = len(s1) \r\n    l2 = len(s2) \r\n  \r\n    # If length of both strings is not same, \r\n    # then they cannot be same \r\n    if abs( l1 - l2) > 1: \r\n        return False\r\n  \r\n    # Singleton is a special case where same \r\n    # character is removed from any one string \r\n    count = 0    # Count of alterations \r\n    if l1 == l2: \r\n        for i in range(l1): \r\n            if s1[i] != s2[i]: \r\n                count+=1\r\n  \r\n    # Replace character \r\n    else: \r\n        j = 0\r\n        for i in range(l1): \r\n            # If lengths of both strings are not \r\n            # same, then only check upto min length \r\n            if j < l2 and s1[i] != s2[j]: \r\n                count+=1\r\n                j+=1\r\n  \r\n    # If count is more than one, strings are not \r\n    # similar \r\n    return count == 1\n  \r\n# Driver code \r\n  \r\nstring1 = \"alphabet\"\r\nstring2 = \"alpha\"\r\n  \r\nif compare_strings(string1, string2): \r\n    print(\"Yes\") \r\nelse: \r\n    print(\"No\")", "task_id": 3906}
{"finetuning_prompt": "\"\"\"\nWrite a python code to search and delete an element from a sorted array.\n\"\"\"\n\n# function to delete an element x in a sorted array arr[]  \r\ndef deleteElement(arr, n, x):\n", "finetuning_completion": " \r\n  \r\n    # Find position of element to be deleted \r\n    i = 0 \r\n    while i < n: \r\n   \r\n        if arr[i] == x: \r\n            break\r\n \r\n        i += 1\r\n  \r\n    # If x was not present in array \r\n    if i == n: \r\n        return n \r\n  \r\n    # Reduce the size of array by one \r\n    n = n - 1\r\n  \r\n    # Copy the elements after the  \r\n    # position of the element to be deleted \r\n    for j in range(i, n): \r\n        arr[j] = arr[j + 1] \r\n       \r\n    return n", "task_id": 3908}
{"finetuning_prompt": "\"\"\"\nCalculate the total miles traveled by a user in a given year.\n\"\"\"\n\ndef total_miles_traveled(mileage):\n", "finetuning_completion": "\n    total_miles = 0\n    for value in mileage:\n        total_miles += value\n    return total_miles", "task_id": 3914}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the interest rate for the given principal amount and interest rate.\n\"\"\"\n\ndef interest(principal,interest_rate):\n", "finetuning_completion": " \r\n    return (principal * interest_rate) / 100\r\n  \r\ninterest_amount = interest(10000,4) \r\nprint(interest_amount)", "task_id": 3917}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the net salary for the given input.\n\"\"\"\n\ndef calculate_salary(basic_salary, tax):\n", "finetuning_completion": " \r\n    taxable_amount = basic_salary - (basic_salary*tax/100) \r\n    return taxable_amount\r\n  \r\nnet_salary = calculate_salary(10000,20) \r\nprint('Net Salary :',net_salary)", "task_id": 3918}
{"finetuning_prompt": "\"\"\"\nTake in a list of numbers as parameter and return a list of tuples with the count of all the even and odd numbers separately.\n\"\"\"\n\ndef count_e_o(numbers):\n", "finetuning_completion": " \n    odd_list = [x for x in numbers if x%2!=0] \n    even_list = [x for x in numbers if x%2==0] \n    return (len(odd_list),len(even_list))", "task_id": 3924}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the longest increasing substring in a given string.\n\"\"\"\n\ndef longest_increasing_substring(string):\n", "finetuning_completion": "\n    n = len(string)\n    result = []\n    max_len = 1\n    \n    for i in range(n):\n        current_len = 1       \n        for j in range(i+1, n):\n            if string[j] > string[j-1]:\n                current_len += 1\n            else:\n                break\n        if current_len > max_len:\n            result = [string[i:i+current_len]]\n            max_len = current_len\n        elif current_len == max_len:\n            result.append(string[i:i+current_len])\n    return result", "task_id": 3925}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes an input of two lists and finds the only common elements in both the given lists.\n\"\"\"\n\ndef find_common(list1, list2):\n", "finetuning_completion": "\r\n    result = [] \r\n    set2 = set(list2)\n    for elem in list1:\r\n        if elem in set2:\n            result.append(elem)\n    return result", "task_id": 3930}
{"finetuning_prompt": "\"\"\"\nCreate a python program which will search for a given element in a 2D array and output its coordinates.\n\"\"\"\n\ndef search_coordinates(arr, search):\n", "finetuning_completion": "\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == search:\n                return i, j", "task_id": 3931}
{"finetuning_prompt": "\"\"\"\nGenerate a program to format a two-dimensional list in an HTML table.\n\"\"\"\n\ndef list_to_table(dataset):\n", "finetuning_completion": "\r\n    table_head='<table>'\r\n    body_start=\"<tr>\"\r\n    body_end=\"</tr>\"\r\n    rowno=len(dataset)\r\n    colno=len(dataset[0])\r\n    for row in range(0,rowno):\r\n        table_head+=body_start\r\n        for col in range(0,colno):\r\n            table_head+='<td>'+str(dataset[row][col])+'</td>'\r\n        table_head+=body_end\r\n    table_head+='</table>'\r\n    return table_head", "task_id": 3935}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to remove all duplicates from an array.\n\"\"\"\n\ndef remove_duplicates(array):\n", "finetuning_completion": " \r\n    result = [] \r\n    seen = set() \r\n    for item in array: \r\n        if item not in seen: \r\n            seen.add(item) \r\n            result.append(item)  \r\n    return result", "task_id": 3945}
{"finetuning_prompt": "\"\"\"\nGenerate a string of random words using the given seed.\n\"\"\"\n\nimport random\r\ndef generate_string(seed):\n", "finetuning_completion": "\r\n\trandom.seed(seed)\r\n\twords = [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\"]\r\n\tstring = ' '.join([random.choice(words) for i in range(random.randint(3,10))])\r\n\treturn string", "task_id": 3954}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the sum of elements in a given list and find the maximum sum.\n\"\"\"\n\ndef sum_max(lists):\n", "finetuning_completion": " \r\n  max_sum = None \r\n  for lst in lists: \r\n    _sum = sum(lst)  \r\n    if (max_sum == None) or (_sum > max_sum): \r\n      max_sum = _sum  \r\n  return max_sum", "task_id": 3966}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a dictionary from a given list, mapping first element in each sublist as key and second element as value.\n\"\"\"\n\ndef create_dict(lists):\n", "finetuning_completion": " \r\n  output_dict = {ele[0]:ele[1]  for ele in lists}\r\n  return output_dict", "task_id": 3967}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the minimum number of coins of given denominations needed to form a given amount.\n\"\"\"\n\ndef min_coins(amount, coins):\n", "finetuning_completion": " \n    num_coins = [float(\"inf\") for i in range(amount + 1)] \n    num_coins[0] = 0\n    for coin in coins: \n        for i in range(1, amount + 1): \n            if i >= coin: \n                num_coins[i] = min(num_coins[i], num_coins[i - coin] + 1)  \n    if num_coins[amount] == float(\"inf\"):\n        return -1\n    return num_coins[amount]", "task_id": 3976}
{"finetuning_prompt": "\"\"\"\nDesign a program to get the sum of the nth row of Pascal's Triangle.\n\"\"\"\n\ndef get_pascal_sum(n):\n", "finetuning_completion": " \r\n  \r\n    # Generate the row \r\n    row = [1] \r\n    for i in range(n): \r\n        row.append(row[i] * (n-i) // (i+1)) \r\n  \r\n    # Calculate the sum \r\n    total_sum = 0\r\n    for j in range(n+1): \r\n        total_sum = total_sum + row[j] \r\n  \r\n    return total_sum", "task_id": 3978}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate the total number of permutations for a given list.\n\"\"\"\n\nimport math\ndef __permutations(input_list):\n", "finetuning_completion": "\n    result = 1\n    n = len(input_list)\n    resList = list(dict.fromkeys(input_list))\n    for i in resList:\n        result = result* math.factorial(input_list.count(i))\n    return math.factorial(n)//result", "task_id": 3980}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate the list of prime numbers between two given integers using a single loop.\n\"\"\"\n\ndef prime_range(start_number, end_number):\n", "finetuning_completion": " \n    prime_list = []\n    for num in range(start_number,end_number+1):  \n        own_check_val= 0\n        for i in range(2,num): \n            if(num % i) == 0: \n                own_check_val=1\n                break\n        if(own_check_val == 0): \n            prime_list.append(num)\n    return prime_list", "task_id": 3992}
{"finetuning_prompt": "\"\"\"\nWrite a script to check whether a given sentence is a palindrome or not.\n\"\"\"\n\ndef isPalindrome(string):\n", "finetuning_completion": " \r\n\t# remove non-alphanumeric characters and spaces \r\n\tstring = \"\".join(alpha for alpha in string if alpha.isalnum()) \r\n\t# reverse the string \r\n\tstring = string[::-1] \r\n\t# convert all the alphabets to lowercase \r\n\tstring = string.lower() \r\n\tif (string == string[::-1]): \r\n\t\treturn True\r\n\treturn False", "task_id": 3994}
{"finetuning_prompt": "\"\"\"\nOptimize the program to calculate the Fibonacci sequence.\n\"\"\"\n\ndef fibonacci_optimized(num):\n", "finetuning_completion": " \n\tif num == 1:\n\t\treturn 0\n\tif num == 2:\n\t\treturn 1\n\tn1, n2 = 0, 1 \n\tcount = 2\n\twhile(count <= num): \n\t\tnth = n1 + n2 \n\t\tn1 = n2 \n\t\tn2 = nth \n\t\tcount+=1\n\treturn n2", "task_id": 3996}
{"finetuning_prompt": "\"\"\"\nWrite a function that adds double quotes around each word in the given string.\n\"\"\"\n\ndef add_double_quotes(text):\n", "finetuning_completion": "\r\n    words = text.split() \r\n    new_sentence = ['\"' + word + '\"' for word in words]\r\n    return ' '.join(new_sentence)", "task_id": 4003}
{"finetuning_prompt": "\"\"\"\nCreate a function to search for a given item in an array of objects and return the object with the highest value.\n\"\"\"\n\ndef search(arr, item):\n", "finetuning_completion": " \r\n    max_val = 0\r\n    res = None\r\n\r\n    for obj in arr: \r\n        if obj[\"name\"] == item and obj[\"value\"] > max_val: \r\n            max_val = obj[\"value\"]\r\n            res = obj\r\n\r\n    return res", "task_id": 4018}
{"finetuning_prompt": "\"\"\"\nWrite a function to delete all the words with given prefix character from an array.\n\"\"\"\n\ndef delete_words_with_prefix(arr, prefix):\n", "finetuning_completion": "\r\n  result = []\r\n  for word in arr:\r\n    if not word.startswith(prefix):\r\n      result.append(word)\r\n  return result", "task_id": 4025}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find intersection of 2 given arrays.\n\"\"\"\n\ndef intersectionOf2Arrays(arr1, arr2):\n", "finetuning_completion": " \r\n    out = [] \r\n    for i in arr1: \r\n        if i in arr2: \r\n            out.append(i) \r\n    return out\n  \n# Driver code \nArray1 = [2, 5, 12, 20, 39, 82] \r\nArray2 = [6, 12, 32, 40, 52, 82] \nprint(intersectionOf2Arrays(Array1, Array2)) \n\n# Result: [12, 82]", "task_id": 4039}
{"finetuning_prompt": "\"\"\"\nCreate a mini-calculator program using if-else statements.\n\"\"\"\n\ndef calculate(x, y, op):\n", "finetuning_completion": "\r\n  if op == '+':\r\n    return x + y\r\n  elif op == '-':\r\n    return x - y\r\n  elif op == '*':\r\n    return x * y\r\n  elif op == '/':\r\n    return x / y\r\n  else:\r\n    return 'Invalid!'", "task_id": 4040}
{"finetuning_prompt": "\"\"\"\nWrite a function to print the individual characters that appear more than once in a given string.\n\"\"\"\n\ndef repeated_characters(s):\n", "finetuning_completion": "\r\n  count_dict = dict()\r\n  for c in s:\r\n    count_dict[c] = count_dict.get(c, 0) + 1\r\n  for c in count_dict:\r\n    if count_dict[c] > 1: \r\n      print(c)", "task_id": 4041}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes list and de-duplicate it by only keeping the element with highest value\n\"\"\"\n\ndef dedup_highest_value(list1):\n", "finetuning_completion": "\n    result = []\n    seen = set()\n    for i in list1:\n        if i not in seen:\n            result.append(i)\n            seen.add(i)\n        else:\n            last = result.pop()\n            if last < i:\n                result.append(i)\n            else:\n                result.append(last)\n    return result", "task_id": 4050}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes a list and prints the elements in reverse order.\n\"\"\"\n\ndef reverse(lst):\n", "finetuning_completion": "\r\n    lst.reverse()\r\n    for x in lst:\r\n        print(x)", "task_id": 4051}
{"finetuning_prompt": "\"\"\"\nCreate a function to minimize the code complexity for the given if-else statement.\n\"\"\"\n\ndef return_val(a):\n", "finetuning_completion": " \n    switch = { \n        7 : 0, \n        11 : 1, \n        23 : 2, \n        43 : 3\n    } \n    return switch.get(a, \"Invalid val\")", "task_id": 4069}
{"finetuning_prompt": "\"\"\"\nGenerate a code snippet to convert a given integer to its binary equivalent.\n\"\"\"\n\ndef intToBinary(n):\n", "finetuning_completion": "\n    return bin(n).replace(\"0b\", \"\")", "task_id": 4070}
{"finetuning_prompt": "\"\"\"\nConstruct a code snippet to sort 3 String objects alphabetically.\n\"\"\"\n\ndef sort_string(str1,str2,str3):\n", "finetuning_completion": " \n     if str1 < str2 and str1 < str3: \n          if str2 < str3: \n               return str1 , str2 , str3 \n          else: \n               return str1 , str3 , str2 \n     elif str2 < str1 and str2 < str3: \n          if str1 < str3: \n               return str2 , str1 , str3 \n          else: \n               return str2 , str3 , str1 \n     else: \n          if str1 < str2: \n               return str3 , str1 , str2 \n          else: \n               return str3 , str2 , str1", "task_id": 4073}
{"finetuning_prompt": "\"\"\"\nGenerate code for finding the prime numbers within a range of provided integers.\n\"\"\"\n\ndef get_prime_numbers(x,y):\n", "finetuning_completion": " \r\n    prime_list = [] \r\n    for num in range(x,y + 1):  \r\n       if num > 1:  \r\n           for i in range(2,num):  \r\n               if (num % i) == 0:  \r\n                   break  \r\n           else:  \r\n               prime_list.append(num) \r\n           \r\n    return prime_list", "task_id": 4077}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse every word of a sentence.\n\"\"\"\n\ndef reverse_sentence(sentence):\n", "finetuning_completion": " \r\n    words = sentence.split(\" \") \r\n    rev_words = [word[::-1] for word in words] \r\n    rev_sentence = \" \".join(rev_words)  \r\n    return rev_sentence", "task_id": 4078}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to remove stochastic elements from a given list.\n\"\"\"\n\ndef remove_stochastic_elements(list1):\n", "finetuning_completion": " \r\n    new_list = [] \r\n    for x in list1: \r\n        if x not in new_list: \r\n            new_list.append(x) \r\n    return new_list", "task_id": 4079}
{"finetuning_prompt": "\"\"\"\nGenerate an improved version of Bubble sort algorithm for sorting an list of numbers.\n\"\"\"\n\ndef improved_bubble_sort(list1):\n", "finetuning_completion": "\n    n = len(list1) \r\n    for i in range(n): \r\n        swapped = False\r\n         \r\n        for j in range(0, n-i-1): \r\n            if list1[j] > list1[j+1] : \r\n                list1[j], list1[j+1] = list1[j+1], list1[j] \r\n                swapped = True\r\n  \r\n        # IF no two elements were swapped  \r\n        # by inner loop, then break \r\n        if swapped == False: \r\n            break\r\n    return list1", "task_id": 4082}
{"finetuning_prompt": "\"\"\"\nCreate a function to append one array elements to another.\n\"\"\"\n\ndef appendArray(arr1, arr2):\n", "finetuning_completion": "\n    return arr1 + arr2", "task_id": 4091}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the largest prime factor of a number.\n\"\"\"\n\ndef largest_prime_factor(n):\n", "finetuning_completion": "\n    # Initialize largest factor \n    largest_factor = 1\n\n    # Loop to check for all the prime \n    # numbers start with 2 going up to \n    # the half of number\n    i = 2\n    while i*i <= n:\n        # If num is divisible by 'i'.\n        if n % i == 0:\n            # Update 'largest_factor' if required \n            largest_factor = max(largest_factor, i)\n            # Divide the number by the factor just found \n            # to get the next factor \n            n = n / i\n        else:\n            # Increment the value of 'i' \n            i = i + 1\n    # Return the largest factor \n    return max(largest_factor, n)", "task_id": 4092}
{"finetuning_prompt": "\"\"\"\nWrite a function to identify the most occurring letter in an input string.\n\"\"\"\n\ndef most_occuring_letter(string):\n", "finetuning_completion": " \n    count = [0 for i in range(256)] \n  \n    for i in range(len(string)): \n        count[ord(string[i])] = count[ord(string[i])] + 1 \n  \n    max = -1\n    max_char = '' \n  \n    for i in range(256): \n        if max < count[i] : \n            max = count[i] \n            max_char = chr(i) \n  \n    return max_char", "task_id": 4093}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to check whether an input string is a palindrome.\n\"\"\"\n\ndef isPalindrome(string):\n", "finetuning_completion": " \n    left_index = 0\n    right_index = len(string) - 1\n\n    while right_index >= left_index: \n        if not string[left_index] == string[right_index]: \n            return False\n        left_index += 1\n        right_index -= 1\n    return True", "task_id": 4097}
{"finetuning_prompt": "\"\"\"\nWrite a python program to zip two or more lists of equal length.\n\"\"\"\n\ndef zip_lists(list1, list2, list3):\n", "finetuning_completion": " \r\n    '''function to zip three list of equal length''' \r\n    zipped_list = list(zip(list1, list2, list3))  #zip the lists \r\n    return zipped_list", "task_id": 4099}
{"finetuning_prompt": "\"\"\"\nGenerate a python programto find the longest odd-even sub-sequence from the given array of integers.\n\"\"\"\n\ndef findLongestOddEven(arr, n):\n", "finetuning_completion": " \r\n    res = 0\r\n    dp = [[0 for j in range(2)] for i in range(n)] \r\n    if arr[0] % 2 == 0: \n        dp[0][0] = 1\r\n        dp[0][1] = 0\r\n    else: \r\n        dp[0][0] = 0\r\n        dp[0][1] = 1\r\n  \r\n    res = max(dp[0][0], dp[0][1]); \r\n  \r\n    for i in range(1, n): \r\n  \r\n        # if arr[i] is even \r\n        if arr[i] % 2 == 0: \r\n            dp[i][0] = dp[i - 1][1] + 1\r\n            dp[i][1] = dp[i - 1][1] \r\n  \r\n        # if arr[i] is odd  \r\n        else: \r\n            dp[i][0] = dp[i - 1][0] \r\n            dp[i][1] = dp[i - 1][0] + 1\r\n  \r\n        res = max(dp[i][0], dp[i][1], res); \r\n  \r\n    return res;", "task_id": 4106}
{"finetuning_prompt": "\"\"\"\nGiven a list, find the largest number in the list\n\"\"\"\n\ndef largest_number(list1):\n", "finetuning_completion": "  \n    max_number = list1[0]\n    for e in list1:\n        if (e > max_number):\n            max_number = e\n    return max_number", "task_id": 4110}
{"finetuning_prompt": "\"\"\"\nSelect the distinct elements of a given array.\n\"\"\"\n\ndef distinct_elements(arr):\n", "finetuning_completion": " \r\n\tresult = [] \r\n\tfor i in range(len(arr)): \r\n\t\tif arr[i] not in result: \r\n\t\t\tresult.append(arr[i]) \r\n\treturn result", "task_id": 4126}
{"finetuning_prompt": "\"\"\"\nWrite a function to search for the given number in a 2D matrix.\n\"\"\"\n\ndef search_2D_matrix(matrix, x):\n", "finetuning_completion": " \r\n\trows = len(matrix) \r\n\tcols = len(matrix[0]) \r\n\ti, j = 0, cols-1\r\n\twhile i < rows and j >= 0: \r\n\t\tif matrix[i][j] == x: \r\n\t\t\treturn True\r\n\t\tif matrix[i][j] < x: \r\n\t\t\ti += 1\r\n\t\telse: \r\n\t\t\tj -= 1\r\n\treturn False", "task_id": 4128}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to generate all unique subsets of a set.\n\"\"\"\n\ndef generate_subsets(input_set):\n", "finetuning_completion": " \r\n    output_list = []\r\n    for i in range(2**len(input_set)):\r\n        temp_list = []\r\n        for j in range(len(input_set)):\r\n            if (i & (1 << j)) > 0:\r\n                temp_list.append(input_set[j])\r\n        output_list.append(temp_list)\r\n    return output_list", "task_id": 4131}
{"finetuning_prompt": "\"\"\"\nDesign a code to detect the duplicate characters within a given string.\n\"\"\"\n\ndef find_duplicates(txt):\n", "finetuning_completion": " \r\n    result = \"\"\r\n    for x in txt:  \r\n        if txt.count(x) > 1 and x not in result: \r\n            result += x\r\n    return result\n\ntxt=\"this is a sample text string\" \r\nprint(find_duplicates(txt)) # iss", "task_id": 4141}
{"finetuning_prompt": "\"\"\"\nGiven a dictionary and a number, write a function to convert the dictionary into a list.\n\"\"\"\n\ndef dict_to_list(my_dict, num):\n", "finetuning_completion": "\n    return [[key*num, value*num] for key,value in my_dict.items()]", "task_id": 4142}
{"finetuning_prompt": "\"\"\"\nGenerate a code to create an array with values from 0 to the given limit.\n\"\"\"\n\ndef create_array(limit):\n", "finetuning_completion": "\n        return [i for i in range(0, limit+1)]", "task_id": 4147}
{"finetuning_prompt": "\"\"\"\nWrite a code that takes a given list of numbers and then prints out the even numbers.\n\"\"\"\n\ndef even_num(my_list):\n", "finetuning_completion": "\n    return [num for num in my_list if num%2 == 0]", "task_id": 4148}
{"finetuning_prompt": "\"\"\"\nCreate a code to replace every word in a string with the given replacement word.\n\"\"\"\n\ndef replace_word(my_string, replacement_word):\n", "finetuning_completion": "\r\n    words = my_string.split(\" \")\r\n    new_string = []\r\n    for word in words:\r\n        new_string.append(replacement_word)\r\n    return ' '.join(new_string)", "task_id": 4150}
{"finetuning_prompt": "\"\"\"\nDevelop a program to calculate an optimized solution for the given Knapsack Problem.\n\"\"\"\n\ndef knapsack(items, weight):\n", "finetuning_completion": " \r\n  n_items = len(items) \r\n\r\n  # create two dimensional array for Optimal Subproblem Solutions \r\n  \r\n  opt_subprob_solutions = [[0 for x in range(weight+1)] for x in range(n_items + 1)] \r\n\r\n  # compute maximum value by iterating through each item \r\n\r\n  for i in range(n_items + 1): \r\n    for j in range(weight + 1): \r\n      if i == 0 or j == 0: \r\n        opt_subprob_solutions[i][j] = 0\r\n      elif items[i-1][0] <= j: \r\n        opt_subprob_solutions[i][j] = max(items[i-1][1] + opt_subprob_solutions[i-1][j-items[i-1][0]], opt_subprob_solutions[i-1][j]) \r\n      else: \r\n        opt_subprob_solutions[i][j] = opt_subprob_solutions[i-1][j] \r\n\r\n  return opt_subprob_solutions[n_items][weight]", "task_id": 4153}
{"finetuning_prompt": "\"\"\"\nGenerate a function to classify a given array of numbers into two categories.\n\"\"\"\n\ndef classify_array(arr):\n", "finetuning_completion": " \r\n  odd = [] \r\n  even = [] \r\n  for el in arr: \r\n    if el % 2 == 0: \r\n      even.append(el) \r\n    else: \r\n      odd.append(el) \r\n  return (odd, even)", "task_id": 4154}
{"finetuning_prompt": "\"\"\"\nCreate a python program to normalize a given set of data.\n\"\"\"\n\ndef normalize(data):\n", "finetuning_completion": " \n    min_value = min(data)\n    max_value = max(data)\n    normalized = []\n    for value in data: \n        normalized_value = (value - min_value) / (max_value - min_value)\n        normalized.append(normalized_value)\n    return normalized", "task_id": 4159}
{"finetuning_prompt": "\"\"\"\nWrite a script to sort the given list using radix sort.\n\"\"\"\n\ndef radix_sort(unsorted):\n", "finetuning_completion": " \n\tRadix = 10\n\tmaxLength = False\n\ttmp , placement = -1, 1\n\t\n\twhile not maxLength:\n\t\tmaxLength = True\n\t\tbins = [list() for x in range( Radix )]\n\t\t\n\t\tfor i in unsorted:\n\t\t\ttmp = i / placement\n\t\t\tbins[int(tmp % Radix)].append(i)\n\t\t\tif maxLength and tmp > 0:\n\t\t\t\tmaxLength = False\n\t\t\n\t\ta = 0\n\t\tfor b in range( Radix ):\n\t\t\tbinc = bins[b]\n\t\t\tfor i in binc:\n\t\t\t\tunsorted[a] = i\n\t\t\t\ta += 1\n\t\t\n\t\tplacement *= Radix\n\treturn unsorted", "task_id": 4169}
{"finetuning_prompt": "\"\"\"\nGenerate code to calculate the distance between two cities using the haversine formula.\n\"\"\"\n\nimport math\r\ndef haversine_distance(city1_lat, city1_long, city2_lat, city2_long):\n", "finetuning_completion": "  \r\n    R = 6371  # Radius of the Earth in km\r\n    lat1 = math.radians(city1_lat)\r\n    lon1 = math.radians(city1_long)\r\n    lat2 = math.radians(city2_lat)\r\n    lon2 = math.radians(city2_long)\r\n\r\n    dlat = lat2 - lat1\r\n    dlon = lon2 - lon1\r\n\r\n    a = math.pow(math.sin(dlat / 2), 2) + math.cos(lat1) * math.cos(lat2) * math.pow(math.sin(dlon / 2), 2)\r\n    d = 2*R*math.asin(math.sqrt(a))\r\n\r\n    return d\r\n\r\n# Sample Usage\r\nd = haversine_distance(40.7128, -74.0060, 35.6895, 139.6917)  # Distance between New York City and Tokyo\r\nprint(d)", "task_id": 4171}
{"finetuning_prompt": "\"\"\"\nConvert a given binary number to its equivalent decimal number.\n\"\"\"\n\ndef binary_to_decimal(n):\n", "finetuning_completion": " \r\n    num = n \r\n    dec_value = 0  \r\n    base = 1\r\n    temp = num  \r\n    while temp: \r\n        last_digit = temp % 10\r\n        temp = int(temp / 10) \r\n      \r\n        dec_value += last_digit * base\r\n        base = base * 2\r\n      \r\n    return dec_value \r\n  \r\nbinary = 11011010\r\ndecimal = binary_to_decimal(binary) \r\nprint(decimal)", "task_id": 4173}
{"finetuning_prompt": "\"\"\"\nGenerate a code to reduce a string of numbers to its reverse order.\n\"\"\"\n\ndef reverse_order(string):\n", "finetuning_completion": " \r\n    return(string[::-1])", "task_id": 4175}
{"finetuning_prompt": "\"\"\"\nGenerate a code to implement a search pattern in a given text.\n\"\"\"\n\ndef search_pattern(text, pattern):\n", "finetuning_completion": " \r\n    if pattern in text: \r\n        return True\r\n    return False", "task_id": 4177}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to convert an array of numbers into an array of characters.\n\"\"\"\n\ndef num_to_char(nums):\n", "finetuning_completion": " \r\n    chars = [] \r\n    for num in nums: \r\n        chars.append(chr(num)) \r\n    return chars", "task_id": 4178}
{"finetuning_prompt": "\"\"\"\nWrite python code to solve the following equation: 2x + 3 = 25\n\"\"\"\n\ndef solve_equation(x):\n", "finetuning_completion": " \r\n    return (25-3)//2", "task_id": 4180}
{"finetuning_prompt": "\"\"\"\nConstruct a data structure to group values into different categories by their length.\n\"\"\"\n\ndef groupValues(length):\n", "finetuning_completion": " \r\n\t# Construct an empty dictionary \r\n\tdict = {} \r\n\t  \r\n\t# For every value in the given array: \r\n\t# look for the length and store the \r\n\t# value in the corresponding sub-list  \r\n\tfor x in length:  \r\n\t\tl = len(x) \r\n      # if the length of the current value \r\n      # does not exist in the dictionary \r\n      # then create a new sublist for it \r\n\t\tif l not in dict: \r\n\t\t\tdict[l] = [] \r\n      \r\n\t\tdict[l].append(x) \r\n\t\t\r\n\treturn dict", "task_id": 4184}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the Missing Number in a range of 1 to 10.\n\"\"\"\n\ndef findMissing(arr):\n", "finetuning_completion": " \n\tn = len(arr) \n\ttotal = (n + 1)*(n + 2)/2\n\tsum_of_arr = sum(arr) \n\treturn total - sum_of_arr \n\n# Driver code \narr = [1, 2, 4, 5, 6] \nmiss = findMissing(arr) \nprint(miss)", "task_id": 4185}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the sums of all its digits until the sum is only one digit.\n\"\"\"\n\ndef sumOfDigits(num):\n", "finetuning_completion": " \n\twhile num > 9:\n\t\tsum = 0 \n\t\twhile num: \n\t\t\tsum += num % 10\n\t\t\tnum //= 10\n\t\tnum = sum \n\treturn num", "task_id": 4186}
{"finetuning_prompt": "\"\"\"\nCreate a python program to transform a case-insensitive string into a case-sensitive one.\n\"\"\"\n\ndef case_convert(string):\n", "finetuning_completion": " \r\n  return string.lower()", "task_id": 4191}
{"finetuning_prompt": "\"\"\"\nGenerate code to extract all the prime numbers from a given list of numbers.\n\"\"\"\n\ndef extract_prime(list_data):\n", "finetuning_completion": "\n    prime_list = [] \n    for num in list_data: \n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0: \n                    break\n            else: \n                prime_list.append(num) \n    return prime_list", "task_id": 4197}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the kth smallest number in an unsorted array of numbers\n\"\"\"\n\ndef kthSmallest(list_data, k):\n", "finetuning_completion": " \n     \n    list_data.sort() \n  \n    return list_data[k-1]", "task_id": 4198}
{"finetuning_prompt": "\"\"\"\nFind the smallest positive integer that does not exist in the given array.\n\"\"\"\n\ndef smallest_missing_int(arr):\n", "finetuning_completion": "\r\n    res = 1\r\n    for i in range(len(arr)):\r\n        if arr[i] <= res:\r\n            res = arr[i]+1\r\n    return res", "task_id": 4201}
{"finetuning_prompt": "\"\"\"\nWrite a python script to match a regex pattern in the given string.\n\"\"\"\n\nimport re\n\ndef regex_match(s, pattern):\n", "finetuning_completion": "\n    match_obj = re.match(pattern, s)\n    if match_obj is not None:\n        return True\n    else:\n        return False", "task_id": 4203}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the longest substring which has all distinct characters in the given string.\n\"\"\"\n\ndef longest_substring_distinct_characters(string):\n", "finetuning_completion": "\n    max_len = 0\n    longest_substring = \"\"\n    for i in range(len(string)):\n        substring = \"\"\n        for j in range(i, len(string)):\n            char = string[j]\n            if char not in substring:\n                substring += char\n            else:\n                break\n        if len(substring) > max_len:\n            longest_substring = substring\n            max_len = len(substring)\n    return longest_substring", "task_id": 4206}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a string of words into a singluar word using regular expressions in Python.\n\"\"\"\n\nimport re\r\n\r\ndef singleWord(str):\n", "finetuning_completion": " \r\n    return re.sub(' +', '_', str)", "task_id": 4207}
{"finetuning_prompt": "\"\"\"\nGenerate a code that finds the maximum subarray sum of a given array using divide and conquer approach.\n\"\"\"\n\ndef find_MaxSubarraySum(A,low,high):\n", "finetuning_completion": " \r\n    if high == low: \r\n        return A[low] \r\n  \r\n    mid = (low + high)//2 \r\n  \r\n    left_sum = find_MaxSubarraySum(A, low, mid) \r\n    right_sum = find_MaxSubarraySum(A, mid + 1, high) \r\n    crossing_sum = findMaxCrossingSum(A, low, mid, high) \r\n  \r\n    return max(left_sum, right_sum, crossing_sum) \r\n  \r\ndef findMaxCrossingSum(A, low, mid, high): \r\n    left_sum = -999999999 \r\n    sum = 0\r\n    for i in range(mid, low - 1, -1): \r\n        sum += A[i] \r\n        if sum > left_sum: \r\n            left_sum = sum \r\n   \r\n    right_sum = -999999999 \r\n    sum = 0\r\n    for i in range(mid + 1, high + 1): \r\n        sum += A[i] \r\n        if sum > right_sum: \r\n            right_sum = sum \r\n  \r\n    return left_sum + right_sum", "task_id": 4210}
{"finetuning_prompt": "\"\"\"\nGenerate a program that takes a list of N numbers and returns a list of all the prime factors of the numbers.\n\"\"\"\n\ndef prime_Factors(num_List):\n", "finetuning_completion": " \r\n    result = set() \r\n    for num in num_List: \r\n        i = 2\r\n        while (i * i <= num): \r\n            if num % i == 0: \r\n                while (num % i == 0): \r\n                    if i not in result: \r\n                        result.add(i) \r\n                    num /= i \r\n                i += 1 \r\n      \r\n            else: \r\n                i += 1 \r\n      \r\n        if num > 1 and num not in result: \r\n            result.add(int(num)) \r\n      \r\n    return list(result)", "task_id": 4211}
{"finetuning_prompt": "\"\"\"\nWrite a function to find missing elements in a given range.\n\"\"\"\n\ndef findMissing(arr, start, end):\n", "finetuning_completion": "\n    missing = []\n    for num in range(start, end + 1):   \n        if num not in arr:\n            missing.append(num)\n    return missing", "task_id": 4213}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a dictionary of every word and its frequency in a given string.\n\"\"\"\n\ndef find_word_frequency(string):\n", "finetuning_completion": " \r\n    str_dict = {} \r\n    for word in string.split(): \r\n        if not word in str_dict: \r\n            str_dict[word] = 1\r\n        else:  \r\n            str_dict[word] += 1\r\n    return str_dict", "task_id": 4215}
{"finetuning_prompt": "\"\"\"\nDesign a code to find all numbers in a given range which are evenly divisible by a number n.\n\"\"\"\n\ndef get_divisible_numbers( n, start, end):\n", "finetuning_completion": " \r\n    # get the count of numbers \r\n    count = 0\r\n  \r\n    # iterate numbers in given range \r\n    for i in range(start, end + 1): \r\n          \r\n        # if remainder is 0 the number  \r\n        # is evenly divisible by n \r\n        if i % n == 0: \r\n            count += 1\r\n  \r\n    # return the number of evenly  \r\n    # divisible numbers \r\n    return count", "task_id": 4219}
{"finetuning_prompt": "\"\"\"\nCreate a new algorithm to search for an integer in a sorted array.\n\"\"\"\n\ndef search_in_array(search_arr, target):\n", "finetuning_completion": "\r\n    # edge cases\r\n    if len(search_arr) == 0 or (len(search_arr) == 1 and search_arr[0] != target):\r\n        return False\r\n    \r\n    # Initialize indexes \r\n    low = 0\r\n    high = len(search_arr)-1\r\n    \r\n    # Search\r\n    while low <= high:\r\n        mid = (low + high)//2\r\n        if search_arr[mid] == target:  # found the target\r\n            return True\r\n        elif search_arr[mid] < target:  # target in right part of array\r\n            low = mid+1\r\n        else:  # target in left part of array\r\n            high = mid-1\r\n     \r\n    return False  # target doesn't exist", "task_id": 4220}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the maximum sum path in two arrays.\n\"\"\"\n\ndef max_sum_path(arr1, arr2):\n", "finetuning_completion": "\r\n    i = j = 0\r\n    final_sum = 0\r\n    while i < len(arr1) and j < len(arr2):\r\n        sum1 = sum2 = 0\r\n        if arr1[i] > arr2[j]:\r\n            sum1 = arr1[i]\r\n            i += 1\r\n        elif arr1[i] < arr2[j]:\r\n            sum2 = arr2[j]\r\n            j += 1\r\n        else:\r\n            sum1 = arr1[i]\r\n            i += 1\r\n            sum2 = arr2[j]\r\n            j += 1\r\n        \r\n        final_sum += max(sum1, sum2)\r\n    while i < len(arr1):\r\n        final_sum += arr1[i]\r\n        i += 1\r\n    while j < len(arr2):\r\n        final_sum += arr2[j]\r\n        j += 1\r\n    return final_sum", "task_id": 4222}
{"finetuning_prompt": "\"\"\"\nCreate a program to compute the number of subarrays with a given sum.\n\"\"\"\n\ndef subarrays_sum(arr, target):\n", "finetuning_completion": "\n    psum=0\n    count = 0\n    dict = {}\n    for i in range(len(arr)):\n        psum += arr[i]\n        remain = psum - target\n        if remain == 0:\n            count += 1\n        if remain in dict.keys():\n            count += dict[remain]\n        if psum in dict.keys():\n            dict[psum] += 1\n        else:\n            dict[psum] = 1\n    return count", "task_id": 4223}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to classify data into simple categories where each sample belongs to one category.\n\"\"\"\n\ndef classifyData(data):\n", "finetuning_completion": "\n    categories = []\n    for item in data:\n        if item == 'cat' or item == 'dog':\n            categories.append('Mammal')\n        else:\n            categories.append('Not Mammal')\n    return categories", "task_id": 4226}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the location of duplicated elements in a list.\n\"\"\"\n\ndef find_duplicates(my_list):\n", "finetuning_completion": " \n  # create an empty list for the duplicated elements \n  duplicates = [] \n  \n  # loop through the elements in the list \n  for i in range(len(my_list)): \n      \n    # loop through the subsequent elements in the list \n    for j in range(i + 1, len(my_list)): \n        # if an element appears in multiple places in the list \n        if my_list[i] == my_list[j] and my_list[i] not in duplicates: \n            duplicates.append(my_list[i])\n\n  return duplicates", "task_id": 4236}
{"finetuning_prompt": "\"\"\"\nDesign a function to print the fibonacci series until Nth term.\n\"\"\"\n\ndef print_fibonacci_series(n):\n", "finetuning_completion": " \r\n    a = 0\r\n    b = 1\r\n    for i in range(n):\r\n        print(a)\r\n        c = a + b \r\n        a = b \r\n        b = c", "task_id": 4241}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the maximum value from the given list of length 8.\n\"\"\"\n\ndef max_val(my_list):\n", "finetuning_completion": "\n  return max(my_list)\n\nmax_val([42,9,32,6,8,7,25,33])", "task_id": 4243}
{"finetuning_prompt": "\"\"\"\nGenerate a program to capture the details of all uppercase letters in the given sentence.\n\"\"\"\n\nsentence = \"This is a test sentence.\"\n\ndef capt_uppercase(sentence):\n", "finetuning_completion": "\n    counts = {}\n    \n    for char in sentence:\n        if char.isupper():\n            if char in counts:\n                counts[char] += 1\n            else:\n                counts[char] = 1\n    \n    return counts\n\ncapt_uppercase(sentence)", "task_id": 4245}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate the following markup language for the given data.\n\"\"\"\n\ndef generate_markup(name, age):\n", "finetuning_completion": "\r\n  markup = \"<person>\\n\"\r\n  markup += \"    <name>\" + name + \"</name>\\n\"\r\n  markup += \"    <age>\" + str(age) + \"</age>\\n\"\r\n  markup += \"</person>\"\r\n  return markup", "task_id": 4248}
{"finetuning_prompt": "\"\"\"\nWrite a function that returns the number of occurrences of a specific word in a given text.\n\"\"\"\n\ndef count_words(text,word):\n", "finetuning_completion": "\r\n    words=text.split(\" \")\r\n    count = 0\r\n    for sentence in words:\r\n        if sentence == word:\r\n            count +=1\r\n    return count", "task_id": 4250}
{"finetuning_prompt": "\"\"\"\nGenerate a program to calculate the longest increasing subsequence in an unsorted array.\n\"\"\"\n\ndef longest_increasing_subsequence(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n  \r\n    # Initialize the result \r\n    lis = [1]*n \r\n  \r\n    # Compute optimized LIS values by considering \r\n    # all elements in the array at once \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    # Get the maximum of all lis value \r\n    return max(lis)", "task_id": 4259}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the longest increasing sub-sequence in an array of integers.\n\"\"\"\n\ndef LongestIncreasingSubsequence(arr):\n", "finetuning_completion": "\r\n    lis = [1 for each in arr]\r\n    for i in range(1, len(arr)):\r\n        for j in range(0, i):\r\n            if arr[i] > arr[j] and lis[i] < lis[j]+1:\r\n                lis[i] = lis[j]+1\r\n    return max(lis)", "task_id": 4271}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to check whether a string is a substring of another string or not.\n\"\"\"\n\ndef is_substring(str1, str2):\n", "finetuning_completion": "\n    if str2 in str1:\n        return True\n    else:\n        return False", "task_id": 4277}
{"finetuning_prompt": "\"\"\"\nGenerate a program to reverse each word in a string.\n\"\"\"\n\ndef reversestr(s):\n", "finetuning_completion": "\n    words = s.split(\" \")\n    rev_words = [word[::-1] for word in words]\n    rev_s = \" \".join(rev_words)\n    return rev_s", "task_id": 4280}
{"finetuning_prompt": "\"\"\"\nCreate a python program that counts the number of elements in each sublist of the given list.\n\"\"\"\n\ndef count_in_sublist(lists):\n", "finetuning_completion": "\n    count = [len(sublist) for sublist in lists]\n    return count", "task_id": 4281}
{"finetuning_prompt": "\"\"\"\nCreate a function \u201cclassify\u201d to predict the class of a given feature vector.\n\"\"\"\n\ndef classify(feature_vector):\n", "finetuning_completion": " \r\n    probability = 0 \r\n    if feature_vector[0] > 0.5: \r\n        probability += 0.2\r\n    if feature_vector[1] > 0.5: \r\n        probability += 0.3\r\n    if feature_vector[2] > 0.5: \r\n        probability += 0.5\r\n    if probability >= 0.5: \r\n        return 'Class A'\r\n    else: \r\n        return 'Class B'", "task_id": 4285}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove any duplicate items in a list.\n\"\"\"\n\ndef remove_duplicates(test_list):\n", "finetuning_completion": "\r\n  res = [] \r\n  for i in test_list: \r\n    if i not in res: \r\n      res.append(i) \r\n  \r\n  return res", "task_id": 4290}
{"finetuning_prompt": "\"\"\"\nGenerate a function to convert a numerical array to its corresponding hexadecimal representation.\n\"\"\"\n\ndef hex_conv(arr):\n", "finetuning_completion": " \n\thex_list = [] \n\tfor num in arr: \n\t\thex_list.append(hex(num)) \n\treturn hex_list", "task_id": 4296}
{"finetuning_prompt": "\"\"\"\nGenerate code to take two strings as arguments and find the longest common subsequence between them.\n\"\"\"\n\ndef lcs(str1,str2):\n", "finetuning_completion": "\n    lenstr1 = len(str1)+1\n    lenstr2 = len(str2)+1\n    lcsTable = [[0 for i in range(lenstr2)] for j in range(lenstr1)]\n    for i in range(1,lenstr1):\n        for j in range(1,lenstr2):\n            if str1[i-1] == str2[j-1]:\n                lcsTable[i][j] = lcsTable[i-1][j-1]+1\n            else:\n                lcsTable[i][j] = max(lcsTable[i-1][j],lcsTable[i][j-1])\n    return lcsTable[-1][-1]", "task_id": 4299}
{"finetuning_prompt": "\"\"\"\nDesign a program to encode a given message using Caesar cipher.\n\"\"\"\n\ndef caesar(s, offset):\n", "finetuning_completion": " \r\n    result = \"\" \r\n    for i in range(len(s)): \r\n        char = s[i] \r\n        if (char.isupper()): \r\n            result += chr((ord(char) + offset - 65) % 26 + 65) \r\n        else: \r\n            result += chr((ord(char) + offset - 97) % 26 + 97)\r\n    return result", "task_id": 4300}
{"finetuning_prompt": "\"\"\"\nDesign a algorithm to solve the Tower of Hanoi.\n\"\"\"\n\ndef TowerOfHanoi(n , from_rod, to_rod, aux_rod):\n", "finetuning_completion": " \r\n    if n == 1: \r\n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\r\n        return\r\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \r\n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \r\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)", "task_id": 4301}
{"finetuning_prompt": "\"\"\"\nWrite a function to take a string and return all of its substrings.\n\"\"\"\n\ndef find_substrings(string):\n", "finetuning_completion": "\r\n    results = []\r\n    for i in range(len(string)):\r\n        for j in range(i+1, len(string)+1):\r\n            results.append(string[i:j])\r\n    return results", "task_id": 4309}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a two dimensional array of integers and list its elements in reverse spiral order.\n\"\"\"\n\ndef reverse_spiral(arr):\n", "finetuning_completion": " \n  T = 0\n  B = len(arr)-1\n  L = 0\n  R = len(arr[0])-1\n  dir = 0\n  res = [] \n  \n  while T <= B and L <= R: \n    if dir == 0: \n      for i in range(L, R+1): \n        res.append(arr[T][i]) \n      T+=1\n      dir = 1\n    elif dir == 1: \n      for i in range(T, B+1): \n        res.append(arr[i][R]) \n      R-=1\n      dir = 2\n    elif dir == 2: \n      for i in range(R, L-1, -1): \n        res.append(arr[B][i]) \n      B-=1\n      dir = 3\n    elif dir == 3: \n      for i in range(B, T-1, -1): \n        res.append(arr[i][L]) \n      L+=1\n      dir = 0\n  return res", "task_id": 4312}
{"finetuning_prompt": "\"\"\"\nProduce a python code snippet to search in a list.\n\"\"\"\n\n# Function to search \ndef search(list, n):\n", "finetuning_completion": " \n  \n    for i in range(len(list)): \n        if list[i] == n: \n            return True\n    return False\n      \n# Driver Code \nlist = [2, 7, 12, 15, 25] \nn = 12\nif search(list, n): \n    print(\"Element found\") \nelse: \n    print(\"Element not found\")", "task_id": 4318}
{"finetuning_prompt": "\"\"\"\nCreate a function that eliminates the redundant elements from a given list.\n\"\"\"\n\ndef eliminate_redundancy(my_list):\n", "finetuning_completion": "\n    results = [] \n    for item in my_list: \n        if item not in results: \n            results.append(item) \n    return results", "task_id": 4319}
{"finetuning_prompt": "\"\"\"\nConvert an array of strings to an array of numbers.\n\"\"\"\n\ndef strings_to_numbers(my_strings):\n", "finetuning_completion": " \n    res = [] \n    for str_l in my_strings: \n        res.append(int(str_l)) \n    return res", "task_id": 4320}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the prime numbers from 0 to an N.\n\"\"\"\n\ndef primeNumbers(n):\n", "finetuning_completion": "  \n   for num in range(2, n + 1): \n       for i in range(2, num): \n           if num % i == 0: \n               break\n       else: \n           print (num)", "task_id": 4323}
{"finetuning_prompt": "\"\"\"\nWrite a logarithmic cost algorithm for finding the maximum profit.\n\"\"\"\n\ndef maxProfitAlgorithm(prices):\n", "finetuning_completion": " \n    n = len(prices) \r\n    if (n == 0): \r\n        return 0\r\n    profit = [0] * n \r\n    max_price = prices[n - 1] \r\n\r\n    for i in range( n-2, -1, -1): \r\n        if (prices[i] >= max_price): \r\n            max_price = prices[i] \r\n        profit[i] = max(profit[i + 1], max_price - prices[i]) \r\n\r\n    result = profit[0] \r\n    for i in range(1, n): \r\n        result += pow(2, i) * profit[i] \r\n  \r\n    return result", "task_id": 4329}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes the length of the sides of a triangle as input and outputs its area.\n\"\"\"\n\ndef calculateArea(length1, length2, length3):\n", "finetuning_completion": "\r\n  # calculate the semi-perimeter\r\n  s = (length1 + length2 + length3)/2\r\n  #calculate area \r\n  area = (s*(s-length1)*(s-length2)*(s-length3)) ** 0.5\r\n  return area", "task_id": 4331}
{"finetuning_prompt": "\"\"\"\nGenerate a function to print the numbers in the given range that are even and have prime factors only less than or equal to n.\n\"\"\"\n\ndef printPrimeFactors(lower, upper, n):\n", "finetuning_completion": " \r\n\r\n    for num in range(lower, upper + 1):\r\n        if num % 2 == 0: \r\n            \r\n            flag = True\r\n\r\n            if num == 2: \r\n                print(num, end = \" \") \r\n            else: \r\n                for i in range(2, n): \r\n                    if num % i == 0: \r\n                        flag = False\r\n                        break\r\n                    \r\n                if flag == True: \r\n                    print(num, end = \" \")", "task_id": 4333}
{"finetuning_prompt": "\"\"\"\nCreate a program to determine a given number is Armstrong number or not, without using a string conversion.\n\"\"\"\n\ndef checkArmstrongNumber(n):\n", "finetuning_completion": " \r\n    t = n\r\n    s = 0 \r\n    while (t > 0): \r\n        digit = t % 10\r\n        s = s + digit**3\r\n        t = t//10\r\n    return s == n", "task_id": 4338}
{"finetuning_prompt": "\"\"\"\nRearrange the given list so that the odd numbers are before even numbers.\n\"\"\"\n\ndef rearrange_list(l):\n", "finetuning_completion": "\r\n    even_num = []\r\n    odd_num = []\r\n    for n in l:\r\n        if n % 2 == 0:\r\n            even_num.append(n)\r\n        else:\r\n            odd_num.append(n)\r\n    \r\n    return odd_num + even_num", "task_id": 4344}
{"finetuning_prompt": "\"\"\"\nCalculate the sum of a specific column in a matrix.\n\"\"\"\n\ndef sum_column(matrix, column):\n", "finetuning_completion": "\n    s = 0\n    for row in matrix:\n        s += row[column]\n    return s", "task_id": 4345}
{"finetuning_prompt": "\"\"\"\nWrite a function to identify the type of an operator with a given symbol.\n\"\"\"\n\ndef find_operator_type(operator):\n", "finetuning_completion": " \n    if operator == '+': \n        return 'Addition'\n    elif operator == '-': \n        return 'Subtraction'\n    elif operator == '*': \n        return 'Multiplication'\n    elif operator == '/': \n        return 'Division'\n    elif operator == '//': \n        return 'Floor Division'\n    elif operator == '**': \n        return 'Exponentiation'\n    elif operator == '%': \n        return 'Modulo'", "task_id": 4364}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to sort the array with minimum swaps.\n\"\"\"\n\ndef min_swaps(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n  \r\n    # Create two arrays and use as pairs where first \r\n    # array is element and second array is position of first element \r\n    arrpos = [*enumerate(arr)] \r\n  \r\n    # Sort the array by array element values to get right position of \r\n    # every element as the elements of second array. \r\n    arrpos.sort(key = lambda it:it[1]) \r\n  \r\n    # To keep track of visited elements. Initialize all elements \r\n    # as not visited or false. \r\n    vis = {k:False for k in range(n)} \r\n  \r\n    # Initialize result \r\n    ans = 0\r\n    for i in range(n): \r\n  \r\n        # already swapped or \r\n        # already present at correct positin \r\n        if vis[i] or arrpos[i][0] == i: \r\n            continue\r\n          \r\n        # find number of nodes in \r\n        # this cycle and add it to ans \r\n        cycle_size = 0\r\n        j = i \r\n        while (not vis[j]): \r\n  \r\n            # mark node as visited \r\n            vis[j] = True\r\n  \r\n            # move to next node \r\n            j = arrpos[j][0] \r\n            cycle_size += 1\r\n  \r\n        # update answer by adding current cycle \r\n        if (cycle_size > 0): \r\n            ans += (cycle_size - 1) \r\n    # return answer \r\n    return ans", "task_id": 4372}
{"finetuning_prompt": "\"\"\"\nCreate a system to process and encrypt a set of data points.\n\"\"\"\n\ndef encryptData(data):\n", "finetuning_completion": "\n    cipher = \"\"\n    for item in data:\n        ciphertext = \"\"\n        for letter in item:\n            ciphertext += chr(ord(letter)+1)\n        cipher += ciphertext\n    return cipher", "task_id": 4383}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to identify the first unique character in a given string.\n\"\"\"\n\ndef first_unique_char(string):\n", "finetuning_completion": "\r\n    # the dictionary will keep track of character frequencies\r\n    freq = {}\r\n    \r\n    # loop through each character in the string\r\n    for char in string:\r\n        # check if char is already in the dictionary\r\n        if char in freq:\r\n            # if it is, increment the frequency\r\n            freq[char] += 1\r\n        else:\r\n            # otherwise, set the frequency to 1\r\n            freq[char] = 1\r\n            \r\n    # loop through each character in the string\r\n    for char in string:\r\n        # check if the character is unique\r\n        if freq[char] == 1:\r\n            # if it is unique, return the character\r\n            return char\n    \r\n    # if no unique characters found, return None\r\n    return None", "task_id": 4391}
{"finetuning_prompt": "\"\"\"\nImplement method to convert a given string to camel case.\n\"\"\"\n\ndef camel_case(string):\n", "finetuning_completion": "\r\n    # split the string on white spaces\r\n    strings = string.split(\" \")\r\n    # set the first item to lower case\r\n    strings[0] = strings[0].lower()\r\n    # loop through the rest of the items\r\n    for i in range(1, len(strings)):\r\n        # set item to title case and replace first letter\r\n        strings[i] = strings[i].capitalize()\r\n    # join the list with no white space\r\n    return \"\".join(strings)", "task_id": 4392}
{"finetuning_prompt": "\"\"\"\nCreate a program to format the given output.\n\"\"\"\n\n#formating the output \ndef format_output(input):\n", "finetuning_completion": " \n    \n    output = \"\"\n    for idx, val in enumerate(input):\n        if idx % 2 == 0: \n            output += (val.upper()) \n\t  \n        else: \n            output += (val.lower()) \n    \n    return output \n\t\n#input \r\ninput = \"HelloWorld\"\n\n#calling the function \r\nresult = format_output(input) \n\n#printing output\nprint(\"Formatted output:\", result)", "task_id": 4402}
{"finetuning_prompt": "\"\"\"\nFind a way to reduce the given code by 50%.\n\"\"\"\n\ndef func(x):\n", "finetuning_completion": " \n    \n    x *= 3 # x = x * 2 + 5 - 4 in one statement \n    return x", "task_id": 4403}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to check if the parentheses in an expression are balanced or not.\n\"\"\"\n\ndef checkParentheses(expr):\n", "finetuning_completion": " \n    stack = [] \n    for char in expr: \n        if char in [\"(\", \"{\", \"[\"]: \n            stack.append(char) \n        else: \n            if not stack: \n                return False\n            current_char = stack.pop() \n            if char == \")\": \n                if current_char != \"(\": \n                    return False\n            if char == \"}\": \n                if current_char != \"{\": \n                    return False\n            characters = \"]\"\n            if char == \"]\": \n                if current_char != \"[\": \n                    return False\n    return not stack", "task_id": 4425}
{"finetuning_prompt": "\"\"\"\nGenerate code to sort a dictionary by keys in ascending order.\n\"\"\"\n\ndef sort_dictionary(d):\n", "finetuning_completion": " \r\n    return {k: v for k, v in sorted(d.items(), key = lambda item: item[0])}", "task_id": 4438}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to filter out the elements of a list which have odd indices.\n\"\"\"\n\ndef filter_odd_indices(my_list):\n", "finetuning_completion": " \r\n    odd_elements = [] \r\n  \r\n    for i in range(0, len(my_list)): \r\n        if i % 2 != 0: \r\n            odd_elements.append(my_list[i]) \r\n    return odd_elements", "task_id": 4440}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the number of full binary tree with n nodes.\n\"\"\"\n\ndef countFullTrees(n):\n", "finetuning_completion": " \r\n    if (n==0 or n==1): \r\n        return 1\r\n  \r\n    ans = 0\r\n    for i in range(1,n+1): \r\n        ans += (countFullTrees(i-1) *\r\n                countFullTrees(n-i)) \r\n    return ans", "task_id": 4451}
{"finetuning_prompt": "\"\"\"\nDevelop a function to generate Fibonacci numbers upto a specified limit.\n\"\"\"\n\ndef fibonacci_numbers_limit(limit):\n", "finetuning_completion": " \r\n    series = [0, 1] \r\n    while series[-1] < limit: \r\n        series.append(series[-2] + series[-1]) \r\n    return series[:-1]", "task_id": 4453}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert a palindromic number to string.\n\"\"\"\n\ndef palindrome_to_string(n):\n", "finetuning_completion": " \r\n  str1 = \"\" \n  while (n > 0): \r\n    str1 = str1 + str(n % 10) \r\n    n = int(n / 10) \r\n  return str1", "task_id": 4455}
{"finetuning_prompt": "\"\"\"\nCode an algorithm to print the combination of given numbers without repetition.\n\"\"\"\n\ndef combinations_without_repetition(numbers):\n", "finetuning_completion": " \n    combination_list = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)): \r\n            combination_list.append((numbers[i], numbers[j])) \n  \n    return combination_list", "task_id": 4457}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the length of the longest increasing subsequence.\n\"\"\"\n\ndef longest_increasing_subsequence(arr):\n", "finetuning_completion": " \n    n = len(arr) \n    lis = [1]*n \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n    maximum = 0\r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i])  \r\n  \r\n    return maximum", "task_id": 4459}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the indices of elements which have maximum absolute difference with its neighbor element in a given array.\n\"\"\"\n\ndef find_Max_Diff_Elems(arr):\n", "finetuning_completion": " \n    max_Diff_Index = [0] * (len(arr)-1) \n    max_diff = 0 \n    for i in range(len(arr)-1): \n        if max_diff < abs(arr[i+1] - arr[i]): \n            max_diff = abs(arr[i+1] - arr[i]) \n            max_Diff_Index[i] = i \n        else: \n            max_Diff_Index[i] = -1\n    return max_Diff_Index", "task_id": 4463}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two numbers x and y as input and returns their greatest common factor.\n\"\"\"\n\ndef gcd(x, y):\n", "finetuning_completion": " \n  \n   while(y): \n       x, y = y, x % y \n       \n   return x", "task_id": 4467}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a list of prime numbers up to the given limit.\n\"\"\"\n\ndef generate_PrimeNumbers(limit):\n", "finetuning_completion": " \n    primeList = [] \n    for num in range(2, limit+1): \n        prime = True\n        for j in range(2, num): \n            if (num % j == 0): \n                prime = False\n        if prime: \n            primeList.append(num) \n\n    return primeList", "task_id": 4468}
{"finetuning_prompt": "\"\"\"\nFind the missing numbers in the continuous range.\n\"\"\"\n\ndef missing_numbers(nums):\n", "finetuning_completion": "\r\n  iter_range = [x for x in range(nums[0], nums[-1]+1)]\r\n  return [x for x in iter_range if x not in nums]\n\n# Output: [4,5,6,9]", "task_id": 4472}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to calculate the median of a given array of numbers.\n\"\"\"\n\ndef calculate_median(nums):\n", "finetuning_completion": " \r\n    nums.sort() \r\n    n = len(nums) \r\n    if n % 2 == 0: \r\n        median = (nums[(n-1)//2] + nums[n//2])/2 \r\n    else: \r\n        median = nums[n//2] \r\n    return median \r\n\r\n# Output: 6.0", "task_id": 4477}
{"finetuning_prompt": "\"\"\"\nReverse the order of the given array of strings.\n\"\"\"\n\ndef reverseArray(arr):\n", "finetuning_completion": " \r\n    arr.reverse() \r\n    return arr \r\n\r\n# Output: ['Cricket', 'Tennis', 'Badminton', 'Basketball']", "task_id": 4479}
{"finetuning_prompt": "\"\"\"\nWrite a function using a Stack data structure to test if a parenthesis expression is balanced or not.\n\"\"\"\n\ndef is_balanced(exp):\n", "finetuning_completion": " \r\n    stack = [] \r\n  \r\n    # Traverse the expression \r\n    for char in exp: \r\n        if char in [\"(\", \"{\", \"[\"]: \r\n            # Push the element in the stack \r\n            stack.append(char) \r\n        else: \r\n            # IF current character is not opening \r\n            # bracket, then it must be closing. \r\n            # So stack cannot be empty at this point. \r\n            if not stack: \r\n                return False\r\n            current_char = stack.pop() \r\n            if current_char == '(': \r\n                if char != \")\": \r\n                    return False\r\n            if current_char == '{': \r\n                if char != \"}\": \r\n                    return False\r\n            if current_char == '[': \r\n                if char != \"]\": \r\n                    return False\r\n\r\n    # Check Empty Stack \r\n    if stack: \r\n        return False\r\n    return True", "task_id": 4483}
{"finetuning_prompt": "\"\"\"\nCreate a python script to extract first names from a dataset of emails.\n\"\"\"\n\nimport re\r\n\r\ndef extract_names(emails):\n", "finetuning_completion": "\r\n    names = []\r\n    for email in emails:\r\n        match = re.search(\"[\\w\\.-]+@[\\w\\.-]+\", email)\r\n        name = match.group(0).split(\"@\")[0]\r\n        names.append(name)\r\n    return names", "task_id": 4484}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to find the probability of selecting a red ball from a given basket.\n\"\"\"\n\ndef find_probability(basket):\n", "finetuning_completion": "\n    # Get the total number of balls in the basket\n    num_of_balls = sum(basket)\n    # Calculate the probability of picking a red ball\n    red_prob = basket[0]/num_of_balls\n    \n    return red_prob", "task_id": 4486}
{"finetuning_prompt": "\"\"\"\nWrite a script to split an array into two equal arrays.\n\"\"\"\n\ndef split_list(list_input):\n", "finetuning_completion": " \n  \n    size = len(list_input) //2\n    return list_input[:size], list_input[size:] \n \nlist_input = [1, 2, 3, 4, 5, 6] \nlist1, list2 = split_list(list_input) \nprint(\"List1: \", list1) \nprint(\"List2: \", list2)", "task_id": 4487}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a given list of string representations of binary numbers into the corresponding list of integers.\n\"\"\"\n\ndef binary_list_to_int(list):\n", "finetuning_completion": "\n    output = []\n    for x in list:\n        output.append(int(x,2))\n    return output", "task_id": 4493}
{"finetuning_prompt": "\"\"\"\nWrite a function that finds all the palindromic strings in a given list of strings.\n\"\"\"\n\ndef find_palindromes(l):\n", "finetuning_completion": " \r\n    result = [] \r\n    for s in l: \r\n        if s == s[::-1]:  # Check if the string equal to its reverse\r\n            result.append(s) \r\n    return result \r\nfind_palindromes(['abcba', 'abc', 'abccba', 'ab']) # ['abcba', 'abccba']", "task_id": 4500}
{"finetuning_prompt": "\"\"\"\nWrite a function to count the number of times each vowel has been used in a given string.\n\"\"\"\n\ndef count_vowels(string):\n", "finetuning_completion": "\r\n  string = string.lower()\r\n  count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\r\n  for char in string:          \r\n    if char in count: \r\n      count[char] += 1\r\n  return count", "task_id": 4502}
{"finetuning_prompt": "\"\"\"\nGenerate a list of numbers with all combinations of three numbers from a given list.\n\"\"\"\n\nimport itertools\r\ndef generate_combinations(lst):\n", "finetuning_completion": "\r\n  combinations = list(itertools.combinations(lst,3))\r\n  return combinations", "task_id": 4505}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find the elements of a given set which are not present in another set.\n\"\"\"\n\ndef find_diff_elements(set1, set2):\n", "finetuning_completion": "\n    return set1.difference(set2)", "task_id": 4509}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify numbers that are perfect squares.\n\"\"\"\n\ndef perfect_sq(n):\n", "finetuning_completion": " \n    sqrt = int(math.sqrt(n)) \n    if (sqrt * sqrt == n): \n        return True \n    else: \n        return False", "task_id": 4510}
{"finetuning_prompt": "\"\"\"\nEdit the given code to switch the case of the alphabets in a given string.\n\"\"\"\n\ndef switch_case(string):\n", "finetuning_completion": " \r\n    newString = \"\" \r\n  \r\n    for character in string: \r\n        if character.islower(): \r\n            newString += character.upper() \r\n        else: \r\n            newString += character.lower() \r\n    return newString \r\n  \r\nstring = \"Hello World\"\r\n\r\nconvertedString = switch_case(string)\r\n\r\nprint(\"The converted string is:\", convertedString)", "task_id": 4513}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the maximum contigous subarray from the given array.\n\"\"\"\n\ndef max_Contigous_Subarray(arr):\n", "finetuning_completion": " \r\n    Cmax = 0\r\n    sum = 0 \r\n    for i in range(0, len(arr)): \r\n        sum+= arr[i] \r\n        if Cmax < sum: \r\n            Cmax = sum \r\n        if sum < 0: \r\n            sum = 0 \r\n    return Cmax \narr = [2, -4, -1, 3, -2, 5] \nprint (\"Maximum contigous subarray is :\",max_Contigous_Subarray(arr))", "task_id": 4521}
{"finetuning_prompt": "\"\"\"\nWrite a python program to classify the given text into positive or negative sentiment.\n\"\"\"\n\ndef sentiment_classification(text):\n", "finetuning_completion": " \r\n    pos_words = [\"great\", \"amazing\", \"fantastic\", \"awesome\"]\r\n    neg_words = [\"bad\", \"terrible\", \"horrible\", \"trash\"]  \r\n    for word in text.split(): \r\n        if word in pos_words: \r\n            return \"positive\"; \r\n        elif word in neg_words: \r\n            return \"negative\"; \r\n    return \"neutral\"\r\n  \r\ntext = \"this is a great product\" \r\nprint (\"Sentiment of the text is :\",sentiment_classification(text))", "task_id": 4523}
{"finetuning_prompt": "\"\"\"\nWrite a code to remove all elements from a list of strings that have length less than 3.\n\"\"\"\n\ndef remove_strings(string_list):\n", "finetuning_completion": " \r\n    new_list = [] \r\n    for str in string_list: \r\n        if len(str) >= 3: \r\n            new_list.append(str) \r\n    return new_list \r\nstring_list = [\"the\", \"cat\", \"was\", \"blue\", \"an\", \"apple\"] \r\nresult = remove_strings(string_list) \r\nprint(result)", "task_id": 4551}
{"finetuning_prompt": "\"\"\"\nWrite a function to encrypt an array of single words using Caesar cipher.\n\"\"\"\n\ndef caesar_encrypt(arr, key):\n", "finetuning_completion": "\r\n    result = []\r\n    for word in arr:\r\n        word_encrypted = ''\r\n        for letter in word:        \r\n            code = ord(letter) + key\r\n            if code > ord('z'):\r\n                code = ord('a') + (code - ord('z')) - 1\r\n            word_encrypted += chr(code)\r\n        result.append(word_encrypted)\r\n    return result", "task_id": 4560}
{"finetuning_prompt": "\"\"\"\nClassify a given text as spam or ham.\n\"\"\"\n\ndef classify(text):\n", "finetuning_completion": "\r\n    if \"50%\" in text:\r\n        return \"spam\"\r\n    else:\r\n        return \"ham\"", "task_id": 4561}
{"finetuning_prompt": "\"\"\"\nGenerate a code to check if a list of numbers is a palindrome.\n\"\"\"\n\ndef is_palindrome(numbers):\n", "finetuning_completion": "\r\n    if len(numbers) <=1:  \r\n        return True  \r\n    else:  \r\n        return numbers[0] == numbers[len(numbers)-1] and is_palindrome(numbers[1:len(numbers)-1])", "task_id": 4562}
{"finetuning_prompt": "\"\"\"\nCreate a function to make a table in HTML.\n\"\"\"\n\ndef make_table(data):\n", "finetuning_completion": "\r\n    html_code = \"<table>\"\r\n    for row in data:\r\n        html_code += \"<tr>\"\r\n        for col in row:\r\n            html_code += \"<td>\"+col+\"</td>\"\r\n        html_code += \"</tr>\"\r\n    html_code += \"</table>\"\r\n    return html_code", "task_id": 4563}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the letter position in the alphabet for a given input letter.\n\"\"\"\n\ndef getAlphaPosition(letter):\n", "finetuning_completion": " \r\n    letter = letter.upper() \r\n    \r\n    alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \r\n    index = alpha.index(letter) \r\n    return index + 1", "task_id": 4568}
{"finetuning_prompt": "\"\"\"\nCreate a program to edit a text to remove all occurrence of a given word.\n\"\"\"\n\ndef remove_word(text,word):\n", "finetuning_completion": "\r\n    words = text.split()\r\n    new_text = [i for i in words if i != word]\r\n    return \" \".join(new_text)", "task_id": 4581}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm for detecting outliers in a given dataset.\n\"\"\"\n\ndef detect_outliers(data):\n", "finetuning_completion": " \r\n\r\n\t# define variables\r\n\toutliers = [] \r\n\tthreshold = 3\r\n\r\n\t# calculate the mean and standard deviation of the data\r\n\tmean = np.mean(data) \r\n\tstd = np.std(data) \r\n\r\n\t# iterate through the dataset \r\n\tfor i in range(len(data)): \r\n\t\tz_score = (data[i] - mean) / std\r\n\r\n\t\t# if the z-score is more than the threshold \r\n\t\t# mark it as an outlier \r\n\t\tif np.abs(z_score) > threshold: \r\n\t\t\toutliers.append(data[i]) \r\n\t\t\t\t\r\n\treturn outliers", "task_id": 4586}
{"finetuning_prompt": "\"\"\"\nWrite a function to compare the two given strings and find the longest common subsequence.\n\"\"\"\n\ndef longest_common_subsequence(str1, str2):\n", "finetuning_completion": "\n    result = \"\" \n    str1_len = len(str1) \n    str2_len = len(str2) \n  \n    matrix = [[0 for i in range(str1_len + 1)]  \n                  for j in range(str2_len + 1)] \n  \n    for i in range(str2_len + 1): \n        for j in range(str1_len + 1): \n            if i == 0 or j == 0: \n                matrix[i][j] = 0\n            elif str1[j - 1] == str2[i - 1]: \n                matrix[i][j] = matrix[i - 1][j - 1]+ 1\n            else: \n                matrix[i][j] = max(matrix[i - 1][j],  \n                                   matrix[i][j - 1]) \n  \n    maxlength = matrix[str2_len][str1_len] \n    j = str1_len \n    i = str2_len \n    \n    while i > 0 and j > 0: \n  \n        if str1[j - 1] == str2[i - 1]: \n            result = result + str1[j - 1] \n            i -= 1\n            j -= 1\n  \n        elif matrix[i - 1][j] > matrix[i][j - 1]: \n            i -= 1\n  \n        else: \n            j -= 1\n  \n    return maxlength, result[::-1]", "task_id": 4588}
{"finetuning_prompt": "\"\"\"\nMake a function in Python which takes a string input and returns a list of unique characters from the string.\n\"\"\"\n\ndef unique_characters(s):\n", "finetuning_completion": "\n    seen = set()\n    result = []\n    for c in s:\n        if c not in seen:\n            result.append(c)\n            seen.add(c)\n    return result", "task_id": 4590}
{"finetuning_prompt": "\"\"\"\nWrite a function which creates a set with the given array, and then returns a new set with the elements which are not present in the given set.\n\"\"\"\n\ndef complement_set(given_set):\n", "finetuning_completion": "\n    s = set(given_set)\n    all_set = set(range(min(s), max(s) + 1))\n    return all_set.difference(s)", "task_id": 4592}
{"finetuning_prompt": "\"\"\"\nGenerate a Python algorithm that prints the longest increasing sequence of a given array.\n\"\"\"\n\ndef longest_increase_sequence(array):\n", "finetuning_completion": "\n    length = len(array)\n    sequence = [1 for i in range(length)]\n    \n    for i in range(1, length):\n        if array[i] > array[i-1]:\n            sequence[i] = sequence[i-1] + 1\n            \n    max_val = -1\n    max_index = -1\n    for i in range(length):\n        if sequence[i] > max_val:\n            max_val = sequence[i]\n            max_index = i\n    \n    result = []\n    while max_val > 0:\n        result.append(array[max_index])\n        max_index -= 1\n        max_val -= 1\n    result.reverse()\n    return result", "task_id": 4594}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find out whether all the items in a given list are of the same type or not.\n\"\"\"\n\ndef check_same_type(lst):\n", "finetuning_completion": "\n    if len(set([type(x) for x in lst])) == 1:\n        return True\n    else:\n        return False", "task_id": 4596}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove the last occurrence of a keyword from the given string.\n\"\"\"\n\ndef remove_last_occurrence(input_string,keyword):\n", "finetuning_completion": " \n    n = len(input_string) \n    x = -1\n\t\n    # find last occurrence of keyword \n    for i in range (n-1,-1,-1): \n        if input_string[i] == keyword: \n            x = i \n            break\n\t\n    # If the keyword doesn't exist,  \n    # return original string \n    if x == -1: \n        return input_string \n\t\n    # Remove the keyword \n    new_str = input_string[:x] + input_string[x+1:] \n    return new_str", "task_id": 4600}
{"finetuning_prompt": "\"\"\"\nConstruct a function that displays the multiplication table for any integer\n\"\"\"\n\ndef multiplication_table(n):\n", "finetuning_completion": " \n    for i in range(1, 11): \n        print(n, 'x', i, '=', n*i)", "task_id": 4603}
{"finetuning_prompt": "\"\"\"\nMake a Python function to compute the total number of possible binary tree structures for a given number of nodes.\n\"\"\"\n\ndef num_structures(n):\n", "finetuning_completion": " \r\n    # Base Case \r\n    if n == 0: \r\n        return 1\r\n  \r\n    # Recursion Formula \r\n    total = 0\r\n    root = 1\r\n    while (root<=n): \r\n        left_subtree_size = root - 1\r\n        right_subtree_size = n - root \r\n          \r\n        # Number of possible left and right subtrees given \r\n        # the subtree sizes \r\n        left_subtree_structures = num_structures(left_subtree_size) \r\n        right_subtree_structures = num_structures(right_subtree_size) \r\n        \r\n        # Total number of possible binary tree structure \r\n        # is the product of the number of left and right \r\n        # subtree structures \r\n        total += left_subtree_structures * right_subtree_structures \r\n  \r\n        root+=1\r\n    return total", "task_id": 4605}
{"finetuning_prompt": "\"\"\"\nCreate a function to implement polymorphism on an array of integers.\n\"\"\"\n\ndef poly(arr):\n", "finetuning_completion": " \n    result = 1\n    for x in arr: \n        result = result * x \n    return result", "task_id": 4606}
{"finetuning_prompt": "\"\"\"\nDevelop a code to pull out the pairwise distinct combinations of two lists.\n\"\"\"\n\ndef pairwise_distinct(list1, list2):\n", "finetuning_completion": " \n\t\n\tres = [] \n\tfor i in range(len(list1)): \n\t\tfor j in range(len(list2)): \n\t\t\tif list1[i] != list2[j]: \n\t\t\t\tres.append([list1[i], list2[j]]) \n\n\treturn res", "task_id": 4608}
{"finetuning_prompt": "\"\"\"\nCreate an API which calculates the resulting list length and the final scores after subtracting two lists.\n\"\"\"\n\nimport json\r\n\r\ndef subtract_lists(list1,list2):\n", "finetuning_completion": "\r\n    new_list=[]\r\n    for i in range(0,len(list1)):\r\n        new_list.append(list1[i]-list2[i])\r\n\r\n    final_score=sum(new_list)\r\n\r\n    json_data = json.dumps({\r\n        \"length\": len(new_list),\r\n        \"final_score\": final_score\r\n    })\r\n\r\n    return json_data", "task_id": 4620}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes a list of numbers and a given value as input and finds the two numbers from the list which add up to the given value.\n\"\"\"\n\ndef two_sum(list, target):\n", "finetuning_completion": "\r\n\r\n    for i in range(len(list)):\r\n        for j in range(i+1, len(list)):\r\n            if list[i] + list[j] == target:\r\n                return (list[i],list[j])\r\n    return None", "task_id": 4621}
{"finetuning_prompt": "\"\"\"\nGiven two strings, write a function that returns True if one of the strings is a rotation of the other and False otherwise\n\"\"\"\n\ndef isRotation(str1, str2):\n", "finetuning_completion": " \n    if(len(str1) != len(str2)): \n        return False\n\n    temp = str1 + str1 \n    return (temp.find(str2) != -1) \n\n# returns True", "task_id": 4631}
{"finetuning_prompt": "\"\"\"\nModify the given program to find the number of factors of a number.\n\"\"\"\n\nimport math \r\n  \r\n# function to count factors \r\ndef CountFactors(n) :\n", "finetuning_completion": " \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \r\n        if (n % i == 0) : \r\n            if (n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    return count", "task_id": 4632}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the smallest possible value of N for which N! is greater than or equal to 10^6.\n\"\"\"\n\nimport math \r\n  \r\n# return the smallest number whose factorial is greater than \r\n# or equal to 10^6 \r\ndef smallestNum(n):\n", "finetuning_completion": " \r\n  \r\n    # Initialize the result \r\n    res = 0\r\n  \r\n    # loop to calculate the smallest number whose factorial \r\n    # is greater than or equal to 10^6 \r\n    while (math.factorial(res) < n): \r\n        res+=1\r\n  \r\n    return res \r\n  \r\nn = 10**6\r\nprint(smallestNum(n)) \r\n\r\n# Output: 19", "task_id": 4634}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to detect whether a student has passed a course.\n\"\"\"\n\ndef is_Passed(marks, passing_score):\n", "finetuning_completion": "\n    for score in marks:\n        if score < passing_score:\n            return False\n    return True", "task_id": 4636}
{"finetuning_prompt": "\"\"\"\nCreate a program to sort students records by their name using Insertion sort.\n\"\"\"\n\ndef insertionSort(records):\n", "finetuning_completion": " \n  \n    # Traverse through 1 to len(arr) \r\n    for i in range(1, len(records)): \r\n  \r\n        key = records[i] \r\n  \r\n        # Move elements of records[0..i-1], that are \r\n        # greater than key, to one position ahead \r\n        # of their current position \r\n        j = i-1\r\n        while j >= 0 and key[0] < records[j][0] : \r\n                records[j + 1] = records[j] \r\n                j -= 1\r\n        records[j + 1] = key \r\n  \r\n    return records", "task_id": 4651}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the number of trailing zeros of an integer\u2019s factorial.\n\"\"\"\n\ndef findTrailingZeros(n):\n", "finetuning_completion": "  \r\n  \r\n    # Initialize result \r\n    count = 0\r\n  \r\n    # Keep dividing n by powers  \r\n    # of 5 and update count \r\n    i=5\r\n    while (n/i>=1): \r\n        count += int(n/i) \r\n        i *= 5\r\n  \r\n    return int(count)", "task_id": 4652}
{"finetuning_prompt": "\"\"\"\nWrite a python code to convert a lists into strings.\n\"\"\"\n\ndef listToString(s):\n", "finetuning_completion": " \n    str1 = \" \" \n    return (str1.join(s))", "task_id": 4653}
{"finetuning_prompt": "\"\"\"\nWrite a Program to get the largest of three numbers.\n\"\"\"\n\ndef get_largest_number(num1, num2, num3):\n", "finetuning_completion": "\r\n  largest = max(num1, num2, num3)\r\n  return largest\r\n\r\n# Driver code \r\nnum1 = 47\r\nnum2 = 3\r\nnum3 = 23\r\n\r\nprint(\"The largest number is: \" + str(get_largest_number(num1, num2, num3)))", "task_id": 4655}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm for calculating the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\r\n  if n == 0:\r\n    return 1\r\n  else:\r\n    return n*factorial(n-1)", "task_id": 4659}
{"finetuning_prompt": "\"\"\"\nDevelop a code to determine the longest common subsequence between two strings.\n\"\"\"\n\ndef longest_common_subsequence(string1, string2):\n", "finetuning_completion": " \n    # set the length of the strings\n    m = len(string1) \n    n = len(string2)\n    # set the value of the matrix to 0\n    lcs_matrix = [[0] * (n+1) for i in range(m+1)] \n    # loop through the strings\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            # check if the characters are equal\n            if string1[i-1] == string2[j-1]: \n                lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n            # check if the characters are not equal\n            else: \n                lcs_matrix[i][j] = max(lcs_matrix[i-1][j], \n                                       lcs_matrix[i][j-1]) \n    # Get the longest common subsequence\n    index = lcs_matrix[m][n] \n    result = [\"\"] * (index+1) \n    result[index] = \"\"\n    # save the LCS into the result\n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if string1[i-1] == string2[j-1]: \n            result[index] = string1[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif lcs_matrix[i-1][j] > lcs_matrix[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    # return the result\n    return \"\".join(result)", "task_id": 4663}
{"finetuning_prompt": "\"\"\"\nGenerate a function to add all odd numbers of a given list.\n\"\"\"\n\ndef add_odds(lst):\n", "finetuning_completion": "\n  odds = list(filter(lambda x: x % 2 != 0, lst))\n  return sum(odds)", "task_id": 4664}
{"finetuning_prompt": "\"\"\"\nCreate a python script to find the suface area of cuboid with a given length, breadth, and height.\n\"\"\"\n\ndef surface_Area_Cuboid(l,b,h):\n", "finetuning_completion": " \r\n    if (l<0 or b<0 or h<0) : \r\n        return -1\r\n    Area1 = 2*l*b \r\n    Area2 = 2*b*h \r\n    Area3 = 2*h*l \r\n    return Area1 + Area2 + Area3 \r\n \r\nlength = 20 \r\nbreadth = 10 \r\nheight = 5 \r\nprint(\"The surface Area of cuboid is : \", \r\n        surface_Area_Cuboid(length, breadth, height))", "task_id": 4674}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes in a string and capitalizes the first letter of each word.\n\"\"\"\n\ndef capitalize(str):\n", "finetuning_completion": " \r\n    words = str.split(\" \")  \r\n    sentence = [] \r\n    for word in words: \r\n        sentence.append(word.capitalize()) \r\n    return ' '.join(sentence) \r\n  \r\n# Driver Code \r\nstring = \"hello world\"\r\nprint(capitalize(string))", "task_id": 4677}
{"finetuning_prompt": "\"\"\"\nGenerate a program which checks whether a given number is a perfect square number or not.\n\"\"\"\n\ndef is_perfect_square(n):\n", "finetuning_completion": " \r\n  \r\n    # Computing the square root \r\n    x = int(math.sqrt(n)) \r\n      \r\n    # If x is a perfect square \r\n    if (x * x == n): \r\n        return True\r\n    else: \r\n        return False", "task_id": 4678}
{"finetuning_prompt": "\"\"\"\nUtilize regular expressions to make a program which will find web addresses in a string.\n\"\"\"\n\nimport re\r\ndef find_website(string):\n", "finetuning_completion": "\r\n    website_list = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string)\r\n    return website_list", "task_id": 4687}
{"finetuning_prompt": "\"\"\"\nPerform debugging on a python program.\n\"\"\"\n\ndef add(a,b):\n", "finetuning_completion": "\n \n  # Check if the parameters are of type int\n  if type(a) != int or type(b) != int:\n    return \"Error - Parameters must be of type int\"\n\n  # Calculate and return the result\n  return a+b", "task_id": 4688}
{"finetuning_prompt": "\"\"\"\nGenerate a function that reverses the words inside a string.\n\"\"\"\n\ndef reverse_string(string):\n", "finetuning_completion": " \r\n    words = string.split(' ') \r\n  \r\n    reverse_string = [] \r\n  \r\n    for word in words: \r\n        reverse_string.insert(0, word) \r\n  \r\n    return ' '.join(reverse_string)", "task_id": 4691}
{"finetuning_prompt": "\"\"\"\nDevelop a function to search an item in a sorted array using the binary search technique.\n\"\"\"\n\ndef binary_search(array, target):\n", "finetuning_completion": "\r\n    l, r = 0, len(array) - 1\r\n    while l <= r:\r\n        m = (l + r) // 2\r\n        if array[m] == target:\r\n            return m\r\n        elif array[m] > target:\r\n            r = m - 1\r\n        else:\r\n            l = m + 1\r\n    return -1", "task_id": 4710}
{"finetuning_prompt": "\"\"\"\nEdit the previous code to print the elements in descending order.\n\"\"\"\n\ndef print_reverse_descending(arr):\n", "finetuning_completion": " \n    for i in range(len(arr) -1, -1,-1): \n        print(arr[i], end = ' ') \n    arr.sort(reverse=True)\n    for i in range(len(arr)): \n        print(arr[i], end = ' ')", "task_id": 4715}
{"finetuning_prompt": "\"\"\"\nWrite a function to compare two strings and return true if they are equal within a threshold.\n\"\"\"\n\ndef compare_strings(s1, s2, threshold):\n", "finetuning_completion": "\r\n    if (len(s1) >= len(s2)-threshold) and (len(s2) >= len(s1)-threshold):\r\n        shortest_len = min(len(s1), len(s2))\r\n        if s1[:shortest_len] == s2[:shortest_len]:\r\n            return True\r\n    return False", "task_id": 4725}
{"finetuning_prompt": "\"\"\"\nWhat code can be used to invert a dictionary with the values as keys and the keys as values?\n\"\"\"\n\ndef invert_dict(d):\n", "finetuning_completion": " \r\n    return {v: k for k, v in d.items()}", "task_id": 4728}
{"finetuning_prompt": "\"\"\"\nConstruct a web service to retrieve stock prices\n\"\"\"\n\nimport requests\r\n\r\ndef get_stock_price(stock_symbol):\n", "finetuning_completion": "\r\n    url = \"https://api.iextrading.com/1.0/stock/{}/quote\".format(stock_symbol)\r\n    response = requests.get(url)\r\n    if response.status_code == 200:\r\n        return response.json()[\"latestPrice\"]\r\n    else:\r\n        return None", "task_id": 4730}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to detect anomalies in a given data set\n\"\"\"\n\ndef detect_anomaly(data):\n", "finetuning_completion": "\r\n    mean = sum(data)/len(data)\r\n    diff = [abs(x - mean) for x in data]\r\n    threshold = 3*(sum(diff) / len(diff))\r\n    outliers = []\r\n    for outlier in diff:\r\n        if outlier > threshold:\r\n            outliers.append(outlier)\r\n    return outliers", "task_id": 4732}
{"finetuning_prompt": "\"\"\"\nFind the minimum two elements of a given list.\n\"\"\"\n\ndef min_two_elements(list):\n", "finetuning_completion": " \r\n    min1 = min2 = float('inf') \r\n  \r\n    for x in list: \r\n        if x <= min1: \r\n            min2 = min1 \r\n            min1 = x \r\n        elif x < min2: \r\n            min2 = x \r\n    return min1, min2 \r\nlist = [9, 8, 7, 6, 5, 4] \r\nmin1, min2 = min_two_elements(list) \r\nprint(min1, min2)", "task_id": 4737}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the derivatives of a function using the delta method.\n\"\"\"\n\ndef delta_method(f, x, h=1e-5):\n", "finetuning_completion": "\n    return (f(x + h) - f(x - h)) / (2 * h)", "task_id": 4751}
{"finetuning_prompt": "\"\"\"\nWrite a python function to check whether the given date has a valid format\n\"\"\"\n\nfrom datetime import datetime \r\ndef valid_date_format(date):\n", "finetuning_completion": " \r\n    try: \r\n        datetime.strptime(date, '%Y-%m-%d') \r\n        return True\r\n    except ValueError:\r\n        return False", "task_id": 4765}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total sum of a given list of numbers after adding the given number.\n\"\"\"\n\ndef total_sum(input_list, add_num):\n", "finetuning_completion": " \n    total_sum = 0\n    for num in input_list: \n        total_sum += num + add_num\n    return total_sum", "task_id": 4777}
{"finetuning_prompt": "\"\"\"\nCompose a function to check whether a number (passed as a parameter) is prime or not.\n\"\"\"\n\ndef is_prime(n):\n", "finetuning_completion": " \r\n    if (n <= 1): \r\n        return False\r\n    if (n <= 3): \r\n        return True\r\n    if (n % 2 == 0 or n % 3 == 0): \r\n        return False\r\n    i = 5\r\n    while(i * i <= n): \r\n        if (n % i == 0 or n % (i + 2) == 0): \r\n            return False\r\n        i += 6\r\n    return True", "task_id": 4783}
{"finetuning_prompt": "\"\"\"\nDevelop a program that finds the minimum number of coins required to change the given amount.\n\"\"\"\n\ndef min_coins(amount):\n", "finetuning_completion": " \r\n    coins = [1, 5, 10, 25] \r\n    min_coins = [0 for amount in range(amount + 1)] \r\n  \r\n    for m in range(1, amount + 1): \r\n        min_coins[m] = m \r\n        for i in range(len(coins)): \r\n            if coins[i] <= m: \r\n                num_coins = min_coins[m - coins[i]] + 1\r\n                if num_coins < min_coins[m]: \r\n                    min_coins[m] = num_coins \r\n  \r\n    return min_coins[amount] \r\n  \r\n# call the function \r\namount = 20\r\nprint(\"The minimum coins for\",amount,\"is\",min_coins(amount))", "task_id": 4786}
{"finetuning_prompt": "\"\"\"\nCreate a program to convert an array of characters into an integer value.\n\"\"\"\n\ndef convert_to_int(First_Array):\n", "finetuning_completion": " \r\n\tint_val = 0\r\n\tfor i in range(len(First_Array)): \r\n\t\tint_val = int_val * 10 + (ord(First_Array[i]) - 48) \r\n\treturn int_val", "task_id": 4792}
{"finetuning_prompt": "\"\"\"\nWrite a function to match a prefix in a given array.\n\"\"\"\n\ndef prefix_match(arr, p):\n", "finetuning_completion": " \n\tmatches = [] \t\t\n\tfor i in arr: \n\t\tif i.startswith(p): \n\t\t\tmatches.append(i) \n\treturn matches", "task_id": 4794}
{"finetuning_prompt": "\"\"\"\nConstruct a program to find the longest prefix in any given string.\n\"\"\"\n\ndef find_longest_prefix(string):\n", "finetuning_completion": " \r\n    n = len(string) \r\n    result = \"\"  \r\n    i = 1\r\n    while (i <= n):  \r\n        if (All_characters_are_same(string, n, i)): \r\n            result = string[0: i] \r\n        i = i + 1\r\n    return result \r  \r\n \r\ndef All_characters_are_same(string, n, i): \r\n    for j in range (1, n): \r\n        if (string[j] != string[j - i]): \r\n            return False\r\n    return True", "task_id": 4797}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode and decode unicode characters.\n\"\"\"\n\ndef encode_decode_unicode(string):\n", "finetuning_completion": "\n    encoded_string = string.encode(\"utf-8\")\n    decoded_string = encoded_string.decode(\"utf-8\")\n    return encoded_string, decoded_string", "task_id": 4803}
{"finetuning_prompt": "\"\"\"\nCreate a script to format an array of data into a table.\n\"\"\"\n\ndef format_to_table(data):\n", "finetuning_completion": " \r\n    output = '<table>\\n' \r\n    for i in range(len(data)): \r\n        output += '  <tr>\\n' \r\n        for j in range(len(data[i])): \r\n            output += '    <td>{}</td>\\n'.format(data[i][j]) \r\n        output += '  </tr>\\n' \r\n    \r\n    output += '</table>'\r\n    return output", "task_id": 4805}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to classify an array of integers as even or odd.\n\"\"\"\n\ndef classify_int(arr):\n", "finetuning_completion": " \r\n  result = [] \r\n  for x in arr: \r\n    if (x % 2 == 0): \r\n      result.append('even') \r\n    else: \r\n      result.append('odd') \r\n  return result", "task_id": 4807}
{"finetuning_prompt": "\"\"\"\nGenerate a unique priority number for each task depending on its importance using a mathematical formula.\n\"\"\"\n\ndef generate_priority_num(task_importance):\n", "finetuning_completion": " \r\n  priority_num = (task_importance * 2) + 15 \r\n  return priority_num", "task_id": 4808}
{"finetuning_prompt": "\"\"\"\nImplement an algorithm to remove duplicate elements from an array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \r\n    arr_new = [] \r\n    for i in arr: \r\n        if i not in arr_new: \r\n            arr_new.append(i) \r\n    return arr_new", "task_id": 4818}
{"finetuning_prompt": "\"\"\"\nWrite a Python program which takes a list of numbers and prints out the maximum sum possible from a descending order of numbers from the list.\n\"\"\"\n\ndef largest_sum_possible(lst):\n", "finetuning_completion": "\r\n    lst.sort(reverse=True)\r\n    return(sum(lst[:2]))", "task_id": 4822}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to round a fraction to a given decimal place.\n\"\"\"\n\ndef round_Fraction(num,place):\n", "finetuning_completion": " \r\n  return round(num, place)", "task_id": 4830}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to convert a given hexadecimal number into its binary equivalent.\n\"\"\"\n\ndef Hex2Bin(hexnum):\n", "finetuning_completion": " \r\n    \"\"\" \r\n    implemented logic: \r\n    * Split hexadecimal number into digits \r\n    * Map each hexadecimal digit to four binary digits, according to the given mapping \r\n    * Concatenate all binary digits \r\n\r\n    \"\"\" \r\n    hexDigits = \"0123456789ABCDEF\" \r\n    binaryString = \"\" \r\n  \r\n    for i in range(len(hexnum)): \r\n        binaryString += bin(hexDigits.index(hexnum[i].upper()))[2:].zfill(4) \r\n  \r\n    return binaryString", "task_id": 4833}
{"finetuning_prompt": "\"\"\"\nGenerate a code that compresses a given string according to a given pattern.\n\"\"\"\n\ndef compress_String(String, Pattern):\n", "finetuning_completion": " \r\n    count=1\r\n    i=1\r\n    temp=''\r\n    result=''\r\n    while i != len(String): \r\n        if String[i]==String[i-1]: \r\n            count+=1\r\n        else: \r\n            temp = Pattern[0] + String[i-1] + Pattern[1] + str(count) \r\n            result+=temp\r\n            count=1\r\n        i+=1\r\n    temp= Pattern[0] + String[i-1] + Pattern[1] + str(count)\r\n    result+=temp\r\n    return result", "task_id": 4834}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to evaluate a given string as a valid binary number.\n\"\"\"\n\ndef is_valid_binary_num(str):\n", "finetuning_completion": " \n    if not str: \n        return False\n  \n    for i in range(len(str)): \n        if str[i] != '0' and str[i] != '1': \n            return False\n    return True", "task_id": 4844}
{"finetuning_prompt": "\"\"\"\nGiven a string of characters, write a program to sort it alphabetically.\n\"\"\"\n\ndef sort_string(str1):\n", "finetuning_completion": " \r\n\tstr1 = sorted(str1) \r\n\treturn str1 \r\n\r\nprint(sort_string(\"GeeksforGeeks\"))\n# Output: ['G', 'G', 'e', 'e', 'e', 'f', 'k', 'o', 'r', 's']", "task_id": 4847}
{"finetuning_prompt": "\"\"\"\nGenerate code to parse a JSON object.\n\"\"\"\n\nimport json\ndef parse_json(json_obj):\n", "finetuning_completion": "\n    try: \n        json_data = json.loads(json_obj)\n        name = json_data[\"name\"]\n        age = json_data[\"age\"]\n        return name, age\n    except: \n        return None, None", "task_id": 4852}
{"finetuning_prompt": "\"\"\"\nDevelop a program to parse the input string, extract the date and convert string to date format.\n\"\"\"\n\nimport datetime\r\ndef string_to_date(input_string):\n", "finetuning_completion": "\r\n  result_date = datetime.datetime.strptime(input_string, \"%d/%m/%Y\")\r\n  return result_date", "task_id": 4856}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert between Fahrenheit and Celsius.\n\"\"\"\n\ndef convert_temperature(degree, convert_to):\n", "finetuning_completion": "\r\n  if convert_to == \"Celsius\":\r\n    result = (degree - 32) * 5/9\r\n  else:\r\n    result = (degree * 9/5) + 32\r\n  return result", "task_id": 4857}
{"finetuning_prompt": "\"\"\"\nCreate a program to remove words from a string containing the provided keyword argument.\n\"\"\"\n\ndef remove_words(sentence, keyword):\n", "finetuning_completion": "\r\n  return ' '.join([word for word in sentence.split() if word.lower() != keyword])", "task_id": 4860}
{"finetuning_prompt": "\"\"\"\nCreate a function to detect single cycle of elements in the given array.\n\"\"\"\n\ndef single_cycle(arr):\n", "finetuning_completion": "\r\n    n = len(arr)\r\n    visited = [False] * n\r\n    cnt = 0\r\n\r\n    i = 0\r\n    while cnt < n:\r\n        if visited[i] or arr[i] == 0:\r\n            return False\r\n        \r\n        visited[i] = True \r\n        i = (i + arr[i]) % n\r\n        cnt += 1\r\n\r\n    return i == 0", "task_id": 4864}
{"finetuning_prompt": "\"\"\"\nGenerate a list of strings by combining two lists.\n\"\"\"\n\ndef combine_lists (list1, list2):\n", "finetuning_completion": " \r\n    combined_list = [] \r\n    for i in range(len(list1)): \r\n        for j in range(len(list2)): \r\n            combined_list.append(list1[i] + list2[j]) \r\n  \r\n    return combined_list", "task_id": 4875}
{"finetuning_prompt": "\"\"\"\nCompute the number of binary strings of length N with no consecutive 1s.\n\"\"\"\n\ndef countStrings(N):\n", "finetuning_completion": " \r\n    a=[0 for i in range(N)] \r\n    b=[0 for i in range(N)] \r\n    a[0] = b[0] = 1\r\n    for i in range(1, N): \r\n        a[i] = a[i-1] + b[i-1] \r\n        b[i] = a[i-1] \r\n    return a[N-1] + b[N-1]", "task_id": 4878}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to count the number of ways to reach the end within a 2-D array\n\"\"\"\n\ndef number_of_ways_2darray(arr, m, n):\n", "finetuning_completion": " \r\n    # A 2D table to store results \r\n    dp = [[0 for j in range(m)] for i in range(n)] \r\n  \r\n    # Fill the first row and first column as base \r\n    for i in range(m): \r\n        dp[0][i] = 1\r\n    for j in range(n): \r\n        dp[j][0] = 1\r\n  \r\n    # Calculate count of ways for other cells \r\n    for i in range(1, n): \r\n        for j in range(1, m): \r\n            # By including the cell arr[i][j] \r\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] \r\n  \r\n    return dp[n-1][m-1]", "task_id": 4888}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two integer numbers as parameters and compares them.\n\"\"\"\n\ndef compare(a,b):\n", "finetuning_completion": "\r\n    if a > b:\r\n        return \"a is greater than b\"\r\n    elif a < b:\r\n        return \"b is greater than a\"\r\n    else:\r\n        return \"a is equal to b\"", "task_id": 4891}
{"finetuning_prompt": "\"\"\"\nDetermine the maximum and minimum of three numbers using comparison.\n\"\"\"\n\ndef max_min(num1,num2,num3):\n", "finetuning_completion": " \r\n  \r\n    # If num1 is larger than num2 and num3 \r\n    # then num1 is maximum \r\n    if (num1 >= num2) and (num1 >= num3): \r\n        max = num1 \r\n  \r\n    # If num2 is larger than num1 and num3 \r\n    # then num2 is maximum \r\n    elif (num2 >= num1) and (num2 >= num3): \r\n        max = num2 \r\n  \r\n    else: \r\n        max = num3 \r\n  \r\n    # If num1 is smaller than num2 and num3 \r\n    # then num1 is minimum \r\n    if (num1 <= num2) and (num1 <= num3): \r\n        min = num1 \r\n          \r\n    # If num2 is smaller than num1 and num3 \r\n    # then num2 is minimum \r\n    elif (num2 <= num1) and (num2 <= num3): \r\n        min = num2 \r\n  \r\n    else: \r\n        min = num3 \r\n  \r\n    return(max, min)", "task_id": 4892}
{"finetuning_prompt": "\"\"\"\nWrite a recursive program to print the integers from N to 1.\n\"\"\"\n\ndef print_n_to_1(n):\n", "finetuning_completion": " \n\tif n <= 0: \n\t\treturn\r\n\telse: \r\n\t\tprint(n, end=\" \") \r\n\t\tprint_n_to_1(n - 1)", "task_id": 4895}
{"finetuning_prompt": "\"\"\"\nWrite a code to implement Search Algorithm to find an item in an array.\n\"\"\"\n\ndef search(arr, item):\n", "finetuning_completion": " \n    for i in range(len(arr)): \n        if arr[i] == item:\n            return i \n    return -1", "task_id": 4901}
{"finetuning_prompt": "\"\"\"\nGenerate code to add two numbers using bitwise operators.\n\"\"\"\n\ndef add_numbers_bitwise(a, b):\n", "finetuning_completion": " \r\n    while (b != 0): \r\n        carry = a & b \r\n        a = a ^ b \r\n        b = carry << 1\r\n    return a", "task_id": 4909}
{"finetuning_prompt": "\"\"\"\nImplement a sorting algorithm.\n\"\"\"\n\ndef sort_list(list_):\n", "finetuning_completion": " \r\n    for i in range(len(list_)): \r\n        min_idx = i \r\n        for j in range(i+1, len(list_)): \r\n            if list_[min_idx]> list_[j]: \r\n                min_idx = j \r\n        list_[i], list_[min_idx] = list_[min_idx], list_[i] \r\n    return list_", "task_id": 4923}
{"finetuning_prompt": "\"\"\"\nGiven a list of strings, create a function to sort the list by length.\n\"\"\"\n\ndef sortByLen(list):\n", "finetuning_completion": " \r\n  \r\n    # traverse from the beginning \r\n    # of the list \r\n    for i in range(len(list)): \r\n  \r\n        min_index = i \r\n  \r\n        # compare all elements with the \r\n        # element at the beginning \r\n        # and find the minimum length \r\n        # element in the list \r\n        for j in range(i + 1, len(list)): \r\n            if (len(list[min_index]) > len(list[j])): \r\n                min_index = j \r\n  \r\n        # swap all elements that \r\n        # have min length with \r\n        # the 1st element \r\n        list[i], list[min_index] = list[min_index], list[i] \r\n  \r\n    return list", "task_id": 4929}
{"finetuning_prompt": "\"\"\"\nGenerate a Python code to generate a tuple of the given length.\n\"\"\"\n\ndef generate_tuple(length):\n", "finetuning_completion": "\r\n  tup = ()\r\n  for i in range(length):\r\n    tup += (i,)\r\n  return tup", "task_id": 4950}
{"finetuning_prompt": "\"\"\"\nCreate a program to select the most frequently used words in an array of strings.\n\"\"\"\n\ndef most_frequent_word(words):\n", "finetuning_completion": "\n    frequency = {}\n    max_count = 0\n    max_word = None\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 0\n        frequency[word] += 1\n        if frequency[word] > max_count:\n            max_word = word\n            max_count = frequency[word]\n    return max_word", "task_id": 4959}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to select the first n elements of a given array in ascending order.\n\"\"\"\n\ndef selection_sort(arr, n):\n", "finetuning_completion": "\n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr[:n]", "task_id": 4961}
{"finetuning_prompt": "\"\"\"\nGiven two lists, write a function to check if the second list is a subset of the first list.\n\"\"\"\n\ndef is_subset(l1, l2):\n", "finetuning_completion": "\n    if set(l2).issubset(set(l1)):\n        return True\n    else:\n        return False", "task_id": 4970}
{"finetuning_prompt": "\"\"\"\nFind the closest point with given coordinates in a list of tuple objects.\n\"\"\"\n\ndef findClosestPoint(points, x, y):\n", "finetuning_completion": " \r\n  closest_point = points[0] \r\n  min_dist = pow((x - closest_point[0]),2) + pow((y - closest_point[1]),2) \r\n  \r\n  for p in points: \r\n    dist = pow((x - p[0]),2) + pow((y - p[1]),2) \r\n      \r\n    if (dist < min_dist): \r\n      min_dist = dist \r\n      closest_point = p \r\n  \r\n  return closest_point", "task_id": 4971}
{"finetuning_prompt": "\"\"\"\nReverse a sentence and print the reversed version.\n\"\"\"\n\ndef reverse_sentence(sentence):\n", "finetuning_completion": " \n  return ' '.join(sentence.split()[::-1])", "task_id": 4972}
{"finetuning_prompt": "\"\"\"\nCreate a distance matrix calculator that takes in two lists and computes the distance between them.\n\"\"\"\n\ndef calculate_distance_matrix(list1, list2):\n", "finetuning_completion": "\r\n  matrix = [] \r\n  for a in list1: \r\n    row = [] \r\n    for b in list2: \r\n      row.append((a-b)**2) \r\n    matrix.append(row) \r\n  return matrix", "task_id": 4975}
{"finetuning_prompt": "\"\"\"\nCreate a two dimensional array that contains the coordinates of each point in a circle.\n\"\"\"\n\nimport math \ndef create_circle(radius):\n", "finetuning_completion": " \n    point_list = [] \n\t\n    for angle in range(360): \n        x = radius*math.cos(math.radians(angle)) \n        y = radius*math.sin(math.radians(angle)) \n\t\t\n        point_list.append([x, y]) \n\t\t\n    return point_list", "task_id": 4977}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm that finds the minimum element in an unsorted array.\n\"\"\"\n\ndef findMin(arr):\n", "finetuning_completion": " \n    minVal = arr[0] \n    for i in arr: \n        if i < minVal: \n            minVal = i \n    return minVal", "task_id": 4978}
{"finetuning_prompt": "\"\"\"\nFind the most similar documents in a given collection of documents using Cosine Similarity.\n\"\"\"\n\ndef cosine_similarity(doc1, doc2):\n", "finetuning_completion": "\n    doc1_len = 0; doc2_len = 0 \n    sum = 0\n    for term in doc1: \n        sum += doc1[term]*doc2.get(term, 0) \n        doc1_len += doc1[term]**2\n    for term in doc2: \n        doc2_len += doc2[term]**2\n    return sum/(sqrt(doc1_len)*sqrt(doc2_len))", "task_id": 4987}
{"finetuning_prompt": "\"\"\"\nWrite a code to find the number of ways to tile an NxM grid with 1x2 domino pieces.\n\"\"\"\n\ndef tile_grid(n, m):\n", "finetuning_completion": " \n\tif n <= 0 or m <= 0: \n\t\treturn 0\n\tif n == 1 or m == 1: \n\t\treturn 1\n\treturn tile_grid(n-1, m) + tile_grid(n, m-2)  \n\nN = 3\nM = 3\nprint(\"Number of ways to tile an NxM grid with 1x2 domino pieces is\", \n\ttile_grid(N, M))", "task_id": 4989}
{"finetuning_prompt": "\"\"\"\nWrite a function to transform a given string to the next possible string with all distinct characters\n\"\"\"\n\ndef nextString(string):\n", "finetuning_completion": "\r\n    flag = False # True when all distinct characters become false\r\n    for i in range(len(string)-1,-1,-1):\r\n        if string[i] != 'Z': \r\n            string = string[:i] + chr(ord(string[i]) + 1) + string[i+1:] \r\n            flag =True\r\n            break \r\n    if flag is False: \r\n        string = \"A\" + string \r\n\r\n    return string", "task_id": 4995}
{"finetuning_prompt": "\"\"\"\nCreate a function to record the average age of a database of people.\n\"\"\"\n\ndef record_average_age(people_db):\n", "finetuning_completion": " \r\n    total_age = 0\r\n    for person in people_db:\r\n        total_age += person[\"age\"]\r\n  \r\n    average_age = total_age / len(people_db)\r\n    \r\n    return average_age", "task_id": 5018}
{"finetuning_prompt": "\"\"\"\nConvert the below function from a for loop to a while loop.\n\"\"\"\n\ndef my_function(n):\n", "finetuning_completion": "\n    my_list = []\n    i =1\n    while i<= n:\n        if i%2==0:\n            my_list.append(i)\n        i+=1\n    return my_list", "task_id": 5026}
{"finetuning_prompt": "\"\"\"\nCreate an AI that can filter out a list of numbers in a given array.\n\"\"\"\n\ndef filter_array(my_list):\n", "finetuning_completion": "\r\n    result = [num for num in my_list if num>=5]\r\n    return result", "task_id": 5028}
{"finetuning_prompt": "\"\"\"\nCreate a code that will convert a given integer to binary form.\n\"\"\"\n\ndef int_to_binary(x):\n", "finetuning_completion": "\r\n    binary = bin(x).replace(\"0b\", \"\")\r\n    return binary", "task_id": 5029}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a list of strings as input and joins them into one string.\n\"\"\"\n\ndef join_strings(list):\n", "finetuning_completion": "\r\n    joined_string = ' '.join(list)\r\n    return joined_string", "task_id": 5043}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find a Longest Substring Without Repeating Characters.\n\"\"\"\n\ndef longest_substring(s):\n", "finetuning_completion": "\r\n    last_seen = {}\r\n    max_length = 0\r\n    start = 0\r\n    for i, char in enumerate(s):\r\n        if char in last_seen:\r\n            start = max(start, last_seen[char]+1)\r\n        max_length = max(max_length, i-start+1)\r\n        last_seen[char] = i\r\n    return max_length", "task_id": 5044}
{"finetuning_prompt": "\"\"\"\nCreate a program to combine two strings alternate character from each string.\n\"\"\"\n\ndef combine_strings(string1, string2):\n", "finetuning_completion": "\r\n    combined_string = ''\r\n    for i in range(0, min(len(string1), len(string2))):\r\n        combined_string += string1[i] + string2[i]\r\n    if len(string1) > len(string2):\r\n        combined_string += string1[len(string2):]\r\n    else:\r\n        combined_string += string2[len(string1):]\r\n    return combined_string", "task_id": 5045}
{"finetuning_prompt": "\"\"\"\nDevelop a function to generate the first n prime numbers.\n\"\"\"\n\ndef generate_primes(n):\n", "finetuning_completion": " \n    primes = []\n    i = 2\n    while n > 0:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n            n = n - 1\n        i = i + 1\n    return primes", "task_id": 5046}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm for finding the maximum subarray sum.\n\"\"\"\n\ndef maxSubArraySum(arr, n):\n", "finetuning_completion": "  \n  \n    max_so_far = 0\n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far \n  \n# Driver program \narr = [-2, -3, 4, -1, -2, 1, 5, -3] \nn = len(arr) \n  \nmax_sum = maxSubArraySum(arr, n) \nprint(\"Maximum contiguous sum is \", max_sum)", "task_id": 5058}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to compress a given string by removing consecutive identical characters.\n\"\"\"\n\ndef compress_string(s):\n", "finetuning_completion": " \n    res = \"\" \n      \n    # traverse the given string  \n    for i in range(len(s)):\n        if i == 0:\n            res += s[i]\n        else:\n            if s[i] != s[i-1]:\n                res += s[i]\n    return res", "task_id": 5071}
{"finetuning_prompt": "\"\"\"\nWrite a python code to print the list of all elements which are the sum of two values present in the given list.\n\"\"\"\n\ndef sum_List(list):\n", "finetuning_completion": " \n    res = [] \r\n    for i in range(len(list)): \n        for j in range(i+1, len(list)): \n            if (list[i] + list[j] in list): \r\n                val = (list[i], list[j]) \r\n                if (val not in res): \r\n                    res.append(val) \r\n    print(\"The list of all elements which are the sum of two values present in the given list:\") \r\n    return res", "task_id": 5082}
{"finetuning_prompt": "\"\"\"\nWrite a python program to classify a given set of input using a decision tree\n\"\"\"\n\nfrom sklearn.tree import DecisionTreeClassifier\r\n\r\ndef decision_Tree_Classifier(data):\n", "finetuning_completion": " \r\n    data = np.array(data) \r\n    X = data[:, :-1] #select all rows and remove last column\r\n    Y = data[:, -1] #select all rows of last column\r\n    clf = DecisionTreeClassifier() \r\n    clf.fit(X,Y) #training model \r\n    return clf", "task_id": 5086}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect if a string contains a palindrome or not.\n\"\"\"\n\ndef has_palindrome(string):\n", "finetuning_completion": " \r\n    for i in range(len(string)): \r\n        if string[i] != string[len(string)-i-1]: \r\n            return False\r\n    \r\n    return True", "task_id": 5088}
{"finetuning_prompt": "\"\"\"\nCreate a machine learning classifier to determine whether the given student's test score is below, average or above average.\n\"\"\"\n\n#import libraries\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\n\r\n#training dataset\r\nX = [[70],[80], [90], [85], [89]]\r\ny = [\"Below Average\", \"Average\", \"Above Average\", \"Average\", \"Above Average\"]\r\n\r\n#building KNN-classifier model\r\nknn = KNeighborsClassifier(n_neighbors=1).fit(X,y) \n\n#prediction function\r\ndef predict_score(X_val):\n", "finetuning_completion": "\n  prediction = knn.predict([[X_val]]) \r\n  return prediction", "task_id": 5094}
{"finetuning_prompt": "\"\"\"\nGenerate code to print the most frequent character in the given string.\n\"\"\"\n\n#string \r\nstring = \"Hello World\"\r\n\r\n# Function to find most frequent \r\n# character in string \r\ndef frequenct_character(string):\n", "finetuning_completion": " \r\n    dict = {} \r\n    highest_freq = 0\r\n    max_char = \"\"\n    #Loop through the string \r\n    for i in string: \r\n        if i in dict: \n            dict[i] += 1\r\n        else: \r\n            dict[i] = 1\r\n        # update the highest character frequency    \r\n        if dict[i] > highest_freq: \r\n            highest_freq = dict[i] \r\n            max_char = i \r\n      \r\n    return max_char\r\n\r\n#print output \r\nprint(\"'{}' is the most frequent character.\".format(frequenct_character(string)))", "task_id": 5098}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to compute the square root of a given number and return the result.\n\"\"\"\n\ndef sqrt( num):\n", "finetuning_completion": "\r\n    return (num**0.5)", "task_id": 5101}
{"finetuning_prompt": "\"\"\"\nGenerate a code to check if one string is a rotation of another string.\n\"\"\"\n\ndef is_rotation(str1, str2):\n", "finetuning_completion": " \n\tif (len(str1) != len(str2)): \n\t\treturn False\n\ttemp = str1 + str1\n\t\n\tif (str2 in temp): \n\t\treturn True\n\telse: \n\t\treturn False", "task_id": 5106}
{"finetuning_prompt": "\"\"\"\nCreate a python code to remove all elements from a dictionary with value greater than a certain number.\n\"\"\"\n\ndef remove_elements(dic1, n):\n", "finetuning_completion": " \r\n    new_dic = {}\r\n    for key, value in dic1.items(): \r\n        if value <= n: \r\n            new_dic[key] = value\r\n    return new_dic", "task_id": 5110}
{"finetuning_prompt": "\"\"\"\nCreate a python function to find out if the given date is a weekday or a weekend.\n\"\"\"\n\nimport datetime \r\n\r\ndef is_weekend(date):\n", "finetuning_completion": " \r\n    day_of_week = datetime.datetime.strptime(date, '%Y-%m-%d').weekday() \r\n    if day_of_week in [5,6]: \r\n        return 'Weekend'\r\n    else: \r\n        return 'Weekday'", "task_id": 5114}
{"finetuning_prompt": "\"\"\"\nGenerate code to concatenate strings in a list.\n\"\"\"\n\ndef concatenate(list_str):\n", "finetuning_completion": "\n    result_str = \" \".join(list_str)\n    return result_str", "task_id": 5123}
{"finetuning_prompt": "\"\"\"\nGenerate code to compare a list of words and count the number of times each word appears.\n\"\"\"\n\ndef words_compare(words_list):\n", "finetuning_completion": "\n    result_dict = {i:words_list.count(i) for i in words_list}\n    return result_dict", "task_id": 5127}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a multiplication table to calculate the multiplication of any two given numbers.\n\"\"\"\n\ndef calculate_multiplication(x,y):\r\n  return x*y; \n\ndef print_multiplication_table(val1, val2):\n", "finetuning_completion": "\r\n  return x*y; \n\ndef print_multiplication_table(val1, val2):\r\n  for i in range(val1, val2 + 1):\r\n    for j in range(val1, val2 + 1):\r\n      print(calculate_multiplication(i, j), end=\" \")\r\n    print()", "task_id": 5132}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the missing number in an array of size N, with elements ranging from 0 to N-1.\n\"\"\"\n\ndef missingNumber(array):\n", "finetuning_completion": "\r\n    n = len(array)\r\n    total = (n+1)*(n+2)//2\r\n    ssum = 0\r\n    for num in array:\r\n        ssum += num\r\n    return total-ssum", "task_id": 5139}
{"finetuning_prompt": "\"\"\"\nWrite code to find the median value of an array with odd size.\n\"\"\"\n\ndef find_median(arr):\n", "finetuning_completion": "\r\n    arr.sort()\r\n    mid_num = len(arr)//2\r\n    median = arr[mid_num]\r\n    return median", "task_id": 5142}
{"finetuning_prompt": "\"\"\"\nConstruct a function to remove all the elements of the list that are greater than a given number.\n\"\"\"\n\ndef remove_greater_than_given_num(test_list, given_num):\n", "finetuning_completion": "\r\n\tresult = [i for i in test_list if i <= given_num] \r\n\treturn result", "task_id": 5143}
{"finetuning_prompt": "\"\"\"\nEdit the given python code to encode string to base64.\n\"\"\"\n\nimport base64\n\ndef encode_string(string):\n", "finetuning_completion": "\n    encoded_string = base64.b64encode(string.encode('utf-8')) \n    return encoded_string", "task_id": 5147}
{"finetuning_prompt": "\"\"\"\nGenerate a function that optimizes the given function.\n\"\"\"\n\ndef optimize_func(x1,x2):\n", "finetuning_completion": " \n    return (x1-x2)**2 + 2*x2 - 2", "task_id": 5149}
{"finetuning_prompt": "\"\"\"\nConstruct a program to classify a given set of data according to labels.\n\"\"\"\n\ndef classify_data(data):\n", "finetuning_completion": " \n\tmale = [] \n\tfemale = []\n\tfor i in range(len(data)):\n\t\tif data[i]['gender'] == 'M':\n\t\t\tmale.append(data[i])\n\t\telif data[i]['gender'] == 'F':\n\t\t\tfemale.append(data[i])\n\treturn male, female", "task_id": 5150}
{"finetuning_prompt": "\"\"\"\nWrite a Python3 program to print the next largest palindrome of a given number.\n\"\"\"\n\ndef next_largest_palindrome(number):\n", "finetuning_completion": " \r\n    palindrome = number + 1\r\n    while True: \r\n        temp = palindrome \r\n        reverse = 0\r\n        while (temp > 0): \r\n            reminder = temp % 10\r\n            reverse = (reverse * 10) + reminder   \r\n            temp = temp // 10\r\n        if (palindrome == reverse): \r\n            return palindrome;  \r\n        palindrome = palindrome + 1\r\n  \r\n# Driver code \r\nnumber = 3943\r\nprint(\"Next palin\u00addrome of the given number is :\",  \r\n                            next_largest_palindrome(number))", "task_id": 5168}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes two strings as input and replaces all occurrences of the second string in the first string with a special character.\n\"\"\"\n\ndef replace_str(string1, string2):\n", "finetuning_completion": " \n  new_str = string1.replace(string2, \"*\") \n  \n  return new_str\n\nstring1 = \"hello world\"\nstring2 = \"world\"\nprint(replace_str(string1, string2))", "task_id": 5172}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort an array of 0s, 1s, and 2s without using any sorting algorithm.\n\"\"\"\n\ndef sort_012(arr):\n", "finetuning_completion": " \r\n    lo = 0\r\n    hi = len(arr) - 1\r\n    mid = 0\r\n    while mid <= hi: \r\n        if arr[mid] == 0: \r\n            arr[lo], arr[mid] = arr[mid], arr[lo] \r\n            lo = lo + 1\r\n            mid = mid + 1\r\n        elif arr[mid] == 1: \r\n            mid = mid + 1\r\n        else: \r\n            arr[mid], arr[hi] = arr[hi], arr[mid]  \r\n            hi = hi - 1\r\n    return arr", "task_id": 5173}
{"finetuning_prompt": "\"\"\"\nWrite a function/script to classify a set of weather data.\n\"\"\"\n\ndef classify_weather_data(weatherData):\n", "finetuning_completion": "\r\n    classifications={'sunny':0, 'cloudy':0, 'rainy':0, 'snowy':0}\r\n    for w in weatherData:\r\n        classifications[w]+=1\r\n    return classifications", "task_id": 5174}
{"finetuning_prompt": "\"\"\"\nGenerate a program to calculate the sum and average of 5 given numbers.\n\"\"\"\n\ndef avg_sum(arr):\n", "finetuning_completion": " \n    sum = 0\n    for i in range(len(arr)): \n        sum = sum + arr[i] \n    average = sum / len(arr)\n    \n    return sum, average \n\n# Driver code \narr = [1,2,3,4,5] \nresult, average = avg_sum(arr) \nprint(result, average)", "task_id": 5176}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the perfect square roots of the given numbers.\n\"\"\"\n\ndef perfect_square_roots(list):\n", "finetuning_completion": "\n    square_roots = []\n    for num in list:\n        root = 0\n        while root*root <= num:\n            if root*root == num:\n                square_roots.append(root)\n            root +=1\n    return square_roots", "task_id": 5184}
{"finetuning_prompt": "\"\"\"\nCreate a loop to make a list of all the numbers within a given range.\n\"\"\"\n\ndef generate_range(start, end):\n", "finetuning_completion": " \r\n    res = []\r\n    for num in range(start,end + 1): \r\n       res.append(num) \r\n  \r\n    return res", "task_id": 5185}
{"finetuning_prompt": "\"\"\"\nWrite a function to compare two lists items by items and return the position of each item.\n\"\"\"\n\ndef compare(list1,list2):\n", "finetuning_completion": "\n    result_list = [] \n    for i in range(len(list1)):\n        if list1[i] not in list2: \n            result_list.append(-1)\n        else:\n            result_list.append(list2.index(list1[i]))\n    return '  '.join(str(v) for v in result_list)", "task_id": 5188}
{"finetuning_prompt": "\"\"\"\nCreate a cloze-style text to generate a function for finding the frequency of elements in a given array.\n\"\"\"\n\ndef calc_Frequencies(arr, N):\n", "finetuning_completion": " \r\n    # Create an empty dictionary \r\n    freq = {} \r\n  \r\n    # Loop to count frequencies of every element \r\n    for i in range(N): \r\n        if arr[i] in freq.keys(): \r\n           freq[arr[i]] += 1\r\n        else: \r\n           freq[arr[i]] = 1\r\n  \r\n    return freq\r\n  \r\n# Driver code \r\narr = [3, 2, 4, 3, 3, 2] \r\nN = len(arr) \r\nresult = calc_Frequencies(arr, N) \r\nprint(result)", "task_id": 5201}
{"finetuning_prompt": "\"\"\"\nWrite a function to reorder the elements of an array such that all negative elements appear before all positive elements.\n\"\"\"\n\ndef reorder(arr):\n", "finetuning_completion": " \n      \n    n = len(arr) \n    j = 0\n    for i in range(n): \n        if (arr[i] < 0): \n           temp = arr[i] \n           arr[i] = arr[j] \n           arr[j] = temp \n           j += 1\n           \n    return arr", "task_id": 5203}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to identify a given number is odd or even.\n\"\"\"\n\ndef odd_or_even(n):\n", "finetuning_completion": " \n\tif (n % 2 == 0): \n\t\treturn \"even\"\n\telse: \n\t\treturn \"odd\"", "task_id": 5204}
{"finetuning_prompt": "\"\"\"\nCreate a program to insert a specific element in a sorted list.\n\"\"\"\n\ndef insert_in_sorted(sorted_list, element):\n", "finetuning_completion": " \n      \n    # bisect module has different utilities \n    # used to find insertion position  \n    import bisect \n    bisect.insort(sorted_list, element) \n    return sorted_list", "task_id": 5205}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort a given array of integers in increasing or decreasing order.\n\"\"\"\n\ndef sort(arr, order):\n", "finetuning_completion": " \r\n\t# ascending sort \r\n\tif order == 'ascending': \r\n\t\tarr.sort() \r\n\t\treturn arr \r\n\r\n\t# descending sort \r\n\tif order == 'descending': \r\n\t\tarr.sort() \r\n\t\tarr.reverse() \r\n\t\treturn arr \r\n\r\narray = [5, 2, 7, 4, 3] \r\norder = 'descending'\r\nprint(sort(array, order))", "task_id": 5206}
{"finetuning_prompt": "\"\"\"\nGenerate a program to evaluate a string for the presence of a substring of length 3.\n\"\"\"\n\ndef isSubstringLen3Present(string):\n", "finetuning_completion": " \r\n\tfor i in range(len(string)-3): \r\n\t\tif string[i : i+3] == string[i : i+3]: \r\n\t\t\treturn True   \t\t\t\t \r\n\treturn False", "task_id": 5209}
{"finetuning_prompt": "\"\"\"\nGenerate a code to print prime numbers up to a given number n.\n\"\"\"\n\ndef print_prime_numbers_up_to_n(n):\n", "finetuning_completion": " \r\n  \r\n    for i in range(2, n + 1): \r\n        flag = 0\r\n        for j in range(2, ((i // 2) + 1)): \r\n            if i % j == 0: \r\n                flag = 1\r\n                break\r\n        if flag == 0: \r\n            print(i, end =\" \")", "task_id": 5211}
{"finetuning_prompt": "\"\"\"\nDesign a function to determine the number of possible binary search trees using the catalan number.\n\"\"\"\n\ndef catalan_number(n):\n", "finetuning_completion": " \r\n    if (n <= 1): \r\n        return 1 \r\n    res = 0\r\n    for i in range(n):  \r\n        res += catalan_number(i) * catalan_number(n-i-1)  \r\n    return res", "task_id": 5213}
{"finetuning_prompt": "\"\"\"\nWrite a python program to optimize a given function that returns the output with a minimum number of operations.\n\"\"\"\n\nimport numpy as np\n\ndef optimize_function(func, eps):\n", "finetuning_completion": "\n    best_sol = 0 \n    best_obj = func(best_sol)\n    sol = best_sol \n    step = 0.001 \n    obj = best_obj\n  \n    while np.abs(obj - best_obj) > eps:\n        sol += step\n        obj = func(sol)\n        if obj < best_obj:\n            best_obj = obj\n            best_sol = sol\n  \n    return best_sol, best_obj", "task_id": 5220}
{"finetuning_prompt": "\"\"\"\nGenerate a program to generate an event table from a given list of events in python.\n\"\"\"\n\ndef generate_event_table(events):\n", "finetuning_completion": "\r\n    table = []\r\n    for event in events:\r\n        header = [event['name']]\r\n        row = [event['start_time'], event['end_time'], event['location']]\r\n        table.append([header, row])\r\n    return table", "task_id": 5226}
{"finetuning_prompt": "\"\"\"\nWrite a function to search through a nested dictionary structure and find the value of a specific key.\n\"\"\"\n\ndef search_dict(my_dict, search_key):\n", "finetuning_completion": "\n    if search_key in my_dict:\n        return my_dict[search_key]\n    for key, value in my_dict.items():\n        if type(value) is dict:\n            inner_dict_search = search_dict(value, search_key)\n            if inner_dict_search is not None:\n                return inner_dict_search\n    return None", "task_id": 5234}
{"finetuning_prompt": "\"\"\"\nGenerate a function to return the index of all elements in a list which are equal to a given integer.\n\"\"\"\n\ndef find_index(my_list, x):\n", "finetuning_completion": " \r\n    return [i for i, y in enumerate(my_list) if y == x]\n\nfind_index([3, 4, 2, 6, 2], 2)", "task_id": 5238}
{"finetuning_prompt": "\"\"\"\nCreate a function to merge two given of different lengths into a new list.\n\"\"\"\n\ndef merge_lists(lst1, lst2):\n", "finetuning_completion": " \r\n    merged_lst = [] \r\n    i, j = 0, 0\r\n  \r\n    while i < len(lst1) and j < len(lst2): \r\n        if lst1[i] < lst2[j]: \r\n          merged_lst.append(lst1[i]) \r\n          i += 1\r\n  \r\n        else: \r\n          merged_lst.append(lst2[j]) \r\n          j += 1\r\n  \r\n    merged_lst += lst1[i:] + lst2[j:] \r\n      \r\n    return merged_lst\n\nmerge_lists([1,3,5],[2,4,6,9,11])", "task_id": 5240}
{"finetuning_prompt": "\"\"\"\nDesign a function to print out all prime numbers up to, but not included n.\n\"\"\"\n\ndef prime_numbers(n):\n", "finetuning_completion": "\n    prime_numbers = []\n    for number in range(2, n):\n        is_prime = True\n        for i in range(2, number):\n            if number % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(number)\n    return prime_numbers", "task_id": 5246}
{"finetuning_prompt": "\"\"\"\nWrite a python program to group a list of integers into even and odd groups.\n\"\"\"\n\ndef group_integers(items):\n", "finetuning_completion": " \n    odd_group = [] \n    even_group = [] \n    for item in items: \n        if item % 2 == 0: \n            even_group.append(item) \n        else: \n            odd_group.append(item) \n    return odd_group, even_group", "task_id": 5250}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to calculate the maximum continuous sum in an array with negative and positive numbers.\n\"\"\"\n\ndef max_cont_sum(arr):\n", "finetuning_completion": " \n    \n    max_sum = curr_sum = arr[0] \n    start = 0\n    end = 0\n  \n    for i in range(1, len(arr)): \n        curr_sum += arr[i]     \n        if arr[i] > curr_sum: \n            curr_sum = arr[i] \n            start = i \n        if curr_sum > max_sum: \n            max_sum = curr_sum \n            end = i \n    return max_sum,start,end", "task_id": 5257}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm that takes a number and prints out a factorial table up to this number.\n\"\"\"\n\ndef factorial_table(num):\n", "finetuning_completion": " \r\n    factorial = 1 \r\n    j = 1 \r\n    print(\"Factorial Table for \"+str(num)) \r\n    for i in range(1, num + 1): \r\n        factorial *= i \r\n        print(\" \"+str(i)+ \" ! = \"+str(factorial))", "task_id": 5258}
{"finetuning_prompt": "\"\"\"\nWrite a python code to generate all non-negative decimal numbers up to the value n\n\"\"\"\n\ndef generate_decimal_numbers(n):\n", "finetuning_completion": " \n    result = [] \n    \n    # generate numbers\n    for i in range(0, n + 1): \n        result.append(str(i)) \n  \n    return result", "task_id": 5266}
{"finetuning_prompt": "\"\"\"\nWrite a function to accumulate all occurrences of each element of list.\n\"\"\"\n\ndef accum_elements(lst):\n", "finetuning_completion": "\r\n    counts = {}\r\n    for item in lst:\r\n        if item in counts:\r\n            counts[item] += 1\r\n        else:\r\n            counts[item] = 1\r\n    return counts", "task_id": 5268}
{"finetuning_prompt": "\"\"\"\nGenerate a function to identify all combinations of a given string.\n\"\"\"\n\ndef find_combinations(string):\n", "finetuning_completion": "\n    comb = []\n    for l in range(2, len(string) + 1):\n        for combination in itertools.combinations(string, l):\n            comb.append(combination)\n    return comb", "task_id": 5273}
{"finetuning_prompt": "\"\"\"\nGenerate a function to round up a given number to the nearest multiple of 5.\n\"\"\"\n\ndef round_up(n):\n", "finetuning_completion": " \n    return (n + 4)//5*5", "task_id": 5275}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm for finding the smallest element in a given array.\n\"\"\"\n\ndef smallestElement(arr):\n", "finetuning_completion": " \n\tsmallest = arr[0] \n\tfor i in range (len(arr)): \n\t\tif smallest > arr[i]: \n\t\t\tsmallest = arr[i] \n\treturn smallest", "task_id": 5279}
{"finetuning_prompt": "\"\"\"\nConstruct a program to sort characters of a given string in descending order.\n\"\"\"\n\ndef sort_string_desc(string):\n", "finetuning_completion": " \n\tres = sorted(string, reverse = True) \n\treturn res", "task_id": 5287}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate a list of prime numbers between 21 and 101.\n\"\"\"\n\ndef prime_numbers(start, end):\n", "finetuning_completion": " \n\tprime_list = []\n\tfor val in range(start, end + 1): \n\t\tif val > 1: \n\t\t\tfor n in range(2, val): \n\t\t\t\tif (val % n) == 0: \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tprime_list.append(val) \n\treturn prime_list \n\nprint(prime_numbers(21, 101))", "task_id": 5289}
{"finetuning_prompt": "\"\"\"\nCreate a function to separate the positive and negative numbers from list of integers.\n\"\"\"\n\ndef pos_neg_sep(test_list):\n", "finetuning_completion": "\r\n  return [x for x in test_list if x<0], [x for x in test_list if x>=0]", "task_id": 5295}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to prove the Pythagorean Theorem.\n\"\"\"\n\ndef check_Pythagorean_Theorem(a, b, c):\n", "finetuning_completion": " \n    if a ** 2 + b ** 2 == c ** 2: \n        return True \n    else: \n        return False\n\n# Driver code \na, b, c = 3, 4, 5\nif check_Pythagorean_Theorem(a, b, c): \n    print(\"The given sides {0}, {1} and {2} satisfy the Pythagorean Theorem.\".format(a, b, c)) \nelse: \n    print(\"The given sides {0}, {1} and {2} does not satisfy the Pythagorean Theorem.\".format(a, b, c))", "task_id": 5307}
{"finetuning_prompt": "\"\"\"\nGenerate a prime number sequence between two numbers by using a for loop.\n\"\"\"\n\ndef prime_sequence(start, end):\n", "finetuning_completion": "\r\n    prime_list = []\r\n    for num in range(start, end + 1):\r\n        if num > 1:    \r\n            for i in range(2, num):\r\n                if (num % i) == 0:\r\n                    break\r\n            else:                                         \r\n                prime_list.append(num)\r\n    return prime_list", "task_id": 5312}
{"finetuning_prompt": "\"\"\"\nCreate a natural language processing tool that can identify irregular words in a text.\n\"\"\"\n\nimport re\n\ndef identify_irregular_words(text):\n", "finetuning_completion": "\n    pattern = re.compile(r'\\b[^\\W\\d][^\\W\\d]+\\b')\r\n    words = pattern.findall(text)\r\n    final_words = set(words)\r\n    return [word for word in final_words if not word.isalpha()]", "task_id": 5314}
{"finetuning_prompt": "\"\"\"\nCreate a code snippet that generates a 3D array of given size.\n\"\"\"\n\nimport numpy as np\r\n  \r\ndef gen_3DArray(X, Y, Z):\n", "finetuning_completion": " \r\n    return np.ones((X, Y, Z))", "task_id": 5319}
{"finetuning_prompt": "\"\"\"\nGenerate a string that consists of each character from two strings in order.\n\"\"\"\n\ndef combinationString(str1, str2):\n", "finetuning_completion": " \r\n    return ''.join(char for char in (str1+str2))", "task_id": 5320}
{"finetuning_prompt": "\"\"\"\nConstruct a program to rotate an array in the left direction by K positions.\n\"\"\"\n\ndef leftRotate(arr, k):\n", "finetuning_completion": " \r\n  \r\n    n = len(arr) \r\n      \r\n    # k must be smaller than n  \r\n    k = k % n  \r\n      \r\n    # Create new array for storing result \r\n    temp = [0] * n \r\n  \r\n    # Store arr elements in temp starting from k \r\n    for i in range(0, n): \r\n        temp[i] = arr[(k + i) % n] \r\n  \r\n    # Copy temp to arr \r\n    for i in range(0, n): \r\n        arr[i] = temp[i] \r\n\r\n    return arr", "task_id": 5323}
{"finetuning_prompt": "\"\"\"\nCreate a program to parse a given date string and convert it to a valid datetime object.\n\"\"\"\n\nfrom datetime import datetime\n\ndef parse_date(date):\n", "finetuning_completion": "\n    return datetime.strptime(date, '%d/%m/%Y')", "task_id": 5330}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm in Python to find the largest prime number less than a given number.\n\"\"\"\n\ndef isPrime(n): \r\n  \r\n    # Corner case \r\n    if (n <= 1) : \r\n        return False\r\n  \r\n    # Check from 2 to n-1 \r\n    for i in range(2, n): \r\n        if (n % i == 0) : \r\n            return False\r\n  \r\n    return True\r\n  \r\ndef printLargestPrime(n):\n", "finetuning_completion": " \r\n  \r\n    # Corner case \r\n    if (n <= 1) : \r\n        return False\r\n  \r\n    # Check from 2 to n-1 \r\n    for i in range(2, n): \r\n        if (n % i == 0) : \r\n            return False\r\n  \r\n    return True\r\n  \r\ndef printLargestPrime(n): \r\n  \r\n    # Print the largest prime smaller than n \r\n    prime = None\r\n    for i in range(n-1, 1, -1): \r\n        if (isPrime(i) == True): \r\n            prime = i \r\n            break\r\n    if (prime): \r\n        print(prime) \r\n    else : \r\n        print (\"No prime number smaller than this\")", "task_id": 5338}
{"finetuning_prompt": "\"\"\"\nWrite a code that evaluates an expression in a given string.\n\"\"\"\n\ndef eval_expression(text):\n", "finetuning_completion": " \r\n\treturn eval(text)", "task_id": 5343}
{"finetuning_prompt": "\"\"\"\nCreate a function to generate an index of words present in a paragraph or article.\n\"\"\"\n\ndef word_indexer(given_text):\n", "finetuning_completion": " \r\n\tword_dict = {} \r\n  \r\n\t# split the given string at 'space' \r\n\twords = given_text.split() \r\n  \r\n\t# iterate through the given words and generate an index \r\n\tfor i in range(len(words)): \r\n\t\tword_dict[words[i]] = i \r\n  \r\n\treturn word_dict", "task_id": 5347}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate the first 5 Fibonacci numbers.\n\"\"\"\n\ndef fibonacci(num):\n", "finetuning_completion": " \r\n    lst = [0, 1] \r\n    a, b = 0, 1\r\n    for _ in range(2,num): \r\n        c = a + b \r\n        lst.append(c) \r\n        a, b = b, c \r\n    return lst[:num] \r\n  \r\n# Driver Code \r\nprint(fibonacci(5))", "task_id": 5351}
{"finetuning_prompt": "\"\"\"\nWrite a script to generate a list which contains all prime numbers till a given number.\n\"\"\"\n\ndef printPrimesUpto(n):\n", "finetuning_completion": " \n  \n    primes = [] \n    for i in range(2,n+1): \n        if isPrime(i): \n            primes.append(i) \n  \n    print(primes) \n      \ndef isPrime(num): \n  \n    if num <= 1: \n        return False\n  \n    for i in range(2, num): \n        if num % i == 0: \n            return False\n  \n    return True", "task_id": 5354}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract the key-value pairs from a given dictionary.\n\"\"\"\n\ndef KeyValue(dict):\n", "finetuning_completion": "  \r\n    keys = dict.keys() \r\n    return [ (key, dict[key]) for key in keys ]", "task_id": 5355}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate a point on a given curve y=x^3 which is 5 points away from a given point.\n\"\"\"\n\ndef pointOnCurve(x, y):\n", "finetuning_completion": " \r\n    newX = x + 5\r\n    newY = newX**3 \r\n    return ( newX, newY )", "task_id": 5361}
{"finetuning_prompt": "\"\"\"\nModify the following function to print the elements of a given list in reverse order.\n\"\"\"\n\ndef printList(list1):\n", "finetuning_completion": "\r\n    for i in range(len(list1)-1, -1, -1):\r\n        print(list1[i])", "task_id": 5375}
{"finetuning_prompt": "\"\"\"\nWrite a function to validate if the syntax of a given code snippet is valid or not.\n\"\"\"\n\ndef validate_syntax(code):\n", "finetuning_completion": "\n    try:\n        compile(code, \"<string>\", \"exec\")\n        return True\n    except SyntaxError as e:\n        return False", "task_id": 5379}
{"finetuning_prompt": "\"\"\"\nWrite  a python program to check if a string contains uppercase and lowercase letters.\n\"\"\"\n\ndef check_case(string):\n", "finetuning_completion": "\r\n    upper = 0\r\n    lower = 0\r\n    for char in string:\r\n        if char.islower():\r\n            lower +=1\r\n        elif char.isupper():\r\n            upper +=1\r\n    if upper > 0 and lower > 0:\r\n        return True\r\n    return False", "task_id": 5382}
{"finetuning_prompt": "\"\"\"\nWrite a code to replace all non-alphabet characters with a blank space in a given string.\n\"\"\"\n\nimport re\r\ndef replace_NonAlphabets(string):\n", "finetuning_completion": " \r\n    return re.sub('[^a-zA-Z]',' ',string)", "task_id": 5384}
{"finetuning_prompt": "\"\"\"\nConstruct a script to calculate the maximum possible sum of an array with a given sum.\n\"\"\"\n\ndef getMaxSum(arr, givenSum):\n", "finetuning_completion": " \r\n    n = len(arr)  \r\n    dp = [[0 for i in range(givenSum + 1)] for i in range(n + 1)]  \r\n  \r\n    for i in range(1, n + 1):  \r\n        for j in range(1, givenSum + 1):  \r\n            if j < arr[i - 1]:  \r\n                dp[i][j] = dp[i - 1][j] \r\n            else: \r\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + arr[i - 1])  \r\n  \r\n    return dp[n][givenSum]", "task_id": 5386}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a function to convert it to camel case.\n\"\"\"\n\ndef convertToCamel(string):\n", "finetuning_completion": " \r\n    new_str = string.title().replace(\" \", \"\") \r\n    return (new_str[0].lower() + new_str[1:])", "task_id": 5387}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to search a given element in a sorted matrix.\n\"\"\"\n\ndef search_element(matrix, x):\n", "finetuning_completion": " \r\n    # Search a given element in a sorted matrix\r\n    # Start from top right corner\r\n    i = 0\r\n    j = len(matrix[0]) - 1 \r\n    while ( i < len(matrix) and j >= 0 ): \r\n        if (matrix[i][j] == x): \r\n            return True\r\n       \r\n        if (matrix[i][j] > x): \r\n            j -= 1\r\n        else: \r\n            i += 1\r\n    return False", "task_id": 5391}
{"finetuning_prompt": "\"\"\"\nCompare two strings for anagrams.\n\"\"\"\n\ndef anagram(s1, s2):\n", "finetuning_completion": " \n\ts1 = s1.replace(' ', '').lower() \n\ts2 = s2.replace(' ', '').lower() \n\t\n\treturn sorted(s1) == sorted(s2) \n\t\nprint(anagram(\"decide\", \"sieced\"))", "task_id": 5398}
{"finetuning_prompt": "\"\"\"\nCreate code to detect and delete duplicate elements from a given list.\n\"\"\"\n\ndef remove_duplicates(test_list):\n", "finetuning_completion": " \r\n      \r\n    final_list = [] \r\n    for num in test_list: \r\n        if num not in final_list: \r\n            final_list.append(num) \r\n    return final_list", "task_id": 5403}
{"finetuning_prompt": "\"\"\"\nConstruct a function to identify characters present in a given string that are not present in other given string.\n\"\"\"\n\ndef difference(string1, string2):\n", "finetuning_completion": " \r\n      \r\n    diff_string = \"\" \r\n    for char in string1: \r\n        if ((char in string2) == False): \r\n            diff_string += char \r\n    return diff_string", "task_id": 5404}
{"finetuning_prompt": "\"\"\"\nGenerate modified code to print unique elements in a list.\n\"\"\"\n\ndef print_unique(test_list):\n", "finetuning_completion": " \r\n\r\n    unique_list = [] \r\n   \r\n    for num in test_list: \r\n        if num not in unique_list: \r\n            unique_list.append(num) \r\n    for num in unique_list: \r\n        print(num)", "task_id": 5405}
{"finetuning_prompt": "\"\"\"\nDesign and code an algorithm to find a missing number in a given array.\n\"\"\"\n\ndef find_Missing(test_array):\n", "finetuning_completion": " \r\n  \r\n    n = len(test_array) \r\n    total = (n + 1)*(n + 2)//2\r\n    sum_of_array = sum(test_array) \r\n    return total - sum_of_array", "task_id": 5406}
{"finetuning_prompt": "\"\"\"\nWrite code to rearrange the elements of an array in zig zag fashion.\n\"\"\"\n\ndef zigZagArrange(test_array):\n", "finetuning_completion": " \r\n  \r\n    n = len(test_array) \r\n    is_less = True\r\n  \r\n    for i in range (n - 1): \r\n        if is_less:  \r\n            if test_array[i] > test_array[i + 1]: \r\n                test_array[i],test_array[i + 1] = test_array[i + 1],test_array[i] \r\n\r\n        else:  \r\n            if test_array[i] < test_array[i + 1]: \r\n                test_array[i],test_array[i + 1] = test_array[i + 1],test_array[i] \r\n\r\n        is_less = not is_less \r\n    return test_array", "task_id": 5407}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find the missing elements in the range of an array.\n\"\"\"\n\ndef missing_Elements(test_array):\n", "finetuning_completion": "\n \n    min_num, max_num = min(test_array), max(test_array) \r\n    missing_list = []\n    for num in range(min_num, max_num + 1):\n        if num not in test_array:\n            missing_list.append(num)\n    return missing_list", "task_id": 5408}
{"finetuning_prompt": "\"\"\"\nCreate a python script to form a new list of numbers that are pairs of two numbers from given two different list of numbers.\n\"\"\"\n\ndef form_list(list1, list2):\n", "finetuning_completion": "\r\n    list3 = [(x,y) for x in list1 for y in list2] \r\n    return list3", "task_id": 5415}
{"finetuning_prompt": "\"\"\"\nCreate a function to evaluate the given expression.\n\"\"\"\n\ndef evaluate_exp(exp):\n", "finetuning_completion": " \r\n    try: \r\n        res = eval(exp) \r\n        return res \r\n    except: \r\n        print(\"Invalid expression\") \n \r\nevaluate_exp(\"((50+60)*20)+10\")", "task_id": 5418}
{"finetuning_prompt": "\"\"\"\nWrite a recursive function to calculate the Fibonacci number at a given index in the sequence.\n\"\"\"\n\ndef fibonacci(index):\n", "finetuning_completion": "\n    if index <= 1: \n        return index\n    else: \n        return fibonacci(index-1) + fibonacci(index-2)", "task_id": 5420}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python which takes two lists as input and returns a new list with the elements present in both the lists.\n\"\"\"\n\ndef intersect(list1, list2):\n", "finetuning_completion": "\n    return [value for value in list1 if value in list2]", "task_id": 5422}
{"finetuning_prompt": "\"\"\"\nWrite a function which determines the radius of a circle from the given area.\n\"\"\"\n\ndef findRadius(area):\n", "finetuning_completion": "\n    return math.sqrt(area/math.pi)", "task_id": 5423}
{"finetuning_prompt": "\"\"\"\nCreate a program that can edit an existing code to change the function parameters.\n\"\"\"\n\ndef edit_parameters(lines):\n", "finetuning_completion": "\n    new_lines = []\n    for line in lines:\n        if line.startswith('def '):\n            new_lines.append(line[:3] + 'edit_' + line[3:])\n        else:\n            new_lines.append(line)\n    return new_lines", "task_id": 5428}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find the maximum subarray from a given array using dynamic programming.\n\"\"\"\n\ndef max_subarray(arr):\n", "finetuning_completion": " \r\n  \r\n    max_so_far = arr[0] \r\n    curr_max = arr[0] \r\n      \r\n    for i in range(1,len(arr)): \r\n        curr_max = max(arr[i], curr_max + arr[i]) \r\n        max_so_far = max(max_so_far, curr_max) \r\n          \r\n    return max_so_far", "task_id": 5434}
{"finetuning_prompt": "\"\"\"\nEdit a given code to correct an indentation error.\n\"\"\"\n\ndef function():\n", "finetuning_completion": "\n    print('Hello')\n    return", "task_id": 5441}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort data with a given compare function.\n\"\"\"\n\ndef sort_data(data, compare):\n", "finetuning_completion": "\n    quick_sort(data, 0, len(data)-1, compare)\n\ndef quick_sort(data, start, end, compare):\r\n    if start < end:\r\n        p = pivot(data, start, end, compare)\r\n        quick_sort(data, start, p-1, compare)\r\n        quick_sort(data, p+1, end, compare) \r\n        \r\ndef pivot(data, start, end, compare):\r\n    i, j = start, start+1\r\n    while j <= end:\r\n        if compare(data[j], data[start]):\r\n            data[i], data[j] = data[j], data[i] \r\n            i += 1\r\n        j += 1\n\n    data[start], data[i] = data[i], data[start]\r\n    return i", "task_id": 5449}
{"finetuning_prompt": "\"\"\"\nWrite a function to fetch the K most frequent elements in a given array.\n\"\"\"\n\nfrom collections import Counter \ndef most_frequent(arr,k):\n", "finetuning_completion": " \n\tres = [] \n\tc = Counter(arr) \n\tfor cnt in c.most_common(k): \n\t\tres.append(cnt[0]) \n\treturn res \nmost_frequent([34, 12, 24, 9, 5, 24, 7, 7, 24], 3)", "task_id": 5451}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to implement Knuth - Morris - Prat algorithm for string pattern matching.\n\"\"\"\n\ndef KMPSearch(text, pattern):\n", "finetuning_completion": " \n\tlps = [0] * len(pattern) \n\tk = 0\n\tfor i in range(1, len(pattern)): \n\t\tif pattern[i] == pattern[k]: \n\t\t\tk += 1\n\t\t\tlps[i] = k \n\t\telse: \n\t\t\tif k != 0: \n\t\t\t\tk = lps[k-1] \n\t\t\t\ti -= 1\n\t\t\telse: \n\t\t\t\tlps[i] = 0\n\ti = j = 0\n\twhile i < len(text): \n\t\tif pattern[j] == text[i]: \n\t\t\ti += 1\n\t\t\tj += 1\n\t\tif j == len(pattern): \n\t\t\treturn i-j\n\t\telif i < len(text) and pattern[j] != text[i]: \n\t\t\tif j != 0: \n\t\t\t\tj = lps[j-1] \n\t\t\telse: \n\t\t\t\ti += 1\n\treturn -1", "task_id": 5452}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the combination of items which maximize the given value.\n\"\"\"\n\ndef knapsack(values, weights, capacity):\n", "finetuning_completion": " \r\n    n = len(values) \r\n    K = [[0 for x in range(capacity + 1)] for y in range(n + 1)] \r\n\r\n    for i in range(n + 1): \r\n        for w in range(capacity + 1): \r\n            if i == 0 or w == 0: \r\n                K[i][w] = 0\r\n            elif weights[i - 1] <= w: \r\n                K[i][w] = max(values[i - 1] + K[i - 1][w - weights[i - 1]],  K[i - 1][w])\r\n            else: \r\n                K[i][w] = K[i - 1][w]\r\n\r\n    return K[n][capacity]", "task_id": 5460}
{"finetuning_prompt": "\"\"\"\nGenerate a program to efficiently print all possible combinations of the given array.\n\"\"\"\n\ndef print_combinations(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        for j in range(i + 1, len(arr)): \r\n            for k in range(j + 1, len(arr)):  \r\n                print(arr[i], arr[j], arr[k])", "task_id": 5464}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the sum of all prime numbers between two given integers.\n\"\"\"\n\ndef primeSum(n1, n2):\n", "finetuning_completion": " \r\n\tsum = 0\r\n\tfor i in range(n1, n2 + 1): \r\n\t\tif i > 1: \r\n\t\t\tfor j in range(2, i):  \r\n\t\t\t\tif (i % j) == 0:  \r\n\t\t\t\t\tbreak \r\n\t\t\telse: \r\n\t\t\t\tsum += i \r\n\treturn sum", "task_id": 5477}
{"finetuning_prompt": "\"\"\"\nCreate a function to reverse a given number and check if the new number is a palindrome or not.\n\"\"\"\n\ndef reverse_and_check_palindrome(num):\n", "finetuning_completion": " \r\n    rev = 0\r\n    n = num \r\n    while n > 0: \r\n        rem = n % 10 \r\n        rev = (rev * 10) + rem \r\n        n = n // 10 \r\n    if num == rev: \r\n        return True \r\n    return False", "task_id": 5480}
{"finetuning_prompt": "\"\"\"\nDevelop a function that takes input a matrix and prints the transpose of the matrix.\n\"\"\"\n\ndef transpose_matrix(mat):\n", "finetuning_completion": " \r\n    rows = len(mat) \n    cols = len(mat[0]) \r\n          \r\n    result = [[0 for j in range(rows)]  \r\n                for i in range(cols)] \r\n  \r\n    for i in range(rows): \r\n        for j in range(cols): \r\n            result[j][i] = mat[i][j] \r\n  \r\n    return result \n  \nMatrix =[ \n          [5, 8], \r\n          [7, 9], \r\n          [11, 2]\r\n        ] \r\n          \r\nprint( transpose_matrix(Matrix))", "task_id": 5482}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to separate odd numbers from even numbers from a list.\n\"\"\"\n\ndef separateOddEven(lst):\n", "finetuning_completion": "  \n    odd = [] \r\n    even = [] \r\n    for num in lst: \r\n        if num % 2 == 0: \r\n            even.append(num) \r\n        else: \r\n            odd.append(num) \r\n    return (odd,even) \r\n \r\nnumlist = [2, 4, 8, 10, 12, 3, 1, 7]\r\n  \r\nresult = separateOddEven(numlist) \r\nprint(\"Odd numbers in the list: \", result[0]) \r\nprint(\"Even numbers in the list: \", result[1])", "task_id": 5483}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sort the items in a tuple.\n\"\"\"\n\ndef Sort(tup):\n", "finetuning_completion": " \r\n\r\n    lst = list(tup) \r\n    lst.sort() \r\n    return tuple(lst)", "task_id": 5486}
{"finetuning_prompt": "\"\"\"\nGenerate words from two lists of words using Python?\n\"\"\"\n\ndef generate_words(listA, listB):\n", "finetuning_completion": "\r\n    words = []\r\n    for a in listA:\r\n        for b in listB:\r\n            words.append(a+b)\r\n    return words", "task_id": 5490}
{"finetuning_prompt": "\"\"\"\nCompute the similarity between two given strings using Edit distance algorithm.\n\"\"\"\n\ndef edit_distance(string1, string2):\n", "finetuning_completion": "\r\n    m = len(string1) \r\n    n = len(string2) \r\n    \r\n    # Create a matrix to store results of subproblems \r\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \r\n\r\n    # Fill d[][] in bottom up manner \r\n    for i in range(m+1): \r\n        for j in range(n+1): \r\n\r\n            # If first string is empty, only option is to \r\n            # insert all characters of second string \r\n            if i == 0: \r\n                dp[i][j] = j    # Min. operations = j \r\n\r\n            # If second string is empty, only option is to \r\n            # remove all characters of second string \r\n            elif j == 0: \r\n                dp[i][j] = i    # Min. operations = i \r\n\r\n            # If last characters are same, ignore last char \r\n            # and recur for remaining string \r\n            elif string1[i-1] == string2[j-1]: \r\n                dp[i][j] = dp[i-1][j-1] \r\n\r\n            # If last character are different, consider all \r\n            # possibilities and find minimum \r\n            else: \r\n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \r\n                                   dp[i-1][j],        # Remove \r\n                                   dp[i-1][j-1])    # Replace \r\n\r\n    return dp[m][n]", "task_id": 5494}
{"finetuning_prompt": "\"\"\"\nGenerate a program which takes two numbers as parameter and swap events between them.\n\"\"\"\n\ndef swap(num1, num2):\n", "finetuning_completion": " \r\n    temp = num1 \r\n    num1 = num2 \r\n    num2 = temp  \r\n      \r\n    return [num1, num2]", "task_id": 5513}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes a text as input and prints out the length of each word in the text.\n\"\"\"\n\ndef length_of_each_word(text):\n", "finetuning_completion": "\r\n    output = \"\"\r\n    for word in text.split():\r\n        output += str(len(word)) + \" \"\r\n    return output[0:-1]\r\nprint(length_of_each_word('hello world'))", "task_id": 5516}
{"finetuning_prompt": "\"\"\"\nDesign a function to append the given item to the end of the list.\n\"\"\"\n\ndef append_list(list1, item):\n", "finetuning_completion": " \n\tlist1.append(item)\n\treturn list1", "task_id": 5519}
{"finetuning_prompt": "\"\"\"\nDesign a program to remove all the elements of the given dictionary whose value is even.\n\"\"\"\n\ndef remove_even_value(dict1):\n", "finetuning_completion": " \n\tres = {k:v for (k, v) in dict1.items() if v%2!=0} \n\treturn (res)", "task_id": 5520}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes in a dataset with age, gender, height and shoe size as features and returns a prediction for whether the person is tall.\n\"\"\"\n\ndef predict_tall(age, gender, height, shoe_size):\n", "finetuning_completion": " \r\n    if gender == \"male\": \r\n        if height >= 180 and shoe_size >= 45: \r\n            return True \r\n        else: \r\n            return False \r\n    else: \r\n        if height >= 170 and shoe_size >= 40: \r\n            return True \r\n        else: \r\n            return False \r\n  \r\n# calling the function \r\nresult = predict_tall(25, \"male\", 182, 45) \r\nprint(result)", "task_id": 5523}
{"finetuning_prompt": "\"\"\"\nGenerate the Fibonacci series up to the nth number.\n\"\"\"\n\ndef fibonacci(n):\n", "finetuning_completion": " \r\n    result = [] \r\n    a, b = 0, 1\r\n    while a < n: \r\n        result.append(a) \r\n        a, b = b, a+b \r\n    return result \r\n# calling the function \r\nprint(fibonacci(20))", "task_id": 5525}
{"finetuning_prompt": "\"\"\"\nCreate a program to print out the first n lines of the Pascal's triangle.\n\"\"\"\n\ndef pascals_triangle(n):\n", "finetuning_completion": "\n    triangle = []\n    for row in range(n):\n        new_row = [1]\n        for number in range(1, row+1):\n            if row == 0 or number == row:\n                new_row.append(1)\n            else:\n                new_row.append(triangle[row - 1][number - 1] + triangle[row - 1][number])\n        triangle.append(new_row)\n    return triangle", "task_id": 5534}
{"finetuning_prompt": "\"\"\"\nGenerate a code for a function that encrypts the given message using Caesar Cipher.\n\"\"\"\n\ndef ceaserCipherEncryptor(message, key):\n", "finetuning_completion": "\r\n    result = \"\"\r\n    for i in range(len(message)):\r\n        char = message[i]\r\n        if char.isalpha():\r\n            charCode = ord(char)\r\n            charCode += key\r\n           \r\n            if char.isupper():\r\n                if charCode > ord('Z'):\r\n                    charCode = charCode - 26\r\n                elif charCode < ord('A'):\r\n                    charCode = charCode + 26\r\n            elif char.islower():\r\n                if charCode > ord('z'):\r\n                    charCode = charCode - 26\r\n                elif charCode < ord('a'):\r\n                    charCode = charCode + 26\r\n            result += chr(charCode)\r\n        else:\r\n            result += char\r\n    return result", "task_id": 5545}
{"finetuning_prompt": "\"\"\"\nWrite a function to sort an array by partitioning it around a given value x.\n\"\"\"\n\ndef quicksort(arr, low, high, x):\n", "finetuning_completion": " \r\n\tif (low < high): \r\n\t\tpi = partition(arr, low, high, x) \r\n\r\n\t\tquicksort(arr, low, pi - 1, x) \r\n\t\tquicksort(arr, pi + 1, high, x) \r\n\r\ndef partition(arr, low, high, x): \r\n\ti = (low - 1) \r\n\tpivot = x \r\n\tfor j in range(low, high): \r\n\t\tif arr[j] <= pivot: \r\n\t\t\ti = i + 1\r\n\t\t\tarr[i], arr[j] = arr[j], arr[i] \r\n\tarr[i + 1], arr[high] = arr[high], arr[i + 1] \r\n\treturn (i + 1)", "task_id": 5552}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to delete an element from a given dictionary whose key matches the given string.\n\"\"\"\n\ndef delete_element(dictionary, string):\n", "finetuning_completion": " \r\n    del dictionary[string] \r\n    return dictionary \r\n  \r\ndict1 = {'a':1, 'b':2, 'c':3, 'd':4} \r\nstr1 = 'c' \r\nprint(delete_element(dict1, str1))", "task_id": 5556}
{"finetuning_prompt": "\"\"\"\nGenerate a program to display the product of elements of a 2D list.\n\"\"\"\n\ndef print2DListProduct(lst):\n", "finetuning_completion": " \n  \r\n    # variable to store product \r\n    product = 1\r\n  \n    # iterating through the list \r\n    for i in range(len(lst)): \r\n        for j in range(len(lst[i])): \r\n            # multiplying elements \r\n            product *= lst[i][j] \r\n  \r\n    # return result \r\n    return product", "task_id": 5557}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a string and returns the longest word in the string.\n\"\"\"\n\ndef longest_word(string):\n", "finetuning_completion": "\n    words = string.split()\n    max_len = 0\n    result = ''\n    for w in words:\n        if len(w) > max_len:\n            max_len = len(w)\n            result = w\n    return result", "task_id": 5561}
{"finetuning_prompt": "\"\"\"\nModify the existing code to remove all the numbers in a given list which is a multiple of 3 or 5.\n\"\"\"\n\narr = [4, 16, 17]\n\ndef remove_mul(arr):\n", "finetuning_completion": "  \n    new_arr = [] \n    for i in arr: \n        if (i % 5 != 0) and (i % 3 != 0): \n            new_arr.append(i) \n    return new_arr", "task_id": 5566}
{"finetuning_prompt": "\"\"\"\nCreate a program which computes the product of all the elements in a given dictionary.\n\"\"\"\n\ndef get_product(val):\n", "finetuning_completion": " \r\n\tres = 1\r\n\tfor ele in val.values(): \r\n\t\tres *= ele \r\n\treturn (res)", "task_id": 5571}
{"finetuning_prompt": "\"\"\"\nWrite a function to combine an array of substrings into a single string.\n\"\"\"\n\ndef combine_string(strings):\n", "finetuning_completion": "\r\n  return ' '.join(strings)", "task_id": 5574}
{"finetuning_prompt": "\"\"\"\nCreate a code to generate an edit distance matrix from two given strings.\n\"\"\"\n\ndef edit_distance(string1,string2):\n", "finetuning_completion": "\r\n  n = len(string1)\r\n  m = len(string2)\r\n  \r\n  matrix= [[0 for x in range(m+1)] for y in range(n+1)]\r\n  \r\n  for i in range(n+1):\r\n    for j in range(m+1):\r\n      if i == 0 and j == 0: \r\n        matrix[i][j] = 0\r\n      elif i == 0:\r\n        matrix[i][j] = j\r\n      elif j == 0:\r\n        matrix[i][j] = i\r\n      elif string1[i-1] == string2[j-1]: \r\n        matrix[i][j] = matrix[i-1][j-1]\r\n      else: \r\n        matrix[i][j] = 1 + min(matrix[i][j-1],matrix[i-1][j],matrix[i-1][j-1])\r\n  return matrix", "task_id": 5575}
{"finetuning_prompt": "\"\"\"\nCreate a code to compress an array of numbers.\n\"\"\"\n\ndef compress_array(array):\n", "finetuning_completion": "\r\n  new_array = []\r\n  i = 0 \r\n  while(i<len(array)): \r\n    count = 1\r\n    while(i<len(array)-1 and array[i]==array[i+1]): \r\n      count += 1\r\n      i += 1\r\n    new_array.append(array[i]) \r\n    new_array.append(count)\r\n    i += 1 \r\n  return new_array", "task_id": 5576}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes in a list and returns the longest increasing subsequence using dynamic programming.\n\"\"\"\n\ndef longestSubsequenceLength(arr, n):\n", "finetuning_completion": " \r\n    lis = [1 for i in range(n)] \r\n    for i in range (1 , n): \r\n        for j in range(0 , i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n    maximum = 0\r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i])  \r\n\r\n    return maximum", "task_id": 5581}
{"finetuning_prompt": "\"\"\"\nOptimize a python program to loop over a list and print adjacent numbers.\n\"\"\"\n\ndef print_adj_nums(lst):\n", "finetuning_completion": " \n    for i in range(len(lst)-1): \n        print(lst[i], lst[i+1])", "task_id": 5585}
{"finetuning_prompt": "\"\"\"\nCreate a hashing algorithm for storing a string.\n\"\"\"\n\ndef hash_string(string):\n", "finetuning_completion": "\n    hash = 5381\n    for i in range(len(string)):\n        hash += (hash << 5) + ord(string[i]) \n    return hash\n\nprint(hash_string(\"string\")) # Outputs 183206363656271164", "task_id": 5589}
{"finetuning_prompt": "\"\"\"\nGenerate a program that takes a list and swaps adjacent elements.\n\"\"\"\n\ndef swap_adjacent(lst):\n", "finetuning_completion": " \r\n\tfor i in range(0, len(lst)-1, 2): \r\n\t\tlst[i], lst[i+1] = lst[i+1], lst[i] \r\n\treturn lst", "task_id": 5606}
{"finetuning_prompt": "\"\"\"\nGenerate a program that finds the nearest value of a given number in an ordered list.\n\"\"\"\n\ndef find_closest(lst, find_val):\n", "finetuning_completion": " \r\n\r\n\t# initializing the difference \r\n\tdiff = lst[0] \r\n\r\n\tfor num in lst: \r\n\t\tif abs(num - find_val) < abs(diff - find_val): \r\n\t\t\tdiff = num \r\n\treturn diff", "task_id": 5607}
{"finetuning_prompt": "\"\"\"\nBuild a calculator program for basic arithmetic operations.\n\"\"\"\n\ndef perform_calculation(a,b, operation):\n", "finetuning_completion": "\r\n  if (operation == '+'):\r\n    return a + b\r\n  elif (operation == '-'):\r\n    return a - b\r\n  elif (operation == '*'):\r\n    return a * b\r\n  elif (operation == '/'):\r\n    return a / b\r\n  else:\r\n    print(\"Operation is not valid\")", "task_id": 5608}
{"finetuning_prompt": "\"\"\"\nGenerate a function which can switch the values of two variables.\n\"\"\"\n\ndef switch_values(x, y):\n", "finetuning_completion": " \n    temp = x \r\n    x = y \r\n    y = temp \r\n    return x, y", "task_id": 5610}
{"finetuning_prompt": "\"\"\"\nCreate a program which takes an array of integers and finds the pair of numbers that sum up to 10.\n\"\"\"\n\ndef find_pair(arr):\n", "finetuning_completion": " \r\n    for i in range(0, len(arr)): \r\n        for j in range(i+1, len(arr)): \r\n            if arr[i] + arr[j] == 10: \r\n                return [arr[i], arr[j]] \r\n        else: \r\n            return 0", "task_id": 5626}
{"finetuning_prompt": "\"\"\"\nGenerate a program that takes a string of characters and returns true if the string includes at least one lowercase letter, uppercase letter and a number.\n\"\"\"\n\nimport re\nchars = \"abcdEFG1234\"\ndef condition_check(chars):\n", "finetuning_completion": " \n    condition1 = False\r\n    condition2 = False\r\n    condition3 = False\r\n\r\n    if re.search(\"[a-z]\", chars): \r\n        condition1 = True\r\n    if re.search(\"[A-Z]\", chars): \r\n        condition2 = True\r\n    if re.search(\"[0-9]\", chars): \r\n        condition3 = True\r\n    if condition1 == True and condition2 == True and condition3 == True: \r\n        return True\r\n    else: \r\n        return False", "task_id": 5628}
{"finetuning_prompt": "\"\"\"\nCreate a function to sort a dictionary by keys, in decreasing order.\n\"\"\"\n\ndef sort_dictionary(dictionary):\n", "finetuning_completion": " \r\n    sorted_keys = sorted(dictionary, reverse = True) \r\n    sorted_dict = {} \r\n    for x in sorted_keys: \r\n        sorted_dict[x] = dictionary[x] \r\n    return sorted_dict", "task_id": 5629}
{"finetuning_prompt": "\"\"\"\nOptimize the algorithm to reverse a string with fewer lines of code.\n\"\"\"\n\ndef rev_string(str):\n", "finetuning_completion": " \n    n = len(str) \n    revstr = \"\" \n    for i in range(n - 1, -1, -1): \n        revstr += str[i] \n    return revstr", "task_id": 5630}
{"finetuning_prompt": "\"\"\"\nMake a function to count the number of times a given word occurs in a text.\n\"\"\"\n\ndef count_word_occurences(text, word):\n", "finetuning_completion": "\r\n  count = 0\r\n  for i in text.split(): \r\n    if i == word: \r\n      count += 1\r\n  return count", "task_id": 5631}
{"finetuning_prompt": "\"\"\"\nExtrapolate or estimate the output of a given data set.\n\"\"\"\n\ndef extrapolate(data):\n", "finetuning_completion": " \r\n  x1 = data[-2][0] \r\n  x2 = data[-1][0] \r\n  \r\n  y1 = data[-2][1] \r\n  y2 = data[-1][1] \r\n  \r\n  return ((y2-y1)/(x2-x1)) * (x1+1) + y1", "task_id": 5632}
{"finetuning_prompt": "\"\"\"\nImplement a function to find the minimum number of deletions and insertions between two strings.\n\"\"\"\n\ndef min_edit_dist(s1, s2):\n", "finetuning_completion": " \r\n\r\n    m = len(s1) \r\n    n = len(s2) \r\n\r\n    # Create a table to store results of subproblems \r\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \r\n\r\n    # Insertion and deletion calculation \r\n    for i in range(m + 1): \r\n        for j in range(n + 1): \r\n\r\n            # Bypass the null strings \r\n            if i == 0: \r\n                dp[i][j] = j    # Min. operations = j \r\n\r\n            elif j == 0: \r\n                dp[i][j] = i    # Min. operations = i \r\n\r\n            elif s1[i-1] == s2[j-1]: \r\n                dp[i][j] = dp[i-1][j-1] \r\n\r\n            else: \r\n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert \r\n                                   dp[i-1][j],        # Remove \r\n                                   dp[i-1][j-1])    # Replace \r\n\r\n    return dp[m][n]", "task_id": 5634}
{"finetuning_prompt": "\"\"\"\nModify the previous Fibonacci sequence program to enable caching\n\"\"\"\n\ndef fibonacci(n, cache={}):\n", "finetuning_completion": " \n    if n in cache: \n        return cache[n] \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        cache[n] = fibonacci(n-1, cache) + fibonacci(n-2, cache) \n        return cache[n]", "task_id": 5647}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the summation of GCD of all pairs in an array.\n\"\"\"\n\ndef gcdSumPairwise(arr):\n", "finetuning_completion": " \n\t\n\tsum = 0\n\t\n\tfor i in range(len(arr)): \n\t\tfor j in range(i+1, len(arr)): \n\t\t\tsum += math.gcd(arr[i], arr[j]) \n\t\n\treturn sum", "task_id": 5650}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the type of character present in each index of the given string.\n\"\"\"\n\ndef character_Identifier(inp):\n", "finetuning_completion": " \r\n  output = [] \r\n  for i in inp: \r\n    if i.isalpha(): \r\n      output.append(\"Letter\") \r\n    elif i.isdigit(): \r\n      output.append(\"Number\") \r\n    else: \r\n      output.append(\"Special Character\") \r\n  return output", "task_id": 5654}
{"finetuning_prompt": "\"\"\"\nCreate a program to remove any repeated characters in the given sentence.\n\"\"\"\n\ndef remove_Repeated_Characters(inp):\n", "finetuning_completion": " \r\n  output = [] \r\n  for i in inp: \r\n    if(i not in output): \r\n      output.append(i) \r\n  return \"\".join(output)", "task_id": 5657}
{"finetuning_prompt": "\"\"\"\nCreate a python script which takes an integer as an input and prints its factorial.\n\"\"\"\n\ndef factorial(num):\n", "finetuning_completion": "\n  fact = 1\n  for i in range(1,num+1):\n    fact = fact * i\n  return fact\n\n# Driver Code\nnum = 5\nprint(\"Factorial of\",num,\"is\",factorial(num))", "task_id": 5664}
{"finetuning_prompt": "\"\"\"\nDesign a program to print the list of prime numbers between 1 to 30.\n\"\"\"\n\ndef prime_num(n):\n", "finetuning_completion": " \n  for num in range(2,n+1): \n    prime = True\n    for i in range(2, num): \n        if (num % i == 0): \n            prime = False\n    if prime: \n        print(num)", "task_id": 5681}
{"finetuning_prompt": "\"\"\"\nWrite a python program to print the pattern for a staircase of size 7.\n\"\"\"\n\ndef pattern_Staircase(n):\n", "finetuning_completion": " \r\n     \r\n    for i in range(0, n): \r\n        for j in range(0, n-i-1): \r\n            print(end=\" \")  \r\n        for j in range(0, i+1): \r\n            print(\"#\", end=\"\")  \r\n        print(\"\\r\")", "task_id": 5689}
{"finetuning_prompt": "\"\"\"\nWrite a python code to get the union of two numbers.\n\"\"\"\n\ndef union(number1, number2):\n", "finetuning_completion": " \r\n\treturn (list(set().union(number1, number2)))", "task_id": 5691}
{"finetuning_prompt": "\"\"\"\nCompute the score of each word in the given dictionary.\n\"\"\"\n\ndef compute_scores(d):\n", "finetuning_completion": "\r\n  scores={}\r\n  for k,v in d.items():\r\n    scores[k]=v**2\r\n  return scores", "task_id": 5701}
{"finetuning_prompt": "\"\"\"\nEdit existing code to make a positive number always an even number.\n\"\"\"\n\ndef positive_num(a):\n", "finetuning_completion": "\n    if(a > 0):\n        if (a % 2 == 1):\n            a= a+1\n        else:\n            a = a+2\n    return a", "task_id": 5706}
{"finetuning_prompt": "\"\"\"\nGenerate a custom sorting algorithm using stable and unstable sorting techniques, to sort an array of numbers\n\"\"\"\n\ndef custom_sort(arr):\n", "finetuning_completion": "\n    arr.sort()\n    i = 0\n    while i < len(arr) - 2:\n        if arr[i] == arr[i+2]:\n            arr[i], arr[i+2] = arr[i+2], arr[i]\n        i += 1\n    return arr", "task_id": 5709}
{"finetuning_prompt": "\"\"\"\nOptimize the existing code to find the maximum possible sum of elements from an array.\n\"\"\"\n\ndef maximum_sum(a):\n", "finetuning_completion": "\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(current_sum, max_sum)\n    return max_sum", "task_id": 5710}
{"finetuning_prompt": "\"\"\"\nMake a function to generate a list of the powers of a given number.\n\"\"\"\n\ndef powers_of_number(num):\n", "finetuning_completion": " \n    powers = [] \n    for i in range(0, 10): \n        powers.append(pow(num,i)) \n    return powers", "task_id": 5717}
{"finetuning_prompt": "\"\"\"\nWrite a function to print hello world with a given font size.\n\"\"\"\n\ndef print_hello_world(font_size):\n", "finetuning_completion": "\n  print(\"\\033[1;\"+ str(font_size) +\"mHello World\\033[0m\")", "task_id": 5721}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify a document into one of the given categories.\n\"\"\"\n\ndef classify_doc(doc, categories):\n", "finetuning_completion": "\r\n  for category in categories:\r\n    if category in doc:\r\n      return category\r\n  return 'Other'", "task_id": 5723}
{"finetuning_prompt": "\"\"\"\nCreate an editor which can be used to replace all occurrences of a substring in a given string.\n\"\"\"\n\ndef editor(str, oldSubstring, newSubstring):\n", "finetuning_completion": " \r\n    while oldSubstring in str: \r\n        str = str.replace(oldSubstring, newSubstring)\r\n    return str", "task_id": 5725}
{"finetuning_prompt": "\"\"\"\nCreate a python program that takes a user's age in years and returns the user's approximate age in days.\n\"\"\"\n\ndef age_in_days(ages):\n", "finetuning_completion": " \n    # calculate days  \n    return ages * 365", "task_id": 5733}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes an input array and uses divide-and-conquer techniques to find the maximum value in the array.\n\"\"\"\n\ndef find_max(arr, low, high):\n", "finetuning_completion": "\r\n    if high == low:\r\n        return arr[low]\r\n    \r\n    mid = (low + high) // 2\r\n    max_left = find_max(arr, low, mid)\r\n    max_right = find_max(arr, mid + 1, high)\r\n    \r\n    return max(max_left, max_right)", "task_id": 5742}
{"finetuning_prompt": "\"\"\"\nCreate a program to print the three most frequent elements from an array.\n\"\"\"\n\nimport collections\n \ndef print_most_frequent(arr):\n", "finetuning_completion": " \n \n    counter = collections.Counter(arr) \n     \n    # Finding 3 most frequent element \n    three_most_frequent = counter.most_common(3) \n    print(\"The three most frequent elements : \",end=\"\") \n    for element in three_most_frequent: \n        print(element[0], end=\",\")", "task_id": 5748}
{"finetuning_prompt": "\"\"\"\nWrite a function to update the ages of the given list of people by one year.\n\"\"\"\n\ndef updateAges(people):\n", "finetuning_completion": "\r\n  updated_people = []\r\n  for person in people:\r\n    updated_people.append((person[0],person[1] + 1))\r\n  return updated_people", "task_id": 5751}
{"finetuning_prompt": "\"\"\"\nGenerate a new list that contains the triples for each item in the given list.\n\"\"\"\n\ndef list_triple(list):\n", "finetuning_completion": " \n  new_list = [] \n  for item in list: \n    new_list.append(item*3) \n  return new_list", "task_id": 5769}
{"finetuning_prompt": "\"\"\"\nCreate a Python function to count the number of ways to express a given change as a set of coins.\n\"\"\"\n\ndef count_ways(value, coins):\n", "finetuning_completion": " \n    m = len(coins) \n    dp = [0 for x in range(value + 1)]\n    dp[0] = 1\n    for i in range(0, m): \n        for j in range(coins[i], value + 1): \n            dp[j] += dp[j - coins[i]] \n  \n    return dp[value]", "task_id": 5781}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the total number of combinations of selecting 'r' elements out of 'n' distinct elements.\n\"\"\"\n\ndef nCr(n, r):\n", "finetuning_completion": " \n  \n    res = 1   \n    if (r > n - r): \n        r = n - r \n  \n    for i in range(r): \n        res *= (n - i) \n        res //= (i + 1) \n    return res", "task_id": 5783}
{"finetuning_prompt": "\"\"\"\nEdit a given code to increase run time efficiency.\n\"\"\"\n\ndef sum_of_numbers(n):\n", "finetuning_completion": " \n    return (n*(n+1))/2", "task_id": 5786}
{"finetuning_prompt": "\"\"\"\nAnalyze the running time and optimize the given piece of code.\n\"\"\"\n\ndef my_function(N):\n", "finetuning_completion": " \n\n\tcounter = 0 \n\tother_counter = 0\n\tfor i in range(N): \n\t\tfor j in range(N): \n\t\t\tother_counter += 1\n\t\tfor k in range(N): \n\t\t\tcounter += 1\n\t\tother_counter += 1\n\treturn counter + other_counter", "task_id": 5787}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the total number of ways to reach a given stair.\n\"\"\"\n\ndef num_ways(n):\n", "finetuning_completion": " \n\n    # If no. of stairs is 0, then no way \n    # If no. of stairs is 1, then one way \n    if n == 0 or n == 1: \n        return 1\n\n    # If no. of stairs is 2, then two ways \n    if n == 2: \n        return 2\n\n    # If no. of stairs is more than 2, \n    # then find the ways by adding one of \n    # the previously calculated values \n    else: \n        return num_ways(n - 1) + num_ways(n - 2)", "task_id": 5788}
{"finetuning_prompt": "\"\"\"\nWrite a Python module to parse HTML tags and break down the text into sentences.\n\"\"\"\n\nimport re\r\n\r\ndef parse_html_tags(html):\n", "finetuning_completion": "\r\n    sentences = []\r\n    html_text = re.sub(r\"(<.*?>)\",\"\",html)\r\n    sentences = re.split(r\"(?<=[.!?]) +\", html_text)\r\n    return sentences", "task_id": 5795}
{"finetuning_prompt": "\"\"\"\nCreate a method to generate a regular expression to recognize phone numbers.\n\"\"\"\n\ndef generate_phone_number_regex():\n", "finetuning_completion": " \r\n  \r\n\t# Phone number regex \r\n\tregex = \"^\\+?[0-9]?[0-9]?[0-9][\\-\\s]?\\(?[0-9]{3}\\)?[\\-\\s]?[0-9]{3}[\\-\\s]?[0-9]{4}$\"\r\n\t\r\n\treturn regex", "task_id": 5803}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to order the given dictionary by value.\n\"\"\"\n\ndef order_dict_by_value(test_dict):\n", "finetuning_completion": " \r\n  sorted_dict = dict(sorted(test_dict.items(), key = lambda kv:(kv[1], kv[0]))) \r\n  return sorted_dict", "task_id": 5807}
{"finetuning_prompt": "\"\"\"\nCreate a program to search a given list for a given item and return the index of that item.\n\"\"\"\n\ndef search_list(list, item):\n", "finetuning_completion": "\r\n  for index, value in enumerate(list):\r\n    if value == item:\r\n      return index\n  return -1", "task_id": 5808}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to identify a given string as palindrome or not.\n\"\"\"\n\ndef isPalindrome(string):\n", "finetuning_completion": " \n    left, right = 0, len(string) - 1\n\n    while right > 0:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True", "task_id": 5810}
{"finetuning_prompt": "\"\"\"\nGenerate a function to create a hash table from two lists.\n\"\"\"\n\ndef hash_table(list1, list2):\n", "finetuning_completion": " \n  \n    if len(list1) != len(list2): \n        return \"Lists do not have equal length\"\n  \n    hash_table = {} # Initialize hash table\n    for i in range(len(list1)): \n        hash_table[list1[i]] = list2[i]\n  \n    return hash_table", "task_id": 5811}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the difference between the average of two given lists.\n\"\"\"\n\ndef calculate_diff(list1, list2):\n", "finetuning_completion": "\r\n  list1_avg = sum(list1)/len(list1)\r\n  list2_avg = sum(list2)/len(list2)\r\n  return list1_avg - list2_avg", "task_id": 5815}
{"finetuning_prompt": "\"\"\"\nCreate a program to swap two variables\n\"\"\"\n\ndef swap_variables(a, b):\n", "finetuning_completion": "\n  temp = a\n  a = b\n  b = temp\n  return a, b", "task_id": 5817}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the minimum sum of a subarray from a given array.\n\"\"\"\n\ndef findMinSumSubArray(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    min_sum = arr[0] \r\n    for i in range(n): \r\n        for j in range(i, n): \r\n            sum = 0\r\n            for k in range(i, j + 1): \r\n                sum += arr[k] \r\n          \r\n            min_sum = min(min_sum, sum) \r\n          \r\n    return min_sum", "task_id": 5818}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to optimize the given knapsack problem.\n\"\"\"\n\ndef knapsack(items, maxWeight):\n", "finetuning_completion": "  \n    \"\"\"\n    Returns the maximum value that can be \n    obtained with a knapsack of weight \n    maxWeight \n    \"\"\"\n  \n    n = len(items) \n    cache = [[0 for w in range(maxWeight + 1)] \n                   for i in range(n + 1)] \n  \n    # Fill the entries in cache[][] \n    for i in range(n + 1): \n        for w in range(maxWeight + 1): \n\n            # Item can't be included in the optimal solution \n            if i == 0 or w == 0: \n                cache[i][w] = 0\n            # If current item weight is less \n            # than or equal to running weight \n            elif (items[i - 1][1] <= w):  \n                # Given an item, check if it is \n                # better to include it or not \n                cache[i][w] = max(items[i - 1][0] + \n                     cache[i - 1][w - items[i - 1][1]],  \n                                  cache[i - 1][w]) \n            # If current item is more than the \n            # running weight, simply ignore it \n            else: \n                cache[i][w] = cache[i - 1][w] \n  \n    return cache[n][maxWeight]", "task_id": 5824}
{"finetuning_prompt": "\"\"\"\nWrite a python program to return the first non-repeating character from the given string.\n\"\"\"\n\ndef find_FirstNonRepeat(str):\n", "finetuning_completion": " \n    char_count = {} \n    for ch in str: \n        if ch in char_count: \n            char_count[ch] += 1\n        else: \n            char_count[ch] = 1\n    for ch in str: \n        if char_count[ch] == 1: \n            return ch \n    return -1", "task_id": 5825}
{"finetuning_prompt": "\"\"\"\nGenerate a function to parse a class name from a given package name.\n\"\"\"\n\ndef get_class_name(package_name):\n", "finetuning_completion": " \r\n  package_split = package_name.split('.')\r\n  return package_split[-1]", "task_id": 5834}
{"finetuning_prompt": "\"\"\"\nGenerate a code snippet to iterate over the given list of dictionaries and find the values for each key.\n\"\"\"\n\ndef get_values(test_list):\n", "finetuning_completion": " \r\n  res = [] \r\n  for item in test_list: \r\n    res += list(item.values()) \r\n  return (res)", "task_id": 5838}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the sum of the nth series of consecutive numbers.\n\"\"\"\n\ndef sum_series(n):\n", "finetuning_completion": " \r\n    # edge case \r\n    if n == 0: \r\n        return 0\r\n  \r\n    return (n * (n + 1) // 2)", "task_id": 5842}
{"finetuning_prompt": "\"\"\"\nCreate a python script to scan a given dictionary and filter out all words containing more than three syllables.\n\"\"\"\n\ndef three_syll_filter(dict):\n", "finetuning_completion": "\r\n  outlist = []\r\n  for x in dict:\r\n    if len(x.split('-')) <= 3:\r\n      outlist.append(x)\r\n  return outlist", "task_id": 5846}
{"finetuning_prompt": "\"\"\"\nCreate an indicator function to classify numeric inputs as even or odd.\n\"\"\"\n\ndef is_even(x):\n", "finetuning_completion": "\r\n  if x % 2 == 0:\r\n    return \"even\"\r\n  else:\r\n    return \"odd\"", "task_id": 5847}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect if a given array contains a given number.\n\"\"\"\n\ndef findNum(arr, x):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        if arr[i] == x: \r\n            return True\r\n    return False", "task_id": 5856}
{"finetuning_prompt": "\"\"\"\nCreate a machine learning model for predicting whether a person is male or female based on height and weight.\n\"\"\"\n\nfrom sklearn.svm import SVC\r\nimport numpy as np\r\n\r\ndef gender_predictor(X,y):\n", "finetuning_completion": "\r\n  \r\n    X = np.array(X).reshape(-1,2)\r\n    y = np.array(y)\r\n\r\n    model = SVC(kernel='linear', probability=True)\r\n    model.fit(X, y)\r\n\r\n    return model", "task_id": 5866}
{"finetuning_prompt": "\"\"\"\nCreate an AI application for analyzing text documents and predicting their genre.\n\"\"\"\n\nimport re\r\nimport pandas as pd\r\nimport nltk \r\nfrom nltk.corpus import stopwords\r\nfrom sklearn.metrics import accuracy_score\r\nfrom sklearn.feature_extraction.text import CountVectorizer\r\nfrom sklearn.linear_model import LogisticRegression\r\n\r\ndef text_genre_predictor(train_df, test_df):\n", "finetuning_completion": "\r\n\r\n    # Pre-process the data frames\r\n    train_df['clean_text'] = train_df['text'].apply(lambda x: re.sub(\"[^a-zA-Z]\", \" \", x)) \r\n    test_df['clean_text'] = test_df['text'].apply(lambda x: re.sub(\"[^a-zA-Z]\", \" \", x)) \r\n\r\n    # Prepare features for model training\r\n    vectorizer = CountVectorizer(analyzer = \"word\", tokenizer = None, preprocessor = None, stop_words = None)\r\n    train_data_features = vectorizer.fit_transform(train_df['clean_text'])\r\n    train_data_features = train_data_features.toarray()\r\n\r\n    # Train the model \r\n    lr = LogisticRegression()\r\n    lr.fit(train_data_features, train_df['genre'])\r\n\r\n    # Predict the genre of the test texts\r\n    test_data_features = vectorizer.transform(test_df['clean_text'])\r\n    test_data_features = test_data_features.toarray()\r\n    pred = lr.predict(test_data_features)\r\n\r\n    return accuracy_score(test_df['genre'], pred)", "task_id": 5867}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify a given line equation based on its slope and intercept\n\"\"\"\n\ndef classify(slope, intercept):\n", "finetuning_completion": " \n    if slope > 0: \n        type = \"positive slope\"\n    elif slope < 0: \n        type = \"negative slope\"\n    else:  \n        type = \"horizontal line\"\n  \n    if intercept == 0: \n        type += \" going through origin\"\n    elif intercept > 0: \n        type += \" above the origin\"\n    elif intercept < 0: \n        type += \" below the origin\"\n    else:\n        type = \"Invalid slope or intercept\"\n  \n    return type", "task_id": 5871}
{"finetuning_prompt": "\"\"\"\nFind the most frequent element in an integer array of non-negative numbers.\n\"\"\"\n\ndef frequent_element(arr):\n", "finetuning_completion": " \r\n    max_element = 0\r\n    max_count = 1\r\n      \r\n    for i in range(0, len(arr)): \r\n        curr_element = arr[i] \r\n        curr_count = 0\r\n          \r\n        for j in range(1, len(arr)): \r\n            if arr[j] == curr_element: \r\n                curr_count = curr_count + 1\r\n      \r\n        if curr_count > max_count: \r\n            max_element = curr_element \r\n            max_count = curr_count \r\n  \r\n    return max_element \r\n\r\nprint(frequent_element([4,5,8,4,5,4,2,5]))", "task_id": 5876}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a string and sorts the words in alphabetical order.\n\"\"\"\n\ndef sortwords(giv_str):\n", "finetuning_completion": " \r\n    words = giv_str.split() \r\n    words.sort() \r\n    return ' '.join(words) \r\n\r\nsortwords(\"Hello world\") # Output - \"Hello world\"", "task_id": 5877}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the maximum number of consecutive same element.\n\"\"\"\n\ndef countMaxConsecutive(arr):\n", "finetuning_completion": " \r\n    max_count = 1;  \r\n    res = arr[0];  \r\n    curr_count = 1;  \r\n  \r\n    for i in range(1, len(arr)): \r\n        if (arr[i] == arr[i - 1]): \r\n            curr_count += 1; \r\n            if (curr_count > max_count):  \r\n                max_count = curr_count \r\n                res = arr[i]  \r\n        else : \r\n            curr_count = 1\r\n           \r\n    return max_count,res", "task_id": 5880}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert list strings to tuple format\n\"\"\"\n\ndef convert_list_to_tuple(list_str):\n", "finetuning_completion": "\r\n  res = tuple(list_str)\r\n  return res", "task_id": 5884}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the missing elements from the given list.\n\"\"\"\n\ndef find_missing_elements (list1):\n", "finetuning_completion": " \r\n    original_list = [i for i in range(list1[0], list1[-1]+1)]   \r\n    res = [item for item in original_list if item not in list1] \r\n    return res", "task_id": 5885}
{"finetuning_prompt": "\"\"\"\nGiven an array of numbers and a target number, write a function to find out if there is a subset of the array elements which sum up to the target.\n\"\"\"\n\ndef subset_sum(arr,target):\n", "finetuning_completion": " \r\n\tsum_arr = [0]*(target+1) \r\n\tsum_arr[0] = True\r\n\tfor i in range(len(arr)): \r\n\t\tfor j in range (target+1): \r\n\t\t\tif j >= arr[i]: \r\n\t\t\t\tsum_arr[j] = sum_arr[j] or sum_arr[j - arr[i]] \r\n\treturn sum_arr[target]", "task_id": 5887}
{"finetuning_prompt": "\"\"\"\nWrite a code that given two strings, calculates the edit distance between them using Dynamic Programming.\n\"\"\"\n\ndef editDistDP(str1, str2, m, n):\n", "finetuning_completion": " \r\n\tdp = [[0 for x in range(n+1)] for x in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i == 0: \r\n\t\t\t\tdp[i][j] = j    # Min. operations = j \r\n\t\t\telif j == 0: \r\n\t\t\t\tdp[i][j] = i    # Min. operations = i \r\n\t\t\telif str1[i-1] == str2[j-1]: \r\n\t\t\t\tdp[i][j] = dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = 1 + min(dp[i][j-1],        # Insert \r\n\t\t\t\t\t\t\t\tdp[i-1][j],        # Remove \r\n\t\t\t\t\t\t\t\tdp[i-1][j-1])    # Replace \r\n\treturn dp[m][n]", "task_id": 5896}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a 2D array as input and multiplies each element with its corresponding row and column indices.\n\"\"\"\n\ndef multi_elements_indices(grid):\n", "finetuning_completion": " \n  \r\n    result = [[0 for col in range(len(grid[0]))] \r\n                for row in range(len(grid))] \r\n  \r\n    for row in range(len(grid)): \r\n        for col in range(len(grid[0])): \r\n            result[row][col] = grid[row][col] * row * col\n  \r\n    return result", "task_id": 5902}
{"finetuning_prompt": "\"\"\"\nWrite a function in Python that implements the bubble sort algorithm and sorts the given list in ascending order.\n\"\"\"\n\ndef bubble_sort(arr):\n", "finetuning_completion": " \n\tl = len(arr) \n\tfor i in range(l): \n\t\tfor j in range(0, l-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j] \n\treturn arr", "task_id": 5924}
{"finetuning_prompt": "\"\"\"\nImplement a function which will take a 2D array and return the sum of its diagonals.\n\"\"\"\n\ndef Sum_Diagonals(arr, n):\n", "finetuning_completion": " \r\n\tsum = 0\r\n\tfor i in range(n): \r\n\t\tsum += arr[i][i] \r\n\t\tsum += arr[i][n - i - 1] \r\n\treturn sum\r\n\r\narr = [ [1, 2, 3],\r\n\t\t[4, 5, 6],\r\n\t\t[7, 8, 9] ] \r\nn = len(arr) \r\nprint(\"Sum is %s\" % Sum_Diagonals(arr, n))", "task_id": 5930}
{"finetuning_prompt": "\"\"\"\nEdit the following code to fix the bug that it produces an incorrect result - \"Hello World Hello\"\n\"\"\"\n\ndef say_hello():\n", "finetuning_completion": " \n    print(\"Hello\") \n    print(\"World\")", "task_id": 5932}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the size of the largest chess board which can fit in a given square area\n\"\"\"\n\ndef size_of_largest_chessboard(area):\n", "finetuning_completion": " \r\n    # calculate the number of cells in the chessboard \r\n    n = int(area ** (1/2)) \r\n  \r\n    #find the largest size of the chessboard\r\n    chessboard_size = 0\r\n    for i in range(1, n + 1): \r\n        # if the number of cells is divisible by \r\n        # the ith number \r\n        if (n % i == 0): \r\n            # calculate the size of the chessboard \r\n            chessboard_size = int(area / i) \r\n            break\r\n    \r\n    return chessboard_size", "task_id": 5937}
{"finetuning_prompt": "\"\"\"\nGenerate code to classify the list of names into male and female.\n\"\"\"\n\ndef classify_names(names):\n", "finetuning_completion": "\n    gender_map = {\"male\": [], \"female\":[]}\r\n    male_names = [\"John\", \"Michael\", \"Adam\", \"David\"]\r\n    female_names = [\"Emma\",\"Emily\",\"Olivia\",\"Ava\"]\r\n    for name in names:\r\n        if name in male_names:\r\n            gender_map[\"male\"].append(name)\r\n        elif name in female_names:\r\n            gender_map[\"female\"].append(name)\r\n    return gender_map", "task_id": 5940}
{"finetuning_prompt": "\"\"\"\nCreate a code to generate a point based on the given comparison matrix.\n\"\"\"\n\ndef point_from_matrix(matrix):\n", "finetuning_completion": "\r\n    vec = [0]*len(matrix)\r\n    for i in range(len(matrix)):\r\n        for j in range(len(matrix[i])): \r\n            if matrix[i][j] == 1:\r\n                vec[i] +=1\r\n    return vec", "task_id": 5943}
{"finetuning_prompt": "\"\"\"\nWrite a function that adds the numbers from 1 - n using the recursive approach.\n\"\"\"\n\ndef recursive_sum(n):\n", "finetuning_completion": "\r\n    if n == 0: #base case \r\n        return 0\r\n    else: \r\n        return n + recursive_sum(n-1) #recursive call", "task_id": 5944}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to convert a given text into camelcase.\n\"\"\"\n\ndef CamelCase(string):\n", "finetuning_completion": " \r\n\r\n    words = string.split(' ') \r\n    capitalized_words = [] \r\n    for word in words: \r\n        capitalized_words.append(word.capitalize())  \r\n    return ''.join(capitalized_words) \r\n    \r\nstring = \"a quick brown fox jumps over the lazy dog\"\r\noutput = CamelCase(string)\r\nprint(output)", "task_id": 5949}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to remove all the numbers in the given list which are less than k\n\"\"\"\n\ndef remove_less_than_k(nums, k):\n", "finetuning_completion": " \r\n  return [num for num in nums if num >= k]", "task_id": 5952}
{"finetuning_prompt": "\"\"\"\nAssume an array of integers is given. Rearrange the elements of the array such that all the even integers appear before all the odd integers.\n\"\"\"\n\ndef arrange_array(arr):\n", "finetuning_completion": "\r\n  evens = []\r\n  odds = []\r\n  for elem in arr:\r\n    if elem % 2 == 0:\r\n      evens.append(elem)\r\n    else:\r\n      odds.append(elem)\r\n  return evens + odds\r\n\r\narr = [5, 3, 7, 6, 4, 2, 9, 1] \r\nprint(arrange_array(arr))", "task_id": 5958}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to sort an integer array in ascending order.\n\"\"\"\n\ndef sort_asc(arr):\n", "finetuning_completion": " \r\n\r\n    for i in range(len(arr)):  \r\n  \r\n        min_index = i \r\n        for j in range(i+1, len(arr)): \r\n            if arr[min_index] > arr[j]: \r\n                min_index = j \r\n  \r\n        arr[i], arr[min_index] = arr[min_index], arr[i] \r\n  \r\n    return arr", "task_id": 5959}
{"finetuning_prompt": "\"\"\"\nCreate a Python function to calculate the area of a triangular prism.\n\"\"\"\n\ndef area_tri_prism(length, height, base):\n", "finetuning_completion": " \n    return (length * height * base) * 0.5", "task_id": 5960}
{"finetuning_prompt": "\"\"\"\nWrite a function to return all the possible binary search tree combinations of a given array of integers.\n\"\"\"\n\ndef get_bst(arr):\n", "finetuning_completion": "\n    if not arr:\n        return [[]]\n    result = []\n    for i in range(len(arr)):\n        left = get_bst(arr[0:i])\n        right = get_bst(arr[i+1:])\n        for l in left:\n            for r in right:\n                result.append([arr[i]] + l + r)\n    return result", "task_id": 5968}
{"finetuning_prompt": "\"\"\"\nWrite a function to optimize the given code using using hash table lookups for faster run times.\n\"\"\"\n\ndef is_duplicate(arr,val):\n", "finetuning_completion": " \r\n\r\n\r\n\tdict = {} \r\n\r\n\tfor i in range(len(arr)): \r\n\t\tif arr[i] in dict: \r\n\t\t\treturn True\r\n\t\telse: \r\n\t\t\tdict[arr[i]] = True\r\n\treturn False", "task_id": 5970}
{"finetuning_prompt": "\"\"\"\nDesign a function to replace the last two characters of a string.\n\"\"\"\n\ndef replace_last_2characters(test_string):\n", "finetuning_completion": "  \r\n    length = len(test_string)  \r\n    last_two_characters = test_string[length-2:]  \r\n    new_string = test_string[0:length-2] + \"xx\"  \r\n    return new_string", "task_id": 5971}
{"finetuning_prompt": "\"\"\"\nGenerate a code to find the element which is not present in a given list.\n\"\"\"\n\ndef find_missing(list):\n", "finetuning_completion": " \n    n = len(list) \n  \n    total = (n+1)*(n+2)/2\n  \n    sum_of_list = sum(list) \n    \n    return total - sum_of_list \n  \nlist = [1,2,3,4,5,6] \nmissing = find_missing(list)\nprint (missing)", "task_id": 5982}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify and display the elements that occur more than twice in an array.\n\"\"\"\n\ndef find_repeated_ele(arr):\n", "finetuning_completion": " \r\n  \r\n    # declare a dictionary for storing the frequency \r\n    frequency_dict = {} \r\n  \r\n    # loop over the array elements \r\n    for i in arr: \r\n  \r\n        # if the ele is not present in the dict add to it \r\n        if (i not in frequency_dict): \r\n            frequency_dict[i] = 1\r\n  \r\n        # if the ele is present increment its count \r\n        else: \r\n            frequency_dict[i] += 1\r\n  \r\n    # loop over each ele of frequency dict  \r\n    # and print the elements whoose frequency is more than 2 \r\n    for ele in frequency_dict: \r\n        if (frequency_dict[ele] > 2): \r\n            print (ele, \"occured more than twice\")", "task_id": 5999}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to accept two integer numbers and generate all possible combinations.\n\"\"\"\n\ndef combinations(num1, num2):\n", "finetuning_completion": " \n   \n    # Create an empty list\n    lst = [] \n   \n    for i in range(num1):\n        for j in range(num2):\n            lst.append([i, j]) \n  \n    return lst", "task_id": 6005}
{"finetuning_prompt": "\"\"\"\nOptimize a python code to make it run faster.\n\"\"\"\n\ndef myfunc(n):\n", "finetuning_completion": " \n\ttotal = n * (n + 1) // 2\n\treturn total", "task_id": 6011}
{"finetuning_prompt": "\"\"\"\nGenerate an array of elements that are 3 times the square root of the input array.\n\"\"\"\n\ndef square_root_array(x):\n", "finetuning_completion": "\r\n    ans = []\r\n    for num in x:\r\n        ans.append(3*(num**(1/2)))\r\n    return ans", "task_id": 6019}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a string input and returns the second most commonly used word.\n\"\"\"\n\ndef second_most_common_word(string):\n", "finetuning_completion": " \n    words = string.split()  \n    words_dict = {}  \n    for w in words: \n        if w in words_dict.keys(): \n            words_dict[w] += 1\n        else: \n            words_dict[w] = 1\n    count_list = sorted(words_dict.values(), reverse=True)\n    \n    sorted_list = [k for k, v in words_dict.items() if v == count_list[1]] \n    if len(sorted_list) == 1:\n        return sorted_list[0]\n    else:\n        for x in sorted_list:\n            if x != sorted_list[0]:\n                return x", "task_id": 6020}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a string and returns a new string with the letters reversed.\n\"\"\"\n\ndef reverse_string(s):\n", "finetuning_completion": "\n    return s[::-1]\n\n#example\nresult = reverse_string(\"Hello world!\")\nprint(result) #\"!dlrow olleH\"", "task_id": 6033}
{"finetuning_prompt": "\"\"\"\nCreate a function that checks if an integer is a prime number and returns a Boolean value.\n\"\"\"\n\ndef is_prime(num):\n", "finetuning_completion": "\n  # edge cases \r\n  if num <= 1: \r\n    return False\r\n  \r\n  # check if number is prime \r\n  for i in range(2,num):\r\n    if (num % i) == 0:\r\n      return False\r\n    \r\n  return True\n  \r\n#example  \r\nresult = is_prime(7)\r\nprint(result) #True", "task_id": 6034}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert English words to Pig Latin.\n\"\"\"\n\ndef word_to_pig(word):\n", "finetuning_completion": "\r\n  word = word.lower()\r\n  first_letter = word[0]\r\n   \r\n  # check if the first letter is a vowel\r\n  if first_letter in \"aeiou\":\r\n    return word + \"ay\"\r\n  else:\r\n    return word[1:] + first_letter + \"ay\"", "task_id": 6037}
{"finetuning_prompt": "\"\"\"\nCreate a function to create a dictionary with the character counts in a string.\n\"\"\"\n\ndef char_count(string):\n", "finetuning_completion": "\n  counts = {}\n  for c in string:\n    if c not in counts:\n      counts[c] = 1\n    else:\n      counts[c] += 1\n  return counts\n\nresult = char_count(\"Hello World\")", "task_id": 6039}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a string and returns a list of all the double characters in it.\n\"\"\"\n\ndef double_char(a):\n", "finetuning_completion": "\n    res = []\n    i = 0\n    while i < len(a)-1:\n        if a[i] == a[i+1]:\n            res.append(a[i])\n        i=i+1\n    return res", "task_id": 6040}
{"finetuning_prompt": "\"\"\"\nWrite a code to split a string at the specified separator and return the substrings.\n\"\"\"\n\ndef split_string(string, separator):\n", "finetuning_completion": " \r\n    list1 = string.split(separator) \r\n    return list1", "task_id": 6041}
{"finetuning_prompt": "\"\"\"\nWrite a function to evaluate the polynomial x^2 with the given integer as the coefficient.\n\"\"\"\n\ndef evaluate_polynomial(x, coeff):\n", "finetuning_completion": " \r\n    return coeff*x**2", "task_id": 6049}
{"finetuning_prompt": "\"\"\"\nGenerate a program to count and print the occurrence of each data in a list.\n\"\"\"\n\ndef count_occurence(my_list):\n", "finetuning_completion": "\r\n    # Initialing a count dictionary \r\n    count_dict = {} \r\n      \r\n    #Iterating over the list \r\n    for i in my_list: \r\n  \r\n        # Check if the data already exist in the dictionary \r\n        if i in count_dict: \r\n            count_dict[i] += 1\r\n        else: \r\n            count_dict[i] = 1\r\n  \r\n    # Printing the result \r\n    for key,value in count_dict.items(): \r\n        print(\"% s : % s\"%(key, value))", "task_id": 6050}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two lists and returns a list having elements of both lists in an alternating order.\n\"\"\"\n\ndef merge_lists(list1, list2):\n", "finetuning_completion": "\n    merged_list = []\n    \n    for element in list1:\n        merged_list.append(element)\n        if list2:\n            merged_list.append(list2.pop(0))\n            \n    merged_list.extend(list2)\n    return merged_list", "task_id": 6057}
{"finetuning_prompt": "\"\"\"\nCreate a python program to compare two strings based on their length.\n\"\"\"\n\ndef compare_strings_by_length(str1, str2):\n", "finetuning_completion": "\n    if len(str1) > len(str2):\n        return 1\n    elif len(str1) == len(str2):\n        return 0\n    else:\n        return -1", "task_id": 6058}
{"finetuning_prompt": "\"\"\"\nCreate a code to implement a stack pop method.\n\"\"\"\n\ndef stack_pop(stack):\n", "finetuning_completion": " \n\tif len(stack) == 0: \n\t\treturn None \n\t\n\treturn stack.pop()", "task_id": 6064}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the total cost of an item based on quantity, cost per item and discount rate.\n\"\"\"\n\ndef calculate_total_cost(quantity, cost_per_item, discount_rate):\n", "finetuning_completion": "\r\n    total = quantity * cost_per_item\r\n    discount = (total * discount_rate )/100\r\n    return total - discount\r\n    \r\nprint(\"Total cost:\", calculate_total_cost(10, 5, 10))", "task_id": 6070}
{"finetuning_prompt": "\"\"\"\nCreate a program to check if a given matrix is symmetric or anti-symmetric.\n\"\"\"\n\ndef check_symmetry(m):\n", "finetuning_completion": "\n  n = len(m) \n  for i in range(n): \n    for j in range(n):\n      if m[i][j] != m[j][i]: \n        return \"Matrix is anti-symmetric\"\n  return \"Matrix is symmetric\"\n  \nm = [[1, 2, 3],\n     [2, 1, 4],\n     [3, 4, 1]]\n\nprint(check_symmetry(m))", "task_id": 6073}
{"finetuning_prompt": "\"\"\"\nEdit an existing function to print all prime numbers until a given number.\n\"\"\"\n\ndef printPrimes(n):\n", "finetuning_completion": " \n  \n    # Print all prime numbers \r\n    for i in range(2, n+1): \n        isPrime = True\n \n        for j in range(2, int(i/2) + 1): \n            if i % j == 0: \n                isPrime = False\n                break\n                  \n        if isPrime: \n            print(i, end=\" \")", "task_id": 6076}
{"finetuning_prompt": "\"\"\"\nGenerate Python code to find the maximum sum from a subarray of a given array.\n\"\"\"\n\ndef max_subarray_sum(arr):\n", "finetuning_completion": "\r\n    max_so_far = 0 \r\n    max_ending_here = 0 \r\n    for i in range(0, len(arr)): \r\n        max_ending_here = max_ending_here + arr[i] \r\n        if (max_so_far < max_ending_here): \r\n            max_so_far = max_ending_here \r\n        if max_ending_here < 0: \r\n            max_ending_here = 0   \r\n    return max_so_far", "task_id": 6078}
{"finetuning_prompt": "\"\"\"\nGiven a distribution of numbers, write a function to calculate the median value.\n\"\"\"\n\ndef median(nums):\n", "finetuning_completion": "\r\n    sorted_nums = sorted(nums)\r\n    mid = len(nums)//2\r\n\r\n    if len(nums)%2 == 0:\r\n        median = (sorted_nums[mid-1] + sorted_nums[mid])/2\r\n    else:\r\n        median = sorted_nums[mid]\r\n\r\n    return median", "task_id": 6082}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes two integer arguments and return the larger one.\n\"\"\"\n\ndef get_larger(a,b):\n", "finetuning_completion": "\r\n    if a > b:\r\n        return a\r\n    elif b > a:\r\n        return b\r\n    else:\r\n        return \"The numbers are even\"", "task_id": 6083}
{"finetuning_prompt": "\"\"\"\nUse a greedy approach to write a function that determines whether or not it is possible to make a change using coins given in denominations.\n\"\"\"\n\ndef can_make_change(amount, coins):\n", "finetuning_completion": "\r\n    coins.sort(reverse=True)\r\n    total = 0\r\n    for coin in coins:\r\n        while total + coin <= amount:\r\n            total += coin\r\n\r\n    return total == amount", "task_id": 6086}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter out all the strings with an odd length in a given array.\n\"\"\"\n\ndef odd_length_filter(arr):\n", "finetuning_completion": "\r\n    return list(filter(lambda x: len(x) % 2 != 0, arr))", "task_id": 6087}
{"finetuning_prompt": "\"\"\"\nCreate a python program to convert decimal to octal.\n\"\"\"\n\ndef DecimalToOctal(n) :\n", "finetuning_completion": " \r\n  \r\n    # array to store octal \r\n    # number \r\n    octalNum = [0] \r\n  \r\n    # counter for octal number array \r\n    i = 0\r\n  \r\n    # temporary variable  \r\n    # to store remainder \r\n    rem = 0\r\n  \r\n    while (n != 0) : \r\n  \r\n        # storing remainder in \r\n        #temp variable. \r\n        rem = n % 8\r\n  \r\n        # Divide the number \r\n        n //= 8\r\n  \r\n        octalNum.insert(i, rem) \r\n        i += 1\r\n  \r\n    # reversing the octal number \r\n    octalNum.reverse() \r\n  \r\n    # Adding padding zeros \r\n    # to make it 4-digit \r\n    while len(octalNum) < 4 : \r\n        octalNum.insert(0, 0) \r\n  \r\n    print(int(\"\".join(map(str, octalNum))))", "task_id": 6092}
{"finetuning_prompt": "\"\"\"\nIdentify and label correctly all potential optimization spots in a given code snippet.\n\"\"\"\n\ndef myfunc(arr):\n", "finetuning_completion": "\r\n    max_so_far = 0 # Potential optimization spot 1\r\n    for i in range(len(arr)): # Potential optimization spot 2\r\n        for j in range(i,len(arr)): # Potential optimization spot 3\r\n            max_so_far = max(max_so_far, arr[j] - arr[i]) # Potential optimization spot 4\r\n    return max_so_far # Potential optimization spot 5", "task_id": 6096}
{"finetuning_prompt": "\"\"\"\nCreate a script to parse the given JSON string and extract the JSON object.\n\"\"\"\n\nimport json\r\ndef parseJson(string):\n", "finetuning_completion": "\r\n  obj = json.loads(string) \r\n  return obj", "task_id": 6102}
{"finetuning_prompt": "\"\"\"\nGenerate a code that finds the largestprime factor of a given number.\n\"\"\"\n\ndef largest_prime_factor(number):\n", "finetuning_completion": "\r\n    # initialize prime_factors = []\r\n    prime_factors = []\r\n    # 1 is not a prime number \r\n    if number > 1:\r\n        # for loop for numbers in range of 2 to the input number \r\n        for i in range(2, number + 1): \r\n            # while loop to verify the number divides by a prime number  \r\n            while(number % i == 0): \r\n                # append that number to prime_factors list  \r\n                prime_factors.append(i)  \r\n                # update the 'number' with its quotent of the division \r\n                number = number / i \r\n    # return the largest prime factor among prime_factors list  \r\n    return max(prime_factors)", "task_id": 6104}
{"finetuning_prompt": "\"\"\"\nWrite a function to print prime numbers within a given range.\n\"\"\"\n\ndef prime_sequence_range(low, high):\n", "finetuning_completion": " \r\n    for num in range(low, high + 1): \r\n        if num > 1: \r\n            for i in range(2, num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                print(num,end=\", \")", "task_id": 6106}
{"finetuning_prompt": "\"\"\"\nWrite a python code to create a dictionary with key and values reversed.\n\"\"\"\n\ndef reverse_dict(inp):\n", "finetuning_completion": " \r\n    out = dict() \r\n    for key, val in inp.items(): \r\n        out[val]= key\r\n    return out", "task_id": 6120}
{"finetuning_prompt": "\"\"\"\nConvert the given JSON array into a string.\n\"\"\"\n\ndef convert_to_string(s):\n", "finetuning_completion": "\n  res=\"\"\n  for k in s:\n    res+=k+\":\"+str(s[k])+\",\"\n  return res[0:-1]", "task_id": 6123}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to remove duplicate elements from a list.\n\"\"\"\n\ndef remove_duplicates(input_list):\n", "finetuning_completion": "\r\n  unique_list=[]\r\n  for element in input_list:\r\n    if element not in unique_list:\r\n      unique_list.append(element)\r\n  return unique_list", "task_id": 6126}
{"finetuning_prompt": "\"\"\"\nWrite a function to decode the numbers in a given string into their ASCII equivalents.\n\"\"\"\n\ndef decode_nums(str1):\n", "finetuning_completion": " \r\n    res = ''.join(chr(int(i)) for i in str1.split())  \r\n    return res", "task_id": 6132}
{"finetuning_prompt": "\"\"\"\nCreate a function to format a phone number string appropriately.\n\"\"\"\n\ndef format_phone_number(phone_number):\n", "finetuning_completion": " \r\n\tnumber_formatted = \"+\"+phone_number[0:3]+\" \"+phone_number[3:6]+\" \"+phone_number[6:] \r\n\r\n\treturn number_formatted", "task_id": 6141}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for a k-nearest neighbor analysis.\n\"\"\"\n\ndef k_nearest_neighbors(data, k):\n", "finetuning_completion": " \r\n\r\n\t# Get the number of features in data \r\n\tnum_features = len(data[0]) - 1\r\n\tk_neighbors = []\r\n\r\n\t# Calculate the Euclidean distance for each point in the dataset \r\n\tfor i in range(len(data)): \r\n\t\tdistance = 0\r\n\t\tfor j in range(num_features): \r\n\t\t\tdistance += (data[i][j] - data[i][-1])**2\r\n\r\n\t\t# Calculate the distance and append it to the data \r\n\t\tdata[i].append(math.sqrt(distance)) \r\n\r\n\t# Sort the data in ascending order \r\n\tdata.sort(key = lambda x:x[-1]) \r\n\r\n\t# Choose the top k nearest neighbors \r\n\tfor i in range(k): \r\n\t\tk_neighbors.append(data[i][:-1]) \r\n\r\n\t# Return the list of k nearest neighbors \r\n\treturn k_neighbors", "task_id": 6142}
{"finetuning_prompt": "\"\"\"\nGenerate a mad-lib from a given set of words.\n\"\"\"\n\ndef mad_libs(adj, noun, plural_noun):\n", "finetuning_completion": "\n    sentence = \"Every day I take my \" + adj + \" \" + noun + \" for a walk.  We always walk past a lot of \" + plural_noun + \" on our way. It's so much fun!\"\n    return sentence", "task_id": 6149}
{"finetuning_prompt": "\"\"\"\nCreate a program to combine to list of tuples into a dictionary.\n\"\"\"\n\ndef merge_list_dict(list1, list2):\n", "finetuning_completion": "\n    result = {}\n    for tup1, tup2 in zip (list1, list2):\n        result[tup1[0]] = tup1[1]\n        result[tup2[0]] = tup2[1]\n    return result", "task_id": 6152}
{"finetuning_prompt": "\"\"\"\nFind the unique elements from the two given lists.\n\"\"\"\n\ndef unique_elements(list1, list2):\n", "finetuning_completion": "\n\treturn set(list1 + list2) - (set(list1) & set(list2))", "task_id": 6161}
{"finetuning_prompt": "\"\"\"\nConstruct a python program to find the sum of squares of all the numbers from 1 to N (where N is an input).\n\"\"\"\n\ndef sumOfSquare(n):\n", "finetuning_completion": "\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        sum += i * i\r\n    return sum", "task_id": 6173}
{"finetuning_prompt": "\"\"\"\nConstruct a function to delete all items from a dictionary where value is greater than a user-defined number.\n\"\"\"\n\ndef delete_by_value(dict1, n):\n", "finetuning_completion": " \r\n    delete_list = [] \r\n    for k, v in dict1.items(): \r\n        if v > n: \r\n            delete_list.append(k) \r\n  \r\n    for k in delete_list: \r\n        dict1.pop(k) \r\n    return dict1", "task_id": 6175}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm which reads a natural language and replies with a basic acknowledgement.\n\"\"\"\n\ndef respondToComment(comment):\n", "finetuning_completion": "\r\n  if comment:\r\n    reply = \"Thanks for your comment!\"\r\n  else: \r\n    reply = \"I appreciate your input.\"\r\n  return reply", "task_id": 6176}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm which can classify a sentence as positive or negative.\n\"\"\"\n\ndef sentiment_classifier(sentence):\n", "finetuning_completion": " \r\n    sentiment_score = 0\r\n    words = sentence.split() \r\n    sentiment_words = {'good':1, 'great':1, 'amazing':1, 'awful':-1, 'terrible':-1, 'horrible':-1}\r\n    for word in words: \r\n        if word in sentiment_words: \r\n            sentiment_score += sentiment_words[word] \r\n\r\n    if sentiment_score > 0: \r\n        return 'Positive'\r\n    elif sentiment_score < 0: \r\n        return 'Negative'\r\n    else: \r\n        return 'Neutral'", "task_id": 6177}
{"finetuning_prompt": "\"\"\"\nDesign a function which computes a Fibonacci number recursively.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \r\n    if n==1: \r\n        return 0\r\n    elif n==2: \r\n        return 1\r\n    else: \r\n        return Fibonacci(n-1)+Fibonacci(n-2)", "task_id": 6180}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to check if a number is an Armstrong number.\n\"\"\"\n\ndef isArmstrong(n):\n", "finetuning_completion": " \r\n\tsum = 0\r\n\ttemp = n \r\n\twhile temp > 0: \r\n\t\td = temp % 10\r\n\t\tsum += d ** 3\r\n\t\ttemp //= 10\r\n  \r\n\treturn sum == n", "task_id": 6181}
{"finetuning_prompt": "\"\"\"\nWrite a coding solution to print the diagonal elements of a two-dimensional array.\n\"\"\"\n\ndef printDiagonal(arr):\n", "finetuning_completion": " \r\n    rows = len(arr) \r\n    cols = len(arr[0]) \r\n    for line in range(1, (rows + cols)): \r\n          \r\n        start_col = max(0, line-rows) \r\n        count = min(line, \r\n                    (cols - start_col), rows) \r\n          \r\n        for j in range(0, count): \r\n            print(arr[min(rows, line)-j-1] \r\n                            [start_col + j], end=\" \") \r\n        print()", "task_id": 6187}
{"finetuning_prompt": "\"\"\"\nWrite a python script to parse a given json string and print all keys and related objects.\n\"\"\"\n\nimport json \n\ndef parseJson(json_string):\n", "finetuning_completion": " \n  data = json.loads(json_string) \n  \n  for key in data.keys(): \n    print(\"Key: \"+key) \n    print(\"Value: \"+str(data[key]))", "task_id": 6197}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to filter a given array based on a given filter.\n\"\"\"\n\ndef filter_Even(arr):\n", "finetuning_completion": " \n  res = []  \n  # iterate over the array\n  for i in range(len(arr)):\n    # check if element is even or not\n    if arr[i] % 2 == 0: \n      res.append(arr[i]) \n  #return filtered array    \n  return res", "task_id": 6198}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a list of prime numbers upto n.\n\"\"\"\n\ndef sieve_of_eratosthenes(n):\n", "finetuning_completion": "\n  nums = [True for i in range(n+1)] \n  p = 2\n  while(p * p <= n):  \n    if (nums[p] == True): \n        for i in range(p * 2, n+1, p): \n            nums[i] = False\n    p+=1\n  \n  # Generate the list of prime numbers    \n  return [p for p in range(2, n) if nums[p]]", "task_id": 6205}
{"finetuning_prompt": "\"\"\"\nCreate a program for generating random mazes.\n\"\"\"\n\n# Create a board of size NxN \ndef createMaze(N):\n", "finetuning_completion": " \n  path = [[0 for a in range(N)] for b in range(N)]  \n  path[0][0] = 1  # Start point\r\n  # Check if the cell is valid  \r\n  def is_valid(x,y): \r\n    if x < 0 or y < 0 or x >= N or y >= N: \r\n      return False\r\n    elif path[x][y] != 0: \r\n      return False\r\n    else: \r\n      return True\r\n  \r\n  # Add walls to the maze \r\n  def add_walls(x, y): \r\n    pass\r\n  \r\n  # Generate a random maze  \r\n  def generate(x, y):  \r\n    path[x][y] = 1  # Current cell is a valid step\r\n    direction = [[1, 0], [0, 1], [-1, 0], [0, -1]]  # Possible moves\r\n    \r\n    random.shuffle(direction)  \r\n    for a,b in direction: \r\n      if is_valid(x+a, y+b): \r\n        generate(x+a, y+b)\r\n        \r\n  generate(0, 0) \n  add_walls(0,0) \n  return path", "task_id": 6206}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a string representation of a binary number to a list of 0s and 1s.\n\"\"\"\n\ndef convert_Binary_String_To_List(string):\n", "finetuning_completion": "\r\n    res = [] \r\n    for i in range(len(string)): \r\n        res.append(int(string[i])) \r\n  \r\n    return res", "task_id": 6221}
{"finetuning_prompt": "\"\"\"\nReplace even indices elements of the given array with 0's\n\"\"\"\n\ndef replace_array(arr):\n", "finetuning_completion": " \r\n\tfor i in range(len(arr)): \r\n\t\tif i%2 == 0: \r\n\t\t\tarr[i] = 0\r\n\treturn arr", "task_id": 6233}
{"finetuning_prompt": "\"\"\"\nModify the code to make the program more efficient.\n\"\"\"\n\ndef fib(n, lookup): \r\n\tif n <= 1: \r\n\t\tlookup[n] = n \r\n\tif lookup[n] is None: \r\n\t\tlookup[n] = fib(n-1, lookup) + fib(n-2, lookup) \r\n  \r\n\treturn lookup[n] \r\n  \r\ndef fib_efficient(n):\n", "finetuning_completion": " \r\n\tif n <= 1: \r\n\t\tlookup[n] = n \r\n\tif lookup[n] is None: \r\n\t\tlookup[n] = fib(n-1, lookup) + fib(n-2, lookup) \r\n  \r\n\treturn lookup[n] \r\n  \r\ndef fib_efficient(n): \r\n\tlookup = [None]*(n+1) \r\n\treturn fib(n, lookup)", "task_id": 6244}
{"finetuning_prompt": "\"\"\"\nDefine a function \u2018sum_nums\u2019 to select two numbers summing up to a given target number.\n\"\"\"\n\ndef sum_nums(target, nums):\n", "finetuning_completion": " \r\n    for i in range(len(nums)-1): \r\n        for j in range(i+1, len(nums)): \r\n            if (nums[i] + nums[j] == target): \r\n                return True\r\n    return False", "task_id": 6252}
{"finetuning_prompt": "\"\"\"\nWrite a function to search a given key 'x' in the list.\n\"\"\"\n\ndef search_list(myList, x):\n", "finetuning_completion": " \r\n    for element in myList: \r\n        if element == x: \r\n            return True\r\n    return False", "task_id": 6253}
{"finetuning_prompt": "\"\"\"\nWrite a python program to remove the nth occurrence of a specified element from the given list\n\"\"\"\n\ndef remove_element(input_list, element, count):\n", "finetuning_completion": " \r\n    ct = 0 \r\n    for i in range(0, len(input_list)): \r\n        if input_list[i] == element: \r\n            ct += 1 \r\n            if ct == count: \r\n                del input_list[i] \r\n                break\r\n    return input_list", "task_id": 6271}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the smallest possible subset from a given set of numbers, so that the elementwise multiplication of all the elements of the subset is equal to the given target number.\n\"\"\"\n\ndef find_smallest_subset(numbers, target):\n", "finetuning_completion": "\n  min_list = None\n  min_length = float('inf')\n  for i in range(1, len(numbers)+1):\n    for subset in combinations(numbers, i):\n      multiply = 1\n      for el in subset:\n        multiply *= el\n      if multiply == target and len(subset) < min_length:\n        min_list = subset\n        min_length = len(subset)\n  return min_list\n\nnumbers = [2, 3, 5]\ntarget=30\n\nresult = find_smallest_subset(numbers, target)\nprint(result)", "task_id": 6274}
{"finetuning_prompt": "\"\"\"\nCreate a function to find the maximum length of common substrings in two given strings.\n\"\"\"\n\ndef max_length_common_substrings(str1, str2):\n", "finetuning_completion": "\n    dp_matrix = [[0 for i in range(len(str1)+1)] for i in range(len(str2)+1)] \n  \n    max_len = 0\n  \n    # Loop over all of the substring length. \n    # If two characters are same, then their mapped \n    # value in the dp matrix will be 1 + the diagonal's value. \n    # Else, that value is same as previous characters.(this is same as 0)\n    for j in range(1, len(str2)+1): \n        for i in range(1, len(str1)+1): \n  \n            if str1[i-1] == str2[j-1]: \n                dp_matrix[j][i] = 1 + dp_matrix[j - 1][i - 1] \n                max_len = max(max_len, dp_matrix[j][i]) \n            else: \n                dp_matrix[j][i] = 0\n  \n    return max_len", "task_id": 6278}
{"finetuning_prompt": "\"\"\"\nImprove the performance of the following code.\n\"\"\"\n\ndef fibonacci(n):\n", "finetuning_completion": " \r\n    fib_list = [0, 1]\r\n\r\n    if n<0: \r\n        return \"Incorrect input\" \r\n    elif n<=len(fib_list): \r\n        return fib_list[n-1] \r\n\r\n    for i in range(2,n): \r\n        fib_list.append(fib_list[i-1] + fib_list[i-2]) \r\n\r\n    return fib_list[n-1]", "task_id": 6291}
{"finetuning_prompt": "\"\"\"\nCreate a sorting algorithm that sorts a list of integers by the sum of their digits.\n\"\"\"\n\ndef sum_digits_sort(arr):\n", "finetuning_completion": "\r\n    arr.sort(key = lambda x: sum(int(d) for d in str(x)))\r\n    return arr", "task_id": 6301}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sort a given list of strings in the decreasing order of frequency of occurrence.\n\"\"\"\n\nfrom collections import Counter \r\ndef sort_str_freq(arr) :\n", "finetuning_completion": " \r\n    arr_count_dict = Counter(arr) \r\n    sorted_list = sorted(arr_count_dict.items(), key=lambda x: x[1], reverse = True) \r\n  \r\n    res_list = [] \r\n    for item in sorted_list : \r\n        res_list += [item[0]] * item[1] \r\n  \r\n    return res_list", "task_id": 6311}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the largest element in a dictionary.\n\"\"\"\n\ndef max_element_dict(dictionary):\n", "finetuning_completion": "\r\n    max_value = float('-inf')\r\n    max_key = None\r\n\r\n    for k,v in dictionary.items():\r\n        if v > max_value:\r\n            max_value = v\r\n            max_key = k\r\n    return max_key", "task_id": 6319}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the log base 2 of a given number.\n\"\"\"\n\ndef log_base2(num):\n", "finetuning_completion": "\n    return math.log2(num)", "task_id": 6321}
{"finetuning_prompt": "\"\"\"\nGenerate a python function to generate the longest subsequence that is strictly increasing.\n\"\"\"\n\ndef longest_Subseq(sequence):\n", "finetuning_completion": " \r\n    list_len = len(sequence) \r\n    len_LIS = [1]*list_len \r\n    \r\n    max_seq = 1\r\n    \r\n    for i in range (1 , list_len): \r\n        for j in range(0 , i): \r\n            if sequence[i] > sequence[j] and len_LIS[i]< len_LIS[j] + 1 : \r\n                len_LIS[i] = len_LIS[j]+1\r\n                max_seq = max(max_seq , len_LIS[i]) \r\n  \r\n    return max_seq", "task_id": 6322}
{"finetuning_prompt": "\"\"\"\nWrite a Python function to sort the given array according to the order defined by the second array.\n\"\"\"\n\ndef Sort_Array_Order(arr1,arr2):\n", "finetuning_completion": " \r\n    temp = arr1.copy()\r\n    res = [None] * len(arr1) \r\n    k = 0\r\n    for j in range(0,len(arr2)): \r\n        for i in range(0, len(arr1)): \r\n            if arr2[j] == arr1[i] and temp[i] != -1: \r\n                res[k] = arr1[i]  \r\n                temp[i] = -1\r\n                k+=1\r\n    return res", "task_id": 6328}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to sort an array of integers by decreasing order.\n\"\"\"\n\ndef sort_decreasing(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        for j in range(i + 1, len(arr)): \r\n            if arr[i] < arr[j]: \r\n                arr[i], arr[j] = arr[j], arr[i]\r\n    return arr\r\n  \r\n# driver code \r\narr = [3, 10, 4, 5] \r\nprint(\"Sorted array in decreasing order :\", sort_decreasing(arr)) \r\n# Output: Sorted array in decreasing order : [10, 5, 4, 3]", "task_id": 6337}
{"finetuning_prompt": "\"\"\"\nFind the maximum consonant of a particular string and return its index.\n\"\"\"\n\ndef find_max_consonant(string):\n", "finetuning_completion": " \r\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\r\n  consonants = [s for s in string if s not in vowels]\r\n  max_consonant_index = string.index(max(consonants))\r\n  return max_consonant_index", "task_id": 6341}
{"finetuning_prompt": "\"\"\"\nGenerate a program to detect if a given array has a cycle in it.\n\"\"\"\n\ndef has_cycle(arr):\n", "finetuning_completion": " \r\n    visited = set() \r\n \r\n    for i in range(len(arr)): \r\n        if arr[i] in visited: \r\n            return True\r\n        visited.add(arr[i]) \r\n \r\n    return False", "task_id": 6343}
{"finetuning_prompt": "\"\"\"\nWrite a code to create an array of n integers, all of which are divisible by 3\n\"\"\"\n\ndef create_array(n):\n", "finetuning_completion": "\r\n    array = []\r\n    for i in range(1,n+1):\r\n        if i%3 == 0:\r\n            array.append(i)\r\n    return array", "task_id": 6347}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate a dictionary with the maximum possible length of a given array.\n\"\"\"\n\ndef max_length_dict(arr):\n", "finetuning_completion": " \r\n  \r\n    ans = {} \r\n    present = [False] * len(arr)  \r\n  \r\n    max_len = 0 \r\n      \r\n    for i in range(1 << len(arr)): \r\n        temp = [] \r\n        for j in range(len(arr)): \r\n            if (i & (1 << j)) != 0: \r\n                temp.append(arr[j]) \r\n  \r\n        if len(temp) > max_len: \r\n            max_len = len(temp) \r\n            ans[max_len] = temp \r\n  \r\n    return ans", "task_id": 6350}
{"finetuning_prompt": "\"\"\"\nWrite a python script to classify a given string using a predefined set of keywords\n\"\"\"\n\ndef classify_string(string, keywords):\n", "finetuning_completion": " \r\n    result = \"undefined\"\r\n    for word in keywords: \r\n        if word in string: \r\n            result = word\r\n            break\r\n    return result", "task_id": 6351}
{"finetuning_prompt": "\"\"\"\nWrite a python program to edit a given string by replacing an occurrence of a word with an asterisk.\n\"\"\"\n\ndef replace(string, word):\n", "finetuning_completion": " \r\n    string_words = string.split()\r\n    for i in range(len(string_words)): \r\n        if string_words[i] == word: \r\n            string_words[i] = \"*\"\r\n    return \" \".join(string_words)", "task_id": 6354}
{"finetuning_prompt": "\"\"\"\nCreate a function to print out a histogram of the given list.\n\"\"\"\n\ndef histogram(values):\n", "finetuning_completion": " \n    freq = {} \n      \n    for i in values: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n      \n    for key, value in freq.items(): \n        stars = '*' * value\n        print(key, ':', stars)", "task_id": 6366}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find the first 20 non-even prime natural numbers.\n\"\"\"\n\ndef prime_list():\n", "finetuning_completion": "\n    prime_list = []\n    for i in range(3,100,2):\n        for num in range(2,i):\n            if (i % num == 0):\n                break\n        else: \n            prime_list.append(i)\n            if len(prime_list) == 20:\n                break\n    return prime_list", "task_id": 6369}
{"finetuning_prompt": "\"\"\"\nGiven a hash table, write a program to delete a key and its associated value from the table.\n\"\"\"\n\ndef delete_key_hash_table(table, key):\n", "finetuning_completion": " \n    if key in table: \n        del table[key] \n    return table", "task_id": 6371}
{"finetuning_prompt": "\"\"\"\nCreate a program to make a simple calculator to add, subtract, multiply, and divide two numbers.\n\"\"\"\n\ndef calculator(num1,num2,op):\n", "finetuning_completion": "\r\n  if op == '+':\r\n    return num1 + num2\r\n  elif op == '-':\r\n    return num1 - num2\r\n  elif op == '*':\r\n    return num1 * num2\r\n  elif op == '/':\r\n    return num1 / num2\n  else:\r\n    return \"Invalid operator!\"", "task_id": 6379}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate the longest increasing subsequence of given numbers.\n\"\"\"\n\ndef LongestIncreasingSubsequence(test_list):\n", "finetuning_completion": "\n  \n    List = [1] * len(test_list) \n    for i in range(1, len(test_list)):\n        for j in range(i):\n            if (test_list[i] > test_list[j] and List[i] < List[j] + 1) : \n                List[i] = List[j]+1\n    maximum = 0\n    for i in range(len(List)):\n        maximum = max(maximum , List[i]) \n    return maximum", "task_id": 6383}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to check whether a given number is a power of 2.\n\"\"\"\n\ndef isPowerOfTwo(test_num) :\n", "finetuning_completion": " \n    if (test_num == 0) : \n        return False\n    while (test_num != 1) : \n            if (test_num % 2 != 0) : \n                return False\n            test_num = test_num // 2\n    return True", "task_id": 6387}
{"finetuning_prompt": "\"\"\"\nWrite a python program to read quality scores of a given genetically sequenced DNA.\n\"\"\"\n\ndef read_quality_scores(DNA):\n", "finetuning_completion": "\r\n    quality_scores = []\r\n\r\n    for i in range(len(DNA)):\r\n        quality_scores.append(ord(DNA[i])-33)\r\n\r\n    return quality_scores", "task_id": 6388}
{"finetuning_prompt": "\"\"\"\nWrite a python program to show the list of all the prime numbers up to a given value.\n\"\"\"\n\ndef show_primes(num):\n", "finetuning_completion": "\n    primes = []\r\n    for i in range(2, num+1):\r\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes", "task_id": 6389}
{"finetuning_prompt": "\"\"\"\nWrite a python program to create a pattern of zeros and ones in a matrix of given size.\n\"\"\"\n\ndef generate_pattern(size):\n", "finetuning_completion": "\n    pattern = [[0 for i in range(size)] for j in range(size)]\n    for i in range(size):\n        for j in range(size):\n            if (i + j) % 2 == 0:\n                pattern[i][j] = 0\n            else:\n                pattern[i][j] = 1\n    return pattern", "task_id": 6392}
{"finetuning_prompt": "\"\"\"\nWrite a python program to compute the sum of the absolute differences between all the possible pairs of the given array.\n\"\"\"\n\ndef absolute_difference_sum(arr):\n", "finetuning_completion": " \n    res = 0\n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            res += abs(arr[i] - arr[j]) \n    return res", "task_id": 6394}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the keys in a given dictionary which contains the maximum and minimum values.\n\"\"\"\n\ndef find_maximum_minimum_keys(input_dict):\n", "finetuning_completion": " \n    min_key, max_key = None, None\n    min_val, max_val = float('inf'), -float('inf')\n    for key, value in input_dict.items(): \n        if value < min_val: \n            min_val = value\n            min_key = key\n        if value > max_val: \n            max_val = value\n            max_key = key\n    return min_key, max_key", "task_id": 6395}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, write a function to identify the maximum element of the list as well as its index.\n\"\"\"\n\ndef max_Index(input_list):\n", "finetuning_completion": " \n    max_element = max(input_list) \n    max_index = input_list.index(max_element) \n    return max_element, max_index\n  \ninput_list = [21, 5, 8, 12, 15]\nmax_element, max_index = max_Index(input_list) \nprint(\"Max Element: %d\" %max_element) \nprint(\"Max Element Index: % d\" %max_index)", "task_id": 6402}
{"finetuning_prompt": "\"\"\"\nEvaluate a given expression using postfix evaluation.\n\"\"\"\n\ndef postfix_evaluation(expr):\n", "finetuning_completion": "\n  \n  # tokenize the input expression\r\n  tokens = expr.split()\n  \n  # Create an empty stack \r\n  stack = [] \r\n  for token in tokens:\n    # If the token is a number, push it onto the stack\n    if token.isdigit():\n      stack.append(int(token))\n    # Token is an operator\n    else:\n      # If there are fewer than two values on the stack, the expression is invalid. \r\n      if len(stack) < 2:\n        return \"Invalid expression\"\r\n      else:\n        # Pop two items off the stack \r\n        arg2 = stack.pop()\r\n        arg1 = stack.pop()\r\n        # Perform the corresponding operation \r\n        result = 0\r\n        if token == '+': result = arg1 + arg2 \r\n        elif token == '-': result = arg1 - arg2 \r\n        elif token == '*': result = arg1 * arg2 \r\n        elif token == '/': result = arg1 / arg2 \r\n        # Push the result onto the stack \r\n        stack.append(result)\r\n  # The result is on the stack, return it \r\n  return stack.pop()", "task_id": 6412}
{"finetuning_prompt": "\"\"\"\nGiven a sequence of integers, write a function to group the integers into lists of alternating values.\n\"\"\"\n\ndef separate_seq(list1):\n", "finetuning_completion": " \r\n    res = [] \r\n    temp = [] \r\n    for i in range(len(list1) - 1): \r\n        if (list1[i + 1] - list1[i]) != 1: \r\n            temp.append(list1[i]) \r\n            res.append(temp) \r\n            temp = [] \r\n        else: \r\n            temp.append(list1[i]) \r\n  \r\n    temp.append(list1[-1]) \r\n    res.append(temp) \r\n  \r\n    return res", "task_id": 6414}
{"finetuning_prompt": "\"\"\"\nCreate a function to check whether a given string contains any characters other than alphabets.\n\"\"\"\n\ndef check_string(string):\n", "finetuning_completion": " \r\n    for i in string: \r\n        if not(i.isalpha()): \r\n            return False\r\n    return True", "task_id": 6416}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the group of three number who sum up to x.\n\"\"\"\n\ndef findNumberGroup(x):\n", "finetuning_completion": " \r\n    result = []\r\n    for a in range(1, x): \r\n        for b in range(a + 1, x): \r\n            for c in range(b + 1, x): \r\n                if (a + b + c == x): \r\n                    result.append([a, b, c])\r\n\r\n    return result", "task_id": 6426}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter out the given list elements.\n\"\"\"\n\ndef filter_elements(list_b):\n", "finetuning_completion": "\r\n    result = list(filter(lambda x: x % 3 == 0, list_b))\r\n    return result", "task_id": 6428}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate all binary strings from given pattern.\n\"\"\"\n\ndef binary_string_generator(pattern):\n", "finetuning_completion": "\n    result = []\n    if '?' not in pattern:\n        result.append(pattern)\n        return result\n    p = pattern.index('?')\n    substr_p1 = pattern[0:p]\n    substr_p2 = pattern[p+1:]\n    x = binary_string_generator(substr_p2)   \n    for i in ['0','1']:\n        for j in x:\n            result.append(substr_p1 + i + j)\n    return result", "task_id": 6430}
{"finetuning_prompt": "\"\"\"\nDesign and implement a python algorithm to detect whether an array is sorted in ascending order or not.\n\"\"\"\n\ndef is_sorted(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    for i in range(0, n-1): \r\n        if arr[i] > arr[i+1]: \r\n            return False\r\n    return True", "task_id": 6440}
{"finetuning_prompt": "\"\"\"\nConstruct a function to append a given number of elements to a given list.\n\"\"\"\n\ndef append_elements(lst, num):\n", "finetuning_completion": "\r\n  for i in range(num):\r\n    lst.append(i)\r\n  return lst", "task_id": 6443}
{"finetuning_prompt": "\"\"\"\nBuild a program to retrieve the corresponding key for a given value in a dictionary.\n\"\"\"\n\ndef get_key_from_value(myDict, value):\n", "finetuning_completion": "\n    for k,v in myDict.items():\n        if v == value:\n            return k", "task_id": 6455}
{"finetuning_prompt": "\"\"\"\nCreate a function to identify significant differences between two strings.\n\"\"\"\n\ndef diff_strings(str1, str2):\n", "finetuning_completion": "\n    same_chars = [ch for ch in str1 if ch in str2]\n    unique_chars_str1 = [ch for ch in str1 if ch not in same_chars]\n    unique_chars_str2 = [ch for ch in str2 if ch not in same_chars]\n    return (unique_chars_str1, unique_chars_str2)", "task_id": 6456}
{"finetuning_prompt": "\"\"\"\nDesign a program to analyze the following input and output an array of objects about the categories and their sizes.\n\"\"\"\n\ndef get_categories(input):\n", "finetuning_completion": "\r\n    categories = input.split(\",\")\r\n    output = []\r\n    for c in categories:\r\n        category = c.split(\"-\")\r\n        output.append({'category':category[0].strip(), 'size':int(category[1].strip())})\r\n    return output", "task_id": 6461}
{"finetuning_prompt": "\"\"\"\nDesign a function to construct an Ascii pyramid using a string.\n\"\"\"\n\ndef Ascii_pyramid(input):\n", "finetuning_completion": "\r\n    for x in range(len(input)):\r\n        for y in range(x+1):\r\n            print (input[y], end=\"\")\r\n        print(\"\")\r\n    for x in range(len(input)-2, -1, -1):\r\n        for y in range(x+1):\r\n            print (input[y], end=\"\")\r\n        print(\"\")", "task_id": 6462}
{"finetuning_prompt": "\"\"\"\nDesign a program that divides the given array into two separate sets, one with even numbers and the other with odd numbers.\n\"\"\"\n\ndef FindTwoSets(arr):\n", "finetuning_completion": "\n  even = []\n  odd = []\n  for element in arr:\n    if element % 2 == 0:\n      even.append(element)\n    else:\n      odd.append(element)\n\n  sets = {'even': even, 'odd': odd}\n  return sets", "task_id": 6464}
{"finetuning_prompt": "\"\"\"\nWrite a python code to return an element at given position in a list.\n\"\"\"\n\ndef return_element_at_position(list, position):\n", "finetuning_completion": "\r\n    if position == 0:\r\n        return list[0]\r\n    elif position == 1:\r\n        return list[1]\r\n    elif position == 2:\r\n        return list[2]\r\n    elif position == 3:\r\n        return list[3]\r\n    elif position == 4:\r\n        return list[4]\r\n    else:\r\n        return \"out of range\"", "task_id": 6470}
{"finetuning_prompt": "\"\"\"\nGenerate a program to filter out specific words from a given sentence.\n\"\"\"\n\ndef filter_words(word, sentence):\n", "finetuning_completion": "\n  filtered_words = []\n  words = sentence.split(' ')\n  for w in words:\n    if w != word:\n      filtered_words.append(w)\n  return ' '.join(filtered_words)", "task_id": 6471}
{"finetuning_prompt": "\"\"\"\nOptimize the given code to delete an item from a given list.\n\"\"\"\n\ndef remove_item(lst, item):\n", "finetuning_completion": "\n  while item in lst:\n    lst.remove(item)\n  return (lst)", "task_id": 6472}
{"finetuning_prompt": "\"\"\"\nDesign a program to find the number of palindromic words in a string.\n\"\"\"\n\ndef is_palindrome(string): \r\n    left,right = 0, len(string) - 1  \r\n    while right >= left: \r\n        if not string[left] == string[right]: \r\n            return False\r\n        left += 1\r\n        right -= 1\r\n    return True\r\n\r\ndef palindrome_counter(string):\n", "finetuning_completion": " \r\n    left,right = 0, len(string) - 1  \r\n    while right >= left: \r\n        if not string[left] == string[right]: \r\n            return False\r\n        left += 1\r\n        right -= 1\r\n    return True\r\n\r\ndef palindrome_counter(string): \r\n    string = string.split(' ') \r\n    count = 0\r\n    for word in string:  \r\n        if is_palindrome(word): \r\n            count += 1\r\n    return count", "task_id": 6478}
{"finetuning_prompt": "\"\"\"\nDesign a program to calculate the division of two integers without using division operator.\n\"\"\"\n\ndef division(x, y):\n", "finetuning_completion": " \r\n   if (x < y): \r\n       return 0\r\n   else: \r\n       dividend = x \r\n       divisor = y \r\n       quotient = 0\r\n       while dividend >= divisor: \r\n           dividend -= divisor \r\n           quotient += 1\r\n       return quotient", "task_id": 6481}
{"finetuning_prompt": "\"\"\"\nWrite a function to optimize a given sequence to minimize the number of operations.\n\"\"\"\n\ndef optimization(sequence):\n", "finetuning_completion": "\r\n    output_sequence = [sequence[0]]\r\n    for i in range(1, len(sequence)):\r\n        #calculate operation needed\\\r\n        output_sequence.append(optimized_op(output_sequence[i-1], sequence[i]))\r\n    return output_sequence\r\n\r\ndef optimized_op(x, y): # finds the optimal operation to minimize operations\r\n    return min(x+y, x-y, y-x, x*y, y/x)", "task_id": 6485}
{"finetuning_prompt": "\"\"\"\nWrite a function to return the values under a given key from a dictionary.\n\"\"\"\n\ndef find_values(my_dict, key):\n", "finetuning_completion": " \n        return [value for (k,value) in my_dict.items() if k == key]", "task_id": 6488}
{"finetuning_prompt": "\"\"\"\nCreate a regular expression to validate the given PIN code.\n\"\"\"\n\nimport re\n\ndef is_valid_PIN(pin):\n", "finetuning_completion": "\n  return bool(re.match(r'^[0-9]{6}$', pin))", "task_id": 6496}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to sort a list of numbers in-place.\n\"\"\"\n\ndef in_place_sort(array):\n", "finetuning_completion": " \r\n    \r\n    for i in range(len(array)):\r\n        minElement = i \r\n        for j in range(i+1, len(array)): \r\n            if array[minElement] > array[j]: \r\n                minElement = j \r\n        array[i], array[minElement] = array[minElement], array[i]\r\n    return array", "task_id": 6500}
{"finetuning_prompt": "\"\"\"\nWrite a python function to delete given characters from the list of strings.\n\"\"\"\n\ndef delete_characters(words, chars):\n", "finetuning_completion": " \r\n    result = [] \r\n    for word in words: \r\n        new_word = \"\" \r\n        for char in word: \r\n            if char not in chars: \r\n                new_word += char \r\n        result.append(new_word) \r\n    return result", "task_id": 6506}
{"finetuning_prompt": "\"\"\"\nConvert the given list of numbers into a single string, separated by a comma.\n\"\"\"\n\ndef convert_list_string(test_list):\n", "finetuning_completion": "\r\n  res = [str(i) for i in test_list]\r\n  return \",\".join(res)", "task_id": 6529}
{"finetuning_prompt": "\"\"\"\nCreate a program which will detect any palindromic substring in a given string and print the index of the leftmost and rightmost characters of the substring.\n\"\"\"\n\ndef palindrome_detection(text):\n", "finetuning_completion": " \n\tfor i in range(len(text)): \n\t\tfor j in range(i, len(text)): \n\t\t\ts = text[i:j+1] \n\t\t\tif s == s[::-1]: \n\t\t\t\tprint(i, j)", "task_id": 6541}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to fetch the longest word in a list of strings.\n\"\"\"\n\ndef longest_word(strings):\n", "finetuning_completion": " \r\n\tmax_length = 0\r\n\tlongest_word = \"\"\r\n\tfor word in strings: \r\n\t\tif(len(word) > max_length): \r\n\t\t\tmax_length = len(word) \r\n\t\t\tlongest_word = word \r\n\treturn longest_word", "task_id": 6546}
{"finetuning_prompt": "\"\"\"\nMake a function to calculate the LCM of two number using Euclidean algorithm.\n\"\"\"\n\ndef lcm(a, b):\n", "finetuning_completion": "  \r\n    aux = gcd(a, b) \r\n    lcm = (a * b) / aux \r\n    return int(lcm) \r\n  \r\ndef gcd(a, b): \r\n    while (b != 0): \r\n        temp = b \r\n        b = a % b \r\n        a = temp \r\n    return a", "task_id": 6554}
{"finetuning_prompt": "\"\"\"\nMake an algorithm to find the number of unique paths in a given two dimensional grid.\n\"\"\"\n\ndef countUniquePaths(m, n):\n", "finetuning_completion": " \r\n    dp = [[1 for x in range(n)] for x in range(m)] \r\n  \r\n    # Traverse each cell after  \r\n    # the 1st cell of the  \r\n    # 1st row to fill up dp[][] \r\n    for i in range(1, m): \r\n        for j in range(1, n):  \r\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1] \r\n  \r\n    return dp[m - 1][n - 1]", "task_id": 6558}
{"finetuning_prompt": "\"\"\"\nCreate a program that outputs a data structure that contains the frequency of each element in the given list.\n\"\"\"\n\ndef count_frequency(arr):\n", "finetuning_completion": " \r\n    freq = {} \r\n    for item in arr: \r\n        if (item in freq): \r\n            freq[item] += 1\r\n        else: \r\n            freq[item] = 1\r\n    return freq \r\n\r\narr = [1, 2, 3, 4, 5, 1 ,2]\r\nfreq = count_frequency(arr) \r\n  \r\nprint (\"Frequency of the elements : \", freq)", "task_id": 6562}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find a subset whose sum is the same as the given target value.\n\"\"\"\n\ndef subset_sum(numbers, target, partial=[]):\n", "finetuning_completion": "\r\n    s = sum(partial)\r\n \r\n    # check if the partial sum is equals to target\r\n    if s == target: \r\n        print(\"sum(%s)=%s\" % (partial, target))\r\n    if s >= target:\r\n        return  # if we reach the number why bother to continue\r\n \r\n    for i in range(len(numbers)):\r\n        n = numbers[i]\r\n        remaining = numbers[i+1:]\r\n        subset_sum(remaining, target, partial + [n]) \r\n  \r\n\r\nif __name__ == \"__main__\":\r\n    numbers = [3, 9, 8, 4, 5, 7]\r\n    target = 14\r\n    subset_sum(numbers, target)", "task_id": 6565}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes in a number and a list of numbers and returns the two numbers in the list which add up to the number.\n\"\"\"\n\ndef sum_pair(nums, sum):\n", "finetuning_completion": " \r\n    list = [] \r\n  \r\n    for i in range(0, len(nums)-1): \r\n        for j in range(i + 1, len(nums)): \r\n            if nums[i] + nums[j] == sum: \r\n                list.append([nums[i], nums[j]]) \r\n  \r\n    return list", "task_id": 6581}
{"finetuning_prompt": "\"\"\"\nAnalyze a program and optimize the code to find the maximum sum of subsets of an array with no adjacent elements.\n\"\"\"\n\ndef maxSubsetSumNoAdjacent(array):\n", "finetuning_completion": "\n    if not len(array):\n        return 0\n    elif len(array) == 1:\n        return array[0]\n    second = array[0]\n    first = max(array[0], array[1])\n    for i in range(2, len(array)): \n        current = max(first, second + array[i])\n        second = first \n        first = current \n    return first", "task_id": 6590}
{"finetuning_prompt": "\"\"\"\nWrite a function to normalize a list of values from a range 0-100.\n\"\"\"\n\ndef normalize(list1):\n", "finetuning_completion": "\r\n    min_val = min(list1)\r\n    max_val = max(list1)\r\n    normalized_list = [int((x-min_val)*100/(max_val-min_val)) for x in list1]\r\n    return normalized_list", "task_id": 6600}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find the product of two numbers without using the multiplication operator\n\"\"\"\n\ndef product(x, y):\n", "finetuning_completion": " \n    product = 0\n    for _ in range(y): \n        product = product + x \n    return product", "task_id": 6607}
{"finetuning_prompt": "\"\"\"\nWrite a function to flatten the given nested dictionary into a single dictionary.\n\"\"\"\n\ndef flatten_dict(original):\n", "finetuning_completion": " \n  \n    flattened = {} \n  \n    # traverse the original dictionary and its nested items \n    for key, value in original.items(): \n        if type(value) is dict: \n            flattened.update(flatten_dict(value)) \n        else: \n            flattened[key] = value \n  \n    return flattened", "task_id": 6609}
{"finetuning_prompt": "\"\"\"\nProduce an optimized code for reversing a given string.\n\"\"\"\n\ndef reverse(s):\n", "finetuning_completion": "\r\n    rev_str = '' \r\n    for char in s: \r\n        rev_str = char + rev_str\r\n    return rev_str", "task_id": 6610}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the length of the words with repeated characters.\n\"\"\"\n\ndef len_with_repeating_char(word_list):\n", "finetuning_completion": " \r\n    res = [len(word) for word in word_list if any(word.count(i) > 1 for i in word)] \r\n    return res", "task_id": 6611}
{"finetuning_prompt": "\"\"\"\nWrite a python program to optimize the given code for computing the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": "\n    res = 1\n    for i in range(1, n+1): \n        res *= i \n  \n    return res", "task_id": 6613}
{"finetuning_prompt": "\"\"\"\nWrite a python program to optimize a given set of scores for each team.\n\"\"\"\n\ndef optimize_Scores(scores1, scores2):\n", "finetuning_completion": " \r\n    optimized1 = [] \r\n  \r\n    for team1score in scores1: \r\n        minDiff = float('inf') \r\n        matchScore2 = 0\r\n        for team2score in scores2: \r\n            if abs(team1score - team2score) < minDiff: \r\n                minDiff = abs(team1score-team2score) \r\n                matchScore2 = team2score \r\n  \r\n        optimized1.append(matchScore2) \r\n  \r\n    return optimized1", "task_id": 6616}
{"finetuning_prompt": "\"\"\"\nCreate a function which takes an array of numbers and a number as arguments, and returns the difference between the largest and smallest numbers in the array.\n\"\"\"\n\ndef find_difference(arr, num):\n", "finetuning_completion": " \r\n  if len(arr) == 0 or num == 0:\r\n    return 0 \r\n  else:\r\n     minNumber = min(arr) \r\n     maxNumber = max(arr)\r\n     diff = maxNumber - minNumber \r\n     return diff", "task_id": 6621}
{"finetuning_prompt": "\"\"\"\nWrite a function to query a given dataset and return all the records with more than two records in it.\n\"\"\"\n\ndef query_dataset(dataset):\n", "finetuning_completion": "\r\n    result = []\r\n    for item in dataset:\r\n        if len(item) > 2:\r\n            result.append(item)\r\n    return result", "task_id": 6624}
{"finetuning_prompt": "\"\"\"\nWrite a python program to apply an algorithm to identify the words present in a given sentence.\n\"\"\"\n\nimport re\r\nsentence = \"The quick brown fox jumped over the lazy dog\"\r\ndef identify_words(sentence):\n", "finetuning_completion": "\r\n  words = re.findall(r'\\w+', sentence)\r\n  return words", "task_id": 6626}
{"finetuning_prompt": "\"\"\"\nConstruct a python function to generate a 3D array of given size.\n\"\"\"\n\ndef generate_3d_array(m, n, x):\n", "finetuning_completion": " \r\n    # creating a 3d array with all zeros \r\n    my_3d_array = np.zeros((m, n, x)) \r\n    return my_3d_array", "task_id": 6629}
{"finetuning_prompt": "\"\"\"\nCreate a function in python to extract the digits from a given string.\n\"\"\"\n\ndef extract_digits(str):\n", "finetuning_completion": " \n  \n    res = \"\" \n  \n    for i in range(len(str)): \n        if str[i].isdigit() == True: \n            res += str[i] \n      \n    return res", "task_id": 6630}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to print out the factorial for the given number.\n\"\"\"\n\ndef factorial(num):\n", "finetuning_completion": "\r\n    fact = 1\r\n    for i in range(1, num+1): \r\n        fact = fact * i \r\n    return fact", "task_id": 6633}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to detect and print the longest palindrome from the given string.\n\"\"\"\n\ndef longest_palindrome(text):\n", "finetuning_completion": "\r\n    max_len = 1 \r\n  \r\n    start = 0 \r\n    # Initializing the length of \r\n    # the longest palindrome found \r\n    length = len(text) \r\n  \r\n    low = 0\r\n    high = 0\r\n  \r\n    # One by one consider every \r\n    # character as center point \r\n    # of even and length palindromes \r\n    for i in range(1, length): \r\n        # Find the longest even length \r\n        # palindrome with center points \r\n        # as i-1 and i. \r\n        low = i - 1\r\n        high = i \r\n        while low >= 0 and high < length and text[low] == text[high]: \r\n            if high - low + 1 > max_len: \r\n                start = low \r\n                max_len = high - low + 1\r\n            low -= 1\r\n            high += 1\r\n  \r\n        # Find the longest odd length \r\n        # palindrome with center point as i \r\n        low = i - 1\r\n        high = i + 1\r\n        while low >= 0 and high < length and text[low] == text[high]: \r\n            if high - low + 1 > max_len: \r\n                start = low \r\n                max_len = high - low + 1\r\n            low -= 1\r\n            high += 1\r\n  \r\n    return (str(text[start:start + max_len]))", "task_id": 6634}
{"finetuning_prompt": "\"\"\"\nDesign a program to classify various dataset according to labels given.\n\"\"\"\n\ndef classify_data(arr, labels):\n", "finetuning_completion": "\n    classified_dict = {}\n    for item in arr:\n        if item in labels: \n            if labels[item] not in classified_dict:\n                classified_dict[labels[item]] = [item]\n            else: \n                classified_dict[labels[item]].append(item)\n    return classified_dict", "task_id": 6645}
{"finetuning_prompt": "\"\"\"\nDevelop a program to encode a string using its corresponding ascii values.\n\"\"\"\n\ndef encode_String(string):\n", "finetuning_completion": "\n    encodedString = ''\n    for char in string:\n        encodedString += str(ord(char)) \n    return encodedString", "task_id": 6650}
{"finetuning_prompt": "\"\"\"\nCode a function to count how many times each word occurs in a given text.\n\"\"\"\n\ndef word_count(text):\n", "finetuning_completion": " \n    counts = dict() \n    words = text.split() \n  \n    for word in words: \n        if word in counts: \n            counts[word] += 1\n        else: \n            counts[word] = 1\n    return counts", "task_id": 6651}
{"finetuning_prompt": "\"\"\"\nWrite a code to create a list of prime numbers till given upper bound n.\n\"\"\"\n\ndef prime_list(n):\n", "finetuning_completion": " \n\tprime_nums = [2] \n\tfor num in range(3, n + 1, 2):  \n\t\tis_prime = True\n\t\tfor check in range(3, int(num ** 0.5) + 1, 2): \n\t\t\tif (num % check == 0): \n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\t\t\t\n\t\tif (is_prime): \n\t\t\tprime_nums.append(num) \n\t\n\treturn prime_nums \n\nn = 10\nprint(prime_list(n))", "task_id": 6660}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a sorted list of the numbers from 1 to 100 with the even numbers in ascending order and the odd numbers in descending order.\n\"\"\"\n\ndef Sort(list) :\n", "finetuning_completion": " \r\n    evens = [x for x in list if x % 2 == 0] \r\n    evens.sort()  \r\n    odds = [x for x in list if x % 2 != 0] \r\n    odds.sort(reverse=True)  \r\n    sorted_list = evens + odds  \r\n    return sorted_list", "task_id": 6661}
{"finetuning_prompt": "\"\"\"\nFind the sum of elements in an array.\n\"\"\"\n\ndef sum(arr):\n", "finetuning_completion": "\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return (sum)", "task_id": 6662}
{"finetuning_prompt": "\"\"\"\nFind the factorial of a given number by using recursion.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "task_id": 6666}
{"finetuning_prompt": "\"\"\"\nDevelop a code to create a list of n lists each containing n elements.\n\"\"\"\n\ndef create_list_of_list(n):\n", "finetuning_completion": " \n    lst = [[0]*n for _ in range(n)] \n    k = 1\n    for i in range(n): \n        for j in range(n):\n            lst[i][j] = k \n            k = k + 1\n    return lst", "task_id": 6668}
{"finetuning_prompt": "\"\"\"\nWrite a python script to make a call to an API.\n\"\"\"\n\nimport requests\n\ndef http_call(url, headers=None):\n", "finetuning_completion": "\n    response = requests.get(url, headers=headers)\n    return response", "task_id": 6669}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the common elements between two given arrays by iterating over both.\n\"\"\"\n\ndef findCommon(arr1, arr2):\n", "finetuning_completion": " \r\n    res = [] \r\n    for num1 in arr1: \r\n        for num2 in arr2: \r\n            if num1 == num2: \r\n                res.append(num1) \r\n  \r\n    return res", "task_id": 6671}
{"finetuning_prompt": "\"\"\"\nCreate a program to delete all the duplicate strings from an array.\n\"\"\"\n\ndef remove_duplicates(strings):\n", "finetuning_completion": "\r\n    result = []\r\n    for string in strings:\r\n        if string not in result:\r\n            result.append(string)\r\n    return result", "task_id": 6676}
{"finetuning_prompt": "\"\"\"\nWrite a code to compute the sum of the first n integers using a loop.\n\"\"\"\n\ndef sum_n_integers(n):\n", "finetuning_completion": "                                                                                                                                                                                                        \r\n    sum = 0                                                                                                                                                                                                                    \r\n    for i in range (1, n+1):                                                                                                                                                                                                 \r\n        sum += i                                                                                                                                                                                                               \r\n    return sum", "task_id": 6685}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to sort the values of one list using the indexes of another list.\n\"\"\"\n\ndef sort(list1, list2):\n", "finetuning_completion": "\n    sorted_list2 = [x for _,x in sorted(zip(list1,list2))]\n    return sorted_list2\n\nlist1 = [5, 10, 15, 20, 25]\nlist2 = [3, 10, 15, 30, 25]\n\nprint(sort(list1, list2))", "task_id": 6690}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate a list containing the first n perfect squares.\n\"\"\"\n\ndef squares(n):\n", "finetuning_completion": " \r\n    # List to store square elements \r\n    lst = [] \r\n  \r\n    # Iterate upto n \r\n    for i in range(1, n+1): \r\n        lst.append(i*i) \r\n  \r\n    return lst", "task_id": 6694}
{"finetuning_prompt": "\"\"\"\nWrite a function to encode and decode a given json object with UTF-8 encoding.\n\"\"\"\n\nimport json\r\n\r\ndef encode_decode_json(json_obj):\n", "finetuning_completion": "\r\n    json_str = json.dumps(json_obj)\r\n    encoded_str = json_str.encode('utf- 8')\r\n    decoded_str = encoded_str.decode('utf-8')\r\n    decoded_obj = json.loads(decoded_str)\r\n    return decoded_obj", "task_id": 6695}
{"finetuning_prompt": "\"\"\"\nGiven a list of students and their scores, design a program to find the highest scorer.\n\"\"\"\n\ndef find_highest_scorer(students):\n", "finetuning_completion": "\r\n\tstudent_highest_score = None\r\n\thighest_score = 0\r\n\r\n\tfor student in students:\r\n\t\tif student['score'] > highest_score:\r\n\t\t\tstudent_highest_score = student\r\n\t\t\thighest_score = student['score']\r\n\r\n\treturn student_highest_score", "task_id": 6697}
{"finetuning_prompt": "\"\"\"\nDevelop a program which takes a list and returns a dictionary with the numbers as keys and their cubes as the values.\n\"\"\"\n\ndef cube_dict(l):\n", "finetuning_completion": " \r\n    cube_dict = {}\r\n    for num in l: \r\n        cube_dict[num] = num * num * num\r\n    return cube_dict", "task_id": 6706}
{"finetuning_prompt": "\"\"\"\nDesign a method which takes a string as an input and removes all the duplicates from it.\n\"\"\"\n\ndef remove_dup(string):\n", "finetuning_completion": " \r\n    result = \"\" \r\n    seen = set() \r\n    for s in string: \r\n        if s not in seen: \r\n            result += s \r\n            seen.add(s) \r\n    return result", "task_id": 6707}
{"finetuning_prompt": "\"\"\"\nGiven a list of rectangles, write a program to detect if there is any overlap between rectangles.\n\"\"\"\n\ndef findOverlap(rects):\n", "finetuning_completion": "\r\n\r\n    # check if there is any overlap in x and y positions\r\n    for i in range(len(rects)):\r\n        for j in range(i+1, len(rects)):\r\n            a = rects[i]\r\n            b = rects[j]\r\n            if (a['x'] + a['width'] > b['x'] and b['x'] + b['width'] > a['x']) and (a['y'] + a['height'] > b['y'] and b['y'] + b['height'] > a['y']):\r\n                return True\r\n    return False", "task_id": 6710}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to compare two numbers and print whether they are equal or not.\n\"\"\"\n\ndef compare_numbers(a, b):\n", "finetuning_completion": "\r\n    if a == b:\r\n        print(\"Numbers are equal\")\r\n    else:\r\n        print(\"Numbers are not equal\")", "task_id": 6712}
{"finetuning_prompt": "\"\"\"\nCreate a program to print all the musical notes in order from A to G.\n\"\"\"\n\ndef print_notes():\n", "finetuning_completion": " \n    notes = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"] \n    for note in notes:\n        print(note)", "task_id": 6719}
{"finetuning_prompt": "\"\"\"\nCreate a program to filter a given list of tuples by an input key and return only the tuples that have the same key.\n\"\"\"\n\ndef filter_tuple_by_key(tuple_list, key):\n", "finetuning_completion": " \n    filtered_tuple_list = [] \n    for value in tuple_list: \n        if value[0] == key: \n            filtered_tuple_list.append(value) \n    return filtered_tuple_list", "task_id": 6720}
{"finetuning_prompt": "\"\"\"\nConstruct a program to generate a histogram of a list of numbers.\n\"\"\"\n\ndef Generate_Histogram(nums):\n", "finetuning_completion": " \r\n    # Get maximum element of the list nums \r\n    maxNum = max(nums) \r\n  \r\n    # Create histogram with zero elements \r\n    hist = [0] * (maxNum + 1) \r\n  \r\n    # Loop though all elements of the list nums and store the count \r\n    # of every element in its corresponding index \r\n    for i in nums: \r\n        hist[i] += 1\r\n      \r\n    # Print histogram \r\n    for i in range(len(hist)): \r\n        print(\"{0}: {1}\".format(i, '*' * hist[i]))", "task_id": 6728}
{"finetuning_prompt": "\"\"\"\nDesign a program to print an order-of-magnitude estimate of the number of substrings of a given string.\n\"\"\"\n\ndef substrings_estimate(string):\n", "finetuning_completion": " \r\n    n = len(string) \r\n    return 3 * (2 ** (2 * n - 1)) - n", "task_id": 6738}
{"finetuning_prompt": "\"\"\"\nWrite a function to print the maximum of the two numbers without using the if statement.\n\"\"\"\n\ndef max_number(n1, n2):\n", "finetuning_completion": "\r\n    return (n1 + n2 + abs(n1-n2))/2", "task_id": 6740}
{"finetuning_prompt": "\"\"\"\nDesign a program to format the output of a mathematical operation and display the result to the user.\n\"\"\"\n\ndef format_output(result):\n", "finetuning_completion": "\r\n    answer = float(result)\r\n    return 'The result is: {}'.format(answer)", "task_id": 6742}
{"finetuning_prompt": "\"\"\"\nGenerate a function to obtain the middle character in a string.\n\"\"\"\n\ndef middle_char(input_string):\n", "finetuning_completion": "\r\n    length = int(len(input_string)/2)\r\n    if len(input_string) % 2 == 0:\r\n        return input_string[length-1:length+1]\r\n    else:\r\n        return input_string[length]", "task_id": 6743}
{"finetuning_prompt": "\"\"\"\nDesign a program to filter a list of elements to those that are greater than the average of all elements.\n\"\"\"\n\ndef avg_greater(lst):\n", "finetuning_completion": "\n\n    avg = sum(lst) / len(lst)\n    return [elem for elem in lst if elem>avg]", "task_id": 6746}
{"finetuning_prompt": "\"\"\"\nWrite a function using python to find and return the middle character of a given string.\n\"\"\"\n\ndef middle(s):\n", "finetuning_completion": " \r\n    mid = len(s)//2\r\n    return (s[mid])", "task_id": 6748}
{"finetuning_prompt": "\"\"\"\nCompute the Euclidean distance between two given point lists using python.\n\"\"\"\n\ndef euclidean_distance(point1, point2):\n", "finetuning_completion": " \r\n    return (sum([(x - y) **2 for (x, y) in zip(point1, point2)])) ** 0.5", "task_id": 6749}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to create a function which checks if a given number is even or odd.\n\"\"\"\n\ndef check_even_odd(n):\n", "finetuning_completion": " \r\n    if n % 2 == 0: \r\n        return \"Even\"\r\n    else: \r\n        return \"Odd\"", "task_id": 6755}
{"finetuning_prompt": "\"\"\"\nWrite a code that generate each possible permutation of given length from 0s or 1s.\n\"\"\"\n\ndef generatePermutation(length):\n", "finetuning_completion": " \r\n  \r\n    permutation = [] \r\n  \r\n    for i in range(2**length): \r\n        temp = list(bin(i)[2:]) \r\n        for j in range(length - len(temp)): \r\n            temp.insert(0, '0') \r\n        permutation.append(''.join(temp)) \r\n  \r\n    return permutation", "task_id": 6761}
{"finetuning_prompt": "\"\"\"\nWrite code to reverse the order of the second half of the elements in a given array with an odd number of elements.\n\"\"\"\n\ndef reverseOddArray(arr, n):\n", "finetuning_completion": " \r\n      \r\n    # Reversing only \r\n    # second half \r\n    start = int(n / 2) \r\n    end = n - 1\r\n    while (start < end): \r\n        arr[start], arr[end] = arr[end], arr[start] \r\n        start = start + 1\r\n        end = end - 1\r\n    return arr", "task_id": 6762}
{"finetuning_prompt": "\"\"\"\nGenerate a code that calculates the number of flipped digits in a given decimal number.\n\"\"\"\n\ndef countFlips(arr):\n", "finetuning_completion": " \r\n    count = 0\r\n    for i in range(len(arr)-1): \r\n        if arr[i] != arr[i+1] : \r\n            count+=1\r\n    return count", "task_id": 6766}
{"finetuning_prompt": "\"\"\"\nCreate a program in python which takes two integers as an argument, calculates the sum and then prints the result.\n\"\"\"\n\ndef add(x,y):\n", "finetuning_completion": "\r\n    sum = x + y \r\n    print(\"Sum is : \",sum)", "task_id": 6772}
{"finetuning_prompt": "\"\"\"\nWrite a python program to link the given numbers using multiplication and addition.\n\"\"\"\n\n#Python Code for Linking the Numbers\ndef link_nums(a,b,c):\n", "finetuning_completion": "\n     return a*b+c  \n  \n# Driver Code   \nnum1 = 2 \nnum2 = 3\nnum3 = 4\nprint(\"Linked Numbers:\",link_nums(num1, num2, num3))", "task_id": 6788}
{"finetuning_prompt": "\"\"\"\nCreate a program to identify the maximum values of two given arrays.\n\"\"\"\n\n#Python code to identify the maximum values of two arrays\ndef max_val(arr1,arr2):\n", "finetuning_completion": " \n  \n    # create an array to store the maximum values \r\n    max_array = [0]*len(arr1) \r\n  \r\n    # iterate through the two arrays \r\n    for i in range(len(arr1)): \r\n        if arr1[i] > arr2[i]: \r\n            max_array[i] = arr1[i] \r\n        else: \r\n            max_array[i] = arr2[i] \r\n            \r\n    return max_array\n  \r\n# Driver Code \r\narr1 = [1, 2, 5] \r\narr2 = [7, 6, 3] \r\nprint(\"The maximum values of two array is:\",max_val(arr1,arr2))", "task_id": 6790}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes in a matrix as an argument and transposes it.\n\"\"\"\n\ndef transpose_matrix(matrix):\n", "finetuning_completion": "\r\n  transposed_matrix = [list(i) for i in zip(*matrix)] \r\n  return transposed_matrix", "task_id": 6794}
{"finetuning_prompt": "\"\"\"\nDevelop a program to find all prime numbers up to the given number.\n\"\"\"\n\ndef prime_nums_up_to(limit):\n", "finetuning_completion": "\r\n    prime_nums = []\r\n    for num in range(2, limit + 1): \r\n        is_prime = True\r\n        for div in range(2, num):\r\n            if num % div == 0:\r\n                is_prime = False\r\n                break\r\n        if is_prime:\r\n            prime_nums.append(num)\r\n    return prime_nums", "task_id": 6796}
{"finetuning_prompt": "\"\"\"\nCreate a program to print the even numbers in a range upto the given number.\n\"\"\"\n\ndef print_even_upto_num(num):\n", "finetuning_completion": "\r\n    even_nums = []\r\n    for num in range(num+1):\r\n        if num % 2 == 0:\r\n            even_nums.append(num)\r\n    return even_nums", "task_id": 6798}
{"finetuning_prompt": "\"\"\"\nWrite a code to create a list of squares of first \u2018n\u2019 natural numbers.\n\"\"\"\n\ndef print_list_squares(n):\n", "finetuning_completion": " \r\n\t# Declare an empty list \r\n\tsq = [] \r\n\r\n\tfor x in range(1, n + 1): \r\n\t\tsq.append(x * x) \r\n\tprint (sq)", "task_id": 6799}
{"finetuning_prompt": "\"\"\"\nWrite a code to return the longest substring that contains no consecutive repeating characters.\n\"\"\"\n\ndef findLongestSubstring(string):\n", "finetuning_completion": " \n\tstart = 0\n\tmax_length = 0\n\tfreqMap = {} \n  \n\tfor end in range(len(string)): \n\t\tif string[end] in freqMap: \n\t\t\tstart = max(freqMap[string[end]], start) \n          \n\t\tfreqMap[string[end]] = end + 1\n\t\tmax_length = max(max_length, \n\t\t\t\t\t\tend - start + 1)    \n\t\t\n\treturn max_length", "task_id": 6800}
{"finetuning_prompt": "\"\"\"\nWrite a python program to classify a given set of data points into two classes depending on the given conditions.\n\"\"\"\n\ndef classifyDataPoints(data):\n", "finetuning_completion": " \r\n    classes = [] \r\n  \r\n    for PTS in data: \r\n        x,y = PTS\r\n          \r\n        if (x**2 + y**2) <= 4: \r\n            classes.append(\"Class1\") \r\n        else: \r\n            classes.append(\"Class2\") \r\n  \r\n    return classes", "task_id": 6804}
{"finetuning_prompt": "\"\"\"\nCreate a code to encrypt a given string using the SHA256 algorithm.\n\"\"\"\n\nimport hashlib\r\n \r\ndef sha256(string):\n", "finetuning_completion": "\r\n    h = hashlib.sha256(string.encode())\r\n    return h.hexdigest()", "task_id": 6806}
{"finetuning_prompt": "\"\"\"\nScale each element in a given 2D matrix to the range [0, 1].\n\"\"\"\n\ndef scale_2D_matrix(matrix):\n", "finetuning_completion": "\r\n    min_value, max_value = float('inf'), float('-inf')\r\n    \r\n    # find min and max values in the matrix\r\n    for row in matrix:\r\n        min_value = min(min_value, min(row))\r\n        max_value = max(max_value, max(row))\r\n    \r\n    # scale each element in the matrix\r\n    for row in matrix:\r\n        for i in range(len(row)):\r\n            row[i] = (row[i] - min_value) / (max_value - min_value)\r\n    return matrix", "task_id": 6814}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to check if an expression has balanced parenthesis.\n\"\"\"\n\ndef is_balanced(string):\n", "finetuning_completion": " \n  \n    stack = [] \n  \n    # Iterate through the string \r\n    for char in string: \n  \r\n        # if it's an open bracket, push to the stack \r\n        if char in [\"[\", \"(\", \"{\"]: \r\n            stack.append(char) \r\n  \r\n        # if it's a closed bracket, compare with the top of the stack \r\n        elif char in [\"]\", \")\", \"}\"]: \r\n            top = stack.pop() \r\n            if (top == \"[\" and char != \"]\") or (top == \"(\" and char != \")\") \\\r\n            or (top == \"{\" and char != \"}\"): \r\n                return False\r\n  \r\n    # check if the stack is empty at the end \r\n    if len(stack) == 0: \r\n        return True\r\n    else: \r\n        return False", "task_id": 6817}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the [edit distance](https://en.wikipedia.org/wiki/Edit_distance) of two strings.\n\"\"\"\n\ndef edit_distance(str1, str2):\n", "finetuning_completion": "\r\n    m = len(str1)\r\n    n = len(str2)\r\n    table = [[0 for x in range(n+1)] for x in range(m+1)]\r\n    for i in range(m+1):\r\n        for j in range(n+1):\r\n            if i == 0:\r\n                table[i][j] = j\r\n            elif j == 0:\r\n                table[i][j] = i\r\n            elif str1[i-1] == str2[j-1]:\r\n                table[i][j] = table[i-1][j-1] \r\n            else: \r\n                table[i][j] = 1 + min(table[i][j-1], table[i-1][j], table[i-1][j-1])  \r\n    return table[m][n]", "task_id": 6818}
{"finetuning_prompt": "\"\"\"\nDevelop a function in python to return the first and last element from a given 3D matrix.\n\"\"\"\n\ndef first_last(matrix):\n", "finetuning_completion": "\n    first = matrix[0][0][0]\n    last = matrix[-1][-1][-1]\n    return (first, last)", "task_id": 6824}
{"finetuning_prompt": "\"\"\"\nCreate a program which can edit the given string by adding the given word in it.\n\"\"\"\n\ndef edit_string(str1, str2):\n", "finetuning_completion": "\n  return str1 + \" \" + str2", "task_id": 6830}
{"finetuning_prompt": "\"\"\"\nImplement a method of creating a dictionary for the given dataset\n\"\"\"\n\ndef create_dict(data):\n", "finetuning_completion": "\n    return {x[0]:x[1] for x in data}", "task_id": 6834}
{"finetuning_prompt": "\"\"\"\nFormulate a function to calculate the area of an octagon\n\"\"\"\n\nfrom math import sqrt\n\ndef area_octagon(side):\n", "finetuning_completion": " \n\treturn 2 * (1 + sqrt(2)) * side**2", "task_id": 6836}
{"finetuning_prompt": "\"\"\"\nOptimize the following code snippet to run in O(1) time complexity.\n\"\"\"\n\ndef my_func(n):\n", "finetuning_completion": "\n   result = n\n   return result", "task_id": 6839}
{"finetuning_prompt": "\"\"\"\nCreate a program to get the approximate value of pi using the Leibniz formula.\n\"\"\"\n\ndef leibniz_pi(iterations):\n", "finetuning_completion": "\r\n    pi = 0\r\n    for i in range(iterations):\r\n        sign = (-1) ** i \r\n        pi += ((4 *sign) / (2 * i + 1))\r\n    return pi", "task_id": 6843}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the root of a quadratic equation using the quadratic formula.\n\"\"\"\n\ndef quadratic_Root(a, b, c):\n", "finetuning_completion": "\r\n    root1 = (-b + (b**2 - 4*a*c)**(1/2))/(2*a)\r\n    root2 = (-b - (b**2 - 4*a*c)**(1/2))/(2*a)\r\n    return root1, root2", "task_id": 6845}
{"finetuning_prompt": "\"\"\"\nWrite a short script to print the first and last elements of a given sequence of integers.\n\"\"\"\n\ndef print_first_last_elements(list):\n", "finetuning_completion": " \r\n    list_length = len(list) \r\n    print(\"First element:\", list[0])  \r\n    print(\"Last element:\", list[list_length-1])", "task_id": 6853}
{"finetuning_prompt": "\"\"\"\nCode a function that takes a number between 0 and 100 and returns the grade associated with it.\n\"\"\"\n\ndef grade(score):\n", "finetuning_completion": " \r\n    if (score >= 90): \r\n        grade = 'A'\r\n    elif (score >= 80): \r\n        grade = 'B'\r\n    elif (score >= 70): \r\n        grade = 'C'\r\n    elif (score >= 60): \r\n        grade = 'D'\r\n    else: \r\n        grade = 'E'\r\n    return grade", "task_id": 6860}
{"finetuning_prompt": "\"\"\"\nDevelop a program to compute the complex product of two complex numbers.\n\"\"\"\n\ndef complex_product(c1, c2):\n", "finetuning_completion": "\r\n    return (c1.real * c2.real - c1.imag * c2.imag , c1.real * c2.imag + c1.imag * c2.real)", "task_id": 6864}
{"finetuning_prompt": "\"\"\"\nGenerate a code snippet to append an element to the end of a given array.\n\"\"\"\n\ndef append_array(arr, elem):\n", "finetuning_completion": " \n    arr.append(elem) \r\n    return arr", "task_id": 6868}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the amount of water a potato can hold given its weight.\n\"\"\"\n\ndef water_potato(potato_weight):\n", "finetuning_completion": "\n    water_weight = potato_weight * 0.95\n    return water_weight", "task_id": 6872}
{"finetuning_prompt": "\"\"\"\nImplement a method to unpack the given string into key-value pairs.\n\"\"\"\n\ndef unpack(str):\n", "finetuning_completion": "\r\n    key_value_pair = {}\r\n    elements = str.split(',')\r\n    for element in elements:\r\n        key = element.split('=')[0]\r\n        val = element.split('=')[1]\r\n        key_value_pair[key] = val\r\n    return key_value_pair", "task_id": 6877}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find all possible pairs of numbers that add up to a given target number.\n\"\"\"\n\ndef find_sum_pairs(nums, target_sum):\n", "finetuning_completion": " \r\n    pairs = []     \r\n    for i in range(len(nums)): \r\n        for j in range(i+1, len(nums)): \r\n            if (nums[i] + nums[j] == target_sum): \r\n                pairs.append((nums[i], nums[j])) \r\n    return pairs", "task_id": 6886}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find all valid split points in a given string with 26 letters.\n\"\"\"\n\ndef all_valid_split_points(s):\n", "finetuning_completion": " \r\n    all_valid_split = [] \r\n    for i in range(1, len(s)): \r\n        if (set(s[:i]) == set(s[i:])): \r\n            valid_split_point_index = i \r\n            all_valid_split.append(valid_split_point_index) \r\n\t\r\n    return all_valid_split", "task_id": 6887}
{"finetuning_prompt": "\"\"\"\nDevelop a logic to detect palindromic sentences.\n\"\"\"\n\ndef isPalindrome(sentence):\n", "finetuning_completion": " \n    #First resolve cases\n    sentence = sentence.lower() \n    #Remove punctuation and whitespace\n    sentence = sentence.replace(\" \", \"\") \n    #Reverse the string\n    reverse_sentence = sentence[::-1] \n    # Check if the sentences are identical\n    if (sentence == reverse_sentence): \n        return True \n    else: \n        return False", "task_id": 6891}
{"finetuning_prompt": "\"\"\"\nCreate a function to take a number x, subtract 1 from it and check whether it is divisible by 19 or not.\n\"\"\"\n\ndef is_divisible_19(x):\n", "finetuning_completion": " \n    # Subtract 1 from the number\n    x = x - 1 \n    # Check if divisible by 19\n    if (x % 19) == 0: \n        return True \n    else: \n        return False\n\nresult = is_divisible_19(95) \nprint(result)", "task_id": 6892}
{"finetuning_prompt": "\"\"\"\nDevelop a code to print out all combinations of list elements?\n\"\"\"\n\ndef Combinations(list_ele):\n", "finetuning_completion": " \r\n    combinations = [] \r\n\r\n    for i in range(len(list_ele)+1): \r\n        combinations.extend(itertools.combinations(list_ele, i)) \r\n  \r\n    return combinations", "task_id": 6904}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate the minimum number of parentheses to make the expression valid.\n\"\"\"\n\ndef valid_parentheses(expression):\n", "finetuning_completion": " \r\n    count = 0\r\n    balance = 0\r\n  \r\n    for char in expression: \r\n        if char == '(': \r\n            balance += 1\r\n        else: \r\n            balance -= 1\r\n\r\n        if balance == -1: \r\n            count += 1\r\n            balance += 1\r\n  \r\n    count += balance \r\n  \r\n    return count", "task_id": 6905}
{"finetuning_prompt": "\"\"\"\nConstruct a code to convert a given binary number into its decimal representation?\n\"\"\"\n\ndef binary_to_decimal(binary):\n", "finetuning_completion": " \n    binary1 = binary \r\n    decimal, i = 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return decimal", "task_id": 6909}
{"finetuning_prompt": "\"\"\"\nDevelop a code to check if the given number is a palindrome number or not?\n\"\"\"\n\ndef is_palindrome(n):\n", "finetuning_completion": " \r\n      \r\n    temp = n \r\n    rev = 0\r\n      \r\n    while (n > 0): \r\n          \r\n        dig = n % 10\r\n        rev = rev * 10 + dig \r\n        n = n // 10\r\n   \r\n    if (temp == rev): \r\n        return True\r\n    else: \r\n        return False", "task_id": 6910}
{"finetuning_prompt": "\"\"\"\nGenerate code to sort a given 2D array in lexicographical order.\n\"\"\"\n\ndef lexicographical_sort(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)-1): \r\n        for j in range(i+1, len(arr)): \r\n            if arr[i] > arr[j]: \r\n                arr[i],arr[j] = arr[j],arr[i] \n    return arr", "task_id": 6914}
{"finetuning_prompt": "\"\"\"\nWrite a code that can count the number of odd and even numbers from a given list.\n\"\"\"\n\ndef count_odd_even(nums):\n", "finetuning_completion": "\n  even = 0\n  odd = 0\n  for num in nums:\n    if (num % 2 == 0):\n        even += 1\n    else:\n        odd += 1\n  return (even, odd)", "task_id": 6915}
{"finetuning_prompt": "\"\"\"\nCreate a python program to assign marks to students according to their performance.\n\"\"\"\n\ndef assign_marks(results):\n", "finetuning_completion": "\n  marks = {}\n  for student, score in results.items(): \n    if score >=0 and score<=4:\n      marks[student] = \"D\"\n    elif score >4 and score <=9:\n      marks[student] = \"C\"\n    elif score >9 and score <=14:\n      marks[student] = \"B\"\n    else:\n      marks[student] = \"A\"\n  return marks", "task_id": 6917}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm in Python that determines if an input number is a perfect square or not.\n\"\"\"\n\ndef is_perfect_square(num):\n", "finetuning_completion": " \n  \n    # Finding the square root of a number \n    root = int(num ** 0.5) \n      \n    # If the square root is equal  \n    # to the number then it is a perfect  \n    # square number \n    if num == root * root: \n        return True\n    else: \n        return False", "task_id": 6925}
{"finetuning_prompt": "\"\"\"\nSort the array of student records based on their age in ascending order.\n\"\"\"\n\ndef sort_age(arr):\n", "finetuning_completion": " \r\n    # use quick sort algorithm\r\n    arr.sort(key = lambda x: x['age']) \r\n    return arr", "task_id": 6931}
{"finetuning_prompt": "\"\"\"\nRead the following numbers and print out the sum.\n\"\"\"\n\ndef sum(nums):\n", "finetuning_completion": " \r\n    total = 0 \r\n    for n in nums: \r\n        total += n \r\n    return total", "task_id": 6932}
{"finetuning_prompt": "\"\"\"\nEvaluate the correctness of the following Pythagorean triplet.\n\"\"\"\n\ndef is_pythagorean_triplet(a,b,c):\n", "finetuning_completion": "\n    if a ** 2 + b ** 2 == c ** 2:\n        return(\"It is a Pythagorean Triplet.\")\n    else:\n        return(\"It is not a Pythagorean Triplet.\")", "task_id": 6935}
{"finetuning_prompt": "\"\"\"\nCreate a program to print out the numbers which are divisible by 3 and 5 between 0 and 100\n\"\"\"\n\ndef divisible_3_and_5(n):\n", "finetuning_completion": " \n    arr = [] \n    for i in range(n): \n        if i % 3 == 0 and i % 5 == 0: \n            arr.append(i) \n    return arr", "task_id": 6937}
{"finetuning_prompt": "\"\"\"\nCreate a program which finds the sum of the odd numbers up to given number n.\n\"\"\"\n\ndef sum_odd_nums(n):\n", "finetuning_completion": " \n    total = 0 \n    for num in range(n+1): \n        if num % 2 == 1: \n            total += num \n    return total", "task_id": 6938}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the maximal subarray sum.\n\"\"\"\n\ndef max_subarray_sum(arr):\n", "finetuning_completion": " \n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n  \n        # Do not compare for all elements. Compare only \n        # when  max_ending_here > 0 \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n    return max_so_far", "task_id": 6948}
{"finetuning_prompt": "\"\"\"\nCreate a machine learning model that classifies a given dataset.\n\"\"\"\n\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\n\r\ndef classify_data(X, y):\n", "finetuning_completion": "\r\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\r\n    sc = StandardScaler()\r\n    X_train = sc.fit_transform(X_train)\r\n    X_test = sc.transform(X_test)\r\n\r\n    classifier = DecisionTreeClassifier(criterion='entropy', random_state=0)\r\n    classifier.fit(X_train, y_train)\r\n\r\n    y_pred = classifier.predict(X_test)\r\n    return y_pred", "task_id": 6953}
{"finetuning_prompt": "\"\"\"\nWrite a code which outputs the top k elements of a Lambda Architecture.\n\"\"\"\n\ndef lambda_architecture_top_k(k):\n", "finetuning_completion": "\r\n    data_collection_layer = [] \r\n    batch_layer = [] \r\n    serving_layer = [] \r\n    for i in range(0, k): \r\n        data_collection_layer.append(\"Data Collection Layer Item #\" + str(i))\r\n        batch_layer.append(\"Batch Layer Item #\" + str(i))\r\n        serving_layer.append(\"Serving Layer Item #\" + str(i)) \r\n    return {\r\n        \"Data Collection Layer\": data_collection_layer,\r\n        \"Batch Layer\": batch_layer,\r\n        \"Serving Layer\": serving_layer\r\n    }", "task_id": 6955}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find all valid IP addresses from a given string.\n\"\"\"\n\ndef find_all_valid_IP(string):\n", "finetuning_completion": " \r\n    s = string \r\n    ip_list = [] \r\n  \r\n    for a in range(1, len(s) - 2): \r\n        for b in range(a + 1, len(s) - 1): \r\n            for c in range(b + 1, len(s)): \r\n                s1 = s[:a] \r\n                s2 = s[a:b] \r\n                s3 = s[b:c] \r\n                s4 = s[c:] \r\n  \r\n                if (is_valid(s1) and is_valid(s2) and is_valid(s3) and is_valid(s4)): \r\n                    ip = s1 + \".\" + s2 + \".\" + s3 + \".\" + s4 \r\n                    ip_list.append(ip) \r\n  \r\n    return ip_list \r\n  \r\n# is_valid returns true if string s is \r\n# a valid IPv4 number \r\ndef is_valid(s): \r\n    if (len(s) > 3 or len(s) == 0): \r\n        return False\r\n    if (s[0] == '0' and len(s) != 1): \r\n        return False\r\n    for i in range(len(s)): \r\n        if (s[i] < '0' or s[i] > '9'): \r\n            return False\r\n    return int(s) <= 255", "task_id": 6957}
{"finetuning_prompt": "\"\"\"\nGenerate a function to efficiently multiply two given 3 x 3 matrices.\n\"\"\"\n\ndef matrix_multiply(X, Y):\n", "finetuning_completion": " \r\n\tres = [[0, 0, 0], \r\n\t\t   [0, 0, 0], \r\n\t\t   [0, 0, 0]] \r\n\tfor i in range(len(X)): \r\n\t\tfor j in range(len(Y[0])): \r\n\t\t\tfor k in range(len(Y)): \r\n\t\t\t\tres[i][j] += X[i][k] * Y[k][j] \r\n\treturn res", "task_id": 6958}
{"finetuning_prompt": "\"\"\"\nGenerate code to determine the number of bits required to represent a given integer in binary.\n\"\"\"\n\ndef count_bits_required(n):\n", "finetuning_completion": " \r\n\tcount = 0\r\n\twhile ((n >> count) > 0): \r\n\t\tcount += 1\n\treturn count", "task_id": 6960}
{"finetuning_prompt": "\"\"\"\nGenerate a function to generate all possible valid parentheses given a number.\n\"\"\"\n\ndef generate_all_valid_parentheses(n):\n", "finetuning_completion": " \n    if(n == 0): \n        return [] \n    result = [] \n    generateParenthesisRecursive(n, n, \"\", result) \n    return result \n  \ndef generateParenthesisRecursive(left, right, str, result): \n    if(left == 0 and right == 0): \n        result.append(str) \n        return\n    if(left > 0): \n        generateParenthesisRecursive(left-1, right,  \r\n                                str + \"(\", result) \n    if(right > left): \r\n        generateParenthesisRecursive(left, right-1,  \r\n                                str + \")\", result)", "task_id": 6962}
{"finetuning_prompt": "\"\"\"\nWrite a code to sort an array containing only 0s and 1s?\n\"\"\"\n\ndef sort_zeroes_ones(array):\n", "finetuning_completion": "\r\n    zero_count = array.count(0)\r\n    one_count = array.count(1)\r\n    sorted_array = [0] * zero_count + [1] * one_count\r\n    return sorted_array", "task_id": 6965}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers in the range 0 to 10, write a program to find out the highest number in the list.\n\"\"\"\n\ndef highest_number(list_nums):\n", "finetuning_completion": " \r\n    max_num = 0\r\n  \r\n    for num in list_nums: \r\n        if num > max_num: \r\n            max_num = num\r\n  \r\n    return max_num", "task_id": 6967}
{"finetuning_prompt": "\"\"\"\nCreate a function to convert a given number from the binary to the decimal format.\n\"\"\"\n\ndef binaryToDecimal(binary):\n", "finetuning_completion": "\n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal", "task_id": 6974}
{"finetuning_prompt": "\"\"\"\nCreate a code to print unique elements in the list.\n\"\"\"\n\ndef unique(lst):\n", "finetuning_completion": "\r\n  unique_lst = []\r\n  for item in lst:\r\n    if item not in unique_lst:\r\n      unique_lst.append(item)\r\n  return unique_lst\r\n\nprint(unique([2, 3, 5, 3, 2, 6, 5]))", "task_id": 6976}
{"finetuning_prompt": "\"\"\"\nWrite a code to calculate the median of the list.\n\"\"\"\n\ndef median(lst):\n", "finetuning_completion": "\r\n    n = len(lst)\r\n    if n < 1:\r\n        return None\r\n    if n % 2 == 1:\r\n        return sorted(lst)[n//2]\r\n    else:\r\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\nprint(median([5, 4, 3, 1, 2]))", "task_id": 6977}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to check which of the given numbers is divisible by 2 or not.\n\"\"\"\n\ndef isDivisibleBy2(input_list):\n", "finetuning_completion": "\r\n  res = []\r\n  for num in input_list:\r\n    if num % 2 == 0:\r\n      res.append(True)\r\n    else:\r\n      res.append(False)\r\n  return (res)", "task_id": 6982}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to generate a sorted output of the given array.\n\"\"\"\n\ndef sorted_output(arr):\n", "finetuning_completion": "\r\n\tarr.sort()\r\n\treturn arr", "task_id": 6987}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the minimum number of edits (operations) required to convert a given string into a palindrome.\n\"\"\"\n\ndef minEdits(str):\n", "finetuning_completion": " \n  \n    n = len(str)\n    \n    dp = [[0 for x in range(n)] for x in range(n)] \n  \n    for gap in range(1,n): \n        l = 0\n        for h in range(gap,n): \n            if str[l] == str[h]: \n                dp[l][h] = dp[l+1][h-1] \n            else: \n                dp[l][h] = 1 + min(dp[l][h-1],dp[l+1][h],dp[l+1][h-1]) \n            l+=1\n    return dp[0][n-1]", "task_id": 6993}
{"finetuning_prompt": "\"\"\"\nGenerate a list containing the product of two numbers in each inner iteration,\n\"\"\"\n\ndef prodList(list1, list2):\n", "finetuning_completion": "\n  \n    # Knowing length of a list \n    n1 = len(list1) \n    n2 = len(list2) \n  \n    # Initializing list of products \n    prod_list =[0 for i in range(n1 * n2)] \n  \n    # Looping to calculate and store product \n    k = 0\n    for i in range(0, n1): \n        for j in range(0, n2): \n            prod_list[k] = list1[i] * list2[j] \n            k += 1\n    return prod_list", "task_id": 6999}
{"finetuning_prompt": "\"\"\"\nCreate a program for finding the maximum value of triangle's area in the given set of coordinates.\n\"\"\"\n\ndef max_area_triangle(points):\n", "finetuning_completion": " \n    n = len(points) \n    max_area = 0\n  \n    # Consider every possible triplet \n    # of points and find the area  \n    # of triangle formed \n    for i in range(n): \n        for j in range(i + 1, n): \n            for k in range(j +1  , n): \n                x = points[i][0] \n                y = points[i][1] \n                x1 = points[j][0] \n                y1 = points[j][1] \n                x2 = points[k][0] \n                y2 = points[k][1] \n  \n                # Calculate area of triangle  \r\n                # formed by the triplet \n                a = abs((x * (y1 - y2) + x1 * (y2 - y) + x2 * (y - y1)) / 2.0) \n  \n                # Update max_area \n                max_area = max(max_area, a) \n                # Store result in 'max_area' \n  \n    return max_area", "task_id": 7000}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to separate even and odd numbers in a given list.\n\"\"\"\n\ndef separate_even_odd(list):\n", "finetuning_completion": " \n    even_numbers = [] \n    odd_numbers = [] \n    for number in list: \n        if number % 2 == 0: \n            even_numbers.append(number) \n        else: \n            odd_numbers.append(number) \n    output_list = [even_numbers, odd_numbers] \n    return output_list \n  \nlist = [12,7,15,36,9,18] \nprint(separate_even_odd(list))", "task_id": 7005}
{"finetuning_prompt": "\"\"\"\nModify the code to remove all zero values from a list.\n\"\"\"\n\ndef remove_zeros(nums):\n", "finetuning_completion": " \r\n    return[x for x in nums if x !=0]", "task_id": 7008}
{"finetuning_prompt": "\"\"\"\nCreate a substring from a given string which contains all the vowels.\n\"\"\"\n\ndef get_vowels(string):\n", "finetuning_completion": "\r\n  vowels = 'aeiouAEIOU'\r\n  res = ''\r\n  for char in string:\r\n      if char in vowels: \r\n          res += char \r\n  return res", "task_id": 7030}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to find the smallest jump from the end of the array to reach the beginning.\n\"\"\"\n\ndef min_jumps(arr):\n", "finetuning_completion": "\n  jumps = [float('inf') for x in range(len(arr))]\n  jumps[0] = 0\n\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      if (j-i <= arr[i]): \n        jumps[j] = min(jumps[j], jumps[i] + 1)\n  return jumps[len(arr)-1]", "task_id": 7032}
{"finetuning_prompt": "\"\"\"\nDetermine the total number of items in a nested list.\n\"\"\"\n\ndef sum_list_item(inlist):\n", "finetuning_completion": "\r\n  sum = 0\r\n  for i in inlist:\r\n    if type(i) == type([]):\r\n      sum += sum_list_item(i)\r\n    else:\r\n      sum += 1\r\n  return sum", "task_id": 7033}
{"finetuning_prompt": "\"\"\"\nOptimize a function to return 'True' if value is True, else False.\n\"\"\"\n\ndef checkTrue(value):\n", "finetuning_completion": "\n    if isinstance(value, bool):\n        return value\n    else:\n        return False", "task_id": 7038}
{"finetuning_prompt": "\"\"\"\nCreate a program to retrieve data from a given list of dictionaries based on a given condition.\n\"\"\"\n\ndef filter_dictlist(inlist, condition):\n", "finetuning_completion": "\r\n    outlist = [obj for obj in inlist if condition(obj)]\r\n    return outlist", "task_id": 7039}
{"finetuning_prompt": "\"\"\"\nConstruct a method that checks if a given word is a palindrome.\n\"\"\"\n\ndef check_palindrome(word):\n", "finetuning_completion": "\r\n    word = word.lower()\r\n    if word == word[::-1]:\r\n        return True\r\n    else:\r\n        return False", "task_id": 7040}
{"finetuning_prompt": "\"\"\"\nGenerate a list of all permutations of the given elements.\n\"\"\"\n\ndef list_permutations(L):\n", "finetuning_completion": " \r\n    if len(L) == 0: \r\n        return [] \r\n    if len(L) == 1: \r\n        return [L] \r\n    res = []\r\n    for i in range(len(L)):\r\n        m = L[i]\r\n        rest_list = L[:i] + L[i+1:] \r\n        for p in list_permutations(rest_list): \r\n            res.append([m] + p)\r\n    return res", "task_id": 7047}
{"finetuning_prompt": "\"\"\"\nCreate a python function to compare the elements of two lists and output the differences.\n\"\"\"\n\ndef compare_list(list1, list2):\n", "finetuning_completion": " \n\tdiff_list1 = []\n\tdiff_list2 = []\n\tfor i in list1:\n\t\tif i not in list2:\n\t\t\tdiff_list1.append(i)\n\tfor i in list2:\n\t\tif i not in list1:\n\t\t\tdiff_list2.append(i)\n\treturn diff_list1, diff_list2", "task_id": 7058}
{"finetuning_prompt": "\"\"\"\nCreate a function to perform binary search of a given list for a given element.\n\"\"\"\n\ndef binary_search(mylist, target):\n", "finetuning_completion": " \n    low = 0\n    high = len(mylist) - 1\n    while low <= high: \n        mid = int((low + high)/2)\n        if mylist[mid] == target: \n            return mid \n        elif mylist[mid] < target: \n            low = mid + 1\n        else: \n            high = mid - 1\n    return -1", "task_id": 7059}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to convert a given float number (x) to a 3 digit integer.\n\"\"\"\n\ndef float2int3(x):\n", "finetuning_completion": " \r\n    return int(x*1000)", "task_id": 7063}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes a 2D array and prints the sum of each row and column.\n\"\"\"\n\ndef sum_array(array):\n", "finetuning_completion": "  \n    # Create empty list to store sums \n    sums = [] \n    # Store number of rows \n    rows = len(array) \n      \n    # Loop over each row\n    for i in range(rows): \n        # Store summ of each row \n        row_sum = 0\n        # Store number of columns\n        cols = len(array[i]) \n        # Loop over each column\n        for j in range(cols): \n            row_sum += array[i][j] \n        # Append total for each row\n        sums.append(row_sum) \n          \n    # Calculate sum of each column\n    for j in range(cols): \n        # Store total for each column\n        col_sum = 0\n        # Loop over each row\n        for i in range(rows): \n            col_sum += array[i][j] \n        # Append total for each column\n        sums.append(col_sum) \n      \n    return sums\n\narray = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\nresult = sum_array(array) \nprint(result)", "task_id": 7075}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter out the negative numbers from an array of integers and return an array of positive integers\n\"\"\"\n\ndef filter_negative(arr):\n", "finetuning_completion": " \n    pos_arr = [num for num in arr if num >= 0] \n    return pos_arr", "task_id": 7076}
{"finetuning_prompt": "\"\"\"\nGenerate a function to check if the user is of valid age.\n\"\"\"\n\ndef check_age(age):\n", "finetuning_completion": "\r\n    if(age>=18):\r\n        return True\r\n    else:\r\n        return False", "task_id": 7082}
{"finetuning_prompt": "\"\"\"\nGenerate a method to compute the CRC-16 checksum for a given bitstream.\n\"\"\"\n\ndef compute_crc16(bitstream):\n", "finetuning_completion": "\n    crc = 0xFFFF                \n    for byte in bitstream:                                          \n        crc ^= byte                          \n        for i in range(8):                               \n            if crc & 0x0001:                             \n                crc = (crc >> 1) ^ 0xA001            \n            else:                                     \n                crc = crc >> 1                                                \n    return crc", "task_id": 7083}
{"finetuning_prompt": "\"\"\"\nDesign a code to apply Bubble sort algorithm on a given array.\n\"\"\"\n\ndef bubbleSort(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n    for i in range(n): \r\n        for j in range(0, n-i-1): \r\n            if arr[j] > arr[j+1] : \r\n                arr[j], arr[j+1] = arr[j+1], arr[j]  \n    return arr \n  \r\narr = [6, 4, 1, 8, 3, 2] \r\n  \r\nbubbleSort(arr) \n  \r\nprint (\"Sorted array is:\") \r\nfor i in range(len(arr)): \r\n    print (\"%d\" %arr[i]),", "task_id": 7090}
{"finetuning_prompt": "\"\"\"\nWrite a python function to group a list of numbers according to their remainder when divided by a given number.\n\"\"\"\n\ndef groupByRemainder(list, target):\n", "finetuning_completion": " \n    result = {i:[p for p in list if p%target==i] for i in range(target)} \n    return result", "task_id": 7092}
{"finetuning_prompt": "\"\"\"\nGenerate a function which takes an array of strings separated by commas, and returns a string of the array items separated by hyphens.\n\"\"\"\n\ndef hyphens(arr):\n", "finetuning_completion": "\r\n    return '-'.join(arr)", "task_id": 7095}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find the shortest path from the start node to the end node in a game grid.\n\"\"\"\n\ndef shortest_path(grid):\n", "finetuning_completion": "\r\n    visited = set() # a set to keep track of visited nodes\r\n    queue = [(0, 0)] # a set to keep track of nodes which are queued for processing; all nodes x and y coordinates must be stored\r\n    while queue:\r\n        x, y = queue.pop(0) # pop the first item in the queue\r\n        visited.add((x, y)) # add the current node to the visited list \r\n        if grid[x][y] == 'G': # if the node is the goal, return the list of visited nodes\r\n            return visited \r\n        # traverse nodes adjacent to current node\r\n        for row, col in [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]:\r\n            # check if node is valid and is not blocked\r\n            if 0 <= row < len(grid) and 0 <= col < len(grid[0]) and \\\r\n                    (row, col) not in visited and grid[row][col] is not '#':\r\n                queue.append((row, col))\r\n    return visited", "task_id": 7100}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to find all prime numbers less than a specified number n.\n\"\"\"\n\ndef find_all_primes(n):\n", "finetuning_completion": " \r\n    prime_numbers = [True for i in range(n+1)] \r\n    p = 2\r\n    while (p * p <= n): \r\n        if (prime_numbers[p] == True): \r\n            for i in range(p * p, n+1, p): \r\n                prime_numbers[i] = False\r\n        p += 1\r\n    \r\n    prime_numbers[0]= False\r\n    prime_numbers[1]= False\r\n    prime=[]\r\n    #One loop to find all prime numbers \r\n    for p in range(n+1): \r\n        if prime_numbers[p]: \r\n            prime.append(p)\r\n    return prime", "task_id": 7101}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the total number of valid parentheses generated from given n pairs of parentheses.\n\"\"\"\n\ndef generate_parentheses(n):\n", "finetuning_completion": "  \r\n    result = []\r\n    generate_parenthesis_recursive(n, n, \"\", result)  \r\n    return result \r\n  \r\ndef generate_parenthesis_recursive(left, right, par, result):\r\n    if left == 0 and right == 0: \r\n        result.append(par) \r\n        return\r\n    if left > 0: \r\n        generate_parenthesis_recursive(left-1, right, par + \"(\", result) \r\n    if right > left: \r\n        generate_parenthesis_recursive(left, right-1, par + \")\", result)", "task_id": 7104}
{"finetuning_prompt": "\"\"\"\nGenerate an if/else statement to check if an integer is odd or even.\n\"\"\"\n\ndef odd_or_even(num):\n", "finetuning_completion": "\r\n    if num % 2 == 0:\r\n        return 'even'\r\n    else:\r\n        return 'odd'", "task_id": 7107}
{"finetuning_prompt": "\"\"\"\nCreate a sorting algorithm that sorts a list of numbers from smallest to largest.\n\"\"\"\n\ndef sorting_algorithm(nums):\n", "finetuning_completion": "\n    # traverse through all the elements\n    for i in range(len(nums)-1):\n        # find the index of the minimum element \n        min_idx = i\n        for  j in range(i+1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        # swap the minimum element with the element at index i\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums", "task_id": 7118}
{"finetuning_prompt": "\"\"\"\nGenerate an array containing the numbers from 0 up to a given number.\n\"\"\"\n\ndef generate_array(n):\n", "finetuning_completion": "\n    arr = []\n    for i in range(n+1):\n        arr.append(i)\n    return arr", "task_id": 7119}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to check if a number can be perfectly divided by 3 or 5 but not both.\n\"\"\"\n\ndef checkDivisibleBy(num):\n", "finetuning_completion": " \r\n    if (num % 3 == 0) and (num % 5 != 0): \r\n        return \"Number is divisible by 3\"\r\n    elif (num % 5 == 0) and (num % 3 != 0): \r\n        return \"Number is divisible by 5\"\r\n    else: \r\n        return \"Number is not divisible by both 3 and 5\"", "task_id": 7123}
{"finetuning_prompt": "\"\"\"\nCreate a program to validate a string and check if it is a palindrome or not.\n\"\"\"\n\ndef ispalindrome(s):\n", "finetuning_completion": " \r\n    s = s.lower().replace(' ', '') \r\n  \r\n    left = 0\r\n    right = len(s) - 1\r\n  \r\n    while left < right: \r\n        if s[left] != s[right]: \r\n            return False\r\n  \r\n        left += 1\r\n        right -= 1\r\n  \r\n    return True", "task_id": 7124}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that finds the total number of possible permutations of a 3x3 matrix.\n\"\"\"\n\ndef count_permutation(n):\n", "finetuning_completion": " \r\n    fact = 1\r\n    for r in range(1, n+1): \r\n        fact = fact * r  \r\n    return fact*n**n \n  \n# Permutations of 3x3 Matrix \r\nprint(count_permutation(9))", "task_id": 7126}
{"finetuning_prompt": "\"\"\"\nCreate a program that converts a binary number to a decimal number.\n\"\"\"\n\ndef binary_to_decimal(binary):\n", "finetuning_completion": " \r\n  \r\n    binary1 = binary \r\n    decimal, i = 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return decimal", "task_id": 7127}
{"finetuning_prompt": "\"\"\"\nCreate a function that reverses a sentence but keep the same word order.\n\"\"\"\n\ndef reverse_sentence(sentence):\n", "finetuning_completion": " \r\n  \r\n    words = sentence.split(' ') \r\n  \r\n    reversed_words = words[::-1] \r\n  \r\n    return ' '.join(reversed_words)", "task_id": 7130}
{"finetuning_prompt": "\"\"\"\nConvert a given string in Camel Case format to its corresponding underscore format.\n\"\"\"\n\ndef convert_to_underscore(inputString):\n", "finetuning_completion": "\n    outputString = ''\n    for char in inputString:\n        if char == char.upper():\n            outputString += '_'\n        outputString += char.lower()\n    return outputString", "task_id": 7141}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the median value from the given list of tuples.\n\"\"\"\n\ndef median_calc(test_list):\n", "finetuning_completion": "\r\n  l = [ele[1] for ele in test_list]\r\n  n = len(l) \r\n  if n % 2 == 0: \r\n    median1 = l[n//2] \r\n    median2 = l[n//2 - 1] \r\n    median = (median1 + median2)/2\r\n  else: \r\n    median = l[n//2] \r\n  return (median)", "task_id": 7152}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a string of '#'s with a length equal to a given integer.\n\"\"\"\n\ndef gen_string(number):\n", "finetuning_completion": "\r\n  res = '#' * number\r\n  return (res)", "task_id": 7156}
{"finetuning_prompt": "\"\"\"\nModify a program to print numbers divisible by 3 in a given range.\n\"\"\"\n\ndef divisible_by_three(start,end):\n", "finetuning_completion": "\r\n    result = []\r\n    for i in range(start,end+1):\r\n        if i % 3 == 0:\r\n            result.append(i)\r\n    return result", "task_id": 7162}
{"finetuning_prompt": "\"\"\"\nWrite a function to extract parts of a string given a regular expression pattern.\n\"\"\"\n\nimport re\r\ndef extract_part(pattern,str):\n", "finetuning_completion": "\r\n    return re.findall(pattern, str)", "task_id": 7171}
{"finetuning_prompt": "\"\"\"\nWrite a python code to reverse a string in a given language.\n\"\"\"\n\ndef reverseString(language,string):\n", "finetuning_completion": "\n    if(language == \"French\"):\n        reversedString = \"\".join(reversed(string))\n        return reversedString", "task_id": 7175}
{"finetuning_prompt": "\"\"\"\nWrite a function to categorize books using the ISBN number.\n\"\"\"\n\ndef categorizeBooksByISBN(isbnNum):\n", "finetuning_completion": "\n    isbnCode = str(isbnNum)[:3] \n    if (isbnCode == \"978\"):\n        category = \"Adult Fiction\"\n    elif (isbnCode == \"979\"):\n        category = \"Children's Fiction\"\n    else:\n        category = \"General\"\n    return category", "task_id": 7176}
{"finetuning_prompt": "\"\"\"\nGenerate an array of repeating elements given an array and a number.\n\"\"\"\n\ndef repeatElements(arr, num):\n", "finetuning_completion": "\n\trepeatedArray = []\n\tfor i in range(len(arr)):\n\t\tfor j in range(num):\n\t\t\trepeatedArray.append(arr[i])\n\treturn repeatedArray", "task_id": 7178}
{"finetuning_prompt": "\"\"\"\nCompose a function to enumerate all possible words of a given length with a given set of letters.\n\"\"\"\n\ndef word_enumeration(letters, length):\n", "finetuning_completion": " \r\n    res = [] \r\n\r\n    # Iterate over all possible permutations \r\n    for possible in itertools.product(letters, repeat = length): \r\n        res.append(\"\".join(possible)) \r\n  \r\n    return res", "task_id": 7184}
{"finetuning_prompt": "\"\"\"\nGenerate the power set of a given set containing distinct elements.\n\"\"\"\n\ndef power_set(s):\n", "finetuning_completion": "\n    result = [[]]\r\n    for elem in s:\r\n        result.extend([subset + [elem] for subset in result])\r\n    return result", "task_id": 7190}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert a string of digits to its corresponding integer value.\n\"\"\"\n\ndef string_to_int(string):\n", "finetuning_completion": "\r\n    result = 0\r\n    for ch in string:\r\n        result = 10*result + (ord(ch) - ord('0'))\r\n    return result", "task_id": 7192}
{"finetuning_prompt": "\"\"\"\nGenerate an array of numbers from 0 to n, for a given n\n\"\"\"\n\ndef create_array(n):\n", "finetuning_completion": "\r\n    return list(range(n+1))", "task_id": 7197}
{"finetuning_prompt": "\"\"\"\nWrite a function to transform a list of numbers into a comma-separated string detailing the highest and lowest numbers in the list.\n\"\"\"\n\ndef transform_list_to_string(list1):\n", "finetuning_completion": " \r\n    min_val = min(list1) \r\n    max_val = max(list1) \r\n    return \"Highest number is {} and Lowest number is {}\".format(max_val, min_val)", "task_id": 7201}
{"finetuning_prompt": "\"\"\"\nWrite a function that rotates a matrix (square) clockwise by 90 degrees.\n\"\"\"\n\ndef rotateMatrix(mat):\n", "finetuning_completion": " \r\n  \r\n    # Pushing the matrix elements into list \r\n    N = len(mat[0]) \r\n    result = [[0 for x in range(N)] for y in range(N)] \r\n  \r\n    for i in range(0, N): \r\n        for j in range(0, N): \r\n            result[j][N-1-i] = mat[i][j] \r\n  \r\n    # mat[i][j] = mat[N-1-j][i] \r\n    for i in range(0, N): \r\n        for j in range(0, N): \r\n            mat[i][j] = result[i][j] \r\n    return mat", "task_id": 7203}
{"finetuning_prompt": "\"\"\"\nGenerate a program that prints a customized greeting.\n\"\"\"\n\ndef greet(name):\n", "finetuning_completion": "\r\n    print(\"Hello, \" + name + \"!\")", "task_id": 7210}
{"finetuning_prompt": "\"\"\"\nFind the maximum and minimum elements from the given list and print their indices.\n\"\"\"\n\ndef find_min_max_index(test_list):\n", "finetuning_completion": " \r\n  minimum = min(test_list) \r\n  maximum = max(test_list) \r\n  min_index = test_list.index(minimum) \r\n  max_index = test_list.index(maximum) \r\n  return (max_index, min_index)", "task_id": 7219}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the length of the substring which contains the most repeating characters.\n\"\"\"\n\ndef max_repeating_chars(str):\n", "finetuning_completion": " \r\n    n = len(str) \r\n    cur_count = 1\r\n    max_count = 0\r\n    prev_char = str[0] \r\n  \r\n    for i in range(1, n): \r\n        if str[i] == prev_char: \r\n            cur_count += 1\r\n        else:\r\n            if cur_count > max_count: \r\n                max_count = cur_count \r\n            cur_count = 1\r\n            prev_char = str[i] \r\n \r\n    if (cur_count > max_count): \r\n        max_count = cur_count \r\n    return max_count", "task_id": 7221}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes an array of strings and returns the longest string from it.\n\"\"\"\n\ndef longest_str(arr):\n", "finetuning_completion": " \r\n  max_str = arr[0] \r\n  for i in arr: \r\n    if len(max_str) < len(i): \r\n      max_str = i \r\n  return max_str", "task_id": 7223}
{"finetuning_prompt": "\"\"\"\nWrite a function to solve the equation x2+2x+1=0.\n\"\"\"\n\ndef solve_eq(x):\n", "finetuning_completion": " \r\n    d = (2*x + 1)**2 - 4*1*x**2 \r\n    return -(2*x + 1 - d**(1/2))/2, -(2*x + 1 + d**(1/2))/2", "task_id": 7225}
{"finetuning_prompt": "\"\"\"\nModify the following function so that it prints \u201c3rd argument\u201d when the second argument is false.\n\"\"\"\n\ndef func_test(arg1, arg2):\n", "finetuning_completion": " \n    if arg2 == True:\n        print(\"2nd argument\") \n    else:\n        print(\"3rd argument\")", "task_id": 7226}
{"finetuning_prompt": "\"\"\"\nWrite a Python code to split the following list into two sublists.\n\"\"\"\n\n# function to split the list \ndef split_list(list1):\n", "finetuning_completion": " \n     \n    midsize = int(len(list1) / 2)   \n    split_list = [list1[:midsize],list1[midsize:]]\n    \n    return split_list", "task_id": 7229}
{"finetuning_prompt": "\"\"\"\nGenerate a Python code to check if the given list contains all negative numbers or not.\n\"\"\"\n\ndef all_negative(list1):\n", "finetuning_completion": "\n  res = not any(map(lambda ele: ele>=0, list1))\r\n  return (res)", "task_id": 7230}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert given temperature from Fahrenheit to Kelvin.\n\"\"\"\n\ndef tempConvertFtoK(tempF):\n", "finetuning_completion": " \r\n  \r\n    # converting temperature to kelvin\r\n    tempK = (tempF + 459.67) * (5/9)  \r\n  \r\n    # returns the converted temperature \r\n    return tempK", "task_id": 7233}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to generate all changes of an array of string into pig latin.\n\"\"\"\n\ndef pigLatin(array):\n", "finetuning_completion": " \r\n  \r\n    # pig latin string list \r\n    pigLatinList = [] \r\n  \r\n    # traverse each word of array \r\n    for word in array: \r\n  \r\n        # word starts with vowel \r\n        if word[0] in ('a', 'e', 'i', 'o', 'u'): \r\n            pigLatinList.append(word + \"yay\") \r\n  \r\n        # first char is consonants \r\n        else : \r\n            consonants = \"\" \r\n            for j in range(0, len(word)): \r\n                if word[j] in ('a', 'e', 'i', 'o', 'u'): \r\n                    break\r\n                consonants += word[j] \r\n  \r\n            # removes the set of consonants \r\n            # from original word \r\n            temp = word.replace(consonants, \"\") \r\n            pigLatinList.append(temp + consonants + \"ay\") \r\n  \r\n    # return transformed string list \r\n    return pigLatinList", "task_id": 7235}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find the closest number to zero in a given list of integers.\n\"\"\"\n\ndef closestNumber(list1):\n", "finetuning_completion": " \r\n  \r\n    # Initialize the closest number \r\n    closest = list1[0] \r\n  \r\n    # Loop through the list \r\n    for num in list1: \r\n  \r\n        # Update the closest number if num is \r\n        # closer to zero \r\n        if abs(num) < abs(closest): \r\n            closest = num \r\n      \r\n    return closest", "task_id": 7237}
{"finetuning_prompt": "\"\"\"\nDesign a function that takes in two strings and returns either true or false based on whether they are anagrams of each other or not.\n\"\"\"\n\ndef is_anagram(string1,string2):\n", "finetuning_completion": "\n  s1 = sorted(string1.lower())\n  s2 = sorted(string2.lower())\n  if s1 == s2:\n    return True\n  else:\n    return False", "task_id": 7256}
{"finetuning_prompt": "\"\"\"\nApply the Laplace smoothing technique to the given data set.\n\"\"\"\n\ndef apply_laplace_smoothing(data_set):\n", "finetuning_completion": " \r\n    data_set_smoothed = [0] * len(data_set) \r\n    num_elements = sum(data_set) \r\n    data_set_length = len(data_set) \r\n    for i in range(data_set_length): \r\n        data_set_smoothed[i] = (data_set[i] + 1) / (num_elements + data_set_length) \r\n    return data_set_smoothed", "task_id": 7262}
{"finetuning_prompt": "\"\"\"\nGenerate a program to reverse an array in place using a loop.\n\"\"\"\n\ndef reverseList(lst):\n", "finetuning_completion": "\r\n    start = 0\r\n    end = len(lst) - 1\r\n    while start < end:\r\n        lst[start], lst[end] = lst[end], lst[start]\r\n        start += 1\r\n        end -= 1\r\n    return lst", "task_id": 7265}
{"finetuning_prompt": "\"\"\"\nCreate a function which splits a given string by underscores and capitalize each word.\n\"\"\"\n\ndef capitalize_words(string):\n", "finetuning_completion": " \r\n    words= string.split('_')  \r\n    res = \" \".join(i.capitalize() for i in words)  \r\n    return res", "task_id": 7272}
{"finetuning_prompt": "\"\"\"\nImplement a function that returns the number of divisors of a given number.\n\"\"\"\n\ndef numDivisors(n):\n", "finetuning_completion": " \r\n  res = 0\r\n  for i in range(1, (n // 2 + 1)): \r\n    if (n % i == 0): \r\n      res += 1\r\n  return (res + 1)", "task_id": 7279}
{"finetuning_prompt": "\"\"\"\nWrite a function to truncate the given string at the specific length.\n\"\"\"\n\ndef truncate(string, length):\n", "finetuning_completion": "\r\n    if len(string) > length:\r\n        return string[:length] + \"...\"\r\n    else:\r\n        return string", "task_id": 7283}
{"finetuning_prompt": "\"\"\"\nWrite a piece of code to search an item in a list and return it's position in the list.\n\"\"\"\n\ndef search(list, item):\n", "finetuning_completion": "\r\n  for i in range(len(list)):\r\n    if list[i] == item:\r\n      return i\r\n  return -1", "task_id": 7284}
{"finetuning_prompt": "\"\"\"\nGiven two strings, write a program to determine if one is a rotation of another.\n\"\"\"\n\ndef rotation(str1, str2):\n", "finetuning_completion": " \n    if(len(str1) != len(str2)): \n        return False\n    temp = str1 + str1 \n    return (temp.count(str2) > 0)", "task_id": 7292}
{"finetuning_prompt": "\"\"\"\nCreate a loop to check if the input number is a prime number.\n\"\"\"\n\ndef isPrime(num):\n", "finetuning_completion": " \n\tif num > 1:\n\t\tfor i in range(2, num):\n\t\t\tif (num % i) == 0:\n\t\t\t\treturn False\n\t\t\treturn True\n\telse: \n\t\treturn False", "task_id": 7304}
{"finetuning_prompt": "\"\"\"\nFind the number of inversion pairs in a given array.\n\"\"\"\n\ndef countInversions(arr):\n", "finetuning_completion": " \n\tinv_count = 0\n\tfor i in range(len(arr)): \n\t\tfor j in range(i + 1, len(arr)): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count", "task_id": 7305}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to perform in-place quick sort.\n\"\"\"\n\ndef quicksort(arr,low,high):\n", "finetuning_completion": " \n\tif low < high: \n\t\n\t\t# pi is partitioning index, arr[p] is now\n\t\t# at right place\n\t\tpi = partition(arr,low,high) \n\t\n\t\t# Separately sort elements before\n\t\t# partition and after partition\n\t\tquicksort(arr, low, pi-1) \n\t\tquicksort(arr, pi+1, high) \n\ndef partition(arr,low,high): \n\ti = ( low-1 )\t\t # index of smaller element \n\tpivot = arr[high]\t # pivot \n\t\n\tfor j in range(low , high): \n\t\n\t\t# If current element is smaller than or \n\t\t# equal to pivot\n\t\tif arr[j] <= pivot: \n\t\t\n\t\t\t# increment index of smaller element \n\t\t\ti = i+1\n\t\t\tarr[i],arr[j] = arr[j],arr[i] \n\t\n\tarr[i+1],arr[high] = arr[high],arr[i+1] \n\treturn ( i+1 )", "task_id": 7312}
{"finetuning_prompt": "\"\"\"\nWrite a Python program that takes a string and prints a variation of the string containing the longest palindrome\n\"\"\"\n\ndef find_largest_palindrome_in_string(s):\n", "finetuning_completion": " \n  \n    max_length = 1 \n \n    start = 0 \n    length = len(s) \n  \n    low = 0\n    high = 0\n  \n    # One by one consider every character as center point of \n    # even and length palindromes \n    for i in range(1, length): \n        # Find the longest even length palindrome with center \n        # points as i-1 and i. \n        low = i - 1\n        high = i \n        while low >= 0 and high < length and s[low] == s[high]: \n            if high - low + 1 > max_length: \n                start = low \n                max_length = high - low + 1\n            low -= 1\n            high += 1\n  \n        # Find the longest odd length palindrome with center \n        # point as i \n        low = i - 1\n        high = i + 1\n        while low >= 0 and high < length and s[low] == s[high]: \n            if high - low + 1 > max_length: \n                start = low \n                max_length = high - low + 1\n            low -= 1\n            high += 1\n  \n    #return the longest palindrome from the string  \n    return s[start:start + max_length] \n\n# Driver function \ns = \"1234abcba4321\"\nprint (find_largest_palindrome_in_string(s))", "task_id": 7316}
{"finetuning_prompt": "\"\"\"\nFind the maximum difference between the elements of an array.\n\"\"\"\n\ndef maxDifference(arr):\n", "finetuning_completion": " \r\n    max_diff = arr[1] - arr[0] \r\n    min_ele = arr[0] \r\n    n = len(arr) \r\n  \r\n    i = 1\r\n    while i < n: \r\n        if (arr[i] - min_ele > max_diff): \r\n            max_diff = arr[i] - min_ele\r\n  \r\n        if (arr[i] < min_ele): \r\n            min_ele = arr[i] \r\n        i+= 1\r\n  \r\n    return max_diff", "task_id": 7317}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to find the next highest number from a given list.\n\"\"\"\n\ndef find_Next_Highest_Number(arr):\n", "finetuning_completion": " \n    n = len(arr) \n  \n    if n == 0 or n == 1: \n        return -1\r\n  \n    res = -1 \n    max_so_far = arr[n - 1] \r\n  \r\n    for i in range(n - 2, -1, -1): \r\n \r\n        if arr[i] > max_so_far: \r\n            res = max_so_far \r\n            max_so_far = arr[i] \r\n  \r\n        else: \r\n            res = max(res, arr[i]) \r\n  \r\n    return res", "task_id": 7323}
{"finetuning_prompt": "\"\"\"\nConstruct a program to print a matrix of numbers in clockwise spiral form in Python.\n\"\"\"\n\ndef spiral_print(r, c, a):\n", "finetuning_completion": " \r\n    k = 0; l = 0\r\n\r\n    while (k < r and l < c): \r\n\r\n        # Print the first row from \r\n        # the remaining rows  \r\n        for i in range(l, c): \r\n            print(a[k][i], end=\" \") \r\n\r\n        k += 1\r\n\r\n        # Print the last column from \r\n        # the remaining columns  \r\n        for i in range(k, r): \r\n            print(a[i][c - 1], end=\" \") \r\n\r\n        c -= 1\r\n\r\n        # Print the last row from \r\n        # the remaining rows  \r\n        if (k < r): \r\n\r\n            for i in range(c - 1, (l - 1), -1): \r\n                print(a[r - 1][i], end=\" \") \r\n\r\n            r -= 1\r\n\r\n        # Print the first column from \r\n        # the remaining columns  \r\n        if (l < c): \r\n            for i in range(r - 1, k - 1, -1): \r\n                print(a[i][l], end=\" \") \r\n\r\n            l += 1", "task_id": 7326}
{"finetuning_prompt": "\"\"\"\nWrite a function to remove all elements that are present in list2 from list1.\n\"\"\"\n\ndef difference(list1, list2):\n", "finetuning_completion": " \r\n    return [x for x in list1 if x not in list2]", "task_id": 7331}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to determine whether or not a string is a plindrome.\n\"\"\"\n\ndef is_palindrome(input_string):\n", "finetuning_completion": " \r\n    rev_string = reversed(input_string) \r\n  \r\n    # Checking if both string are equal or not \r\n    if list(input_string) == list(rev_string): \r\n        return True\r\n    return False", "task_id": 7334}
{"finetuning_prompt": "\"\"\"\nRedesign the given algorithm to improve its time complexity.\n\"\"\"\n\ndef calc_list_sum(list):\n", "finetuning_completion": "\r\n    sum = 0\r\n    for i in range(len(list)):\r\n        for j in range(i + 1, len(list)): \r\n            sum += list[i] * list[j]\r\n    return sum * 2", "task_id": 7335}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for classification of strings into two classes.\n\"\"\"\n\ndef string_classification(strings):\n", "finetuning_completion": "\r\n    classes = []\r\n    classes.append([item for item in strings if item.startswith(\"com\")])\r\n    classes.append([item for item in strings if item.endswith(\"ute\")])\r\n    return classes", "task_id": 7337}
{"finetuning_prompt": "\"\"\"\nCreate a function to optimize a given multi-dimensional list according to a specific criteria.\n\"\"\"\n\ndef optimize_list(list):\n", "finetuning_completion": "\r\n    result = list.copy()\r\n    for i in range(len(result) - 1):\r\n        for j in range(i+1, len(result)):\r\n            if result[j][0] < result[i][0] or (result[j][0] == result[i][0] and result[j][1] > result[i][1]):\r\n                result[i], result[j] = result[j], result[i] \r\n    return result", "task_id": 7338}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the longest Increasing subsequence.\n\"\"\"\n\ndef longest_increasing_subsequence(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n  \r\n    lis = [1]*n \r\n  \r\n    for i in range (1 , n): \r\n        for j in range(0, i): \r\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \r\n                lis[i] = lis[j]+1\r\n  \r\n    maximum = 0\r\n  \r\n    for i in range(n): \r\n        maximum = max(maximum , lis[i]) \r\n  \r\n    return maximum", "task_id": 7340}
{"finetuning_prompt": "\"\"\"\nWrite a python program to identify the palindromic substrings within a given string.\n\"\"\"\n\ndef find_Palindromes(string):\n", "finetuning_completion": " \n    # Create an empty list to store results \n    palindromes = [] \n  \n    # Iterate through the string   \n    for i in range(len(string)): \n        for j in range(i, len(string)): \n            # Extract the substring from the string \n            substring = string[i:j + 1] \n  \n            # If the substring is same as its reverse  \n            # add the substring to the list \n            if substring == substring[::-1]: \n                palindromes.append(substring) \n                  \n    return palindromes", "task_id": 7346}
{"finetuning_prompt": "\"\"\"\nWrite a function to indent the lines with a given number of characters.\n\"\"\"\n\ndef indent_lines(text, ind_num):\n", "finetuning_completion": " \n    res = \"\" \r\n    for line in text.splitlines(): \r\n        res += ' ' * ind_num + line + \"\\n\" \r\n    return res", "task_id": 7351}
{"finetuning_prompt": "\"\"\"\nWrite code to generate prime numbers in a given range.\n\"\"\"\n\ndef generate_prime_in_range(start, end):\n", "finetuning_completion": " \r\n    prime_list = [] \r\n    for num in range(start, end + 1): \r\n        if num > 1: \r\n            for i in range(2, num): \r\n                if (num % i) == 0: \r\n                    break\r\n            else: \r\n                prime_list.append(num)\r\n    return prime_list", "task_id": 7354}
{"finetuning_prompt": "\"\"\"\nCreate a program to decrypt a message using a given cipher.\n\"\"\"\n\ndef decrypt(message, cipher):\n", "finetuning_completion": "\r\n    decrypted_message = \"\"\r\n    for char in message:\r\n        if char in cipher:\r\n            decrypted_message += cipher[cipher.index(char)]\r\n        else:\r\n            decrypted_message += char\r\n\r\n    return decrypted_message", "task_id": 7368}
{"finetuning_prompt": "\"\"\"\nDesign a script that evaluates an arithmetic expression entered by the user.\n\"\"\"\n\ndef evaluate_expr(expr):\n", "finetuning_completion": " \r\n    try: \r\n        return eval(expr) \r\n    except: \r\n        return \"Invalid Expression\"", "task_id": 7371}
{"finetuning_prompt": "\"\"\"\nCreate a program that performs linear regression on a given dataset.\n\"\"\"\n\nimport numpy as np \r\n\r\ndef perform_linear_regression(X, Y):\n", "finetuning_completion": " \r\n    mean_x = np.mean(X)\r\n    mean_y = np.mean(Y)\r\n    length = len(X)\r\n\r\n    # using formula to calculate b1 and b2 \r\n    numer = 0\r\n    denom = 0\r\n    for i in range(length): \r\n        numer += (X[i] - mean_x) * (Y[i] - mean_y) \r\n        denom += (X[i] - mean_x) ** 2\r\n    b1 = numer / denom \r\n    b0 = mean_y - (b1 * mean_x) \r\n\r\n    return(b0, b1)", "task_id": 7374}
{"finetuning_prompt": "\"\"\"\nCompose a python program to convert a given string data type to its equivalent integer data type.\n\"\"\"\n\ndef str_to_int(string):\n", "finetuning_completion": "\r\n    try:\r\n        return int(string)\r\n    except ValueError:\r\n        return (\"not an integer\")", "task_id": 7382}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to convert a given sequential array of characters into corresponding integer values.\n\"\"\"\n\ndef char_to_int(list1):\n", "finetuning_completion": " \r\n    res = [] \r\n    for i in range(len(list1)): \r\n        temp = ord(list1[i]) - ord('0') \r\n        res.append(temp) \r\n    return res", "task_id": 7383}
{"finetuning_prompt": "\"\"\"\nWrite a function to optimize the given coding problem.\n\"\"\"\n\ndef codeprob(x):\n", "finetuning_completion": " \r\n    result = 0\r\n    # Optimization point \r\n    mul_factor = 1 \r\n    for i in range(1, x+1): \r\n        if i % 2 == 0: \r\n            result += i * 2\r\n            mul_factor *= 2\r\n        else: \r\n            result += mul_factor\r\n    return result", "task_id": 7396}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to edit a string so that each word starts with its first letter capitalized.\n\"\"\"\n\ndef capitalize_string(string):\n", "finetuning_completion": "\n    words = string.split(' ')\n    capitalizedWords = [word.capitalize() for word in words]\n    capitalizedString = ' '.join(capitalizedWords)\n    return capitalizedString", "task_id": 7405}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract substrings from a given string with specified starting and ending positions.\n\"\"\"\n\ndef extract_substring(test_str, start_pos, end_pos):\n", "finetuning_completion": "\n  res = test_str[start_pos: end_pos]\n  return res", "task_id": 7421}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to sort a given list of objects based on their attribute.\n\"\"\"\n\ndef sort_by_attribute(lst, attr):\n", "finetuning_completion": "\n    lst.sort(key = lambda obj: obj[attr])\n    return lst", "task_id": 7427}
{"finetuning_prompt": "\"\"\"\nGiven a list of numbers, write a function to rearrange these numbers in increasing order.\n\"\"\"\n\ndef reorder(numbers):\n", "finetuning_completion": " \n\n    numbers.sort() \n\n    return numbers", "task_id": 7437}
{"finetuning_prompt": "\"\"\"\nClassify the given triangle according to its sides into equilateral, scalene, or isosceles.\n\"\"\"\n\ndef classify_triangle(a, b, c):\n", "finetuning_completion": "\n    if a==b and b==c:\n        return \"Equilateral Triangle\"\n    elif a==b or a==c or b==c:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\"", "task_id": 7439}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to filter out all the words from a paragraph containing any vowel.\n\"\"\"\n\ndef filter_words(paragraph):\n", "finetuning_completion": " \n    words = paragraph.split() \n  \n    filtered_words = [] \n  \n    for word in words: \n        if not any(letter in \"aeiou\" for letter in word): \n            filtered_words.append(word) \n  \n    return \" \".join(filtered_words)", "task_id": 7443}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes two sorted linked lists and returns one sorted list containing the elements of both.\n\"\"\"\n\ndef merge_lists(list1, list2):\n", "finetuning_completion": " \n    l1_ptr = l2_ptr = 0\n    result = []\n\n    while l1_ptr + l2_ptr != len(list1) + len(list2):\n        if l1_ptr >= len(list1):\n            result.append(list2[l2_ptr])\n            l2_ptr += 1\n        elif l2_ptr >= len(list2):\n            result.append(list1[l1_ptr])\n            l1_ptr += 1\n        elif list1[l1_ptr] < list2[l2_ptr]:\n            result.append(list1[l1_ptr])\n            l1_ptr += 1\n        else:\n            result.append(list2[l2_ptr])\n            l2_ptr += 1\n            \n    return result", "task_id": 7445}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert feet to meters.\n\"\"\"\n\ndef feet_to_meters(feet):\n", "finetuning_completion": "\n  meters = feet * 0.3048\n  return meters", "task_id": 7456}
{"finetuning_prompt": "\"\"\"\nGiven a string, write a function to remove all the vowels from the string.\n\"\"\"\n\ndef remove_vowels(string):\n", "finetuning_completion": " \r\n\tvowels = 'aeiouAEIOU'\r\n\tstring_without_vowels = \"\" \r\n\tfor char in string: \r\n\t\tif char not in vowels: \r\n\t\t\tstring_without_vowels += char  \r\n\treturn string_without_vowels", "task_id": 7459}
{"finetuning_prompt": "\"\"\"\nSort an array by its frequency of occurrence.\n\"\"\"\n\nfrom collections import Counter  \r\n\r\ndef sort_by_frequency(arr):\n", "finetuning_completion": "   \r\n    freq_count = Counter(arr)\r\n    sorted_list = [x for x,_ in freq_count.most_common()] \r\n    return sorted_list", "task_id": 7460}
{"finetuning_prompt": "\"\"\"\nCreate a program to enclose the words in a given sentence with quotation marks.\n\"\"\"\n\ndef enclose_words(input_str):\n", "finetuning_completion": "\n    words = input_str.split()  \r\n    transformed_words = ['\"' + each + '\"' for each in words]\r\n    return ' '.join(transformed_words)", "task_id": 7463}
{"finetuning_prompt": "\"\"\"\nWrite a function to take a list and generate a comma-separated string from those elements.\n\"\"\"\n\ndef convert_list_to_string(list1):\n", "finetuning_completion": "\r\n  return ','.join(map(str, list1))", "task_id": 7469}
{"finetuning_prompt": "\"\"\"\nWrite a python program to calculate the maximum number of consecutive 1s in a binary number.\n\"\"\"\n\ndef count_max_consecutive_1s(binary_num):\n", "finetuning_completion": "\r\n  maximum_count = 0\r\n  count = 0\r\n  for bit in binary_num :\r\n    if bit == '1':\r\n      count = count + 1\r\n      maximum_count = max(maximum_count, count)\r\n    else :\r\n      count = 0\r\n  return maximum_count", "task_id": 7471}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the minimum area of the rotated rectangle using the given width and height.\n\"\"\"\n\ndef calculateArea(width, height):\n", "finetuning_completion": " \n    # Calculate the area of the rotated rectangle \n    # using width and height \n    return min(width, height) * (width + height)", "task_id": 7478}
{"finetuning_prompt": "\"\"\"\nGenerate Python code to classify data into three or more groups.\n\"\"\"\n\ndef classify_data(data):\n", "finetuning_completion": "\r\n    output = []\r\n    lower_threshold = max(data)/3\r\n    upper_threshold = lower_threshold * 2\r\n    \r\n    for x in data:\r\n        if x < lower_threshold:\r\n            output.append('low')\r\n        elif lower_threshold <= x <= upper_threshold:\r\n            output.append('medium')\r\n        elif x > upper_threshold:\r\n            output.append('high')\r\n            \r\n    return output\r\n\r\nprint(classify_data([50, 60, 70, 80, 90, 100, 110]))", "task_id": 7493}
{"finetuning_prompt": "\"\"\"\nWrite a function to simplify a fraction into its basic form.\n\"\"\"\n\ndef simplify_fraction(numerator, denominator):\n", "finetuning_completion": "\r\n\r\n    factor = min(numerator, denominator)\r\n    while not numerator % factor == 0 or not denominator % factor == 0:\r\n        factor -= 1\r\n    return numerator // factor, denominator // factor\r\n\r\nprint(simplify_fraction(10, 100))", "task_id": 7494}
{"finetuning_prompt": "\"\"\"\nCreate a function to return all pairs of prime numbers found between 100 and 1000.\n\"\"\"\n\ndef prime_num():\n", "finetuning_completion": "\r\n    ret_list = []\r\n    for num in range(100,1001):\r\n        if num > 1:\r\n            for i in range(2,num):\r\n                if (num % i) == 0:\r\n                    break\r\n            else:\r\n                ret_list.append(num)\r\n    return [(a,b) for a,b in zip(ret_list[::2], ret_list[1::2])]", "task_id": 7497}
{"finetuning_prompt": "\"\"\"\nGenerate a C++ code snippet to check if a given list is sorted in descending order.\n\"\"\"\n\ndef desc_check(list1):\n", "finetuning_completion": " \n    n = len(list1) \n    for i in range(1,n): \n        if list1[i-1] < list1[i]:\n            return False\n    return True", "task_id": 7504}
{"finetuning_prompt": "\"\"\"\nWrite a function to print the length of all strings in a list.\n\"\"\"\n\ndef print_length(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)): \r\n        print(\"Length of string '%s' is %d\" \r\n                                 % (arr[i], len(arr[i])))", "task_id": 7509}
{"finetuning_prompt": "\"\"\"\nGenerate a function to return the smallest element between two given numbers.\n\"\"\"\n\ndef smallest_of_two(x,y):\n", "finetuning_completion": " \r\n  \r\n    if(x < y): \r\n        return x \r\n    elif(y < x): \r\n        return y \r\n    else: \r\n        return \"Both are equal\"", "task_id": 7511}
{"finetuning_prompt": "\"\"\"\nGenerate code to evaluate the longest palindromic substring in a given string.\n\"\"\"\n\ndef findLongestPalindromicSubstring(string):\n", "finetuning_completion": " \n    n = len(string) \n    table = [[False for _ in range(n)] \n                    for _ in range(n)]  \n    maxLength = 1\n    i = 0\n    while (i < n): \n        table[i][i] = True\n        i = i + 1 \n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            table[i][i + 1] = True\n            start = i \n            maxLength = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (table[i + 1][j - 1] and\n                    string[i] == string[j]): \n                table[i][j] = True\n  \n                if (k > maxLength): \n                    start = i \n                    maxLength = k \n            i = i + 1\n        k = k + 1\n    return string[start:start + maxLength]", "task_id": 7527}
{"finetuning_prompt": "\"\"\"\nGenerate a python program that will check for balanced parentheses.\n\"\"\"\n\ndef BalancedParen(expr):\n", "finetuning_completion": " \r\n    s = []; \r\n    for c in expr: \r\n        if c in set(['(', '{', '[']): \r\n            s.append(c) \r\n        elif c in set([')', '}', ']']): \r\n            if len(s) == 0: \r\n                return False\r\n            elif (c == ')' and s[-1] != '('): \r\n                return False\r\n            elif (c == '}' and s[-1] != '{'): \r\n                return False \r\n            elif (c == ']' and s[-1] != '['): \r\n                return False\r\n            s.pop(); \r\n    if len(s) == 0: \r\n        return True \r\n    else: \r\n        return False", "task_id": 7532}
{"finetuning_prompt": "\"\"\"\nImplement a method to determine the number of dots in a 2D matrix.\n\"\"\"\n\ndef count_dots(grid):\n", "finetuning_completion": "\r\n    count = 0\r\n    for row in range(len(grid)):\r\n        for col in range(len(grid[row])):\r\n            if grid[row][col] == \".\": \r\n                count += 1\r\n    return count", "task_id": 7538}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the sum of the nth series 1 + 1/4 + 1/7 + 1/10 + ...\n\"\"\"\n\ndef seriesSum(n):\n", "finetuning_completion": " \n    s = 0.0 \n    for i in range(1, n + 1): \n        s = s + 1.0 / (1 + (i - 1) * 3) \n    return s\nprint(seriesSum(5))", "task_id": 7543}
{"finetuning_prompt": "\"\"\"\nDevelop a program to convert a given array into its binary representation.\n\"\"\"\n\ndef convert_binary(nums):\n", "finetuning_completion": "\r\n    binary_list = [] \r\n    for num in nums: \r\n        binary_list.append(bin(num)) \r\n    return binary_list", "task_id": 7549}
{"finetuning_prompt": "\"\"\"\nDevelop a program to remove the duplicate entries from a given dictionary.\n\"\"\"\n\ndef remove_duplicates(sample_dict):\n", "finetuning_completion": " \r\n    temp_dict = {} \r\n    for key, value in sample_dict.items(): \r\n        if value not in temp_dict.values(): \r\n            temp_dict[key] = value \r\n    return temp_dict", "task_id": 7551}
{"finetuning_prompt": "\"\"\"\nGenerate an HTML list of a given list of strings.\n\"\"\"\n\ndef html_list(lst):\n", "finetuning_completion": "\n    output = \"<ul>\"\n    for item in lst:\n        output += \"<li>\" + item + \"</li>\"\n    output += \"</ul>\"\n    return output", "task_id": 7555}
{"finetuning_prompt": "\"\"\"\nCreate a function for cloning a multidimensional array.\n\"\"\"\n\ndef clone_array(arr):\n", "finetuning_completion": " \r\n    cloned_arr = [] \r\n    for index in range(len(arr)):\r\n        sublist = [] \r\n        for sub_index in range(len(arr[index])): \r\n            sublist.append(arr[index][sub_index])\r\n        cloned_arr.append(sublist)\r\n    return cloned_arr", "task_id": 7556}
{"finetuning_prompt": "\"\"\"\nCreate a program to insert a given element before the first occurrence of a given number in a given sorted list.\n\"\"\"\n\ndef insertElement(arr, element):\n", "finetuning_completion": "\n    i = 0\n    for num in arr : \n        if (num >= element) :  \n            break\n        i+=1\n    \n    arr.insert(i, element)  \n    return arr", "task_id": 7561}
{"finetuning_prompt": "\"\"\"\nGenerate a program to determine whether an integer value is negative, positive or equal to zero using ternary operator.\n\"\"\"\n\ndef func(n):\n", "finetuning_completion": " \r\n  return \"Positive\" if n > 0 else (\"Negative\" if n < 0 else \"Equal to zero\")", "task_id": 7577}
{"finetuning_prompt": "\"\"\"\nCreate a function to determine the type of triangle given three side lengths.\n\"\"\"\n\ndef triangle_type(a, b, c):\n", "finetuning_completion": "\r\n\tif a == b == c:\r\n\t\treturn \"Equilateral triangle\"\r\n\telif a == b or b == c or a == c:\r\n\t\treturn \"Isosceles triangle\"\r\n\telse: \r\n\t\treturn \"Scalene triangle\"", "task_id": 7581}
{"finetuning_prompt": "\"\"\"\nCreate a program that identifies the words that appear more than once in a given sentence.\n\"\"\"\n\ndef repeated_words(sentence):\n", "finetuning_completion": " \n    words = sentence.split() \n    freq = [] \n    for i in words: \n        freq.append(words.count(i)) \n  \n    repeated_words = set() \n    for i in range(len(words)): \n        if freq[i] > 1: \n            repeated_words.add(words[i]) \n  \n    return repeated_words", "task_id": 7587}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the list of characters present in the first string but not in the second string using loop.\n\"\"\"\n\ndef found_in_1_not_in_2(str1, str2):\n", "finetuning_completion": "\n  diff_char = []\n  for char in str1:\n    if char not in str2:\n      diff_char.append(char)\n  return diff_char", "task_id": 7590}
{"finetuning_prompt": "\"\"\"\nCreate a program to convert an integer number to its equivalent octal number.\n\"\"\"\n\ndef int_to_oct(n):\n", "finetuning_completion": " \n  octal=[] \n  while n!=0: \n    octal.append(n%8) \n    n//=8\n  octal.reverse()\n  return octal", "task_id": 7611}
{"finetuning_prompt": "\"\"\"\nWrite a function that takes a number n, and returns a dictionary that contains all the prime numbers up to n\n\"\"\"\n\ndef prime_dict(n):\n", "finetuning_completion": "\n    prime_nums = {}\n    for num in range(2, n + 1):\n        prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                prime = False\n        if prime:\n            prime_nums[num] = True\n    return prime_nums", "task_id": 7627}
{"finetuning_prompt": "\"\"\"\nAnalyze a given array and classify it into ascending and descending order.\n\"\"\"\n\ndef is_ascending(arr):\n", "finetuning_completion": " \r\n    # Compare each element of the array \r\n    # with its next element \r\n    for i in range(len(arr)-1): \r\n        if arr[i] > arr[i+1]: \r\n            return False\r\n  \r\n    return True\r\n  \r\ndef is_descending(arr): \r\n    # Compare each element of the array  \r\n    # with its next element \r\n    for i in range(len(arr)-1): \r\n        if arr[i] < arr[i+1]: \r\n            return False\r\n  \r\n    return True", "task_id": 7632}
{"finetuning_prompt": "\"\"\"\nCreate a script in Python to sort a 2-dimensional array.\n\"\"\"\n\ndef sort2dArray(arr):\n", "finetuning_completion": "\r\n    arr.sort(key = lambda x: x[0])\r\n    return arr", "task_id": 7645}
{"finetuning_prompt": "\"\"\"\nCreate a function to detect and remove duplicate element from a one-dimensional array.\n\"\"\"\n\ndef remove_duplicate(arr):\n", "finetuning_completion": " \n    result = []\n    for item in arr:\n        if item not in result:\n            result.append(item)\n    return result", "task_id": 7655}
{"finetuning_prompt": "\"\"\"\nCreate a python program that takes a string as input and then sorts the words alphabetically.\n\"\"\"\n\ndef sort_string(str):\n", "finetuning_completion": " \n      \n    # break the string into list of words  \n    words = str.split(' ')  \n      \n    # sort the list  \n    words.sort()  \n      \n    # join the sorted words \n    return ' '.join(words)", "task_id": 7664}
{"finetuning_prompt": "\"\"\"\nGenerate a function to determine given two strings, if one is a rotation of the other.\n\"\"\"\n\ndef isRotated(string_1, string_2):\n", "finetuning_completion": " \n    if len(string_1) != len(string_2): \n        return False\n \n    temp = string_1 + string_1 \n    if (temp.find(string_2) == -1): \n        return False\n    else: \n        return True", "task_id": 7666}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find the number of substrings of length K with K distinct characters in a given string.\n\"\"\"\n\ndef count_k_distinct_substrings_of_length_k(string, k):\n", "finetuning_completion": " \n    distinct_substrings = 0\n  \n    n = len(string) \n  \n    # Consider all substrings of length k \n    for start_pos in range(n - k + 1): \n        # Store starting and ending index \n        end_pos = start_pos + k\n  \n        # Set of characters in current substring \n        characters_set = set() \n  \n        # Add characters of current substring in set \n        for i in range(start_pos, end_pos): \n            characters_set.add(string[i]) \n            \n        if (len(characters_set) == k): \n            distinct_substrings += 1\n  \n    return distinct_substrings", "task_id": 7668}
{"finetuning_prompt": "\"\"\"\nWrite a python script to remove all duplicates from a list while maintaining its original order.\n\"\"\"\n\ndef remove_duplicates(mylist):\n", "finetuning_completion": "         \r\n    res = [] \r\n    for i in mylist: \r\n        if i not in res: \r\n            res.append(i) \r\n    return res", "task_id": 7669}
{"finetuning_prompt": "\"\"\"\nCreate a program to detect the position of a given number in a rotated array.\n\"\"\"\n\ndef search_rotated_array(nums, k):\n", "finetuning_completion": " \r\n    start, end = 0, len(nums) - 1\r\n    while start <= end: \r\n        mid = (start + end)//2\r\n        if nums[mid] == k: \r\n            return mid \r\n  \r\n        if nums[start] <= nums[mid]: \r\n            if nums[start] <= k < nums[mid]: \r\n                end = mid - 1 \r\n            else: \r\n                start = mid + 1\r\n        else: \r\n            if nums[mid] < k <= nums[end]: \r\n                start = mid + 1 \r\n            else: \r\n                end = mid - 1 \r\n    return -1", "task_id": 7672}
{"finetuning_prompt": "\"\"\"\nProcess the given list of numbers and return unique values\n\"\"\"\n\ndef extract_unique(numbers):\n", "finetuning_completion": "\n    res = list(sorted({ele for ele in numbers}))\n    return res", "task_id": 7679}
{"finetuning_prompt": "\"\"\"\nCreate a program to determine the total number of possible paths from the top left of a grid to the bottom right of the same grid.\n\"\"\"\n\ndef number_of_paths(m, n):\n", "finetuning_completion": " \r\n\tif(m == 1 or n == 1): \r\n\t\treturn 1\r\n\t\r\n\treturn number_of_paths(m-1, n) + number_of_paths(m, n-1)", "task_id": 7682}
{"finetuning_prompt": "\"\"\"\nWrite a keyword to check if an element is present in a given set or not.\n\"\"\"\n\ndef keyword_check(s, element):\n", "finetuning_completion": " \n\tif element in s: \n\t\treturn True\n\telse: \n\t\treturn False", "task_id": 7684}
{"finetuning_prompt": "\"\"\"\nCreate a python program to replace every element of the given string with its corresponding ASCII value.\n\"\"\"\n\ndef replace_ascii(sample_string):\n", "finetuning_completion": "\n    res = \"\"\n    for i in sample_string:\n        res += str(ord(i))\n    return res", "task_id": 7686}
{"finetuning_prompt": "\"\"\"\nSplit a sentence into words and print each word on a new line.\n\"\"\"\n\ndef split_sentence(sentence):\n", "finetuning_completion": "\n    words = sentence.split(' ')\r\n    for word in words:\r\n        print(word)", "task_id": 7691}
{"finetuning_prompt": "\"\"\"\nImplement a heuristic algorithm for solving a given 0-1 knapsack problem.\n\"\"\"\n\ndef knapsack(items, max_weight):\n", "finetuning_completion": " \r\n\t# items is a list of tuples (value, weight)\r\n\t# Keep track of current weight and value of knapsack \r\n\tknapsack_value = 0 \r\n\tknapsack_weight = 0 \r\n\r\n\t# Sort the items in decreasing order of their values  \r\n\titems.sort(reverse = True, key = lambda x: x[0] / x[1]) \r\n\tfor item in items: \r\n\t\tif knapsack_weight + item[1] <= max_weight: \r\n\t\t\tknapsack_value += item[0] \r\n\t\t\tknapsack_weight += item[1] \r\n\t\telse: \r\n\t\t\tbreak\r\n\r\n\treturn knapsack_value", "task_id": 7696}
{"finetuning_prompt": "\"\"\"\nDesign a function that returns a reversed string input.\n\"\"\"\n\ndef reverse_string(string):\n", "finetuning_completion": " \r\n    String = \"\" \r\n    for i in string: \r\n        String = i + String \r\n    return String", "task_id": 7703}
{"finetuning_prompt": "\"\"\"\nGenerate a score for individual text documents based on a defined criteria.\n\"\"\"\n\ndef word_score(criteria,text):\n", "finetuning_completion": "\r\n    word_list = text.split(\" \")\r\n    count = len(word_list)\r\n    if criteria == \"Common words count\":\r\n        unique_words = set(word_list)\r\n        common_words = []\r\n        for word in word_list:\r\n            if word_list.count(word) >= count/2:\r\n                common_words.append(word)\r\n        score = len(common_words)*100/count\r\n    return(score)", "task_id": 7709}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the categorization accuracy based on a set of predictions and true labels.\n\"\"\"\n\ndef calculate_accuracy(labels,predictions):\n", "finetuning_completion": "\r\n    num_correct = 0\r\n    for i in range(len(labels)):\r\n        if labels[i] == predictions[i]:\r\n            num_correct += 1\r\n    return (num_correct/len(labels))", "task_id": 7711}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate a score for a given text based on its length.\n\"\"\"\n\ndef text_score(text):\n", "finetuning_completion": " \r\n  \r\n    # Compute the number of words in the text  \r\n    words = len(text.split()) \r\n  \r\n    # Calculate the score for the text  \r\n    score = words *100 / 10 \r\n    return score", "task_id": 7714}
{"finetuning_prompt": "\"\"\"\nClassify a given dataset into its corresponding labels.\n\"\"\"\n\ndef classification(dataset):\n", "finetuning_completion": " \r\n  \r\n    # Initialize labels \r\n    labels = [] \r\n  \r\n    for point in dataset: \r\n        if point[0] > 3 and point[1] < 3: \r\n            labels.append('Group1') \r\n        elif point[0] < 3 and point[1] > 3: \r\n            labels.append('Group2') \r\n        elif point[0] > 3 and point[1] > 3: \r\n            labels.append('Group3') \r\n        else: \r\n            labels.append('Group4') \r\n    return labels", "task_id": 7717}
{"finetuning_prompt": "\"\"\"\nCreate a function in Python that takes a string as input and returns a new string with the consonants swapped with their corresponding vowels.\n\"\"\"\n\ndef vowel_swapper(text):\n", "finetuning_completion": " \r\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\") \r\n    transformed_text = \"\"\r\n    for letter in text: \r\n        if letter.lower() in vowels: \r\n            if letter.isupper(): \r\n                transformed_text += letter.lower() \r\n            else: \r\n                transformed_text += letter.upper() \r\n        else: \r\n            transformed_text += letter \r\n    return transformed_text", "task_id": 7719}
{"finetuning_prompt": "\"\"\"\nConstruct a function that checks for two strings if one is a rotation of another.\n\"\"\"\n\ndef is_rotation(string1,string2):\n", "finetuning_completion": " \r\n    size = len(string1) \r\n    temp = string1 + string1 \r\n  \r\n    if (size == len(string2) and temp.count(string2) > 0): \r\n        return True\r\n    else: \r\n        return False\n    \nstring1 = \"programmer\"\r\nstring2 = \"erprogramm\"\r\n\r\nprint(is_rotation(string1,string2))", "task_id": 7720}
{"finetuning_prompt": "\"\"\"\nWrite a function to take two strings as input and create a new string with the first two characters of first string followed by the middle two characters of second string.\n\"\"\"\n\ndef concatenate(str1,str2):\n", "finetuning_completion": "\r\n\tstr3 = str1[0:2] + str2[int(len(str2)/2-1):int(len(str2)/2+1)]\r\n\treturn str3", "task_id": 7721}
{"finetuning_prompt": "\"\"\"\nWrite a code to compare two strings and print the result as the highest ranked string and the lowest.\n\"\"\"\n\ndef compare_strings(Text1, Text2):\n", "finetuning_completion": "\r\n    if len(Text1) > len(Text2):\r\n        highest, lowest = Text1, Text2\r\n    elif len(Text1) < len(Text2):\r\n        highest, lowest = Text2, Text1\r\n    elif Text1 < Text2:\r\n        highest, lowest = Text2, Text1\r\n    else:\r\n        highest, lowest = Text1, Text2\r\n    return (highest, lowest)", "task_id": 7723}
{"finetuning_prompt": "\"\"\"\nWrite a python script that edits a string and extracts the last word.\n\"\"\"\n\ndef extract_last_word(my_string):\n", "finetuning_completion": "\r\n    my_string_list = my_string.split(\" \")\r\n    my_string_list = my_string_list[-1]\r\n    return my_string_list", "task_id": 7729}
{"finetuning_prompt": "\"\"\"\nWrite a python function that finds the index of a pattern substring in a given text.\n\"\"\"\n\ndef pattern_index(my_string, pattern):\n", "finetuning_completion": " \n    index_list = []\n    start = 0 \n    while start < len(my_string):\n        index = my_string.find(pattern, start) \n        if index == -1: \n            break \r\n        index_list.append(index) \r\n        start = index + 1 \n    return index_list", "task_id": 7730}
{"finetuning_prompt": "\"\"\"\nWrite a javascript function to check whether a given string contains a subsequence of the given pattern or not.\n\"\"\"\n\ndef findSubsequence(string, pattern):\n", "finetuning_completion": " \r\n    n = len(string) \r\n    m = len(pattern) \r\n  \r\n    j = 0\r\n    for i in range(n): \r\n        if string[i] == pattern[j]: \r\n            j = j + 1\r\n        if j == m: \r\n            return True\r\n    return False", "task_id": 7731}
{"finetuning_prompt": "\"\"\"\nWrite a  machine learning classifier to classify emails from the given dataset, into two categories (spam, not spam).\n\"\"\"\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ndef classify_emails(X, Y):\n", "finetuning_completion": " \n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)\n    model = GaussianNB()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    return accuracy_score(y_test, y_pred)", "task_id": 7733}
{"finetuning_prompt": "\"\"\"\nWrite code to identify the common elements of two arrays and output all the elements which are present in both.\n\"\"\"\n\ndef common_elements(arr1, arr2):\n", "finetuning_completion": " \n    common_elements = list(set(arr1) & set(arr2)) \n    return common_elements", "task_id": 7740}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes an array as input and returns how many elements in the array whose sum is greater than 10.\n\"\"\"\n\ndef sum_greater_10(lst):\n", "finetuning_completion": "\n  count = 0\n  for i in range(len(lst) - 1):\n    for j in range(i+1, len(lst)):\n      if sum(lst[i: j+1]) > 10:\n        count += 1\n  return count", "task_id": 7752}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if the given HTML is valid and contains no errors.\n\"\"\"\n\ndef check_html(html):\n", "finetuning_completion": "\n  s = html.replace('\\n', '')\n  if '<html>' in s and '</html>' in s and '<head>' in s and '</head>' in s and '<title>' in s and '</title>' in s:\n    return True\n  else:\n    return False", "task_id": 7757}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if a number is greater than the average number in an array.\n\"\"\"\n\ndef greaterThanAverage(a):\n", "finetuning_completion": " \r\n   average = sum(a) / len(a) \r\n   return [i for i in a if i > average]", "task_id": 7759}
{"finetuning_prompt": "\"\"\"\nCreate a python program which returns the count of unique characters in a given string.\n\"\"\"\n\ndef unique_characters(string):\n", "finetuning_completion": "\r\n  seen_characters = set()\r\n  count = 0\r\n  for char in string:\r\n    if char not in seen_characters:\r\n      seen_characters.add(char)\r\n      count+=1\r\n  return count", "task_id": 7760}
{"finetuning_prompt": "\"\"\"\nConstruct a python program for finding all possible strings of length k that can be formed from given set of characters.\n\"\"\"\n\ndef find_all_strings(set, k):\n", "finetuning_completion": " \r\n  \r\n    # If k = 0 then return empty \r\n    if k == 0: \r\n        return[\"\"] \r\n  \r\n    # Initialize output list \r\n    output_list = [] \r\n  \r\n    # One by one append characters \r\n    # to the output and recursively \r\n    # call for k equals to k-1 \r\n    for char in set: \r\n        for permutation in find_all_strings(set, k-1): \r\n            new_permutation = char + permutation \r\n            output_list.append(new_permutation) \r\n  \r\n    return output_list", "task_id": 7761}
{"finetuning_prompt": "\"\"\"\nDesign a program which takes two sets A and B and returns the subset of A which are not present in B.\n\"\"\"\n\ndef subset_complement(A,B):\n", "finetuning_completion": " \r\n    return set(A) - set(B)", "task_id": 7765}
{"finetuning_prompt": "\"\"\"\nWrite a python code to find the smallest and largest word in a sentence.\n\"\"\"\n\ndef small_large_words(sentence):\n", "finetuning_completion": " \r\n    words = sentence.split() \r\n    max_len = len(max(words, key=len)) \r\n    min_len = len(min(words, key=len)) \r\n    print(\"The smallest word in the string is:\", min(words, key=len)) \r\n    print(\"The largest word in the string is:\", max(words, key=len)) \r\n    print(\"The length of the smallest word is:\", min_len) \r\n    print(\"The length of the largest word is:\", max_len)", "task_id": 7768}
{"finetuning_prompt": "\"\"\"\nWrite a function to simplify a given array of fractions by finding the greatest common divisor for the set of fractions and divide the numerators and denominators by it.\n\"\"\"\n\ndef simplify_fractions(arr):\n", "finetuning_completion": " \n  gcd_val = gcd(arr[0][0], arr[0][1]) \n  for i in range(1, len(arr)):\n    gcd_val = gcd(gcd_val, arr[i][0])\n    gcd_val = gcd(gcd_val, arr[i][1]) \n  \n  result = []\n  for numerator, denominator in arr: \n    result.append( (numerator//gcd_val, denominator//gcd_val) )\n  \n  return result", "task_id": 7773}
{"finetuning_prompt": "\"\"\"\nCreate a function which converts a given number to its Roman numeral equivalent.\n\"\"\"\n\ndef roman_numeral(num):\n", "finetuning_completion": "\n    romans = [(1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n          (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n          (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')]\n    result = ''\n    for decimal, roman_numeral in romans:\n        result += roman_numeral * (num // decimal)\n        num %= decimal\n    return result", "task_id": 7777}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to identify the second largest element in an array.\n\"\"\"\n\ndef second_max_element(arr):\n", "finetuning_completion": " \r\n\t#determine max elements \r\n\tmax1 = arr[0] \r\n\tmax2 = -float('inf') \r\n\t\r\n\tfor num in arr: \r\n\t\t# update max1 and max2 \r\n\t\tif num > max1: \r\n\t\t\tmax2 = max1 \r\n\t\t\tmax1 = num \r\n\t\t#update max2 \r\n\t\tif (num > max2) and (num <max1): \r\n\t\t\tmax2 = num \r\n\treturn max2", "task_id": 7785}
{"finetuning_prompt": "\"\"\"\nGenerate a password encryption function by creating hashes for a given plain-text string.\n\"\"\"\n\nimport hashlib\n\ndef encrypt(plain_text):\n", "finetuning_completion": "\n    # define the encryption algorithm\n    encryption_algorithm = hashlib.sha256()\n\n    # encode the plain text and update the encryption algorithm\n    encryption_algorithm.update(plain_text.encode('utf-8'))\n\n    # calculate the encrypted string\n    encrypted_string = encryption_algorithm.hexdigest()\n\n    # return the encrypted string\n    return encrypted_string", "task_id": 7790}
{"finetuning_prompt": "\"\"\"\nCreate a program to fit a polynomial of given degree to a given data set.\n\"\"\"\n\nimport numpy as np\n\ndef fit_polynomial(coefficients, data):\n", "finetuning_completion": "\n    \n    x = np.array(data[0])\n    y = np.array(data[1])\n    \n    coefficients = np.polyfit(x, y, coefficients)\n    \n    return np.poly1d(coefficients)", "task_id": 7791}
{"finetuning_prompt": "\"\"\"\nCode a search algorithm that can search for a target item in a randomly generated sequence.\n\"\"\"\n\ndef linear_search(sequence, target):\n", "finetuning_completion": "\n    '''\n    Linear search algorithm\n    \n    Parameters\n    ----------\n    sequence : list\n        Sequence of elements to search in \n    target : int\n        Target element to search for\n    Returns\n    -------\n    int\n        Index of target element if found. If not found, returns -1 \n    '''\n    \n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return i\n        \n    return -1", "task_id": 7794}
{"finetuning_prompt": "\"\"\"\nProgram an algorithm to detect and remove any outliers from a given set of data.\n\"\"\"\n\nimport numpy as np\n\ndef detect_outliers(data):\n", "finetuning_completion": "\n    # Calculate the quartiles\n    q1, q3 = np.percentile(data, [25,75])\n    \n    # Calculate the interquartile range\n    iqr = q3 - q1\n    \n    # Calculate the lower and upper bounds\n    lower_bound = q1 - (1.5 * iqr)\n    upper_bound = q3 + (1.5 * iqr)\n    \n    # Detect outliers\n    outliers = []\n    for thing in data:\n        if thing > upper_bound or thing < lower_bound:\n            outliers.append(thing)\n    \n    return outliers", "task_id": 7796}
{"finetuning_prompt": "\"\"\"\nGenerate a new array by removing duplicate elements from a given array.\n\"\"\"\n\ndef removeDuplicates(arr):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in arr: \r\n        if i not in result: \r\n            result.append(i) \r\n  \r\n    return result \n  \n# Driver Code \r\narr = [1,5,9,6,5,6,7]\nresult = removeDuplicates(arr) \r\nprint(result) \n\n# Output\r\n[1, 5, 9, 6, 7]", "task_id": 7802}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm to rank items using quick sort.\n\"\"\"\n\ndef quickSort(arr,low,high):\n", "finetuning_completion": " \r\n    if low < high: \r\n        pi = partition(arr,low,high) \r\n        quickSort(arr, low, pi-1) \r\n        quickSort(arr, pi+1, high) \r\ndef partition(arr,low,high): \r\n    i = (low-1)       \r\n    pivot = arr[high]    \r\n    for j in range(low , high): \r\n        if   arr[j] <= pivot: \r\n            i = i+1 \r\n            arr[i],arr[j] = arr[j],arr[i] \r\n  \r\n    arr[i+1],arr[high] = arr[high],arr[i+1] \r\n    return (i+1)", "task_id": 7804}
{"finetuning_prompt": "\"\"\"\nCreate a python program to check whether a given array contains any duplicate elements.\n\"\"\"\n\ndef check_duplicates(arr):\n", "finetuning_completion": "\n    my_set = set()\r\n    for item in arr:\r\n        if item in my_set:\r\n            return True\r\n        else:\r\n            my_set.add(item)\r\n    return False", "task_id": 7806}
{"finetuning_prompt": "\"\"\"\nWrite code to perform a linear search on an array.\n\"\"\"\n\ndef linear_search(arr, x):\n", "finetuning_completion": " \r\n  \r\n    for i in range (len(arr)): \r\n        if arr[i] == x: \r\n            return i \r\n    return -1", "task_id": 7810}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the nth number of the Fibonacci Sequence without using recursion.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        n1 = 0\n        n2 = 1\n        next_term = 0\n        for i in range(2,n): \n            next_term = n1 + n2 \n            n1 = n2 \n            n2 = next_term \n        return next_term", "task_id": 7812}
{"finetuning_prompt": "\"\"\"\nDesign a program that combines two different lists into one new list.\n\"\"\"\n\ndef combine_list(list_one, list_two):\n", "finetuning_completion": "\r\n  new_list = []\r\n  for i in range(len(list_one)):\r\n    element = (list_one[i], list_two[i])\r\n    new_list.append(element)\r\n  return new_list", "task_id": 7813}
{"finetuning_prompt": "\"\"\"\nWrite a function to filter an array and return only elements that meet a certain threshold.\n\"\"\"\n\ndef filter_list(arr, threshold):\n", "finetuning_completion": "\n  filtered_list = []\r\n  for i in range(len(arr)):\r\n    if (arr[i] >= threshold):\r\n      filtered_list.append(arr[i])\r\n  return filtered_list", "task_id": 7814}
{"finetuning_prompt": "\"\"\"\nDesign a program that takes two given numbers and returns the number closest to zero.\n\"\"\"\n\ndef closest_to_zero(num1,num2):\n", "finetuning_completion": "\r\n  if (abs(num1) < abs(num2)):\r\n    return num1\r\n  elif (abs(num1) > abs(num2)):\r\n    return num2\r\n  else:\r\n    return 0", "task_id": 7816}
{"finetuning_prompt": "\"\"\"\nDesign a program that takes a given array and removes all duplicate elements.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": "\r\n  new_arr = [] \r\n  for i in arr: \r\n    if i not in new_arr: \r\n      new_arr.append(i) \r\n  return new_arr", "task_id": 7817}
{"finetuning_prompt": "\"\"\"\nDesign a function to compare all elements of two lists and return the matching elements in a third list\n\"\"\"\n\ndef compare_list(list1, list2):\n", "finetuning_completion": "\n    result_list = []\n    for x in list1:\n        if x in list2:\n            result_list.append(x)\n    return result_list", "task_id": 7822}
{"finetuning_prompt": "\"\"\"\nWrite a function to sum up a matrix row and find the largest value.\n\"\"\"\n\ndef sum_row_matrix(matrix):\n", "finetuning_completion": " \r\n      \r\n    max_sum = 0\r\n    for i in range(len(matrix)): \r\n          \r\n        temp_sum = sum(matrix[i]) \r\n        if (temp_sum > max_sum): \r\n            max_sum = temp_sum \r\n\r\n    return max_sum", "task_id": 7824}
{"finetuning_prompt": "\"\"\"\nGenerate a code to print the frequency of words in a corpus of text.\n\"\"\"\n\ndef count_word_freq(text):\n", "finetuning_completion": "\n    words = text.split(' ')\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    for key in frequency.keys():\n        print(key, frequency[key])", "task_id": 7831}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to compress a string such that repeated characters appear together.\n\"\"\"\n\ndef compress_string(string):\n", "finetuning_completion": "\r\n    if string is None or len(string)<2:\r\n        return string \r\n        \r\n    cur_index = 0 \r\n    start_index = 0 \r\n    comp_str = ''\r\n    \r\n    for cur_index in range(1, len(string)):\r\n        if string[cur_index] != string[start_index]:\r\n            comp_str += string[start_index]\r\n            comp_str += str(cur_index - start_index)\r\n            start_index = cur_index\r\n    \r\n    comp_str += string[start_index]\r\n    comp_str += str(cur_index - start_index + 1)\r\n    return comp_str", "task_id": 7833}
{"finetuning_prompt": "\"\"\"\nPredict whether a given customer will subscribe to a promotional offer.\n\"\"\"\n\ndef predict_offer_subscription(age,spending,location):\n", "finetuning_completion": "\r\n    if age > 30 and spending >= 5000 and location == 'New York':\r\n        return True\r\n    else:\r\n        return False", "task_id": 7838}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate compound interest.\n\"\"\"\n\ndef compound_interest(amount, rate, time):\n", "finetuning_completion": "\r\n    ci = amount*(1+rate/100)**time\r\n    return ci", "task_id": 7839}
{"finetuning_prompt": "\"\"\"\nEdit a given program for computing prime numbers so that it prints out all primes up to the given number.\n\"\"\"\n\ndef prime_numbers(n):\n", "finetuning_completion": "\r\n    for i in range(2, n + 1): \r\n        for j in range(2, i): \r\n            if (i % j == 0): \r\n                break\r\n        else: \r\n            print(i)", "task_id": 7840}
{"finetuning_prompt": "\"\"\"\nCreate a function to format a query string using a given set of key-value pairs.\n\"\"\"\n\ndef format_query_string(params):\n", "finetuning_completion": "\n    if not params:\n        return \"\"\n    else:\n        query_string = \"?\"\n        for key, value in params.items():\n            if key and value:\n                query_string += key + \"=\" + value + \"&\"\n        return query_string.rstrip('&')", "task_id": 7841}
{"finetuning_prompt": "\"\"\"\nCreate a function to sign up new users to a given website.\n\"\"\"\n\ndef signup_user(username, password, email):\n", "finetuning_completion": "\n    if username and password and email:\r\n        #TODO: code to signup the user\r\n        return True\r\n    else:\r\n        return False", "task_id": 7842}
{"finetuning_prompt": "\"\"\"\nFind the smallest number which can be written as the sum of two cubes in different ways.\n\"\"\"\n\ndef smallest_Cubes(n):\n", "finetuning_completion": " \r\n    smallest = float('inf') \r\n\r\n    for a in range(2, int(abs(n) ** (1/3))+1): \r\n        for b in range(a+1, int(abs(n) ** (1/3))+1): \r\n            if(a**3 + b**3 == n): \r\n                smallest = min(smallest, max(a,b))   \r\n  \r\n    return smallest", "task_id": 7850}
{"finetuning_prompt": "\"\"\"\nWrite a function using regular expression to count the occurrence of the words \u2018the\u2019 and \u2018a\u2019 in a given string.\n\"\"\"\n\nimport re\r\ndef count_words(test_str):\n", "finetuning_completion": "\r\n  count_the = len(re.findall('the', test_str, re.IGNORECASE))\r\n  count_a   = len(re.findall('a', test_str, re.IGNORECASE))\r\n  return count_the, count_a", "task_id": 7852}
{"finetuning_prompt": "\"\"\"\nConvert the given list of numbers into a two-dimensional array.\n\"\"\"\n\ndef list_to_2Darray(test_list):\n", "finetuning_completion": " \r\n  columns = 2  \r\n  rows = int(len(test_list)/columns) \r\n  res = [test_list[i*columns:(i+1)*columns] for i in range(rows)] \r\n  return (res)", "task_id": 7854}
{"finetuning_prompt": "\"\"\"\nCreate a function to calculate the circular array rotation count.\n\"\"\"\n\ndef rotation_count(arr):\n", "finetuning_completion": " \r\n\r\n    # Find the minimum element in array \r\n    min = arr[0] \r\n    for i in range(0, len(arr)): \r\n        if (arr[i] < min): \r\n            min = arr[i] \r\n    return arr.index(min)", "task_id": 7856}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the combination of all possible pairs of elements from given array.\n\"\"\"\n\ndef print_pair_combination(arr):\n", "finetuning_completion": " \r\n    for i in range(len(arr)-1): \r\n        for j in range(i + 1, len(arr)): \r\n            print('{}, {}'.format(arr[i], arr[j]))", "task_id": 7857}
{"finetuning_prompt": "\"\"\"\nDesign a function to calculate Matrix Multiplication.\n\"\"\"\n\ndef matrix_multiply(A, B):\n", "finetuning_completion": "\n    m_rows, n_cols = len(A), len(B[0])\r\n    result = [[0 for x in range(n_cols)] for y in range(m_rows)]\r\n    for x in range(m_rows):\r\n        for y in range(n_cols):\r\n            val = 0\r\n            for k in range(len(B)):\r\n                val += A[x][k] * B[k][y]\r\n            result[x][y] = val\r\n\r\n    return result", "task_id": 7859}
{"finetuning_prompt": "\"\"\"\nGenerate code to iterate over a string and check if it contains a given substring.\n\"\"\"\n\ndef contains_substring(String, Substring):\n", "finetuning_completion": " \r\n    for i in range(len(String)): \r\n        if String[i:].startswith(Substring): \r\n            return True \r\n\r\n    return False", "task_id": 7865}
{"finetuning_prompt": "\"\"\"\nGenerate a program to classify an array of integers into positive and negative numbers.\n\"\"\"\n\ndef classify_array(array_int):\n", "finetuning_completion": "\n    positive_arr = []\n    negative_arr = []\n\n    for n in array_int:\n        if n >= 0:\n            positive_arr.append(n)\n        elif n < 0:\n            negative_arr.append(n)\n    return (positive_arr, negative_arr)", "task_id": 7869}
{"finetuning_prompt": "\"\"\"\nCreate a program to read a string and return a list of the words and the length of each word\n\"\"\"\n\ndef list_words_lengths(string):\n", "finetuning_completion": "\n    word_list = string.split()\n    word_lengths = []\n  \n    for word in word_list:\n        word_lengths.append((word,len(word)))\n  \n    return word_lengths", "task_id": 7870}
{"finetuning_prompt": "\"\"\"\nProduce an algorithm to find all duplicate elements in a given array.\n\"\"\"\n\ndef find_duplicates(array):\n", "finetuning_completion": "\n    duplicate_list = [] \n    for i in range(len(array)): \n        for j in range(i + 1, len(array)): \n            if array[i] == array[j] and array[i] not in duplicate_list: \n                duplicate_list.append(array[i]) \n    return duplicate_list", "task_id": 7871}
{"finetuning_prompt": "\"\"\"\nCreate a program to amount to the given range of powers(x^y).\n\"\"\"\n\ndef power(x, y):\n", "finetuning_completion": " \r\n\r\n\tif y == 0: \r\n\t\treturn 1\r\n\telif y >= 1: \r\n\t\treturn (x * power(x, y - 1)) \r\n\t\n# Driver code \r\nfor x in range(0, 11): \r\n\tfor y in range(0, 11): \r\n\t\tprint(x, '^', y, '=', power(x, y))", "task_id": 7873}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert the given integer to binary form.\n\"\"\"\n\ndef decimalToBinary(n):\n", "finetuning_completion": "  \r\n    return bin(n).replace(\"0b\", \"\")", "task_id": 7875}
{"finetuning_prompt": "\"\"\"\nWrite a function to get the quarter of the year for a given month.\n\"\"\"\n\ndef get_quarter(month):\n", "finetuning_completion": " \r\n    if month <= 3: \r\n        return 1\r\n    elif month <= 6: \r\n        return 2\r\n    elif month <= 9: \r\n        return 3\r\n    else: \r\n        return 4", "task_id": 7879}
{"finetuning_prompt": "\"\"\"\nDesign a program to convert a string of hexadecimal characters to its corresponding decimal equivalent.\n\"\"\"\n\ndef hex_to_decimal(hex_string):\n", "finetuning_completion": " \n    return int(hex_string, 16)", "task_id": 7882}
{"finetuning_prompt": "\"\"\"\nWrite a regular expression to accept strings that contain a sequence of two or more upper case letters separated by a space (e.g: \u2018AB CD\u2019).\n\"\"\"\n\nimport re\n\ndef check_Upper_Case(string):\n", "finetuning_completion": "\n    pattern = r'[A-Z]{2,} *[A-Z]{2,}'\n    return re.search(pattern, string)", "task_id": 7883}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to process the given string and replace every 10th character with '*'.\n\"\"\"\n\ndef replace_10th_char(string):\n", "finetuning_completion": "\n  output='' \n  for i in range(len(string)):\n    if (i+1)%10==0 :\n      output+= '*'\n    else:\n      output+= string[i]\n  return output", "task_id": 7889}
{"finetuning_prompt": "\"\"\"\nGiven a list, write a function to delete duplicates and keep original order of the list.\n\"\"\"\n\ndef remove_duplicates(input_list):\n", "finetuning_completion": " \n  res = [] \r\n  for x in input_list: \r\n    if x not in res: \r\n      res.append(x) \n  return res", "task_id": 7895}
{"finetuning_prompt": "\"\"\"\nWrite a python function that removes all vowels from a given string.\n\"\"\"\n\ndef remove_vowels(string_c):\n", "finetuning_completion": " \r\n\tres = \"\" \r\n\tvowels = \"aeiouAEIOU\"\r\n\tfor ch in string_c: \r\n\t\tif ch not in vowels: \r\n\t\t\tres = res + ch \r\n\treturn res", "task_id": 7900}
{"finetuning_prompt": "\"\"\"\nConstruct a program to find the smallest number divisible by all the numbers from 1 to n.\n\"\"\"\n\ndef lcm(n):\n", "finetuning_completion": " \r\n     \r\n    ans = 1    # Initialize result  \r\n  \r\n    # ans contains LCM of a[0],..a[i] \r\n    # after i'th iteration, \r\n    for i in range(1, n + 1): \r\n        ans = (ans * i) // gcd(ans, i)          \r\n    return ans \r\n  \r\n# Theory \r\ndef gcd(x, y): \r\n  \r\n    while(y): \r\n        x, y = y, x % y \r\n  \r\n    return x", "task_id": 7905}
{"finetuning_prompt": "\"\"\"\nConvert a string of CSV data into a list.\n\"\"\"\n\ndef string_to_list(data):\n", "finetuning_completion": " \r\n    data_list = [] \r\n    tokens = data.split(',') \r\n    data_list.append(tokens) \r\n    return data_list", "task_id": 7921}
{"finetuning_prompt": "\"\"\"\nUse a hash table to solve a given linear-time puzzle.\n\"\"\"\n\ndef puzzle(items):\n", "finetuning_completion": "\n    #  Create a hash table for items\n    hash_table = {}\n    for item in items:\n        if item in hash_table:\n            hash_table[item] += 1\n        else:\n            hash_table[item] = 1\n    \n     #  Check for elements in input list based on the hash table values\n    solutions = [] \n    for item in items:\n        if hash_table[item] > 1:\n            solutions.append(item)\n    return solutions", "task_id": 7935}
{"finetuning_prompt": "\"\"\"\nWrite a python function to collate the results of all previous calculations for a list of integers.\n\"\"\"\n\ndef collate(input_list):\n", "finetuning_completion": "\r\n    result = 0\r\n    for num in input_list:\r\n        result += num\r\n    return result", "task_id": 7936}
{"finetuning_prompt": "\"\"\"\nWrite a function to find two elements in an array such that their sum is equal to a given target number.\n\"\"\"\n\ndef twoSum(arr, target):\n", "finetuning_completion": "\r\n    lookup = {}\r\n    for i, num in enumerate(arr):\r\n        if target - num in lookup:\r\n            return [lookup[target - num], i]\r\n        lookup[num] = i\r\n    return []", "task_id": 7940}
{"finetuning_prompt": "\"\"\"\nCode a function which takes an input string and returns a dictionary of repeating letter counts.\n\"\"\"\n\ndef count_repeats(testStr):\n", "finetuning_completion": "\r\n    char_dict = dict()\r\n    for char in testStr:\r\n        if char in char_dict:\r\n            char_dict[char] += 1\r\n        else:\r\n            char_dict[char] = 1\r\n    return char_dict", "task_id": 7942}
{"finetuning_prompt": "\"\"\"\nModify the following code to optimize the code's complexity and make it more efficient.\n\"\"\"\n\ndef is_anagram(s1, s2):\n", "finetuning_completion": "\r\n    s1 = s1.replace(' ', '').lower()\r\n    s2 = s2.replace(' ', '').lower()\r\n\r\n    if sorted(s1) == sorted(s2): \r\n        return True\r\n    else: \r\n        return False", "task_id": 7945}
{"finetuning_prompt": "\"\"\"\nDebug the following code to ensure that \"even\" is returned if an even number is given as input.\n\"\"\"\n\ndef is_even(number):\n", "finetuning_completion": " \r\n    if (number % 2) == 0: \r\n        return \"even\" \r\n    else: \r\n        return \"odd\"", "task_id": 7946}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to print all the leap years from the inputted year.\n\"\"\"\n\ndef print_leap_years(start):\n", "finetuning_completion": "\r\n    leap_years = []\r\n    for year in range(start, 2100):\r\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\r\n            leap_years.append(year)\r\n    return leap_years", "task_id": 7947}
{"finetuning_prompt": "\"\"\"\nCreate a Python program to calculate the length and breadth of a rectangle by taking the four corners as input.\n\"\"\"\n\ndef find_length_breadth(corners):\n", "finetuning_completion": " \r\n    x_list = [] \r\n    y_list = [] \r\n    for x, y in corners: \r\n        x_list.append(x) \r\n        y_list.append(y)\r\n    length = max(x_list) - min(x_list) \r\n    breadth = max(y_list) - min(y_list) \r\n    return (length, breadth)", "task_id": 7949}
{"finetuning_prompt": "\"\"\"\nCreate a python program to remove unwanted symbols in a text.\n\"\"\"\n\nimport re\r\ndef remove_unwanted_symbols(text):\n", "finetuning_completion": "\r\n    return re.sub(r'[^A-Za-z0-9 ]+', \"\", text)\r\n    \r\ntext = \"This is a sample text with a few !@#$ symbols\"\r\nprint(remove_unwanted_symbols(text))", "task_id": 7952}
{"finetuning_prompt": "\"\"\"\nCreate a program to print the last 10 characters of the given string.\n\"\"\"\n\ndef print_last_10_chars(string):\n", "finetuning_completion": "\n    return (string[-10:])", "task_id": 7961}
{"finetuning_prompt": "\"\"\"\nWrite code to classify a given set of strings according to their length.\n\"\"\"\n\ndef classify_by_length(string_list):\n", "finetuning_completion": " \r\n  res = {length: [string for string in string_list if len(string) == length] for length in set(map(len, string_list))} \r\n  return res", "task_id": 7964}
{"finetuning_prompt": "\"\"\"\nWrite a script that estimates the number of CPUs required to compute the mathematical combination of two lists of numbers.\n\"\"\"\n\nimport multiprocessing\r\n\r\ndef estimate_cpus_required(list1, list2):\n", "finetuning_completion": " \r\n    length_list1 = len(list1) \r\n    length_list2 = len(list2) \r\n    total_length = length_list1*length_list2 \r\n    no_cpus = multiprocessing.cpu_count() \r\n    recommended_cpus = (total_length//no_cpus) + 1 \r\n    return recommended_cpus", "task_id": 7968}
{"finetuning_prompt": "\"\"\"\nDesign a program to classify a given set of digits into an array of binary digits.\n\"\"\"\n\ndef binary_classification(number_array):\n", "finetuning_completion": "\r\n    binary_array = []\r\n    for num in number_array: \r\n        binary_num = bin(num)[2:] \r\n        binary_array.append(list(map(int, list(binary_num)))) \r\n    return binary_array", "task_id": 7969}
{"finetuning_prompt": "\"\"\"\nGenerate a program to detect and alert for malicious user inputs.\n\"\"\"\n\nimport re\n\ndef detect_malicious_inputs(input):\n", "finetuning_completion": "\n    patterns = [\"^[ 0-9]+$\", \"^[a-zA-Z]+$\", \"^[a-zA-Z0-9]+$\", \"^[a-zA-Z0-9:@]+$\"]\n    if any(re.match(pattern, input) for pattern in patterns):\n        return False\n    else:\n        return True", "task_id": 7975}
{"finetuning_prompt": "\"\"\"\nCreate a python program to select a particular subset of numbers which lie between a particular range given by the user.\n\"\"\"\n\ndef select_range(start, end):\n", "finetuning_completion": " \n    lst = [] \n    for i in range(start, end+1): \n        if (i % 5 == 0): \n            lst.append(i) \n    return lst", "task_id": 7983}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to split a string on specific characters.\n\"\"\"\n\ndef split_on_chars(str, chars):\n", "finetuning_completion": "\n    res = []\n    start = 0\n    for i in range(len(str)):\n        if str[i] in chars:\n            res.append(str[start:i])\n            start = i+1\n    res.append(str[start:])\n    return res", "task_id": 7993}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to merge two dictionaries by adding their values for the common keys.\n\"\"\"\n\ndef merge_dicts(dic1, dic2):\n", "finetuning_completion": " \n    res = dic1.copy()\n    for key, value in dic2.items():\n        if key in res:\n            res[key] += value\n        else:\n            res[key] = value\n    return res", "task_id": 7994}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a nXn matrix of 1s and 0s, taking n as a parameter.\n\"\"\"\n\ndef create_matrix(n):\n", "finetuning_completion": "\n    matrix = [[0]*n for i in range(n)] \n    for i in range(n): \n        for j in range(n): \n            matrix[i][j] = 1\n    return matrix", "task_id": 7998}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the sum of new array which is the multiplication of values at specified intervals of two given arrays.\n\"\"\"\n\ndef sum_of_intervals(arr1, arr2):\n", "finetuning_completion": "\r\n    res = 0\r\n    for i in range(min(len(arr1), len(arr2))):\r\n        res += arr1[i] * arr2[i]\r\n    return res", "task_id": 8002}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to classify a set of words into two categories based on the length of the words.\n\"\"\"\n\ndef classify_words(words):\n", "finetuning_completion": "\n  res = { 'short_words': [], 'long_words': [] }\r\n  for word in words:\r\n    if len(word) <= 3:\r\n      res['short_words'].append(word)\r\n    else:\r\n      res['long_words'].append(word)\r\n  return res", "task_id": 8011}
{"finetuning_prompt": "\"\"\"\nGenerate an array of all possible combinations of the given digits.\n\"\"\"\n\nimport itertools\ndef all_possible_combination(digits):\n", "finetuning_completion": "\n    combinations = list(itertools.combinations(digits, 3))\n    return combinations", "task_id": 8016}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the longest subarray of non-negative integers.\n\"\"\"\n\ndef longestSubarray(arr):\n", "finetuning_completion": " \n  \n    max_len = 0\r\n    curr_len = 0\r\n  \r\n    for i in range(len(arr)): \r\n \r\n        if (arr[i] >= 0): \r\n            curr_len += 1\r\n  \n        else: \r\n            if (max_len < curr_len): \n                max_len = curr_len \r\n  \r\n            curr_len = 0\r\n  \n    if (max_len < curr_len): \r\n        max_len = curr_len \r\n  \r\n    return max_len", "task_id": 8019}
{"finetuning_prompt": "\"\"\"\nImplement the merge sort algorithm for a given array of integers.\n\"\"\"\n\ndef merge_sort(input_list):\n", "finetuning_completion": "\r\n    if len(input_list)<=1:\r\n        return input_list  \r\n    mid = len(input_list)// 2\r\n    left_list = input_list[:mid] \r\n    right_list = input_list[mid:] \r\n\r\n    left_list = merge_sort(left_list)\r\n    right_list = merge_sort(right_list)\r\n    return merge(left_list, right_list)\r\n\r\ndef merge(left_list, right_list):\r\n    sorted_list = []\r\n    left_list_index = 0\r\n    right_list_index = 0\r\n\r\n    while left_list_index < len(left_list) and \\\r\n            right_list_index < len(right_list):\r\n        if left_list[left_list_index] <= right_list[right_list_index]:\r\n            sorted_list.append(left_list[left_list_index])\r\n            left_list_index += 1\r\n        else:\r\n            sorted_list.append(right_list[right_list_index])\r\n            right_list_index += 1\r\n\r\n    if left_list:\r\n        sorted_list.extend(left_list[left_list_index:])\r\n    if right_list:\r\n        sorted_list.extend(right_list[right_list_index:])\r\n\r\n    return sorted_list\r\n\noutput = merge_sort([5, 1, 2, 9, 6, 3, 8, 4, 0, 7])\r\nprint(output)", "task_id": 8023}
{"finetuning_prompt": "\"\"\"\nCreate a program that detects and removes duplicate elements in an array.\n\"\"\"\n\ndef removeDuplicates(arr):\n", "finetuning_completion": " \r\n    uniqueList = [] \r\n    for i in arr: \r\n        if i not in uniqueList: \r\n            uniqueList.append(i) \r\n    return uniqueList \r\n \r\n# Driver Code \r\narr = [3,2,5,3,7,2,9] \r\nprint(removeDuplicates(arr))", "task_id": 8026}
{"finetuning_prompt": "\"\"\"\nCreate a python script to classify a given string as either a number or a non-numeric value.\n\"\"\"\n\ndef classify_text(text):\n", "finetuning_completion": "\r\n    try:\r\n        float(text)\r\n        return 'number'\r\n    except ValueError:\r\n        return 'non-numeric'", "task_id": 8034}
{"finetuning_prompt": "\"\"\"\nGenerate a program to convert an octal number to its binary representation.\n\"\"\"\n\ndef octalToBinary(n):\n", "finetuning_completion": " \r\n    return bin(int(str(n), 8))[2:]", "task_id": 8041}
{"finetuning_prompt": "\"\"\"\nWrite a python program to compare two strings and return the number of differences in their length, number of characters, and number of spaces.\n\"\"\"\n\ndef compare_strings(string1,string2):\n", "finetuning_completion": "\n    length_dif = abs(len(string1) - len(string2))\r\n    char_dif= 0\r\n    for i in range(min(len(string1),len(string2))):\r\n        if string1[i] != string2[i]:\r\n            char_dif +=1\r\n    space_dif = abs(string1.count(\" \") - string2.count(\" \"))\r\n    return length_dif, char_dif, space_dif", "task_id": 8050}
{"finetuning_prompt": "\"\"\"\nGenerate a code to access the value of a specific dictionary key.\n\"\"\"\n\ndef access(dictionary, key):\n", "finetuning_completion": "\n  if key in dictionary:\n    return dictionary[key]\n  else:\n    return None", "task_id": 8053}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to convert a given text string into its corresponding binary encoding.\n\"\"\"\n\ndef text_to_binary(s):\n", "finetuning_completion": "\n    # initialize the result\n    result = \"\"\n \n    # traverse the string \n    for char in s:\n        # convert the character to binary\n        res = bin(ord(char))[2:]\n \n        # fill in the missing leading zeroes\n        while len(res) < 8:\n            res = '0' + res\n        result += res\n \n    return result", "task_id": 8061}
{"finetuning_prompt": "\"\"\"\nImplement a function that will multiplies two sparse matrices of the same size.\n\"\"\"\n\ndef multiply_matrices(matrixA, matrixB, n):\n", "finetuning_completion": "\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            s = 0\n            for k in range(n):\n                s += matrixA[i][k] * matrixB[k][j]\n            row.append(s)\n        result.append(row)\n    return result", "task_id": 8062}
{"finetuning_prompt": "\"\"\"\nCreate a function to reverse a stack using a single array.\n\"\"\"\n\ndef reverse_stack(stack):\n", "finetuning_completion": "\r\n    stack_len = len(stack)\r\n    \r\n    for i in range(stack_len // 2):\r\n        temp = stack[i]\r\n        stack[i] = stack[stack_len - 1 - i] \r\n        stack[stack_len - 1 - i] = temp \r\n        \r\n    return stack", "task_id": 8070}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate an API URL with query parameters.\n\"\"\"\n\ndef generate_url(params):\n", "finetuning_completion": "\n    query_str = \"\"\n    for k, v in params.items():\n        query_str += f\"{k}={v}&\"\n    query_str = query_str[:-1]\n    return f\"https://example.com/api?{query_str}\"\r\n    \r\nparams = {\r\n    \"param1\": \"value1\",\r\n    \"param2\": \"value2\",\r\n    \"param3\": \"value3\"\r\n}\r\n\r\ngenerated_url = generate_url(params)\r\nprint(generated_url)", "task_id": 8071}
{"finetuning_prompt": "\"\"\"\nOptimize a given function to remove redundant code.\n\"\"\"\n\ndef func(arr):\n", "finetuning_completion": "\n    result = 0\n    for i in arr:\n        result += (i if i > 0 else -i)\n    return result", "task_id": 8074}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to print out the exclusive substrings of a given string.\n\"\"\"\n\ndef findSubstrings(string):\n", "finetuning_completion": " \n    result = set()\n    n = len(string) \n    for i in range(n): \n        for j in range(i, n):  \n            sub = string[i: j + 1]\n            if sub not in result: \n                result.add(sub) \n    return result", "task_id": 8079}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the sum of natural numbers below 'n' which are multiples of 3 or 5.\n\"\"\"\n\ndef sum_multiples_below(n):\n", "finetuning_completion": "\r\n    sum  = 0\r\n    for i in range(n):\r\n        if i % 3 == 0 or i % 5 == 0:\r\n            sum +=  i\r\n    return sum", "task_id": 8080}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the total cost of an order from the given cart items and quantity\n\"\"\"\n\ndef calc_cost(cart, qty):\n", "finetuning_completion": "\n  total = 0\n  for item, price in cart.items():\n    total += price * qty[item]\n  return total", "task_id": 8083}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to calculate the maximum profit of selling a share of a company in a given day.\n\"\"\"\n\ndef max_profit(stock_prices):\n", "finetuning_completion": "\r\n  max_profit = 0\r\n  lowest_price = stock_prices[0]\r\n  \r\n  for price in stock_prices:\r\n    current_profit = price - lowest_price\r\n    max_profit = max(max_profit, current_profit)\r\n    lowest_price = min(lowest_price, price)\r\n    \r\n  return max_profit", "task_id": 8086}
{"finetuning_prompt": "\"\"\"\nWrite a python program to assign a unique identifier to each movie in the list.\n\"\"\"\n\ndef assign_ids(movie_list):\n", "finetuning_completion": " \r\n    movie_ids = {}\r\n    for i in range(len(movie_list)): \r\n        movie_ids[movie_list[i]] = i\r\n    return movie_ids", "task_id": 8089}
{"finetuning_prompt": "\"\"\"\nEdit the code below to make it run faster.\n\"\"\"\n\ndef function(x, y):\n", "finetuning_completion": " \r\n    z = 0 \n    for i in range(0, y, 1): \n        z += x \r\n    return z", "task_id": 8091}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to determine the eligible voters for a particular election.\n\"\"\"\n\ndef is_eligible_voter(person):\n", "finetuning_completion": " \r\n    if person[\"age\"] >= 18 and person[\"citizenship\"] == \"US Citizen\": \r\n        return True \r\n    else: \r\n        return False", "task_id": 8092}
{"finetuning_prompt": "\"\"\"\nOptimize the code below.\n\"\"\"\n\ndef optimize(x):\n", "finetuning_completion": " \n  \n    result = 0 \n    for i in x: \n        result += i\n  \n    return result / len(x)", "task_id": 8093}
{"finetuning_prompt": "\"\"\"\nGenerate a script to identify invalid characters present in a given string.\n\"\"\"\n\nimport re \r\n  \r\n# Function to check validity \r\ndef checkValidity(string):\n", "finetuning_completion": " \r\n\t# Pattern to identify invalid characters \r\n\tpattern = re.compile(\"^[A-Za-z0-9_]+$\") \r\n\tif(pattern.match(string)): \r\n\t\treturn True\r\n\treturn False\r\n  \r\n# Driver Code \r\nstring = \"Geeks123&*\"\r\nif(checkValidity(string)): \r\n\tprint(\"Valid String\") \r\nelse: \r\n\tprint(\"Invalid String\")", "task_id": 8103}
{"finetuning_prompt": "\"\"\"\nWrite a python code to replace all occurrences of old_word with new_word in an input string.\n\"\"\"\n\ndef replace_word(String, old_word, new_word):\n", "finetuning_completion": " \r\n  \r\n    # split the string into words  \r\n    words = String.split(\" \")  \r\n  \r\n    # iterate over each word in the string  \r\n    for index, word in enumerate(words):  \r\n  \r\n        # Replace the old word with new one  \r\n        if word == old_word:  \r\n            # Replace the word with the new word  \r\n            words[index] = new_word  \r\n  \r\n    # Join back the words with space  \r\n    String = \" \".join(words)  \r\n  \r\n    return String", "task_id": 8106}
{"finetuning_prompt": "\"\"\"\nGenerate a program to split a given string into a list of strings using a specified character as the separator.\n\"\"\"\n\ndef split_string(string, separator):\n", "finetuning_completion": "\n  lst = string.split(separator)\r\n  return lst", "task_id": 8114}
{"finetuning_prompt": "\"\"\"\nCreate a function that converts binary data into a text string\n\"\"\"\n\ndef binary_to_string(data):\n", "finetuning_completion": "\r\n    return ''.join(chr(int(data[i*8:i*8+8],2)) for i in range(len(data)//8))", "task_id": 8116}
{"finetuning_prompt": "\"\"\"\nGenerate code to censor text.\n\"\"\"\n\ndef censor_text(text):\n", "finetuning_completion": " \r\n    censored_text = [] \r\n    words = text.split(\" \") \r\n    for word in words: \r\n        censored_word = \"\" \r\n        for ch in word: \r\n            censored_word += \"*\" \r\n        censored_text.append(censored_word) \r\n    return \" \".join(censored_text)", "task_id": 8120}
{"finetuning_prompt": "\"\"\"\nGenerate a function which takes a string of arithmetic operations and returns the evaluation of it.\n\"\"\"\n\ndef calculateExpression(expression):\n", "finetuning_completion": " \r\n    expression = expression.replace(\" \", \"\") \r\n    ans = eval(expression) \r\n    return ans", "task_id": 8121}
{"finetuning_prompt": "\"\"\"\nGenerate a function to detect the duplicate elements of an array.\n\"\"\"\n\ndef detect_duplicates(arr):\n", "finetuning_completion": " \r\n  \r\n    hs = set() \r\n    dups = [] \r\n    for x in arr: \r\n        if x in hs: \r\n            dups.append(x) \r\n        else: \r\n            hs.add(x) \r\n    return dups", "task_id": 8122}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate an ASCII ascii art of your initials.\n\"\"\"\n\ndef draw_initial(letter):\n", "finetuning_completion": " \r\n\r\n  if letter == 'A': \r\n    print(\"  __ \\n / _ \\ \\n \\| |_| \\n  \\___/\") \r\n  elif letter == 'B': \r\n    print(\"  ___  \\n |_  ) \\n  / /  \\n /___|\") \r\n  elif letter == 'C': \r\n    print(\"  ___  \\n ( _ ) \\n / /  \\n/____|\") \n  else: \r\n    print(\"Enter A, B or C\")", "task_id": 8129}
{"finetuning_prompt": "\"\"\"\nWrite a python program to selectively swap pairs of elements in a list of strings.\n\"\"\"\n\ndef swap_words(word_list):\n", "finetuning_completion": " \r\n    for i in range(0, len(word_list) - 1, 2): \r\n        word_list[i], word_list[i + 1] = word_list[i + 1], word_list[i] \r\n  \r\n    return word_list", "task_id": 8130}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate the string of all binary numbers with the length of n.\n\"\"\"\n\ndef binary_string_gen(n):\n", "finetuning_completion": " \r\n    res = [] \r\n    for i in range(1 << n): \r\n        s = bin(i)[2:] \r\n        res.append(s.zfill(n)) \r\n    return res", "task_id": 8131}
{"finetuning_prompt": "\"\"\"\nGenerate an array with every 2nd element multiplied by four.\n\"\"\"\n\ndef multiply_four(arr):\n", "finetuning_completion": " \r\n\tfor i in range(0, len(arr), 2): \r\n\t\tarr[i] = 4*arr[i] \r\n\treturn arr \n\narr = [1, 2, 3, 4, 5]\narray = multiply_four(arr)\nprint(array)", "task_id": 8134}
{"finetuning_prompt": "\"\"\"\nGenerate a function to search for a substring of length 'l' in a string of length 'm', where m > l.\n\"\"\"\n\ndef searchSubstring(string, substring):\n", "finetuning_completion": " \r\n \r\n    l1 = len(string)  \r\n    l2 = len(substring) \r\n  \r\n    for i in range(1, (l1 - l2 + 1)): \r\n        j = 0\r\n  \r\n        for j in range(0, l2): \r\n            if (string[i + j] != substring[j]): \r\n                break\r\n  \r\n        if (j == l2 - 1): \r\n            return \"Substring is present\"\r\n    return \"Substring is not present\"", "task_id": 8140}
{"finetuning_prompt": "\"\"\"\nGenerate a Python program to divide two numbers given as strings and print the result.\n\"\"\"\n\ndef divide_str_nums(num1, num2):\n", "finetuning_completion": " \r\n    n1 = int(num1) \r\n    n2 = int(num2) \r\n\r\n    if(n2 == 0): \r\n        return 0; \r\n    else: \r\n        return n1 / n2 \r\n  \r\nnum1 = \"12\"\r\nnum2 = \"4\"\r\nprint(divide_str_nums(num1, num2))", "task_id": 8144}
{"finetuning_prompt": "\"\"\"\nWrite a function to validate a credit card number and issue it if the number is valid.\n\"\"\"\n\ndef validate_card(num):\n", "finetuning_completion": "\r\n    card_num_str = str(num)\r\n    if len(card_num_str) == 16 and card_num_str.isnumeric():\r\n        # Luhn's algorithm \r\n        int_sum = 0\r\n        doubles = False\r\n        for i, digit in enumerate(reversed(card_num_str)):\r\n            num = int(digit)\r\n            if doubles:\r\n                num *= 2\r\n                if num > 9:\r\n                    str_num = str(num)\r\n                    num = int(str_num[0]) + int(str_num[1])\r\n            \r\n            int_sum += num\r\n            doubles = not doubles\r\n        if int_sum % 10 == 0:\r\n            return 'valid'\r\n        else:\r\n            return 'invalid'\r\n    else:\r\n        return 'invalid'", "task_id": 8146}
{"finetuning_prompt": "\"\"\"\nConvert the text \"Hello world!\" to ASCII code.\n\"\"\"\n\ndef ConvertStringToASCII(string):\n", "finetuning_completion": "\n    ascii_list = []\n    \n    for i in string:\n        c = ord(i)\n        ascii_list.append(c)\n\n    return ascii_list", "task_id": 8147}
{"finetuning_prompt": "\"\"\"\nNormalize a given dataset.\n\"\"\"\n\nimport numpy as np\n\ndef normalize(dataset):\n", "finetuning_completion": "\n    max_val = np.max(dataset)\n    min_val = np.min(dataset)\n    normalized_dataset = (dataset - min_val) / (max_val - min_val)\n    return normalized_dataset", "task_id": 8149}
{"finetuning_prompt": "\"\"\"\nCreate a program to calculate the forces of two particles.\n\"\"\"\n\ndef calculate_forces(m1, m2, a1, a2):\n", "finetuning_completion": " \n    F1 = m1 * a1 \r\n    F2 = m2 * a2 \r\n  \r\n    return ([F1, F2])\r\n# calculating  forces \r\nprint(calculate_forces(8, 2, 15, 12))", "task_id": 8172}
{"finetuning_prompt": "\"\"\"\nGenerate code that prints out all the prime numbers  in a given range.\n\"\"\"\n\ndef printPrime(a, b):\n", "finetuning_completion": " \r\n\tfor num in range(a, b + 1): \r\n\t\t# all prime numbers are greater than 1 \r\n\t\tif num > 1: \r\n\t\t\t \r\n\t\t\tfor i in range(2, num): \r\n\t\t\t\tif (num % i) == 0: \r\n\t\t\t\t\tbreak\r\n\t\t\telse: \r\n\t\t\t\tprint(num)", "task_id": 8178}
{"finetuning_prompt": "\"\"\"\nGenerate code to generate fibonacci numbers below a given limit.\n\"\"\"\n\ndef fibonacci(limit):\n", "finetuning_completion": " \r\n\r\n    numbers = [0, 1] \r\n\r\n    while numbers[-1] < limit: \r\n        numbers.append(numbers[-2] + numbers[-1]) \r\n\r\n    return numbers[:-1]", "task_id": 8180}
{"finetuning_prompt": "\"\"\"\nWrite a python program to print the logarithm of a given number using math module.\n\"\"\"\n\nimport math\r\ndef log_of_number(x):\n", "finetuning_completion": "\r\n    return math.log(x, 10)", "task_id": 8186}
{"finetuning_prompt": "\"\"\"\nOptimize the following code to delete an element from a list in the given time complexity.\n\"\"\"\n\ndef delete_element(list, element):\n", "finetuning_completion": "\n    for i, e in enumerate(list):\n        if e == element:\n            del list[i]\n            return", "task_id": 8187}
{"finetuning_prompt": "\"\"\"\nTransform the given algorithm into a function that can filter out duplicate elements in an array.\n\"\"\"\n\ndef remove_duplicates(arr):\n", "finetuning_completion": " \r\n    result = [] \r\n    for num in arr: \r\n        if num not in result: \r\n            result.append(num) \r\n    return result", "task_id": 8191}
{"finetuning_prompt": "\"\"\"\nWrite code to write an algorithm that can sort an array of numbers in ascending order.\n\"\"\"\n\ndef sort_array(arr):\n", "finetuning_completion": "\r\n    n = len(arr)\r\n    for i in range(n):\r\n        min_idx = i\r\n        for j in range(i+1, n):\r\n            if arr[min_idx] > arr[j]:\r\n                min_idx = j\r\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\r\n    return arr", "task_id": 8192}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to check if a substring can be found within a string and then return true or false.\n\"\"\"\n\ndef substring_checker(str1,str2):\n", "finetuning_completion": " \n    #Find length of each string \n    len1 = len(str1) \n    len2 = len(str2) \n  \n    #Check if length of str2 is greater than str1 \n    if len2 > len1: \n        return False\n    for i in range(len1 - len2 + 1): \n        j = 0\n        #Looping through str1 with length of str2 \n        while j < len2: \n            #If characters don't match \n            if str1[i + j] != str2[j]: \n                break\n            j += 1\n  \n        #If all characters match \n        if j == len2: \n            return True\n  \n    return False", "task_id": 8195}
{"finetuning_prompt": "\"\"\"\nWrite a function to separate a given list of strings into two categories: positive and negative strings.\n\"\"\"\n\ndef separate_list(string_list):\n", "finetuning_completion": " \r\n\r\n    positive = [] \r\n    negative = [] \r\n    for item in string_list: \r\n        if item == 'positive': \r\n            positive.append(item) \r\n        else: \r\n            negative.append(item) \r\n    return positive, negative", "task_id": 8201}
{"finetuning_prompt": "\"\"\"\nWrite a python program convert a given pen width to the equivalent string value.\n\"\"\"\n\ndef width2str(width):\n", "finetuning_completion": "\r\n    # width map \r\n    width_map = {1: 'ultra-thin', 2: 'extra-thin', 3: 'thin', 4: 'medium', 5: 'thick' ,6: 'extra-thick', 7: 'ultra-thick'}\r\n    \r\n    # returning the equivalent string value \r\n    return width_map.get(width, \"invalid width\") # default value if width not found", "task_id": 8202}
{"finetuning_prompt": "\"\"\"\nDevelop a code to add the items of two given lists.\n\"\"\"\n\ndef add_lists(list1, list2):\n", "finetuning_completion": "\n    # List comprehension \n    return [l1 + l2 for (l1,l2) in zip(list1, list2)]", "task_id": 8206}
{"finetuning_prompt": "\"\"\"\nCreate a program that computes the factorial of an input number.\n\"\"\"\n\ndef factorial(n):\n", "finetuning_completion": " \n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    return fact", "task_id": 8208}
{"finetuning_prompt": "\"\"\"\nWrite a function to identify the type of variable an argument has.\n\"\"\"\n\ndef check_type(arg):\n", "finetuning_completion": "\r\n    if type(arg) == type(True):\r\n        return \"boolean\"\r\n    elif type(arg) == type(1):\r\n        return \"integer\"\r\n    elif type(arg) == type(1.0):\r\n        return \"float\"\r\n    elif type(arg) == type(\"str\"):\r\n        return \"string\"\r\n    elif type(arg) == type([1, 2, 3]):\r\n        return \"list\"\r\n    elif type(arg) == type((1, 2, 3)):\r\n        return \"tuple\"\r\n    elif type(arg) == type({ \"key\": 1 }):\r\n        return \"dictionary\"", "task_id": 8211}
{"finetuning_prompt": "\"\"\"\nDesign a function to determine if the brackets in an expression are balanced.\n\"\"\"\n\ndef check_balanced(exp):\n", "finetuning_completion": " \r\n\tif len(exp) % 2 != 0: \r\n\t\treturn False\r\n\topening = set('([{') \r\n\tmatches = set([ ('(',')'), ('[',']'), ('{','}')]) \r\n\tstack = [] \r\n\tfor char in exp: \r\n\t\tif char in opening: \r\n\t\t\tstack.append(char) \r\n\t\telse: \r\n\t\t\tif len(stack) == 0: \r\n\t\t\t\treturn False\r\n\t\t\tlast_open = stack.pop() \r\n\t\t\tif (last_open,char) not in matches: \r\n\t\t\t\treturn False\r\n\r\n\treturn len(stack) == 0", "task_id": 8213}
{"finetuning_prompt": "\"\"\"\nWrite a python function to calculate the maximum possible value of an expression which consists of numbers and arithmetic operators.\n\"\"\"\n\ndef calculate_max_sum(array):\n", "finetuning_completion": "\n    n = len(array) \n    max_sum = float(\"-inf\") \n  \n    # Consider every element as starting point \n    for i in range(n): \n  \n        # Initialize current sum as empty \n        curr_sum = 0\n        # Consider all subarrays starting  \n        # from current element \n        for j in range(i, n):\n            curr_sum += array[j] \n            # Compare and update the maximum sum \n            max_sum = max(curr_sum, max_sum) \n    return max_sum", "task_id": 8219}
{"finetuning_prompt": "\"\"\"\nWrite a function to evaluate a mathematical expression containing only +, -, * , / operators.\n\"\"\"\n\ndef compute(op1,op2,operator):\n", "finetuning_completion": "\r\n    if operator == '+':\r\n        return op1 + op2\r\n    elif operator == '-':\r\n        return op1 - op2\r\n    elif operator == '*':\r\n        return op1 * op2\r\n    elif operator == '/':\r\n        return op1 / op2\r\n    else:\r\n        return \"invalid operation\"", "task_id": 8223}
{"finetuning_prompt": "\"\"\"\nGiven two lists, write a function to create a list of all the combinations of the two.\n\"\"\"\n\ndef combine_lists(list1, list2):\n", "finetuning_completion": "\r\n    return [ [i, j] for i in list1 for j in list2]", "task_id": 8226}
{"finetuning_prompt": "\"\"\"\nWrite a function to group the elements of a given list based on it's length.\n\"\"\"\n\ndef group_by_length(input_list):\n", "finetuning_completion": " \r\n    result = {} \r\n    for ele in input_list: \r\n        length = len(ele) \r\n        if length not in result: \r\n            result[length] = [] \r\n        result[length].append(ele) \r\n    return result", "task_id": 8228}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a 3D array with given dimensions.\n\"\"\"\n\nimport numpy as np \r\ndef create_3d_array(dim1,dim2,dim3):\n", "finetuning_completion": " \r\n    return np.zeros((dim1,dim2,dim3))", "task_id": 8229}
{"finetuning_prompt": "\"\"\"\nGenerate a function to group even numbers from the given array.\n\"\"\"\n\ndef group_even(arr):\n", "finetuning_completion": " \r\n    even_arr = [] \r\n    for i in arr: \r\n        if i % 2 == 0: \r\n            even_arr.append(i) \r\n    return even_arr", "task_id": 8230}
{"finetuning_prompt": "\"\"\"\nGenerate a code to create a list with two copies of each element of an existing list with numerical elements.\n\"\"\"\n\ndef duplicate_List(l1):\n", "finetuning_completion": "\r\n    l2 = [item for item in l1 for i in range(2)] \r\n    return l2", "task_id": 8236}
{"finetuning_prompt": "\"\"\"\nGiven 2 strings, write a function to check whether one is a substring of the other.\n\"\"\"\n\ndef is_substring(string1, string2):\n", "finetuning_completion": "\r\n    if string2 in string1:\r\n        return True\r\n    else:\r\n        return False", "task_id": 8255}
{"finetuning_prompt": "\"\"\"\nGenerate code to list all the days between two given dates.\n\"\"\"\n\nimport datetime \r\n  \r\ndef list_days(start, end):\n", "finetuning_completion": " \r\n    date_list = [] \r\n      \r\n    start_date = datetime.datetime.strptime(start, \"%m-%d-%Y\").date() \r\n    end_date = datetime.datetime.strptime(end, \"%m-%d-%Y\").date() \r\n    delta = end_date - start_date  \r\n    for i in range(delta.days + 1): \r\n        day = start_date + datetime.timedelta(days = i) \r\n        date_list.append(day.strftime(\"%m-%d-%Y\")) \r\n    return date_list", "task_id": 8258}
{"finetuning_prompt": "\"\"\"\nCreate a function to have the robot perform a certain action when a specified condition is satisfied.\n\"\"\"\n\ndef actionOnCondition(condition, action):\n", "finetuning_completion": "\r\n  if condition is True:\r\n    eval(action)", "task_id": 8262}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the number of possible words when a text string of length N is given.\n\"\"\"\n\ndef word_count(text, N):\n", "finetuning_completion": " \r\n\twords = [0] * (N + 1) \r\n\twords[0] = 1\r\n\twords[1] = 1\r\n\r\n\tfor i in range(2, N + 1): \r\n\t\twords[i] = 0\r\n\t\tif text[i-1] > '0': \r\n\t\t\twords[i] = words[i-1] \r\n\r\n\t\tif text[i-2] == '1' or (text[i-2] == '2' and text[i-1] < '7'): \r\n\t\t\twords[i] += words[i-2] \r\n\treturn words[N]", "task_id": 8263}
{"finetuning_prompt": "\"\"\"\nCreate a program that could group a set of given integer values into even and odd groups.\n\"\"\"\n\ndef group_numbers(arr):\n", "finetuning_completion": " \n    # list for even and odd numbers \n    even = [] \n    odd = [] \n      \n    for i in arr: \n        # check if the number is even or odd \n        if i % 2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n      \n    # print the result \n    print('Even:', even) \n    print('Odd:', odd)", "task_id": 8265}
{"finetuning_prompt": "\"\"\"\nWrite a python function to find the maximum sum path traversing from the left most element to the right most element in the given array.\n\"\"\"\n\ndef maximumSumPath(arr, n):\n", "finetuning_completion": " \r\n  \r\n    # To store maximum sum from left to \r\n    # right. Initialize it with the \r\n    # leftmost element. \r\n    max_so_far = arr[0] \r\n\r\n    # To store maximum sum of subarray \r\n    # ending at current position. \r\n    curr_max = arr[0] \r\n\r\n    # Traverse the array \r\n    for i in range(1,n): \r\n        curr_max = max(arr[i], curr_max + arr[i]) \r\n        max_so_far = max(max_so_far,curr_max) \r\n\r\n    return max_so_far", "task_id": 8270}
{"finetuning_prompt": "\"\"\"\nWrite a python function to group words in an array into anagrams.\n\"\"\"\n\ndef group_Anagrams(words):\n", "finetuning_completion": " \r\n    anagrams = {} \r\n    for word in words: \r\n        sorted_word = \"\".join(sorted(word)) \r\n        if sorted_word in anagrams: \r\n            anagrams[sorted_word].append(word) \r\n        else: \r\n            anagrams[sorted_word] = [word] \r\n    return anagrams", "task_id": 8271}
{"finetuning_prompt": "\"\"\"\nWrite a python function to classify numbers into prime and non prime.\n\"\"\"\n\ndef isPrime(n):\n", "finetuning_completion": " \r\n    if (n <= 1): \r\n        return False\r\n    if (n <= 3): \r\n        return True\r\n    if (n % 2 == 0 or n % 3 == 0): \r\n        return False\r\n    i = 5\r\n    while(i * i <= n): \r\n        if (n % i == 0 or n % (i + 2) == 0) : \r\n            return False\r\n        i = i + 6\r\n \r\n    return True", "task_id": 8275}
{"finetuning_prompt": "\"\"\"\nCreate a function to delete duplicate words in a sentence and order them alphabetically.\n\"\"\"\n\ndef remove_duplicate_words(sentence):\n", "finetuning_completion": " \n    words = sentence.split() \r\n    new_words = [] \n    for word in words: \r\n        if word not in new_words: \r\n            new_words.append(word) \n    new_words.sort()     \r\n    return ' '.join(new_words)", "task_id": 8278}
{"finetuning_prompt": "\"\"\"\nWrite a function to edit a given array and eliminate all zeros in it.\n\"\"\"\n\ndef eliminate_zeros(my_list):\n", "finetuning_completion": "\r\n    \r\n    new_list = [] \r\n  \r\n    for num in my_list: \r\n  \r\n        if num != 0: \r\n            new_list.append(num) \r\n  \r\n    return new_list", "task_id": 8281}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm that reverses a string without using any in-built library functions.\n\"\"\"\n\ndef reverse_string(str):\n", "finetuning_completion": " \r\n    lstr = list(str) \r\n    lstr.reverse() \r\n    rev_str = ''.join(lstr)\r\n    return rev_str", "task_id": 8284}
{"finetuning_prompt": "\"\"\"\nWrite a code to replace all vowels in a given string with the given character.\n\"\"\"\n\ndef replace_vowels(str,ch):\n", "finetuning_completion": " \r\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U') \r\n    for x in str: \r\n        if x in vowels: \r\n            str = str.replace(x, ch) \r\n    return str", "task_id": 8286}
{"finetuning_prompt": "\"\"\"\nGenerate code to populate a dictionary with a given set of keys and values.\n\"\"\"\n\ndef populate_dict(keys, values):\n", "finetuning_completion": " \r\n    mydict = {} \r\n    for i in range(len(keys)): \r\n        mydict[keys[i]] = values[i] \r\n    return mydict", "task_id": 8289}
{"finetuning_prompt": "\"\"\"\nGenerate a function to classify a given list of numbers as even or odd.\n\"\"\"\n\ndef classify(nums):\n", "finetuning_completion": "\r\n    even_nums = []\r\n    odd_nums = []\r\n    for num in nums: \r\n        if num % 2 == 0:\r\n            even_nums.append(num)\r\n        else: \r\n            odd_nums.append(num)\r\n    return (even_nums, odd_nums)", "task_id": 8298}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to optimize the following code.\n\"\"\"\n\ndef findSum(list):\n", "finetuning_completion": "\r\n    return sum(map(int, list))", "task_id": 8300}
{"finetuning_prompt": "\"\"\"\nGenerate an optimized algorithm to calculate the Levenshtein distance (edit distance) between two words.\n\"\"\"\n\ndef levenshtein(s1, s2):\n", "finetuning_completion": " \n    if len(s1) > len(s2): \n        s1, s2 = s2, s1 \n  \n    distances = range(len(s1) + 1) \n    for i2, c2 in enumerate(s2): \n        distances_ = [i2+1] \n        for i1, c1 in enumerate(s1): \n            if c1 == c2: \n                distances_.append(distances[i1]) \n            else: \n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) \n        distances = distances_ \n    return distances[-1]", "task_id": 8307}
{"finetuning_prompt": "\"\"\"\nWrite a function to check if a character is a vowel or consonant.\n\"\"\"\n\ndef is_vowel(char):\n", "finetuning_completion": " \n    all_vowels = 'aeiouAEIOU'\n    return char in all_vowels \n  \n# Driver Code \nchar = 'e'\nif (is_vowel(char)): \n    print(\"The given character is an vowel\") \nelse: \n    print(\"The given character is an consonant\")", "task_id": 8309}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to classify text into five different categories.\n\"\"\"\n\ndef classify_text(text):\n", "finetuning_completion": " \r\n    categories = [\"climate change\", \"environment\", \"energy\", \"government\", \"investment\"]\r\n    for category in categories: \r\n        if category in text: \r\n            return category\r\n    return None", "task_id": 8310}
{"finetuning_prompt": "\"\"\"\nDesign a function to deinterleave two given lists based on a pivot point.\n\"\"\"\n\ndef deinterleave(l1, l2, pivot):\n", "finetuning_completion": "\r\n    l3 = l1[:pivot]\r\n    l3.extend(l2[pivot:])\r\n    l4 = l2[:pivot]\r\n    l4.extend(l1[pivot:])\r\n    return l3, l4", "task_id": 8311}
{"finetuning_prompt": "\"\"\"\nCreate a function that given a list of integers, checks whether or not the sum of the elements is a prime number.\n\"\"\"\n\ndef is_prime(my_list):\n", "finetuning_completion": " \r\n    total = 0\r\n    for num in my_list: \r\n        total += num \r\n    \r\n    if (total == 2): \r\n        return True \r\n    \r\n    if (total == 1 or total % 2 == 0): \r\n        return False \r\n\r\n    for i in range(3, total // 2, 2): \r\n        if (total % i == 0): \r\n            return False\r\n    \r\n    return True", "task_id": 8315}
{"finetuning_prompt": "\"\"\"\nWrite a function to add two given strings, no matter what the length is.\n\"\"\"\n\ndef add_strings(str1, str2):\n", "finetuning_completion": " \r\n    len1 = len(str1) \r\n    len2 = len(str2) \r\n    if len1 > len2 : \r\n        str2 = (len1 - len2) * \"0\" + str2 \r\n    elif len1 < len2 : \r\n        str1 = (len2 - len1) * \"0\" + str1 \r\n    res =\"\"   \r\n    carry = 0\r\n    for i in range(max(len1,len2)): \r\n        sum = (ord(str1[i]) - ord('0') + ord(str2[i]) - ord('0') + carry) \r\n        res += str(sum % 10) \r\n        carry = sum//10\r\n    if carry: \r\n        res += str(carry) \r\n    return res", "task_id": 8320}
{"finetuning_prompt": "\"\"\"\nEdit the given code such that it is easier to understand and debug.\n\"\"\"\n\ndef f(s):\n", "finetuning_completion": "\n    # declare and initialize product to 1\n    product = 1\n    for char in s:\n        # update product by multiplying the product with \n        # ASCII code of current character\n        product = product*ord(char)\n    # return the final product\n    return product", "task_id": 8324}
{"finetuning_prompt": "\"\"\"\nCreate a program to fill a 3x3x3 cube with zeroes.\n\"\"\"\n\ndef fillCube(cube):\n", "finetuning_completion": " \r\n  for x in range(3): \r\n    for y in range(3): \r\n      for z in range(3): \r\n        cube[x][y][z] = 0\r\n  return cube", "task_id": 8330}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the longest consecutive sub-sequence of 1s in a given binary array.\n\"\"\"\n\ndef findLongestConseqSubseq(arr, n):\n", "finetuning_completion": " \r\n  \r\n    s = set() \r\n\r\n    ans = 0\r\n    for ele in arr: \r\n        s.add(ele) \r\n    for i in range(n): \r\n          \r\n        if (arr[i] - 1) not in s: \r\n            j = arr[i] \r\n            while(j in s): \r\n                j += 1\r\n            ans = max(ans, j - arr[i]) \r\n    return ans", "task_id": 8331}
{"finetuning_prompt": "\"\"\"\nGenerate a python program for extracting lowercase characters from a given string.\n\"\"\"\n\ndef extract_lower_char(str1):\n", "finetuning_completion": " \r\n    lowercase_chars = [] \r\n    for char in str1: \r\n        if char.islower(): \r\n            lowercase_chars.append(char) \r\n    return lowercase_chars\r\n\r\nprint(extract_lower_char(\"Programming is Fun\"))", "task_id": 8335}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm that calculates the most expensive product given a list of prices.\n\"\"\"\n\ndef most_expensive_product(list1):\n", "finetuning_completion": " \r\n    cur_max = 0\r\n    for num in list1: \r\n        if num > cur_max: \r\n            cur_max = num\r\n    return cur_max\n    \nprint(most_expensive_product([0.25, 0.50, 0.75, 1.0]))", "task_id": 8336}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm that prints out all the prime numbers between 2 and a given number.\n\"\"\"\n\ndef find_primes(n):\n", "finetuning_completion": " \r\n    prime_list = [] \r\n    for i in range(2,n+1): \r\n        for j in range(2,i): \r\n            if i%j == 0: \r\n                break \r\n        else: \r\n            prime_list.append(i) \r\n    return prime_list \r\n  \r\nprint(find_primes(20))", "task_id": 8339}
{"finetuning_prompt": "\"\"\"\nGenerate a machine learning algorithm to predict a weather given temperature and humidity.\n\"\"\"\n\ndef weatherPrediction(temp, hum):\n", "finetuning_completion": "\r\n    if (temp > 25 and hum < 60) :\r\n        return \"sunny\"\r\n    elif (temp > 25 and hum > 60) :\r\n        return \"rainy\"\r\n    elif (temp <= 25 and hum < 60) :\r\n        return \"cloudy\"\r\n    elif (temp <= 25 and hum > 60) :\r\n        return \"stormy\"\r\nmeteorology = weatherPrediction(33, 71)\nprint(meteorology)\r\n# output: rainy", "task_id": 8343}
{"finetuning_prompt": "\"\"\"\nWrite a code segment to perform basic encryption in Python using a Caesar cipher.\n\"\"\"\n\ndef caesar_encrypt(text, key):\n", "finetuning_completion": "\r\n  cipher = ''\r\n  for i in range(len(text)): \r\n    char = text[i] \r\n    if (char.isalpha()): \r\n      char = chr((ord(char) + key - 97) % 26 + 97) \r\n    cipher += char \r\n  return cipher", "task_id": 8350}
{"finetuning_prompt": "\"\"\"\nWrite a function to display the elements of a list where the index is a multiple of 5.\n\"\"\"\n\ndef display_multiple_five(lst):\n", "finetuning_completion": "\r\n  res = []\r\n  for index in range(len(lst)):\r\n    if index % 5 == 0:\r\n      res.append(lst[index])\r\n  return res", "task_id": 8352}
{"finetuning_prompt": "\"\"\"\nCreate a python program to convert a given list of letters to words in an alphabetical order using a given set of characters.\n\"\"\"\n\ndef list_to_words(a, charset):\n", "finetuning_completion": " \r\n    result = []  \r\n    for i in a: \r\n        result.append(charset[i-1]) \r\n    result.sort() \r\n    return result", "task_id": 8358}
{"finetuning_prompt": "\"\"\"\nGenerate an HTML page for a web page with the given title and body.\n\"\"\"\n\ndef generate_page(title, body):\n", "finetuning_completion": "\n  page = f\"\"\"<!DOCTYPE html>\n    <html>\n    <head>\n      <title>{title}</title>\n    </head>\n    <body>\n      {body}\n    </body>\n    </html>\"\"\"\n  return page", "task_id": 8362}
{"finetuning_prompt": "\"\"\"\nGiven a list of points, write a program to find the maximum distance between two points.\n\"\"\"\n\ndef max_distance(points_list):\n", "finetuning_completion": " \n    distances = [math.sqrt(math.pow(tup1[0] - tup2[0], 2) + math.pow(tup1[1] - tup2[1], 2)) \n                 for tup1 in points_list \n                 for tup2 in points_list if tup1 != tup2] \n  \n    return max(distances)", "task_id": 8363}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to split a list according to first character of word.\n\"\"\"\n\ndef split_by_first(words):\n", "finetuning_completion": "\r\n    result = {}\r\n\r\n    for word in words:\r\n        letter = word[0]\r\n        if letter not in result:\r\n            result[letter] = []\r\n        result[letter].append(word)\r\n\r\n    return result", "task_id": 8369}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to add each element of two given lists into a new list.\n\"\"\"\n\ndef add_lists(list1, list2):\n", "finetuning_completion": "\r\n    result = [a + b for a,b in zip(list1, list2)]\r\n    return result", "task_id": 8370}
{"finetuning_prompt": "\"\"\"\nGiven an array of integers, find the maximum sum that can be formed by adding non-adjacent elements in the array.\n\"\"\"\n\ndef max_sum(arr):\n", "finetuning_completion": " \r\n  \r\n    incl = arr[0] \r\n    excl = 0\r\n\r\n    for i in range(1, len(arr)): \r\n  \r\n        # Current max excluding i (No ternary in Python) \r\n        new_excl = excl if excl>incl else incl \r\n  \r\n        # Current max including i \r\n        incl = excl + arr[i] \r\n        excl = new_excl \r\n  \r\n    # return max of incl and excl \r\n    return (excl if excl>incl else incl)", "task_id": 8381}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to print the longest common string from two strings.\n\"\"\"\n\ndef lcs(X , Y):\n", "finetuning_completion": " \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n]", "task_id": 8382}
{"finetuning_prompt": "\"\"\"\nWrite a python program to sum the rows and columns of a matrix.\n\"\"\"\n\ndef sum_rows_columns(matrix):\n", "finetuning_completion": " \r\n    rows = len(matrix) \r\n    columns = len(matrix[0]) \r\n    row_sum = 0\r\n    column_sum = 0\r\n  \r\n    for i in range(rows): \r\n        row_sum = 0\r\n        for j in range(columns): \r\n            row_sum += matrix[i][j] \r\n        print(\"Sum of elements of row\", i, \":\", row_sum) \r\n  \r\n    for i in range(columns): \r\n        column_sum = 0\r\n        for j in range(rows): \r\n            column_sum += matrix[j][i] \r\n        print(\"Sum of elements of column\", i, \":\", column_sum)", "task_id": 8387}
{"finetuning_prompt": "\"\"\"\nConstruct a function to edit a given list containing string as elements, and apply certain operations in order to create a new fully altered list\n\"\"\"\n\ndef transform_list(list1):\n", "finetuning_completion": "\n    res = [el.lower() + \"!\" for el in list1]\n    return res", "task_id": 8398}
{"finetuning_prompt": "\"\"\"\nWrite a function to reverse a string containing only parentheses.\n\"\"\"\n\ndef reverse_parens(string):\n", "finetuning_completion": " \r\n    result = \"\" \r\n    for i in string: \r\n        if i == '(': \r\n            result = ')' + result\r\n        else: \r\n            result = '(' + result\r\n    return result", "task_id": 8399}
{"finetuning_prompt": "\"\"\"\nWrite a python function to delete odd values from given list.\n\"\"\"\n\ndef delete_odd(list1):\n", "finetuning_completion": " \r\n    for i in list1: \r\n        if i % 2 == 1: \r\n            list1.remove(i) \r\n    return list1 \r\nlist1 = [3, 5, 7, 9, 11]\r\nprint(delete_odd(list1))", "task_id": 8419}
{"finetuning_prompt": "\"\"\"\nFind the greatest common divisor (GCD) of all numbers in the given list.\n\"\"\"\n\ndef get_gcd(x, y): \r\n\r\n    if x > y: \r\n        small = y \r\n    else: \r\n        small = x \r\n    for i in range(1, small+1): \r\n        if((x % i == 0) and (y % i == 0)): \r\n            gcd = i \r\n            \r\n    return gcd \r\n\r\ndef et_generalgcd(li):\n", "finetuning_completion": " \r\n\r\n    if x > y: \r\n        small = y \r\n    else: \r\n        small = x \r\n    for i in range(1, small+1): \r\n        if((x % i == 0) and (y % i == 0)): \r\n            gcd = i \r\n            \r\n    return gcd \r\n\r\ndef et_generalgcd(li): \r\n\r\n\tgcd1 = li[0] \r\n\r\n\tfor i in range(1,len(li)): \r\n\t\tgcd1 = get_gcd(gcd1, li[i]) \r\n\r\n\treturn gcd1 \r\n\r\nlisty =[5, 15, 20, 70] \r\nprint(et_generalgcd(listy))", "task_id": 8423}
{"finetuning_prompt": "\"\"\"\nGenerate a function to split a list into pairs of consecutive numbers.\n\"\"\"\n\ndef split_list(numlist):\n", "finetuning_completion": "\r\n    result = []\r\n    numlist.sort()\r\n    for i in range(0,len(numlist)-1):\r\n        result.append((numlist[i], numlist[i+1]))\r\n    return result", "task_id": 8429}
{"finetuning_prompt": "\"\"\"\nDevelop a function to sort a given list with respect to its length.\n\"\"\"\n\ndef sort_words_by_length(wordlist):\n", "finetuning_completion": "\r\n    return sorted(wordlist, key = len)", "task_id": 8430}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python that checks if a number is a perfect square.\n\"\"\"\n\ndef is_perfect_square(n):\n", "finetuning_completion": " \n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n:\n        return True\n    else:\n        return False", "task_id": 8444}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the longest sub-string of the given string that contains the vowel 'a'.\n\"\"\"\n\ndef longest_a_str(str1):\n", "finetuning_completion": " \n    max_str = \"\"\n    current_str = \"\"\n    for i in str1: \n        if i in 'aeiou' and i == 'a': \n            current_str += i \n            if len(current_str) > len(max_str): \n                max_str = current_str \n        else:\n            current_str = \"\"\n    return max_str", "task_id": 8446}
{"finetuning_prompt": "\"\"\"\nCompose a function to extract top N words from a dictionary based on their frequencies.\n\"\"\"\n\ndef topNWords(wordsDict, n):\n", "finetuning_completion": "\n    freqList = sorted(wordsDict.items(), key = lambda x: x[1], reverse = True) \n    topWordsDict = dict(freqList[:n])\n    return topWordsDict", "task_id": 8458}
{"finetuning_prompt": "\"\"\"\nBuild an algorithm to find the maximum value of a list whose elements add up to a target sum.\n\"\"\"\n\ndef maxSumSublist(arr,targetSum):\n", "finetuning_completion": " \n    \n    curr_sum = 0 \n    max_sum = 0\n    curr_start = 0 \n    \n    for i in range(len(arr)): \n        curr_sum += arr[i] \n  \n        while curr_sum > targetSum: \n            curr_sum -= arr[curr_start] \n            curr_start += 1\n            \n        max_sum = max(max_sum, curr_sum) \n  \n    return max_sum", "task_id": 8460}
{"finetuning_prompt": "\"\"\"\nGenerate an API in Python to accept a JSON input and returns a response.\n\"\"\"\n\nimport json\r\n\r\n# Function for API\r\ndef API(json_data):\n", "finetuning_completion": "\r\n    data = json.loads(json_data) \r\n    # Process the data and create the response \r\n    response = {\r\n        'message': 'Your API request was successful.'\r\n    } \r\n    # Return the response\r\n    return json.dumps(response)", "task_id": 8463}
{"finetuning_prompt": "\"\"\"\nCreate a python script to remove all integers from a list.\n\"\"\"\n\ndef remove_Integers(lst):\n", "finetuning_completion": "\r\n    return [x for x in lst if not isinstance(x, int)]", "task_id": 8464}
{"finetuning_prompt": "\"\"\"\nCreate a python script to generate a print pyramid.\n\"\"\"\n\n# Function to print pyramid  \r\ndef print_Pyramid( num_rows ):\n", "finetuning_completion": " \r\n    # Outer loop to handle number of rows   \r\n    for i in range(0, num_rows): \r\n  \r\n        # Create inner loop for spaces \r\n        for j in range(0, num_rows - i - 1): \r\n            print(end=\" \") \r\n  \r\n        # Create inner loop for printing stars \r\n        for j in range(0, i + 1): \r\n            print(\"*\", end=\" \") \r\n  \r\n        # Move to the next row\r\n        print(\"\\r\")", "task_id": 8465}
{"finetuning_prompt": "\"\"\"\nGenerate a function to extract the keys and values from a given dictionary and store them into separate arrays.\n\"\"\"\n\ndef extract_dict(dic):\n", "finetuning_completion": "\r\n    keys = []\r\n    values = []\r\n    for key, value in dic.items():\r\n        keys.append(key)\r\n        values.append(value)\r\n    return keys, values", "task_id": 8468}
{"finetuning_prompt": "\"\"\"\nGenerate a function to combine two given dictionaries.\n\"\"\"\n\ndef combine_dicts(dict1, dict2):\n", "finetuning_completion": " \r\n    res = dict1.copy() \r\n    res.update(dict2) \r\n    return res", "task_id": 8470}
{"finetuning_prompt": "\"\"\"\nCreate a python program to find the maximum numbers in two different lists.\n\"\"\"\n\ndef max_in_two_lists(list1,list2):\n", "finetuning_completion": " \r\n    return max(max(list1),max(list2)) \r\n\r\nlist1 = [7, 10, 2, 3] \r\nlist2 = [4, 1, 9, 5]\r\nprint(max_in_two_lists(list1,list2))", "task_id": 8477}
{"finetuning_prompt": "\"\"\"\nCreate a script to flatten a given list of lists.\n\"\"\"\n\ndef flatten_list(nested_list):\n", "finetuning_completion": "\n    flatten_list = [] \n    for sublist in nested_list:\n        for item in sublist:\n            flatten_list.append(item)\n    return flatten_list", "task_id": 8481}
{"finetuning_prompt": "\"\"\"\nGenerate a program to extract the longest word from the following string:\n\"\"\"\n\ndef extract_largest_word(string):\n", "finetuning_completion": " \n    max_word = \"\" \n    for word in string.split():    \n        if len(word) > len(max_word): \n            max_word = word   \n    return max_word\n\nprint(extract_largest_word(\"The quick brown fox jumped over the lazy dog\"))", "task_id": 8484}
{"finetuning_prompt": "\"\"\"\nWrite a function that returns the mean of all the elements within a nested list of numbers.\n\"\"\"\n\ndef nested_list_mean(nested_list):\n", "finetuning_completion": "\r\n    total = 0\r\n    count = 0\r\n    for sublist in nested_list:\r\n        for element in sublist:\r\n            total += element\r\n            count += 1\r\n    return total/count", "task_id": 8485}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to sort the given array in place from smallest to largest element.\n\"\"\"\n\ndef in_place_sort(arr):\n", "finetuning_completion": " \r\n    n = len(arr) \r\n  \r\n    # One by one move boundary of unsorted subarray \r\n    for i in range(n-1): \r\n  \r\n        # Find the minimum element in unsorted array \r\n        min_idx = i \r\n        for j in range(i+1, n): \r\n            if arr[min_idx] > arr[j]: \r\n                min_idx = j \r\n  \r\n        # Swap the found minimum element with the first \r\n        # element \r\n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \r\n        \r\n    return arr", "task_id": 8486}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm to fill the empty elements of a given matrix with a given character.\n\"\"\"\n\ndef fill_empty_elements(matrix, char):\n", "finetuning_completion": "\r\n    for row in range(len(matrix)):\r\n        for col in range(len(matrix[row])):\r\n            if matrix[row][col] == 0:\r\n                matrix[row][col] = char\r\n    return matrix", "task_id": 8488}
{"finetuning_prompt": "\"\"\"\nWrite a python program that converts a given string into CamelCase.\n\"\"\"\n\ndef camelCase(text):\n", "finetuning_completion": " \n    words = text.split(' ') \n    result = words[0].lower() \n    for i in range(1, len(words)): \n        result += words[i].title() \n  \n    return result", "task_id": 8499}
{"finetuning_prompt": "\"\"\"\nCreate a python program to reverse a given sentence (words separated by one space).\n\"\"\"\n\ndef reverse_sentence(string):\n", "finetuning_completion": " \r\n    string_list = string.split() \r\n    string_list.reverse() \r\n    new_string = \" \".join(string_list) \r\n    return new_string", "task_id": 8509}
{"finetuning_prompt": "\"\"\"\nWrite a python code to iterate through two lists simultaneously and print the common items.\n\"\"\"\n\ndef common_items(list1, list2):\n", "finetuning_completion": " \r\n    result = [] \r\n    for i in list1: \r\n        if i in list2: \r\n            result.append(i) \r\n    return result", "task_id": 8511}
{"finetuning_prompt": "\"\"\"\nWrite a function to calculate the Nth term in the Fibonacci sequence using an equation.\n\"\"\"\n\nfrom math import sqrt \n  \r\n# Function to calculate the Nth term in fibonacci equation \r\ndef Fibonacci_equation(N):\n", "finetuning_completion": " \r\n  \r\n   return round((1 / sqrt(5)) * ((((1 + sqrt(5)) / 2)**N) -\r\n                        (((1 - sqrt(5)) / 2)**N)))", "task_id": 8513}
{"finetuning_prompt": "\"\"\"\nRewrite a given algorithm to find the sum of the most efficient subset of a given array.\n\"\"\"\n\ndef subset_sum(arr, n, sum):\n", "finetuning_completion": " \r\n  \r\n    # Initialize table for storing results of sub-problems \r\n    table = [[0 for i in range(sum + 1)] for i in range(n + 1)] \r\n  \r\n    # Fill table in bottom up manner \r\n    for i in range(n + 1): \r\n        for j in range(sum + 1): \r\n            # Base cases \r\n            if i == 0 and j != 0: \r\n                table[i][j] = False\r\n            if j == 0: \r\n                table[i][j] = True\r\n  \r\n            # If last element's weight is more than sum of remaining  \r\n            # then ignore the last element \r\n            elif arr[i-1] > j: \r\n                table[i][j] = table[i-1][j]\r\n  \r\n            # Else consider two cases. Either we include current element  \r\n            # and reduce the sum, or we exclude the current element and  \r\n            # move to the next element \r\n            else: \r\n                table[i][j] = (table[i-1][j] or \r\n                               table[i-1][j - arr[i-1]]) \r\n  \r\n            # if table[n][sum] is True then there is a subset of  \r\n            # arr[0..n-1] having sum equal to given sum.  \r\n    return table[n][sum]", "task_id": 8523}
{"finetuning_prompt": "\"\"\"\nWrite a function to validate a password to make sure it contains at least 8 characters, one uppercase letter, one lowercase letter, and one numerical digit.\n\"\"\"\n\ndef validate_password(password):\n", "finetuning_completion": "\n    lowercase_counter = 0\n    uppercase_counter = 0\n    digit_counter = 0\n  \n    for i in range(len(password)):\n        if password[i].islower():\n            lowercase_counter += 1\n        elif password[i].isupper():\n            uppercase_counter += 1\n        elif password[i].isdigit():\n            digit_counter += 1\n          \n    if len(password)>=8 and lowercase_counter >=1 and uppercase_counter >=1 and digit_counter >=1:\n        return True\n    return False", "task_id": 8524}
{"finetuning_prompt": "\"\"\"\nCreate a function that takes an expression and returns its evaluation.\n\"\"\"\n\ndef evaluate(expression):\n", "finetuning_completion": " \n    return eval(expression) \n\nprint(evaluate(\"3 + 4 - 2\")) \n# prints 5", "task_id": 8527}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to connect n ( n > 1 ) vertices.\n\"\"\"\n\ndef connect_vertices(n):\n", "finetuning_completion": " \n\t# set the graph \n\tgraph = [[0 for x in range(n)] for y in range(n)] \n\t# connect each vertex\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tgraph[i][j] = 1\n\t\t\tgraph[j][i] = 1\n\treturn graph", "task_id": 8535}
{"finetuning_prompt": "\"\"\"\nGenerate a program to find the maximum of given two numbers using minimum memory.\n\"\"\"\n\ndef findMax(x, y):\n", "finetuning_completion": " \n    if x > y : \r\n        return x \r\n    else: \r\n        return y \n  \n# Driver code \r\nx, y = 10, 20\r\nprint(\"Max of x, y is :\", findMax(x, y))", "task_id": 8539}
{"finetuning_prompt": "\"\"\"\nGenerate a hash code from a string containing alphanumeric characters.\n\"\"\"\n\nimport hashlib \r\n  \r\n# hashing string \r\ndef hash_Code(string):\n", "finetuning_completion": " \r\n    Result = hashlib.md5(string.encode()) \r\n    return Result.hexdigest()", "task_id": 8543}
{"finetuning_prompt": "\"\"\"\nCreate a program that takes two strings as input and returns their intersection in the form of a set.\n\"\"\"\n\ndef find_intersection(input_str1,input_str2):\n", "finetuning_completion": "\n    l1 = set(input_str1.split(\" \"))\n    l2 = set(input_str2.split(\" \"))\n    l3 = l1.intersection(l2)\n    return l3", "task_id": 8551}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm for finding the longest contiguous subarray with all 1s in an array of 0s and 1s.\n\"\"\"\n\ndef find_longest_subarray(inp_arr):\n", "finetuning_completion": "\n    max_len = 0\n    start = 0\n    end = 0\n    while (end<len(inp_arr)):\n        while ((end<len(inp_arr)) and (inp_arr[end]==1)):\n            end += 1\n        max_len = max(max_len, end-start)            \n        end += 1\n        while ((end<len(inp_arr)) and (inp_arr[end] == 0)): \n            end += 1\n        start = end\n    return max_len", "task_id": 8553}
{"finetuning_prompt": "\"\"\"\nWrite a python program to reverse the words of a given sentence, maintaining the order of the words.\n\"\"\"\n\ndef reverse_words(sentence):\n", "finetuning_completion": " \r\n    words = sentence.split(' ')   \r\n    reverse_sentence = ' '.join(words[::-1]) \r\n    return reverse_sentence  \r\n  \r\nsentence = 'How are you'\r\n \r\nprint(reverse_words(sentence))", "task_id": 8561}
{"finetuning_prompt": "\"\"\"\nWrite a python program to look up user data in a given database.\n\"\"\"\n\ndef lookup_user(database, user):\n", "finetuning_completion": "\r\n  if user in database:\r\n    return database[user]\r\n  else:\r\n    return 'User not found!'", "task_id": 8568}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the size of a network in a provided Python dictionary.\n\"\"\"\n\ndef find_net_size(net):\n", "finetuning_completion": "\r\n n = 0\r\n for v in net.values():\r\n   n += len(v)\r\n return n", "task_id": 8571}
{"finetuning_prompt": "\"\"\"\nCreate a function to edit two given strings so that they share the same length, making one of the strings as long as possible.\n\"\"\"\n\ndef edit_strings(str1, str2):\n", "finetuning_completion": " \n    n1 = len(str1) \r\n    n2 = len(str2) \r\n  \r\n    if n1\t< n2: \n        str1 += ' ' * (n2 - n1) \r\n    else: \r\n        str2 += ' ' * (n1 - n2) \r\n  \r\n    return str1, str2", "task_id": 8578}
{"finetuning_prompt": "\"\"\"\nGiven a set and two lists, create a set from the two lists, and then remove the elements that are present in the given set.\n\"\"\"\n\ndef subtract_set(base_set, list1, list2):\n", "finetuning_completion": "\n  res_set = set(list1 + list2)\n  res = res_set.difference(base_set)\n  return res", "task_id": 8584}
{"finetuning_prompt": "\"\"\"\nWrite a function to accept a list of numbers and execute a binary search for an input number.\n\"\"\"\n\ndef binary_search(test_lst, response):\n", "finetuning_completion": "\n  low = 0\r\n  high = len(test_lst) - 1\r\n\r\n  while low <= high: \r\n  \r\n    mid = (low + high) // 2\r\n\r\n    if test_lst[mid] < response: \r\n      low = mid + 1\r\n\r\n    elif test_lst[mid] > response: \r\n      high = mid - 1\r\n\r\n    else: \r\n      return (mid) \r\n\r\n  return (-1)", "task_id": 8586}
{"finetuning_prompt": "\"\"\"\nClassify the given strings as vowel or consonant.\n\"\"\"\n\ndef classify_vowel_consonant(test_str1, test_str2):\n", "finetuning_completion": "\n  res1 = \"\"\r\n  res2 = \"\"\n  for char in test_str1:\r\n    if char in \"aeiouAEIOU\":\r\n      res1 += \"vowel\"\r\n    else:\r\n      res1 += \"consonant\"\r\n  for char in test_str2:\r\n    if char in \"aeiouAEIOU\":\r\n      res2 += \"vowel\"\r\n    else:\r\n      res2 += \"consonant\"\r\n  return (res1, res2)", "task_id": 8591}
{"finetuning_prompt": "\"\"\"\nDesign a python algorithm to find the maximum sub array of a given array.\n\"\"\"\n\ndef max_Subarray_Sum(arr, n):\n", "finetuning_completion": " \n  \n    max_so_far = 0\n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        elif max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n  \n    return max_so_far", "task_id": 8603}
{"finetuning_prompt": "\"\"\"\nImprove the existing code to search for a target in a given matrix.\n\"\"\"\n\ndef searchMatrix(matrix, target):\n", "finetuning_completion": " \n    rows = len(matrix) \r\n    cols = len(matrix[0]) \r\n  \n    for i in range(rows): \r\n        for j in range(cols): \r\n            if(matrix[i][j] == target): \r\n                return [i, j]  \r\n    return [-1, -1]", "task_id": 8604}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to create an array with the numbers from 0 to N-1 and reshape it into an NxN matrix.\n\"\"\"\n\ndef create_Matrix(N):\n", "finetuning_completion": " \n    array = [i for i in range(N**2)] \n    matrix = [[array[N*i + j] for j in range(N)] for i in range(N)] \n    return matrix", "task_id": 8606}
{"finetuning_prompt": "\"\"\"\nGenerate a function to insert a new key with its value into a python dictionary.\n\"\"\"\n\ndef insert_into_dict(dct, key, value):\n", "finetuning_completion": "\n    dct[key] = value\n    return dct\n\n# Output\n{'a': 1, 'b': 2, 'c': 3}", "task_id": 8616}
{"finetuning_prompt": "\"\"\"\nWrite a function to find the total number of solutions to the equation x + y = n.\n\"\"\"\n\ndef num_solutions(n):\n", "finetuning_completion": "\n    count = 0\n    for x in range(n+1):\n        for y in range(n+1):\n            if x + y == n:\n                count += 1\n    return count\n\n# Output\nnum_solutions(3)\n# 6", "task_id": 8618}
{"finetuning_prompt": "\"\"\"\nGenerate a code to implement a given algorithm to calculate the Fibonacci sequence.\n\"\"\"\n\ndef fibonacci_seq(n):\n", "finetuning_completion": " \r\n      \r\n    fib_list = [0, 1] \r\n      \r\n    for num in range(2, n): \r\n        fib_list.append(fib_list[num-1] + fib_list[num-2]) \r\n    return fib_list[:n]", "task_id": 8619}
{"finetuning_prompt": "\"\"\"\nDevelop a program to check whether an integer is an even number or odd number.\n\"\"\"\n\ndef check_even_odd(number):\n", "finetuning_completion": "\r\n  if number % 2 == 0: \r\n    return \"Even\"\r\n  else: \r\n    return \"Odd\"", "task_id": 8636}
{"finetuning_prompt": "\"\"\"\nCreate a classification algorithm to identify a species of a given flower.\n\"\"\"\n\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\ndef flower_classifier(X_train, y_train):\n", "finetuning_completion": " \r\n    forest = RandomForestClassifier(n_estimators = 1000, random_state = 1) \r\n    forest.fit(X_train, y_train)\r\n    return forest", "task_id": 8644}
{"finetuning_prompt": "\"\"\"\nDesign a function to print out the natural numbers up to the nth term (included).\n\"\"\"\n\ndef print_naturals(n):\n", "finetuning_completion": " \r\n    for num in range(1, n+1): \r\n        print(num, end = \" \")", "task_id": 8646}
{"finetuning_prompt": "\"\"\"\nWrite a python function to decode a base64-encoded string.\n\"\"\"\n\nimport base64\n\ndef decode_str(encoded_str):\n", "finetuning_completion": "\n    decoded_str = base64.b64decode(encoded_str).decode()\n    return decoded_str\n\nencoded_str = \"S2FtcGFvIGlzIGEgZ3JlYXQgZGF5IHRvIGxlYXJuIGNvZGU=\"\ndecoded_str = decode_str(encoded_str)\nprint(decoded_str) # Kampan is a great day to learn code", "task_id": 8650}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the closest pair of points from a given set of points that meet the Euclidean Distance criteria.\n\"\"\"\n\nfrom math import sqrt \r\ndef closestPair(points):\n", "finetuning_completion": " \r\n\tdMin = float(\"inf\") \r\n\tpointsLength = len(points) \r\n\tfor i in range(pointsLength - 1): \r\n\t\tfor j in range(i+1, pointsLength): \r\n\t\t\tx1, y1, z1 = points[i] \r\n\t\t\tx2, y2, z2 = points[j] \r\n\t\t\td = (x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2\r\n\t\t\td = sqrt(d)\n\t\t\tif d < dMin: \r\n\t\t\t\tdMin = d \n\t\t\t\tp1, p2 = points[i], points[j] \r\n\treturn p1, p2", "task_id": 8652}
{"finetuning_prompt": "\"\"\"\nWrite a function to raise a number to a given power.\n\"\"\"\n\ndef power(num, exp):\n", "finetuning_completion": " \r\n  \r\n    res = num**exp \r\n  \r\n    return res", "task_id": 8661}
{"finetuning_prompt": "\"\"\"\nGenerate a system for evaluating the performance of an automated stock trading program.\n\"\"\"\n\nimport numpy as np\n\ndef performance_evaluation(y_true, y_pred):\n", "finetuning_completion": "\n    \"\"\"\n    Returns the accuracy, precision, recall and F1 scores of a given prediction,\n    compared to the true values.  \n    Parameters\n    ----------\n    y_true (ndarray): true values.\n    y_pred (ndarray): model predictions.\n    \n    Returns \n    -------\n    scores (float): accuracy, precision, recall and F1 scores\n    \"\"\"\n    true_positives = np.sum(np.logical_and(y_true == 1, y_pred == 1))\n    false_positives = np.sum(np.logical_and(y_true == 0, y_pred == 1))\n    false_negatives = np.sum(np.logical_and(y_true == 1, y_pred == 0))\n    true_negatives = np.sum(np.logical_and(y_true == 0, y_pred == 0))\n    \n    accuracy = (true_positives + true_negatives) / float(y_true.size)\n    precision = true_positives / float(true_positives + false_positives)\n    recall = true_positives / float(true_positives + false_negatives)\n    f1_score = 2 * true_positives / float(2 * true_positives + false_positives + false_negatives)\n    \n    scores = {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1_score': f1_score\n    }\n    return scores", "task_id": 8663}
{"finetuning_prompt": "\"\"\"\nGenerate a python program that can generate all prime numbers between two integers.\n\"\"\"\n\ndef prime_number_generator(a, b):\n", "finetuning_completion": "\r\n    prime_numbers = []\r\n    for num in range(a, b + 1):\r\n        if num > 1:\r\n            for i in range(2, num):\r\n                if (num % i) == 0:\r\n                    break\r\n            else:\r\n                prime_numbers.append(num)\r\n    return prime_numbers", "task_id": 8669}
{"finetuning_prompt": "\"\"\"\nDesign a function to aggregate elements of a list using a given function.\n\"\"\"\n\ndef aggregate_List(list, func):\n", "finetuning_completion": "\r\n    result = list[0]\r\n    for i in range(1, len(list)):\r\n        result = func(result, list[i])\r\n    return result", "task_id": 8686}
{"finetuning_prompt": "\"\"\"\nCreate a function to extract the items from a dictionary whose key contains the given string.\n\"\"\"\n\ndef get_items(my_dict, string):\n", "finetuning_completion": " \r\n    result_dict = {k: v for k,v in my_dict.items() if string in k}\r\n    return result_dict", "task_id": 8688}
{"finetuning_prompt": "\"\"\"\nWrite a function to search a string for a given pattern and return the number of times it appears.\n\"\"\"\n\ndef string_pattern_count(string, pattern):\n", "finetuning_completion": " \r\n    count = 0\r\n  \r\n    for i in range(len(string)): \r\n        if string[i:i + len(pattern)] == pattern: \r\n            count = count + 1\r\n    return count", "task_id": 8692}
{"finetuning_prompt": "\"\"\"\nCode a function that takes an integer n as an input and returns the nth Fibonacci number.\n\"\"\"\n\ndef Fibonacci(n):\n", "finetuning_completion": " \r\n    if n < 0: \r\n        print(\"Incorrect input\")  \r\n    elif n == 0 or n == 1: \r\n        return n \r\n    else: \r\n        return Fibonacci(n - 1) + Fibonacci(n - 2)", "task_id": 8693}
{"finetuning_prompt": "\"\"\"\nWrite a function to classify a given input array into odd and even numbers.\n\"\"\"\n\ndef classify_odd_even(array):\n", "finetuning_completion": "\r\n    result = {\"odd\": [], \"even\": []} \r\n    for value in array: \r\n        if value % 2 == 0: \r\n            result[\"even\"].append(value) \r\n        else: \r\n            result[\"odd\"].append(value) \r\n    return result", "task_id": 8697}
{"finetuning_prompt": "\"\"\"\nOptimize the following python code to improve the time complexity of the algorithm.\n\"\"\"\n\ndef find_Element(A, target):\n", "finetuning_completion": "\n    low = 0\n    high = len(A) - 1\n\n    while(low <= high):\n        mid = (low + high)//2\n        if(A[mid] == target):\n            return mid\n        elif(A[mid] > target):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1", "task_id": 8699}
{"finetuning_prompt": "\"\"\"\nWrite a python function to determine the sum of all the multiples of two number (x,y) within a specified range.\n\"\"\"\n\ndef multiple_sum(lower_limit, upper_limit, x, y):\n", "finetuning_completion": "\r\n  sum = 0\r\n  while lower_limit < upper_limit:\r\n    if lower_limit % x == 0 or lower_limit % y == 0:\r\n      sum += lower_limit\r\n    lower_limit += 1\r\n  return sum", "task_id": 8709}
{"finetuning_prompt": "\"\"\"\nGenerate a python program to edit a given string to remove all spaces and special characters.\n\"\"\"\n\ndef remove_space_and_special_character(str):\n", "finetuning_completion": " \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isalnum(): \n            res += str[i] \n    return res", "task_id": 8713}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to generate a list that contains the set of prime factors of a given number\n\"\"\"\n\ndef primeFactors(n):\n", "finetuning_completion": " \r\n    primeFactorsList = []\r\n    for i in range(2, n + 1): \r\n        while n % i == 0: \r\n            primeFactorsList.append(i) \r\n            n = n / i \r\n    return primeFactorsList\n\nresult = primeFactors(77) \r\nprint(result) #[7, 11]", "task_id": 8714}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to find the number of Fibonacci numbers that are less than given number.\n\"\"\"\n\ndef fibonaccinumbers(num):\n", "finetuning_completion": " \r\n    i = 1\r\n    fibonacci_list = [1]  \r\n    currentNumber = 1\r\n    while currentNumber < num:\r\n        nextNumber = currentNumber + i\r\n        fibonacci_list.append(nextNumber)  \r\n        currentNumber = i\r\n        i = nextNumber \r\n    return len(fibonacci_list) \r\n\r\nresult = fibonaccinumbers(500)\r\nprint(result) #12", "task_id": 8715}
{"finetuning_prompt": "\"\"\"\nWrite a function which takes a given string and number as input, and convert lower-case characters to upper-case.\n\"\"\"\n\ntest_num = 4\n\ndef convert_upper_case(test_string,test_num):\n", "finetuning_completion": "\r\n    res = \"\" \r\n    for i in range(0,len(test_string)): \r\n        char = test_string[i] \r\n        if i % test_num == 0: \r\n            res += char.upper() \r\n        else: \r\n            res += char \r\n    return res", "task_id": 8721}
{"finetuning_prompt": "\"\"\"\nDevelop a python code to normalize a given list.\n\"\"\"\n\ndef normalize(nums):\n", "finetuning_completion": " \n    normalized_list=[]\n    min_value = min(nums) \n    max_value = max(nums) \n    for num in nums: \n        normalized_list.append(float(num - min_value) / float(max_value - min_value)) \n    return normalized_list", "task_id": 8727}
{"finetuning_prompt": "\"\"\"\nGenerate code to sum all the unique elements in a given array.\n\"\"\"\n\ndef sumUnique(arr, n):\n", "finetuning_completion": " \r\n    sum = 0\r\n    s = set() \r\n  \r\n    for i in range(n): \r\n        if arr[i] not in s: \r\n            sum += arr[i] \r\n            s.add(arr[i]) \r\n  \r\n    return sum", "task_id": 8731}
{"finetuning_prompt": "\"\"\"\nCraft a program to convert a given data into JSON format\n\"\"\"\n\nimport json\r\n\r\n# Format data into JSON format\r\ndef convert_JSON(sample_data):\n", "finetuning_completion": " \r\n\treturn json.dumps(sample_data)", "task_id": 8738}
{"finetuning_prompt": "\"\"\"\nCompose a program to input an array and remove duplicate elements\n\"\"\"\n\ndef remove_duplicates(sample_arr):\n", "finetuning_completion": " \r\n\tcopy_arr = [] \r\n\tfor i in sample_arr: \r\n\t\tif i not in copy_arr: \r\n\t\t\tcopy_arr.append(i) \r\n\treturn copy_arr", "task_id": 8739}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the words with the maximum length\n\"\"\"\n\ndef max_length(sample_words):\n", "finetuning_completion": " \r\n\tmax_length = len(max(sample_words, key = len)) \r\n\twords = [] \r\n\tfor i in sample_words: \r\n\t\tif len(i) == max_length: \r\n\t\t\twords.append(i) \r\n\treturn words", "task_id": 8740}
{"finetuning_prompt": "\"\"\"\nCreate a method to check whether a string contains only alphabetical characters.\n\"\"\"\n\ndef is_alphabetical(text):\n", "finetuning_completion": " \r\n\tstring = text.replace(\" \", \"\")\r\n\treturn string.isalpha()", "task_id": 8744}
{"finetuning_prompt": "\"\"\"\nOptimize a given function to improve the performance by at least 25%.\n\"\"\"\n\ndef function_opti(n):\n", "finetuning_completion": " \n  result = 0 \n  for i in range(n//2): \n    result += (n + 2) ** 2\n  for i in range(n//2, n): \n    result += (n + 1) ** 2\n    \n  return result", "task_id": 8752}
{"finetuning_prompt": "\"\"\"\nGenerate a Python script that, given any number greater than 0 and a length, prints ascending palindromic numbers between the given number and the given length.\n\"\"\"\n\ndef generate_palindromes(start, length):\n", "finetuning_completion": " \n  result = [] \n  while start <= length: \n    temp1 = str(start) \n    temp2 = temp1[-1::-1] \n    if temp1 == temp2: \n      result.append(temp1) \n    start += 1 \n  \n  return result", "task_id": 8757}
{"finetuning_prompt": "\"\"\"\nGiven a matrix, write a function to rotate it in clockwise direction.\n\"\"\"\n\ndef rotate_Matrix(matrix):\n", "finetuning_completion": " \r\n    temp_matrix = [[0 for y in range(len(matrix))] \r\n               for x in range(len(matrix))] \r\n  \r\n    for i in range(len(matrix)): \r\n        for j in range(len(matrix)): \r\n            temp_matrix[j][len(matrix)-1-i] = matrix[i][j] \r\n  \r\n    for i in range(len(matrix)): \r\n        for j in range(len(matrix)): \r\n            matrix[i][j] = temp_matrix[i][j] \r\n  \r\n    return matrix", "task_id": 8765}
{"finetuning_prompt": "\"\"\"\nCreate a function to create a new directory in the given path with the given name.\n\"\"\"\n\nimport os \ndef create_dir(path, dir_name):\n", "finetuning_completion": " \n\t# add the directory to the path \n\tnew_dir_path = os.path.join(path, dir_name) \n\ttry: \n\t\t# Create the target directory (if necessary) \n\t\tos.makedirs(new_dir_path) \n\t\tprint('Created directory', dir_name) \n\texcept OSError: \n\t\tprint('Failed to create directory')", "task_id": 8769}
{"finetuning_prompt": "\"\"\"\nCreate a function to compress a given string by replacing the repeated characters by its count.\n\"\"\"\n\ndef compressString(string):\n", "finetuning_completion": " \n    current_char = string[0] \n    current_count = 0\n    \n    compressed_string = \"\" \n  \n    for ch in string: \n        if (ch == current_char): \n            current_count += 1\n        else: \n            compressed_string += current_char + str(current_count) \n            current_char = ch \n            current_count = 1\n    compressed_string += current_char + str(current_count) \n  \n    return compressed_string", "task_id": 8770}
{"finetuning_prompt": "\"\"\"\nGenerate a function to find all pairs of numbers in a list that add up to a given sum.\n\"\"\"\n\ndef getPairs(arr, sum):\n", "finetuning_completion": " \n    pairs = [] \n\n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == sum: \n               pairs.append((arr[i], arr[j])) \n\n    return pairs", "task_id": 8778}
{"finetuning_prompt": "\"\"\"\nProduce an algorithm to reverse the elements of an array of numbers.\n\"\"\"\n\ndef reverse_array(arr):\n", "finetuning_completion": "\r\n    l = len(arr)-1\r\n    r = l\r\n    while l >= 0:\r\n        arr.append(arr[l])\r\n        del arr[l]\r\n        l -= 1\r\n    return arr", "task_id": 8782}
{"finetuning_prompt": "\"\"\"\nWrite a python program to check if the elements of a given array are from a geometric sequence or not.\n\"\"\"\n\ndef isGeometricSequence(arr):\n", "finetuning_completion": " \r\n    ratio = arr[1] / arr[0] \r\n  \r\n    for i in range(1, len(arr) - 1): \r\n        if (arr[i + 1] / arr[i] != ratio): \r\n            return False\r\n              \r\n    return True", "task_id": 8793}
{"finetuning_prompt": "\"\"\"\nWrite a python function to check if given numbers are Best Buy Numbers or not.\n\"\"\"\n\ndef BestBuyNumber(arr):\n", "finetuning_completion": " \r\n      \r\n    # checking all elements to check if \r\n    # they can be expressed as a perfect \r\n    # square multiplied by a perfect cube \r\n    for el in arr: \r\n        for i in range(1, el): \r\n            if (i * i * i) == el: \r\n                return True\r\n          \r\n    return False", "task_id": 8794}
{"finetuning_prompt": "\"\"\"\nWrite a python program to find the smallest common multiple of an array of numbers.\n\"\"\"\n\ndef smallest_Common_Multiple(arr):\n", "finetuning_completion": " \r\n    \r\n    # find the range of given array \r\n    l = max(arr) \r\n  \r\n    # store maximum multiple of array \r\n    maxm = l \r\n    while(True): \r\n        # check if maxm is divisible by all element \r\n        # in the array or not \r\n        flag =1\r\n        for i in range(len(arr)): \r\n            if maxm % arr[i] != 0: \r\n                flag = 0\r\n                break\r\n        if flag == 1: \r\n            return maxm \r\n        maxm += l", "task_id": 8803}
{"finetuning_prompt": "\"\"\"\nWrite a python function to create a new array with unique values from two given arrays.\n\"\"\"\n\ndef unique_Elements(arr1, arr2):\n", "finetuning_completion": " \r\n    # creating the dictionary with elements of array1 as keys \r\n    # and values = 0 \r\n    dict = {} \r\n    for x in arr1: \r\n        if x not in dict.keys(): \r\n            dict[x] = 0\r\n            \r\n    # extracting all the keys from array2 \r\n    # and merging them with the keys of the dictionary \r\n    for x in arr2: \r\n        if x not in dict.keys(): \r\n            dict[x] = 0\r\n        else : \r\n            dict[x] += 1\r\n            \r\n    # creating a new array with the elements of  \r\n    # array which are unique \r\n    unique_array = [x for x in dict.keys() if dict[x] == 0] \r\n  \r\n    return unique_array", "task_id": 8805}
{"finetuning_prompt": "\"\"\"\nCreate a function to detect the common elements between two sets.\n\"\"\"\n\ndef common_Elements(arr1, arr2):\n", "finetuning_completion": " \r\n    common_arr = [] \r\n    for i in arr1: \r\n        if i in arr2: \r\n            common_arr.append(i) \r\n  \r\n    return common_arr", "task_id": 8806}
{"finetuning_prompt": "\"\"\"\nWrite a function to compute a moving average of the last N numbers.\n\"\"\"\n\ndef moving_average(lst, N):\n", "finetuning_completion": "\n  sums = [sum(lst[i:i+N])/N for i in range(len(lst)-N+1)]\n  return sums", "task_id": 8810}
{"finetuning_prompt": "\"\"\"\nWrite a function to reshape a given matrix into a new matrix with a given dimension.\n\"\"\"\n\ndef reshape_matrix(matrix, rows, columns):\n", "finetuning_completion": "\n    reshaped = []\n    row_buffer = []\n    count = 0\n    \n    for row in matrix:\n        for item in row:\n            row_buffer.append(item)\n            count += 1\n            if count == columns:\n                reshaped.append(row_buffer)\n                row_buffer = []\n                count = 0\n    \n    return reshaped", "task_id": 8814}
{"finetuning_prompt": "\"\"\"\nCreate a function to print a tree-style representation of a given dictionary.\n\"\"\"\n\ndef print_dict_tree(data, level=0):\n", "finetuning_completion": "\n    for key, value in data.items():\n        print('\\t' * level + str(key))\n        if isinstance(value, dict):\n            print_dict_tree(value, level + 1)\n        else:\n            print('\\t'*(level+1) + str(value))", "task_id": 8815}
{"finetuning_prompt": "\"\"\"\nWrite a python program to generate an array of all possible permutations.\n\"\"\"\n\ndef permute(data):\n", "finetuning_completion": " \r\n    if len(data) == 0: \r\n        return [] \r\n    if len(data) == 1: \r\n        return [data] \r\n    permute_list = [] \r\n    for i in range(len(data)): \r\n       a = data[i] \r\n       remaining_elements = data[:i] + data[i+1:] \r\n       for p in permute(remaining_elements): \r\n           permute_list.append([a] + p) \r\n    return permute_list \r\n  \r\nlist = [1,2,3] \r\nprint(permute(list))", "task_id": 8823}
{"finetuning_prompt": "\"\"\"\nDesign a python script to calculate the weekly average temperature from weather data.\n\"\"\"\n\ndef weekly_average_temperature(weather_data):\n", "finetuning_completion": " \n\tavg = sum(weather_data, 0.0) / len(weather_data)\n\treturn avg", "task_id": 8833}
{"finetuning_prompt": "\"\"\"\nCreate a program to encrypt the given text using a number given as key.\n\"\"\"\n\ndef encrypt(text, key):\n", "finetuning_completion": "\r\n    ciphertext = \"\"\r\n    for character in text:\r\n        if character.islower():\r\n            ciphertext += chr((ord(character) - 97 + key) % 26 + 97)\r\n        elif character.isupper():\r\n            ciphertext += chr((ord(character) - 65 + key) % 26 + 65)\r\n        else:\r\n            ciphertext += character\r\n    return ciphertext\r\n  \r\n# Driver program \r\ntext = 'Hello world'\r\nkey = 2\r\n\r\n# Encryption \r\nprint(\"Encrypted Text :\", encrypt(text, key))", "task_id": 8834}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to convert decimal to binary, arbitrary base to decimal and vice-versa.\n\"\"\"\n\ndef dec_base(num, base):\n", "finetuning_completion": " \r\n    res = ''   \r\n    while num > 0: \r\n        res = str((num % base)) +res \r\n        num = num // base \r\n          \r\n    return res  \r\n  \r\ndef binary_dec(binary):  \r\n    binary1 = binary \r\n    decimal, i = 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal) \r\n\r\nprint(binary_dec(11)) \r\nprint(dec_base(16, 4))", "task_id": 8838}
{"finetuning_prompt": "\"\"\"\nGenerate a function in Python that takes in two parameters, a list and a string of characters, and returns a new list with elements from the original list that do not contain any of the characters in the string.\n\"\"\"\n\ndef string_strip(mylist, chars):\n", "finetuning_completion": "\n    new_lst = [s for s in mylist if not any(char in s for char in chars)]\n    return new_lst", "task_id": 8840}
{"finetuning_prompt": "\"\"\"\nCreate a program to replace a character in a given string at a specific position.\n\"\"\"\n\ndef replaceCharacter(str, position, character):\n", "finetuning_completion": " \r\n    new_str = \"\"\r\n    for i, ch in enumerate(str):\r\n        if i == position-1:\r\n            new_str += character\r\n        else:\r\n            new_str += ch\r\n    return new_str", "task_id": 8848}
{"finetuning_prompt": "\"\"\"\nGenerate a code to replace every vowel in a given string with the next letter in the alphabet.\n\"\"\"\n\ndef replaceVowels(str):\n", "finetuning_completion": " \r\n   vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"] \r\n   new_str = \"\" \r\n   for char in str: \r\n       if char in vowels: \r\n           if char=='u': \r\n               char='a' \r\n           else: \r\n               char = chr(ord(char)+1) \r\n       new_str = new_str+char \r\n   return new_str", "task_id": 8849}
{"finetuning_prompt": "\"\"\"\nWrite a code to compare two strings of integer values and find out the smaller one using a loop.\n\"\"\"\n\ndef smaller_string(string1, string2):\n", "finetuning_completion": "\n    size = min(len(string1), len(string2))\n    for i in range(size):\n        if int(string1[i]) < int(string2[i]):\n            return string1\n        elif int(string2[i]) < int(string1[i]):\n            return string2\n    if len(string1) < len(string2):\n        return string1\n    elif len(string2) < len(string1):\n        return string2", "task_id": 8859}
{"finetuning_prompt": "\"\"\"\nCreate a function to print the first 15 odd numbers.\n\"\"\"\n\ndef print_odd_numbers(limit):\n", "finetuning_completion": " \r\n    for i in range(1, limit + 1): \n        if i % 2 != 0: \r\n            print(i, end = \" \")", "task_id": 8865}
{"finetuning_prompt": "\"\"\"\nWrite a python script to fill missing values with the mean of their corresponding columns.\n\"\"\"\n\ndef fill_missing_values(arr, n, m):\n", "finetuning_completion": " \r\n\tmean_val = 0\r\n\t\r\n\tfor i in range(m): \r\n\t\tsum = 0\r\n\t\tnum_elem = 0\r\n\t\tfor j in range(n): \r\n\t\t\tif arr[j][i] != -1: \r\n\t\t\t\tsum += arr[j][i] \r\n\t\t\t\tnum_elem += 1\r\n\t\tmean_val = float(sum/num_elem) \r\n\t\t\r\n\t\tfor j in range(n): \r\n\t\t\tif arr[j][i] == -1: \r\n\t\t\t\tarr[j][i] = mean_val\r\n\treturn arr", "task_id": 8871}
{"finetuning_prompt": "\"\"\"\nProvide a code snippet to find a specified number in a 2D array.\n\"\"\"\n\ndef findNo(arr, no):\n", "finetuning_completion": " \r\n\tfor row in range(0, len(arr)): \r\n\t\tfor column in range(0, len(arr[row])): \r\n\t\t\tif arr[row][column] == no: \r\n\t\t\t\treturn True; \r\n\treturn False;", "task_id": 8885}
{"finetuning_prompt": "\"\"\"\nWrite a code that takes a list of strings and turns it into a comma-separated string.\n\"\"\"\n\ndef listToString(s):\n", "finetuning_completion": "  \n    \n    # initialize an empty string \n    str1 = \"\"  \n    \n    # loop through the list elements \n    for ele in s:  \n        str1 += ele + ', ' \n    \n    # return string \n    return str1[:len(str1)-2]", "task_id": 8895}
{"finetuning_prompt": "\"\"\"\nCreate a python script to split a given string into substrings based on a specific character.\n\"\"\"\n\ndef split_String(string, split_char):\n", "finetuning_completion": " \n    return [char for char in string.split(split_char)]", "task_id": 8898}
{"finetuning_prompt": "\"\"\"\nDesign a function to determine the last occurrence of an element in a given list of numbers.\n\"\"\"\n\ndef lastOccur(lst, n):\n", "finetuning_completion": " \n  \n    last_index = -1 \n  \n    for i in range(len(lst)): \n        if lst[i] == n: \n            last_index = i \n  \n    return last_index\n\nlist1 = [2, 4, 6, 6, 8]\nn=6\n\nprint(lastOccur(list1, n))", "task_id": 8901}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate an arithmetic sequence.\n\"\"\"\n\ndef arithmetic_sequence(first_num,diff,num_terms):\n", "finetuning_completion": " \r\n  result = [] \r\n  term = first_num \r\n  for i in range(num_terms): \r\n    result.append(term) \r\n    term = term + diff \r\n  return result\r\n  \r\n# Output: [4, 6, 8, 10, 12]", "task_id": 8905}
{"finetuning_prompt": "\"\"\"\nCreate a function to clear all characters in a string except for letters and numbers.\n\"\"\"\n\nimport re \n  \n# Function to clear special characters except alphabets and numbers  \ndef clear_special_characters(str):\n", "finetuning_completion": " \n  \n    # All patterns of a special character \n    regex = re.compile('[@_!#%>$<\u2022\u00a3|=+\u2014\"^]')  \n  \n    # Replace the special character with nothing \n    str = regex.sub(\"\", str)  \n  \n    return str \n  \n# Driver program \nif __name__ == '__main__': \n    str = \"#@!() __ Data Science is #awesome?\"\n    result = clear_special_characters(str)  \n  \n    print(result)", "task_id": 8910}
{"finetuning_prompt": "\"\"\"\nProvide code to find unique elements in a large array.\n\"\"\"\n\ndef find_unique_elements(arr):\n", "finetuning_completion": " \r\n    counter = {} \r\n    for i in range(len(arr)): \r\n        if arr[i] in counter: \r\n            counter[arr[i]] += 1\r\n        else: \r\n            counter[arr[i]] = 1\r\n    unique_elements = [] \r\n    for key, value in counter.items(): \r\n        if value == 1: \r\n            unique_elements.append(key) \r\n    return unique_elements", "task_id": 8919}
{"finetuning_prompt": "\"\"\"\nWrite a function to compress the given list into a dictionary where the key is the element and the value is the count.\n\"\"\"\n\ndef compress(list):\n", "finetuning_completion": "\n  result = {}\n  for i in list:\n    if i in result:\n      result[i] += 1\n    else:\n      result[i] = 1\n  return (result)", "task_id": 8926}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to find the size of a minimum subset whose sum is greater than or equal to the given sum.\n\"\"\"\n\ndef minSubsetSum(arr, n, sum):\n", "finetuning_completion": " \r\n\r\n\t# Return minimum length subset \r\n\td = [[True for i in range(sum + 1)] \r\n\t\t\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(1, n + 1): \r\n\t\td[i][0] = True\r\n\r\n\tfor i in range(1, sum + 1): \r\n\t\td[0][i] = False\r\n\r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, sum + 1): \r\n\t\t\tif j < arr[i - 1]: \r\n\t\t\t\td[i][j] = d[i - 1][j] \r\n\t\t\tif j >= arr[i - 1]: \r\n\t\t\t\td[i][j] = (d[i - 1][j] or \r\n\t\t\t\t\t\t\td[i - 1][j - arr[i - 1]]) \r\n\r\n\tfor i in range(sum, -1, -1): \r\n\t\tif d[n][i] == True: \r\n\t\t\treturn i \r\n\treturn 0", "task_id": 8932}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm which takes two strings as input and check whether these two strings are anagrams or not.\n\"\"\"\n\ndef checkAnagram(str1, str2):\n", "finetuning_completion": "           \r\n  \r\n\t# convert the words into lists  \r\n\tlist_str1 = list(str1.replace(\" \", \"\"))  \r\n\tlist_str2 = list(str2.replace(\" \", \"\"))  \r\n\t  \r\n\t# sort the individual lists  \r\n\tlist_str1.sort()  \r\n\tlist_str2.sort()  \r\n\t  \r\n\t# check whether same number of characters are present  \r\n\tif(len(list_str1) != len(list_str2)):  \r\n\t\treturn False  \r\n\t  \r\n\t# check whether each characters of both lists match  \r\n\tfor i in range(0, len(list_str1)):  \r\n\t\tif(list_str1[i] != list_str2[i]):  \r\n\t\t\treturn False  \r\n\treturn True", "task_id": 8933}
{"finetuning_prompt": "\"\"\"\nGenerate an algorithm to replace all spaces in a given string with a '%20'.\n\"\"\"\n\ndef replaceSpace(str):\n", "finetuning_completion": " \r\n\treturn str.replace(' ', '%20')", "task_id": 8934}
{"finetuning_prompt": "\"\"\"\nGenerate a simple Python program for comparing two strings and printing the result.\n\"\"\"\n\ndef compare_string(str_1, str_2):\n", "finetuning_completion": "\r\n    if str_1 == str_2:\r\n        print('Strings are equal')\r\n    else:\r\n        print('Strings are not equal')", "task_id": 8936}
{"finetuning_prompt": "\"\"\"\nDesign a function that takes two numbers and prints the greatest one.\n\"\"\"\n\ndef Max(a, b):\n", "finetuning_completion": " \r\n    if (a>b) : \r\n        print(\"A is greater:\", a) \r\n    else :\r\n        print(\"B is greater:\", b)", "task_id": 8941}
{"finetuning_prompt": "\"\"\"\nWrite a python code to multiply a matrix and a vector elementwise.\n\"\"\"\n\ndef mul(A,V):\n", "finetuning_completion": " \n\tresult = []\n\tfor row in A:\n\t\trow_result = 0\n\t\tfor v, col in zip(V,row):\n\t\t    row_result += v*col\n\t\tresult.append(row_result)\n\treturn result", "task_id": 8945}
{"finetuning_prompt": "\"\"\"\nDesign a function to verify whether a given input is a palindrome string or not.\n\"\"\"\n\ndef isPalindrome(str):\n", "finetuning_completion": " \n    return str == str[::-1]", "task_id": 8947}
{"finetuning_prompt": "\"\"\"\nCreate a program to generate and sum the numbers in Fibonacci sequence for given length.\n\"\"\"\n\ndef generate_fibonacci(length):\n", "finetuning_completion": "\n  fibonacci_sequence = [1, 1]\r\n\r\n  while len(fibonacci_sequence) < length:\r\n    fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2])\r\n\r\n  return fibonacci_sequence\r\n\r\ndef calculate_sum(fibonacci_sequence):\r\n  return sum(fibonacci_sequence)", "task_id": 8953}
{"finetuning_prompt": "\"\"\"\nWrite a function playing a game of 1024 using a 2D array as 10\u00d710 boards.\n\"\"\"\n\ndef play_1024(board):\n", "finetuning_completion": "\r\n    # check if any of the rows is filled with the value 1024\r\n    for row in range(len(board)):\r\n        for col in range(len(board[0])):\r\n            # check the row values for 1024\r\n            if (sum(board[row]) == 1024): \r\n                return True\r\n\r\n            # check the column values for 1024\r\n            tmp = 0\r\n            for row1 in range(len(board)):\r\n                tmp += board[row1][col]\r\n            if (tmp == 1024): \r\n                return True\r\n    return False", "task_id": 8959}
{"finetuning_prompt": "\"\"\"\nWrite a function which returns the differences between two integers.\n\"\"\"\n\ndef diff_int(a,b):\n", "finetuning_completion": "\r\n    return (b-a)", "task_id": 8963}
{"finetuning_prompt": "\"\"\"\nDesign a computer program that stores a list of course names and the amount of credits for each course\n\"\"\"\n\ndef store_course(course_list):\n", "finetuning_completion": " \n    course_dict = {}\n    for course in course_list: \n        course_name, credits = course.split('-')\n        course_dict[course_name] = credits\n    return course_dict", "task_id": 8991}
{"finetuning_prompt": "\"\"\"\nWrite a python program that takes an integer as input and prints out \"Number is EVEN.\" if the number is divisible by 2\n\"\"\"\n\ndef even_number(number):\n", "finetuning_completion": "\r\n  if (number % 2 == 0):\r\n    print(\"Number is EVEN.\")", "task_id": 8993}
{"finetuning_prompt": "\"\"\"\nWrite a python program to edit the string by capitalizing the words but preserve single quotes\n\"\"\"\n\ndef edit_string(test_str):\n", "finetuning_completion": " \r\n    temp = test_str.split(' ') \r\n    tmp = [word[0].upper() + word[1:] for word in temp] \r\n    res = ' '.join(tmp) \r\n    res = res.replace('\\'', '\\'', 2) \n    return (res)", "task_id": 8996}
{"finetuning_prompt": "\"\"\"\nConstruct an algorithm to search an element in an unsorted array.\n\"\"\"\n\ndef search(arr, target):\n", "finetuning_completion": " \r\n  \r\n    for i in range(len(arr)): \r\n  \r\n        if arr[i] == target: \r\n            return i \r\n  \r\n    return -1\r\n  \r\n# Test array \r\narr = [7, 4, 6, 8, 10] \r\ntarget = 10\r\n  \r\n# Function call \r\nresult = search(arr, target) \r\n  \r\nif (result == -1): \r\n    print(\"Target not found\") \r\nelse: \r\n    print(\"Target found at index: \", result)", "task_id": 8997}
{"finetuning_prompt": "\"\"\"\nGenerate a prime number list from 2 to a given number.\n\"\"\"\n\ndef sieveOfEratosthenes(n):\n", "finetuning_completion": " \r\n  \r\n    # Create a boolean array \"prime[0..n]\" and initialize \r\n    # all entries it as true. A value in prime[i] will \r\n    # finally be false if i is Not a prime, else true. \r\n    prime = [True for i in range(n + 1)] \r\n    p = 2\r\n    while (p * p <= n): \r\n          \r\n        # If prime[p] is not changed, then it is a prime \r\n        if (prime[p] == True): \r\n              \r\n            # Update all multiples of p \r\n            for i in range(p * 2, n + 1, p): \r\n                prime[i] = False\r\n        p += 1\r\n    ls = []\r\n    for p in range(2, n+1): \r\n        if prime[p]: \r\n            ls.append(p)\r\n                  \r\n    return ls\n  \n# Driver program \r\nn = 30\r\nprint(sieveOfEratosthenes(n))", "task_id": 9022}
{"finetuning_prompt": "\"\"\"\nFind the longest common substring in two provided strings.\n\"\"\"\n\ndef longestCommonSubstring(str1, str2):\n", "finetuning_completion": " \n    l1 = len(str1) \n    l2 = len(str2) \n  \n    table = [[0 for i in range(l2+1)] for j in range(l1+1)]\n  \n    for i in range(l1+1): \n        for j in range(l2+1): \n  \n            if(i == 0 or j == 0): \n                table[i][j] == 0\n  \n            elif str1[i-1] == str2[j-1]: \n                table[i][j] = table[i-1][j-1]+1\n            else: \n                table[i][j] = 0\n    maximum = 0\n  \n    for i in range(l1+1): \n        for j in range(l2+1): \n            if (maximum <table[i][j]): \n                maximum = table[i][j] \n  \n    return maximum", "task_id": 9029}
{"finetuning_prompt": "\"\"\"\nGenerate a python code to edit a given string by replacing all 'a's with 'b's and 'b's with 'a's.\n\"\"\"\n\ndef ab_replace(string):\n", "finetuning_completion": "\n  new_string = \"\"\n  for x in string:\n    if x == 'a':\n      new_string += 'b'\n    elif x == 'b':\n      new_string += 'a'\n    else:\n      new_string += x\n  return new_string", "task_id": 9038}
{"finetuning_prompt": "\"\"\"\nGenerate a code to create a vector of length n, where each element is the value of x^2 at that index in the vector.\n\"\"\"\n\nimport numpy as np\r\ndef create_vector(n):\n", "finetuning_completion": "\r\n  x = np.arange(n)\r\n  y = x**2\r\n  return y", "task_id": 9045}
{"finetuning_prompt": "\"\"\"\nWrite a function to create a set of characters which are common in all the strings of a given list.\n\"\"\"\n\ndef common_char(my_list):\n", "finetuning_completion": " \r\n    chars_set = set(my_list[0]) \r\n    for s in my_list[1:]: \r\n        chars_set.intersection_update(set(s)) \r\n    return chars_set", "task_id": 9054}
{"finetuning_prompt": "\"\"\"\nGenerate a program to read elements from a given list and store them in a dictionary as key-value pairs.\n\"\"\"\n\ndef list_to_dict(test_list):\n", "finetuning_completion": " \n    result_dict = {} \r\n    for num in test_list: \r\n        result_dict[num] = num \r\n    return result_dict", "task_id": 9058}
{"finetuning_prompt": "\"\"\"\nWrite a code to generate a list of multiplications of two elements in a list.\n\"\"\"\n\ndef multiplication_list(list4):\n", "finetuning_completion": "\n  return [x*y for x in list4 for y in list4]", "task_id": 9060}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that can detect whether two strings are anagrams.\n\"\"\"\n\ndef is_anagram(input1, input2):\n", "finetuning_completion": "\r\n  if len(input1) != len(input2):\r\n    return False\r\n  character_window1 = dict()\r\n  character_window2 = dict()\r\n  \r\n  for i in range(len(input1)):\r\n    if input1[i] in character_window1:\r\n      character_window1[input1[i]] += 1\r\n    else:\r\n      character_window1[input1[i]] = 1\r\n  \r\n  for i in range(len(input2)):\r\n    if input2[i] in character_window2:\r\n      character_window2[input2[i]] += 1\r\n    else:\r\n      character_window2[input2[i]] = 1\r\n  \r\n  for char in character_window1:\r\n    if char not in character_window2 or character_window1[char] != character_window2[char]:\r\n      return False\r\n  \r\n  return True", "task_id": 9070}
{"finetuning_prompt": "\"\"\"\nDevelop an algorithm that returns the maximum value of a given list of numbers except for two specified indices.\n\"\"\"\n\ndef find_largest_val(list_of_numbers, except_index1, except_index2):\n", "finetuning_completion": "\n    max_val = float('-inf')\r\n    for i in range(len(list_of_numbers)):\r\n        if i == except_index1 or i == except_index2:\r\n            pass\r\n        else:\r\n            val = list_of_numbers[i]\r\n            if val > max_val:\r\n                max_val = val\r\n    return max_val", "task_id": 9071}
{"finetuning_prompt": "\"\"\"\nDevelop a code to check if all characters in a given string are same or not.\n\"\"\"\n\ndef check_string(string):\n", "finetuning_completion": "\n    if len(string) == 0:\n        return False \n        \n    for i in range(1,len(string)):\n        if string[i] != string[0]:\n            return False \n    return True", "task_id": 9075}
{"finetuning_prompt": "\"\"\"\nCreate a program to optimize a code by replacing expensive function calls with local variables.\n\"\"\"\n\ndef solve(a, b, c):\n", "finetuning_completion": "\n    x = a + 1\n    y = b + 1\n    z = x + c\n    return x, y, z", "task_id": 9076}
{"finetuning_prompt": "\"\"\"\nBuild an algorithm to existing array unique values without sorting.\n\"\"\"\n\ndef unique_values(arr):\n", "finetuning_completion": " \n  \n    unique_list = [] \n      \n    for x in arr: \n        if x not in unique_list: \n            unique_list.append(x) \n            \n    for x in unique_list: \n        print(x)", "task_id": 9077}
{"finetuning_prompt": "\"\"\"\nDesign a program to evaluate the number of trailing zeros in the given number\u2019s factorial.\n\"\"\"\n\ndef count_trailing_zeroes(n):\n", "finetuning_completion": " \r\n\tcount = 0\r\n\t# Keep dividing n by powers of  \r\n\t# 5 and update Count \r\n\ti=5\r\n\twhile (n/i>=1): \r\n\t\tcount += int(n/i) \r\n\t\ti *= 5\r\n\t  \r\n\treturn int(count)", "task_id": 9085}
{"finetuning_prompt": "\"\"\"\nGenerate a mapping from every character in a string to its corresponding index.\n\"\"\"\n\ndef mapping_string(string):\n", "finetuning_completion": "\r\n  result = {}\r\n  for i in range(len(string)):\r\n    result[string[i]] = i\r\n  return result", "task_id": 9086}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm to find all possible combinations of 3 numbers in a given array.\n\"\"\"\n\ndef combinations(arr):\n", "finetuning_completion": " \r\n\r\n\t# initialize an empty list \r\n\tcombs = [] \r\n\r\n\t# iterate over different elements \r\n\tfor i in range(len(arr)): \r\n\t\tfor j in range(i + 1, len(arr)): \r\n\t\t\tfor k in range(j + 1, len(arr)): \r\n\t\t\t\tres = [arr[i], arr[j], arr[k]] \r\n\t\t\t\tcombs.append(res) \r\n\treturn combs", "task_id": 9088}
{"finetuning_prompt": "\"\"\"\nWrite a python program to identify and classify upcoming number in a series of numbers.\n\"\"\"\n\ndef classifyNumber(series):\n", "finetuning_completion": "\r\n  next_num, even_odd =0 , \"\"\r\n  for i in range(0 , len(series)-1):\r\n    # check the sign of the number\r\n    if series[i]*series[i+1]<0:\r\n      if series[i]>0:\r\n        next_num = series[i+1] - series[i] - series[i+1]\r\n      else:\r\n        next_num = series[i+1] + series[i] - series[i+1]\r\n    else:\r\n      if series[i]>0:\r\n        next_num = series[i+1] + series[i] - series[i+1]\r\n      else:\r\n        next_num = series[i+1] - series[i] - series[i+1]\r\n\r\n    #Check if the number is even or odd\r\n    if next_num%2==0:\r\n      even_odd = \"Even\" \r\n    else:\r\n      even_odd = \"Odd\"\r\n  return (next_num, even_odd)", "task_id": 9090}
{"finetuning_prompt": "\"\"\"\nWrite a python program to merge two sorted arrays without duplicate values.\n\"\"\"\n\ndef mergeSortedArrays(A, B):\n", "finetuning_completion": " \n  res = [] \n  i, j = 0, 0\r\n  while i < len(A) and j < len(B): \n    if A[i] < B[j]: \n        res.append(A[i]) \n        i += 1\n    elif A[i] > B[j]: \n        res.append(B[j]) \n        j += 1\n    else: \n        res.append(A[i]) \n        i += 1\n        j += 1\n  \n  if i < len(A): \n      res.extend(A[i:])\n  if j < len(B): \n      res.extend(B[j:])\n \n  return (res)", "task_id": 9091}
{"finetuning_prompt": "\"\"\"\nWrite a Python program to search a string for given elements and return their indices as a list.\n\"\"\"\n\ndef find_indices(string, elements):\n", "finetuning_completion": " \r\n  \r\n    indices = [] \r\n    for i in elements: \r\n        indices.append([i, string.index(i)]) \r\n    return indices \r\n\r\n# Sample Input \r\nsample_string = \"Hello World\"\r\nelems = ['o', 'W'] \r\n  \r\n# Function call \r\nprint(find_indices(sample_string, elems))", "task_id": 9095}
{"finetuning_prompt": "\"\"\"\nWrite an algorithm for finding the subset sum for a given array A.\n\"\"\"\n\ndef find_subset_sum(A, n, sum):\n", "finetuning_completion": " \r\n  \t# If the sum is 0  \r\n    if (sum == 0): \r\n        return True\r\n  \r\n    # If the sum is not 0 and the set is empty  \r\n    if (n == 0 and sum != 0): \r\n        return False\r\n  \r\n    # If the last element is greater than sum  \r\n    if (A[n - 1] > sum): \r\n        return find_subset_sum(A, n - 1, sum) \r\n  \r\n    # Consider last element and then check the sum  \r\n    return find_subset_sum(A, n - 1, sum) or find_subset_sum(A, n - 1, sum - A[n - 1])", "task_id": 9099}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a n-dimensional identity matrix.\n\"\"\"\n\ndef identity_matrix(n):\n", "finetuning_completion": " \r\n\tif n<=0: \r\n\t\treturn None\r\n\telse: \r\n\t\tdim = (n, n) \r\n\r\n\t\tidentity = [[0 for i in range(n)] for j in range(n)] \r\n\r\n\t\tfor i in range(n): \r\n\t\t\tidentity[i][i] = 1\r\n\t\treturn identity", "task_id": 9100}
{"finetuning_prompt": "\"\"\"\nCan you figure out the algorithm to extract a string between two characters?\n\"\"\"\n\ndef extract_string_between(string1):\n", "finetuning_completion": " \r\n  start = string1.index(\"(\") \r\n  end = string1.index(\")\")\r\n  extracted_string = string1[start+1:end]\r\n  return extracted_string", "task_id": 9104}
{"finetuning_prompt": "\"\"\"\nCan you generate a code to calculate the maximum subarray sum in time complexity of O(n)?\n\"\"\"\n\ndef max_subarray_sum(arr):\n", "finetuning_completion": "\n    n = len(arr)\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, n):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far", "task_id": 9108}
{"finetuning_prompt": "\"\"\"\nWrite a python program to create a board (matrix) with alternating 0s and 1s.\n\"\"\"\n\ndef create_Board(n):\n", "finetuning_completion": " \n    board = [] \n    for i in range(n): \n        row = [] \n        for j in range(n): \n            row.append((i + j) % 2) \n        board.append(row) \n    return board", "task_id": 9116}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the element in a sorted array which is closest to a given target number.\n\"\"\"\n\ndef find_Closest(arr, target):\n", "finetuning_completion": " \r\n  \r\n    n = len(arr) \r\n\r\n    if (target <= arr[0]): \r\n        return arr[0] \r\n    if (target >= arr[n - 1]): \r\n        return arr[n - 1] \r\n\r\n    i = 0 \r\n    j = n \r\n    mid = 0 \r\n    while (i < j): \r\n        mid = (i + j) // 2\r\n        if (arr[mid] == target): \r\n            return arr[mid] \r\n  \r\n        if (target < arr[mid]): \r\n            if (mid > 0 and target > arr[mid - 1]): \r\n                return calculateClosest(arr[mid - 1],arr[mid],target) \r\n                      \r\n            j = mid \r\n              \r\n        else: \r\n            if (mid < n - 1 and target < arr[mid + 1]): \r\n                return calculateClosest(arr[mid],arr[mid + 1],target) \r\n              \r\n            i = mid + 1\r\n  \r\n    return arr[mid] \r\ndef calculateClosest(a, b, target): \r\n    if (target - a >= b - target): \r\n        return b \r\n    else: \r\n        return a", "task_id": 9118}
{"finetuning_prompt": "\"\"\"\nCreate an automated system to determine if an email is spam or not.\n\"\"\"\n\ndef email_check(email):\n", "finetuning_completion": "\r\n  words = email.split(' ')\r\n  spam_words = ['free', 'offer', 'guaranteed', 'promise', 'wealth', 'rich', 'download', 'click']\r\n  is_spam = False\r\n  for word in words:\r\n    if word in spam_words:\r\n      is_spam = True\r\n  return is_spam", "task_id": 9126}
{"finetuning_prompt": "\"\"\"\nCreate a program to group nested dictionaries by key.\n\"\"\"\n\ndef grouping_dicts(d):\n", "finetuning_completion": " \r\n    result = dict() \r\n    for key,value in d.items(): \r\n        if isinstance(value, dict): \r\n            for subkey,val in value.items(): \r\n                result[subkey] = val \n        else: \r\n            result[key] = value \r\n    return result", "task_id": 9128}
{"finetuning_prompt": "\"\"\"\nDesign a code to automatically format a text string in camel case format.\n\"\"\"\n\ndef to_camel_case(txt):\n", "finetuning_completion": "\n  words = txt.split(\"_\")\r\n  cap_words = [word.capitalize() for word in words]\r\n  return \"\".join(cap_words)", "task_id": 9130}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to determine the number of ways an array of size n can be split into two equal subsets.\n\"\"\"\n\ndef countSubsets(arr, n):\n", "finetuning_completion": " \n\tsum = 0\n\tfor i in range(n): \n\t\tsum += arr[i] \n\tif sum % 2 != 0: \n\t\treturn 0 \n\telse: \n\t\treturn countSubsetSum(arr, n, sum // 2) \ndef countSubsetSum(arr, n, sum): \n\tdp = [[0 for i in range(sum+1)] for i in range(n+1)] \n\tfor i in range(n+1): \n\t\tdp[i][0] = 1\n\tfor i in range(1, n+1): \n\t\tfor j in range(1, sum+1): \n\t\t\tif arr[i - 1] <= j: \n\t\t\t\tdp[i][j] = (dp[i-1][j-arr[i-1]] + dp[i-1][j]) \n\t\t\telse: \n\t\t\t\tdp[i][j] = dp[i-1][j] \n\treturn dp[n][sum]", "task_id": 9133}
{"finetuning_prompt": "\"\"\"\nDesign a program to take a matrix as an input, flatten it and display the output.\n\"\"\"\n\ndef flatten_matrix(matrix):\n", "finetuning_completion": "\n    \n    flatten_list = [] \n    for sublist in matrix: \n        for item in sublist: \n            flatten_list.append(item)\n    return flatten_list", "task_id": 9141}
{"finetuning_prompt": "\"\"\"\nModify the code to replace all the characters in the given string with the same character.\n\"\"\"\n\ndef replace_char(string, ch):\n", "finetuning_completion": " \n    return ''.join([ch for letter in string])", "task_id": 9143}
{"finetuning_prompt": "\"\"\"\nWrite a function to rearrange the elements of a given array such that all the even numbers appearing in the array occur in increasing order before all the odd numbers in the array.\n\"\"\"\n\ndef arrange_array(lst):\n", "finetuning_completion": " \n    even_list = [] \n    odd_list = []\n    for num in lst: \n        if num % 2 == 0: \n            even_list.append(num) \n        else:\n            odd_list.append(num) \n    return sorted(even_list) + sorted(odd_list)", "task_id": 9144}
{"finetuning_prompt": "\"\"\"\nCreate a program to find the total number of possible paths from one point to another in a 2D grid.\n\"\"\"\n\ndef paths(x, y):\n", "finetuning_completion": " \r\n  \r\n    if x == 0 and y == 0:     \r\n        return 1\r\n    count = 0\r\n  \r\n    # If x coordinate can be reduced \r\n    if x >= 1: \r\n        count += paths(x-1, y) \r\n          \r\n    # If x coordinate can be reduced \r\n    if y >= 1: \r\n        count += paths(x, y - 1) \r\n  \r\n    return count\n      \r\n# Driver Code \r\nx = 2\r\ny = 2\r\n  \r\nprint(paths(x, y))", "task_id": 9160}
{"finetuning_prompt": "\"\"\"\nGenerate a snipplet of code to sort the given array based on the first element of the sub-arrays.\n\"\"\"\n\ndef sort_On_firstElem(array):\n", "finetuning_completion": " \r\n    array.sort(key = lambda x: x[0]) \r\n    return array", "task_id": 9167}
{"finetuning_prompt": "\"\"\"\nWrite a function to convert the time in 12 hour format.\n\"\"\"\n\ndef TwelveHourFormat(time):\n", "finetuning_completion": " \r\n    # Extracting the hour, minutes, and seconds \r\n    hh, mm, ss = time.split(':') \r\n\r\n    # checking whether the given time is morning or evening \r\n    if hh < '12': \r\n        return time + \" AM\" \r\n    else: \r\n        # Converting into 12 hours format \r\n        hh = str(int(hh) - 12)\r\n        return hh + \":\" + mm + \":\" + ss + \" PM\"", "task_id": 9175}
{"finetuning_prompt": "\"\"\"\nWrite a function to generate a pattern of the following type.\n\"\"\"\n\ndef create_pattern(n):\n", "finetuning_completion": "\r\n    for i in range(0, n): \r\n        for j in range(0, i+1): \r\n            print(\"* \",end=\"\") \r\n        print(\"\\r\") \n    for i in range(n, 0, -1): \r\n        for j in range(0, i-1): \r\n            print(\"* \",end=\"\") \r\n        print(\"\\r\")", "task_id": 9180}
{"finetuning_prompt": "\"\"\"\nDesign a program to print the most frequently occurring element in the given list.\n\"\"\"\n\n# Function to print the most frequently occurring element \ndef most_frequent(list1):\n", "finetuning_completion": " \n  \n    count1 = 0\n    num1 = list1[0] \n      \n    for i in list1: \n        curr_frequency = list1.count(i) \n        if curr_frequency > count1: \n            count1 = curr_frequency \n            num1 = i \n  \n    return num1 \n  \n# Driver code \nif __name__ == \"__main__\": \n    list1 = [2, 6, 8, 10, 6, 8, 4, 6]\n    print(most_frequent(list1))", "task_id": 9200}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm to obtain the sum of all elements present in the given list.\n\"\"\"\n\ndef sum_of_list(list_of_numbers):\n", "finetuning_completion": "\n    total = 0\n    for num in list_of_numbers:\n        total += num\n    return total\n\n# Driver code \nif __name__ == \"__main__\": \n    list_of_numbers = [2, 3, 4, 5, 6, 7]\n    print(sum_of_list(list_of_numbers))", "task_id": 9202}
{"finetuning_prompt": "\"\"\"\nCreate an algorithm that finds the median of three numbers.\n\"\"\"\n\ndef find_median(x, y, z):\n", "finetuning_completion": " \r\n    # Store all the given elements in a list \r\n    elements = [x, y, z] \r\n    # Sort the elements in the list \r\n    elements.sort() \r\n    # The median is the middle element \r\n    return elements[1]", "task_id": 9210}
{"finetuning_prompt": "\"\"\"\nCount the number of sets in a list.\n\"\"\"\n\ndef count_sets(list):\n", "finetuning_completion": " \r\n    count = 0 \r\n    for element in list: \r\n        if type(element) == set: \r\n            count += 1 \r\n \r\n    return count", "task_id": 9227}
{"finetuning_prompt": "\"\"\"\nDesign an algorithm for selecting the maximum of a set of remaining integers after some numbers have been removed.\n\"\"\"\n\ndef select_max(lst):\n", "finetuning_completion": "\n    remaining = list(filter(lambda x: x != 0, lst))\r\n    if len(remaining) > 0:\r\n        max_num = max(remaining)\r\n    else:\r\n        max_num = 0\n    return max_num", "task_id": 9239}
{"finetuning_prompt": "\"\"\"\nDevelop a program to unpack a given list of tuples.\n\"\"\"\n\ndef unpack_tuples(lst):\n", "finetuning_completion": "\n    unpacked_list = []\n    for tup in lst:\n        for e in tup:\n            unpacked_list.append(e)\n    return unpacked_list", "task_id": 9241}
{"finetuning_prompt": "\"\"\"\nConstruct a regular expression to check for valid email addresses\n\"\"\"\n\nimport re\r\ndef check_email(text):\n", "finetuning_completion": " \r\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if(re.search(regex,text)):  \r\n        return True  \r\n    else:  \r\n        return False", "task_id": 9244}
{"finetuning_prompt": "\"\"\"\nWrite a function to implement auto-completion feature with given terms\n\"\"\"\n\ndef auto_completion(before, terms):\n", "finetuning_completion": " \r\n    results = []\r\n    for value in terms: \r\n        if value.startswith(before): \r\n            results.append(value)\r\n    return results", "task_id": 9246}
{"finetuning_prompt": "\"\"\"\nWrite a function to print out a pattern of stars.\n\"\"\"\n\ndef print_pattern(n):\n", "finetuning_completion": " \n    for i in range(0, n): \n        for j in range(0, i+1): \n            print(\"* \",end=\"\")\n        print()", "task_id": 9249}
{"finetuning_prompt": "\"\"\"\nAsk the assistant to write a python program to delete an item of given key from the dictionary.\n\"\"\"\n\ndef deleteItemFromDictionary(dict, key):\n", "finetuning_completion": " \r\n    if key in dict:  \r\n        del dict[key]  \r\n    return dict", "task_id": 9263}
{"finetuning_prompt": "\"\"\"\nCreate a program that can remove all non-alphanumeric characters and output all words that are longer than 4 characters.\n\"\"\"\n\ndef remove_special_characters(string):\n", "finetuning_completion": "\r\n  words = string.split()\r\n  clean_words = []\r\n\r\n  for word in words:\r\n    new_word = ''.join(e for e in word if e.isalnum())\r\n    if len(new_word) > 4:\r\n      clean_words.append(new_word)\r\n  return clean_words", "task_id": 9267}
